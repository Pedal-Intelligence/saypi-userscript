// ==UserScript==
// @name         Say, Pi
// @namespace    http://www.saypi.ai/
// @version      1.3.8
// @description  Speak to Pi with OpenAI's Whisper
// @author       Ross Cadogan
// @match        https://pi.ai/talk
// @inject-into  page
// @updateURL    https://app.saypi.ai/saypi.user.js
// @downloadURL  https://app.saypi.ai/saypi.user.js
// @license      MIT
// ==/UserScript==

/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/AnimationModule.js":
/*!********************************!*\
  !*** ./src/AnimationModule.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AnimationModule)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var AnimationModule = /*#__PURE__*/function () {
  function AnimationModule() {
    _classCallCheck(this, AnimationModule);
  }
  _createClass(AnimationModule, null, [{
    key: "startAnimation",
    value: function startAnimation(animation) {
      this.stopOtherAnimations(animation);
      var rectangles = document.querySelectorAll(this.rectanglesSelector);
      rectangles.forEach(function (rect) {
        return rect.classList.add(animation);
      });
    }
  }, {
    key: "stopAnimation",
    value: function stopAnimation(animation) {
      var rectangles = document.querySelectorAll(this.rectanglesSelector);
      rectangles.forEach(function (rect) {
        return rect.classList.remove(animation);
      });
    }
  }, {
    key: "stopAllAnimations",
    value: function stopAllAnimations() {
      var _this = this;
      this.talkButtonAnimations.forEach(function (animation) {
        return _this.stopAnimation(animation);
      });
    }
  }, {
    key: "stopOtherAnimations",
    value: function stopOtherAnimations(keepAnimation) {
      var _this2 = this;
      this.talkButtonAnimations.forEach(function (animation) {
        if (animation !== keepAnimation) {
          _this2.stopAnimation(animation);
        }
      });
    }
  }]);
  return AnimationModule;
}();
_defineProperty(AnimationModule, "rectanglesSelector", ".outermost, .second, .third, .fourth, .fifth, .innermost");
_defineProperty(AnimationModule, "talkButtonAnimations", ["loading", "piSpeaking", "userSpeaking", "transcribing", "paused"]);


/***/ }),

/***/ "./src/ButtonModule.js":
/*!*****************************!*\
  !*** ./src/ButtonModule.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buttonModule: () => (/* binding */ buttonModule),
/* harmony export */   "default": () => (/* binding */ ButtonModule)
/* harmony export */ });
/* harmony import */ var _UserAgentModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UserAgentModule */ "./src/UserAgentModule.js");
/* harmony import */ var _EventBus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventBus */ "./src/EventBus.js");
/* harmony import */ var _StateMachineService_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StateMachineService.js */ "./src/StateMachineService.js");
/* harmony import */ var _icons_exit_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./icons/exit.svg */ "./src/icons/exit.svg");
/* harmony import */ var _icons_maximize_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./icons/maximize.svg */ "./src/icons/maximize.svg");
/* harmony import */ var _icons_rectangles_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./icons/rectangles.svg */ "./src/icons/rectangles.svg");
/* harmony import */ var _icons_waveform_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./icons/waveform.svg */ "./src/icons/waveform.svg");
/* harmony import */ var _icons_muted_microphone_svg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./icons/muted_microphone.svg */ "./src/icons/muted_microphone.svg");
/* harmony import */ var _icons_play_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./icons/play.svg */ "./src/icons/play.svg");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }









var ButtonModule = /*#__PURE__*/function () {
  function ButtonModule() {
    _classCallCheck(this, ButtonModule);
    this.playButton = null;
    this.actor = _StateMachineService_js__WEBPACK_IMPORTED_MODULE_2__["default"].actor;
    // Binding methods to the current instance
    this.handlePlayButtonClick = this.handlePlayButtonClick.bind(this);
    this.registerOtherEvents();
  }
  _createClass(ButtonModule, [{
    key: "registerOtherEvents",
    value: function registerOtherEvents() {
      _EventBus__WEBPACK_IMPORTED_MODULE_1__["default"].on("saypi:autoSubmit", ButtonModule.handleAutoSubmit);
    }

    // Function to create a new button
  }, {
    key: "createButton",
    value: function createButton(label, callback) {
      var button = document.createElement("button");
      button.textContent = label;
      button.onclick = callback;
      return button;
    }

    // Function to style a given button
  }, {
    key: "styleButton",
    value: function styleButton(button, styles) {
      for (var key in styles) {
        if (styles.hasOwnProperty(key)) {
          button.style[key] = styles[key];
        }
      }
    }
  }, {
    key: "addTalkIcon",
    value: function addTalkIcon(button) {
      var _this = this;
      this.updateIconContent(button);
      window.matchMedia("(max-width: 768px)").addListener(function () {
        _this.updateIconContent(button);
      });
      this.setupClassObserver(button);
    }
  }, {
    key: "updateIconContent",
    value: function updateIconContent(iconContainer) {
      if ((0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_0__.isMobileView)()) {
        iconContainer.innerHTML = _icons_rectangles_svg__WEBPACK_IMPORTED_MODULE_5__["default"];
      } else {
        iconContainer.innerHTML = _icons_waveform_svg__WEBPACK_IMPORTED_MODULE_6__["default"];
      }
    }
  }, {
    key: "setupClassObserver",
    value: function setupClassObserver(button) {
      var _this2 = this;
      var targetNode = document.documentElement; // The <html> element

      var config = {
        attributes: true,
        attributeFilter: ["class"]
      };
      var callback = function callback(mutationsList, observer) {
        var _iterator = _createForOfIteratorHelper(mutationsList),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var mutation = _step.value;
            if (mutation.type === "attributes") {
              if (mutation.attributeName === "class") {
                if (document.documentElement.classList.contains("mobile-view")) {
                  // 'mobile-view' class was added
                  _this2.updateIconContent(button);
                } else {
                  // 'mobile-view' class was removed
                  _this2.updateIconContent(button);
                }
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      };
      var observer = new MutationObserver(callback);

      // Start observing the target node for configured mutations
      observer.observe(targetNode, config);

      // Later, you can stop observing by calling:
      // observer.disconnect();
    }

    // Simulate an "Enter" keypress event on a form
  }, {
    key: "createExitButton",
    value: function createExitButton() {
      var label = "Exit Voice-Controlled Mobile Mode";
      var button = this.createButton("", function () {
        (0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_0__.exitMobileMode)();
      });
      button.id = "saypi-exitButton";
      button.type = "button";
      button.className = "exit-button fixed rounded-full bg-cream-550 enabled:hover:bg-cream-650";
      button.setAttribute("aria-label", label);
      button.setAttribute("title", label);
      button.innerHTML = _icons_exit_svg__WEBPACK_IMPORTED_MODULE_3__["default"];
      document.body.appendChild(button);
      return button;
    }
  }, {
    key: "createEnterButton",
    value: function createEnterButton() {
      var label = "Enter Voice-Controlled Mobile Mode";
      var button = this.createButton("", function () {
        (0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_0__.enterMobileMode)();
      });
      button.id = "saypi-enterButton";
      button.type = "button";
      button.className = "enter-button fixed rounded-full bg-cream-550 enabled:hover:bg-cream-650";
      button.setAttribute("aria-label", label);
      button.setAttribute("title", label);
      button.innerHTML = _icons_maximize_svg__WEBPACK_IMPORTED_MODULE_4__["default"];
      document.body.appendChild(button);
      return button;
    }
  }, {
    key: "createPlayButton",
    value: function createPlayButton() {
      var label = "Hear Pi's response";
      this.playButton = this.createButton("", function () {});
      this.playButton.id = "saypi-playButton";
      this.playButton.type = "button";
      this.playButton.className = "hidden play-button";
      this.playButton.setAttribute("aria-label", label);
      this.playButton.setAttribute("title", label);
      this.playButton.addEventListener("click", this.handlePlayButtonClick);
      this.playButton.innerHTML = _icons_play_svg__WEBPACK_IMPORTED_MODULE_8__["default"];
      document.body.appendChild(this.playButton);
      console.log("Play button created, and added to the DOM.");
      return this.playButton;
    }
  }, {
    key: "showPlayButton",
    value: function showPlayButton() {
      if (!this.playButton) {
        this.createPlayButton();
      }
      this.playButton.classList.remove("hidden");
    }
  }, {
    key: "hidePlayButton",
    value: function hidePlayButton() {
      if (this.playButton) {
        this.playButton.classList.add("hidden");
      }
    }
  }, {
    key: "handlePlayButtonClick",
    value: function handlePlayButtonClick() {
      this.actor.send("saypi:unblock");
      _EventBus__WEBPACK_IMPORTED_MODULE_1__["default"].emit("audio:reload");
    }
  }, {
    key: "showNotification",
    value: function showNotification(details) {
      var icon = details.icon;
      var iconSVG;
      if (icon === "muted-microphone") {
        iconSVG = _icons_muted_microphone_svg__WEBPACK_IMPORTED_MODULE_7__["default"];
      }
      var notification = document.getElementById("saypi-notification");
      if (notification) {
        notification.classList.remove("hidden");
        notification.innerHTML = iconSVG;
      } else {
        var _notification = document.createElement("div");
        _notification.id = "saypi-notification";
        _notification.className = "notification";
        _notification.innerHTML = iconSVG;
        document.body.appendChild(_notification);
      }
    }
  }, {
    key: "dismissNotification",
    value: function dismissNotification() {
      var notification = document.getElementById("saypi-notification");
      if (notification) {
        notification.classList.add("hidden");
      }
    }
  }], [{
    key: "simulateFormSubmit",
    value: function simulateFormSubmit() {
      var submitButton = document.getElementById("saypi-submitButton");
      if (submitButton) {
        submitButton.click();
      } else {
        /* hit enter key in the prompt textarea, might not work as expected on "new ui layout" */
        var textarea = document.getElementById("saypi-prompt");
        var enterEvent = new KeyboardEvent("keydown", {
          bubbles: true,
          key: "Enter",
          keyCode: 13,
          which: 13
        });
        textarea.dispatchEvent(enterEvent);
      }
    }

    // Function to handle auto-submit based on the button's data attribute
  }, {
    key: "handleAutoSubmit",
    value: function handleAutoSubmit() {
      var talkButton = document.getElementById("saypi-talkButton");
      if (talkButton.dataset.autosubmit === "false") {
        console.log("Autosubmit is disabled");
      } else {
        ButtonModule.simulateFormSubmit();
      }
    }
  }]);
  return ButtonModule;
}(); // Singleton

var buttonModule = new ButtonModule();

/***/ }),

/***/ "./src/EventBus.js":
/*!*************************!*\
  !*** ./src/EventBus.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new (events__WEBPACK_IMPORTED_MODULE_0___default())());

/***/ }),

/***/ "./src/EventModule.js":
/*!****************************!*\
  !*** ./src/EventModule.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EventModule)
/* harmony export */ });
/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventBus.js */ "./src/EventBus.js");
/* harmony import */ var _StateMachineService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StateMachineService.js */ "./src/StateMachineService.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var USER_SPEAKING = "saypi:userSpeaking";
var USER_STOPPED_SPEAKING = "saypi:userStoppedSpeaking";
var USER_FINISHED_SPEAKING = "saypi:userFinishedSpeaking";
var TRANSCRIBING = "saypi:transcribing";
var PI_SPEAKING = "saypi:piSpeaking";
var PI_STOPPED_SPEAKING = "saypi:piStoppedSpeaking";
var PI_FINISHED_SPEAKING = "saypi:piFinishedSpeaking";
var PAUSE = "saypi:safariBlocked";
var READY = "saypi:ready";
var PLAY = "saypi:play";
var EventModule = /*#__PURE__*/function () {
  function EventModule() {
    _classCallCheck(this, EventModule);
  }
  _createClass(EventModule, null, [{
    key: "init",
    value: function init() {
      // All the event listeners can be added here
      this.registerStateMachineEvents(_StateMachineService_js__WEBPACK_IMPORTED_MODULE_1__["default"].actor);
      // Any other initializations...
    }
  }, {
    key: "cleanup",
    value: function cleanup() {
      // Remove event listeners if needed, or any other cleanup operations
      window.removeEventListener("saypi:transcribed", this.handleTranscriptionResponse);
    }
  }, {
    key: "simulateTyping",
    value: function simulateTyping(element, text) {
      var words = text.split(" ");
      var i = 0;
      var typeWord = function typeWord() {
        if (i < words.length) {
          EventModule.setNativeValue(element, element.value + words[i++] + " ");
          requestAnimationFrame(typeWord);
        } else {
          _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("saypi:autoSubmit");
        }
      };
      typeWord();
    }
  }, {
    key: "setNativeValue",
    value: function setNativeValue(element, value) {
      var lastValue = element.value;
      element.value = value;
      var event = new Event("input", {
        target: element,
        bubbles: true
      });
      // React 15
      event.simulated = true;
      // React 16-17
      var tracker = element._valueTracker;
      if (tracker) {
        tracker.setValue(lastValue);
      }
      element.dispatchEvent(event);
    }
  }, {
    key: "handleTalkMouseDown",
    value: function handleTalkMouseDown() {
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:startRecording");
    }
  }, {
    key: "handleTalkMouseUp",
    value: function handleTalkMouseUp() {
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:stopRecording");
    }
  }, {
    key: "handleTalkDoubleClick",
    value: function handleTalkDoubleClick(button) {
      // Toggle the CSS classes to indicate the mode
      button.classList.toggle("autoSubmit");
      if (button.getAttribute("data-autosubmit") === "true") {
        button.setAttribute("data-autosubmit", "false");
        console.log("autosubmit disabled");
      } else {
        button.setAttribute("data-autosubmit", "true");
        console.log("autosubmit enabled");
      }
    }
  }, {
    key: "handleTalkTouchStart",
    value: function handleTalkTouchStart(button, e) {
      e.preventDefault();
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:startRecording");
    }
  }, {
    key: "handleTalkTouchEnd",
    value: function handleTalkTouchEnd(button) {
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:stopRecording");
    }
  }, {
    key: "registerOtherAudioButtonEvents",
    value: function registerOtherAudioButtonEvents(button) {
      // "warm up" the microphone by acquiring it before the user presses the button
      button.addEventListener("mouseenter", function () {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:setupRecording");
      });
      button.addEventListener("mouseleave", function () {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:tearDownRecording");
      });
      window.addEventListener("beforeunload", function () {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:tearDownRecording");
      });
      button.addEventListener("touchcancel", function () {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:tearDownRecording");
      });
    }
  }, {
    key: "registerStateMachineEvents",
    value: function registerStateMachineEvents(actor) {
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].on(USER_SPEAKING, function () {
        actor.send(USER_SPEAKING);
      });
      [USER_STOPPED_SPEAKING, USER_FINISHED_SPEAKING].forEach(function (eventName) {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].on(eventName, function (detail) {
          if (detail) {
            actor.send(_objectSpread({
              type: eventName
            }, detail));
          } else {
            console.warn("Received ".concat(eventName, " without details."));
          }
        });
      });
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].on(TRANSCRIBING, function () {
        actor.send(TRANSCRIBING);
      });
      [PI_SPEAKING, PI_STOPPED_SPEAKING, PI_FINISHED_SPEAKING].forEach(function (eventName) {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].on(eventName, function () {
          actor.send(eventName);
        });
      });
      [PAUSE, READY, PLAY].forEach(function (eventName) {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].on(eventName, function () {
          actor.send(eventName);
        });
      });
    }

    /* events to direct the audio module to start/stop recording */
  }, {
    key: "registerHotkey",
    value: function registerHotkey() {
      var ctrlDown = false;
      document.addEventListener("keydown", function (event) {
        if (event.ctrlKey && event.code === "Space" && !ctrlDown) {
          ctrlDown = true;
          _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:startRecording");
        }
      });
      document.addEventListener("keyup", function (event) {
        if (ctrlDown && event.code === "Space") {
          ctrlDown = false;
          _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:stopRecording");
        }
      });
    }
  }]);
  return EventModule;
}();


/***/ }),

/***/ "./src/LoggingModule.js":
/*!******************************!*\
  !*** ./src/LoggingModule.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   serializeStateValue: () => (/* binding */ serializeStateValue)
/* harmony export */ });
function serializeStateValue(stateValue) {
  if (typeof stateValue === "string") {
    return stateValue;
  }
  return Object.keys(stateValue).map(function (key) {
    return "".concat(key, ":").concat(serializeStateValue(stateValue[key]));
  }).join(",");
}

/***/ }),

/***/ "./src/StateMachineService.js":
/*!************************************!*\
  !*** ./src/StateMachineService.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xstate */ "./node_modules/xstate/es/interpreter.js");
/* harmony import */ var _state_machines_SayPiMachine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state-machines/SayPiMachine */ "./src/state-machines/SayPiMachine.js");
/* harmony import */ var _LoggingModule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LoggingModule */ "./src/LoggingModule.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




/**
 * A singleton service that manages the state machine.
 */
var StateMachineService = /*#__PURE__*/_createClass(function StateMachineService() {
  _classCallCheck(this, StateMachineService);
  this.actor = (0,xstate__WEBPACK_IMPORTED_MODULE_2__.interpret)(_state_machines_SayPiMachine__WEBPACK_IMPORTED_MODULE_0__.machine).onTransition(function (state) {
    if (state.changed) {
      var fromState = state.history ? (0,_LoggingModule__WEBPACK_IMPORTED_MODULE_1__.serializeStateValue)(state.history.value) : "N/A";
      var toState = (0,_LoggingModule__WEBPACK_IMPORTED_MODULE_1__.serializeStateValue)(state.value);
      console.log("Say, Pi Machine transitioned from ".concat(fromState, " to ").concat(toState, " with ").concat(state.event.type));
    }
  });
  this.actor.start();
}); // Singleton
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new StateMachineService());

/***/ }),

/***/ "./src/TranscriptionModule.js":
/*!************************************!*\
  !*** ./src/TranscriptionModule.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   handleTranscriptionResponse: () => (/* binding */ handleTranscriptionResponse),
/* harmony export */   uploadAudio: () => (/* binding */ uploadAudio)
/* harmony export */ });
/* harmony import */ var _StateMachineService_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StateMachineService.js */ "./src/StateMachineService.js");
/* harmony import */ var _UserAgentModule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UserAgentModule.js */ "./src/UserAgentModule.js");
/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EventBus.js */ "./src/EventBus.js");
/* harmony import */ var _EventModule_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EventModule.js */ "./src/EventModule.js");




var config = {
  appServerUrl: "https://app.saypi.ai",
  apiServerUrl: "https://api.saypi.ai"
};
function uploadAudio(audioBlob, audioDurationMillis) {
  // Create a FormData object
  var formData = new FormData();
  var audioFilename = "audio.webm";
  if (audioBlob.type === "audio/mp4") {
    audioFilename = "audio.mp4";
  }
  // Add the audio blob to the FormData object
  formData.append("audio", audioBlob, audioFilename);
  // Get the user's preferred language
  var language = navigator.language;
  var startTime = new Date().getTime();
  // Post the audio to the server for transcription
  fetch(config.apiServerUrl + "/transcribe?language=" + language, {
    method: "POST",
    body: formData
  }).then(function (response) {
    if (!response.ok) {
      throw Error(response.statusText);
    }
    return response.json();
  }).then(function (responseJson) {
    var endTime = new Date().getTime();
    var transcriptionDurationMillis = endTime - startTime;
    console.log("Transcribed " + Math.round(audioDurationMillis / 1000) + "s of audio in " + Math.round(transcriptionDurationMillis / 1000) + "s");
    if (responseJson.text.length === 0) {
      _StateMachineService_js__WEBPACK_IMPORTED_MODULE_0__["default"].actor.send("saypi:transcribedEmpty");
    } else {
      _StateMachineService_js__WEBPACK_IMPORTED_MODULE_0__["default"].actor.send("saypi:transcribed", {
        text: responseJson.text
      });
    }
  })["catch"](function (error) {
    console.error("Looks like there was a problem: ", error);
    _StateMachineService_js__WEBPACK_IMPORTED_MODULE_0__["default"].actor.send("saypi:transcribeFailed");
  });
}
function handleTranscriptionResponse(transcript) {
  console.log("Transcript: " + transcript);
  var textarea = document.getElementById("saypi-prompt");
  if ((0,_UserAgentModule_js__WEBPACK_IMPORTED_MODULE_1__.isMobileView)()) {
    // if transcript is > 1000 characters, truncate it to 999 characters plus an ellipsis
    if (transcript.length > 1000) {
      transcript = transcript.substring(0, 999) + "…";
      console.warn("Transcript was too long for Pi. Truncated to 999 characters, losing the following text: ... " + transcript.substring(999));
    }
    _EventModule_js__WEBPACK_IMPORTED_MODULE_3__["default"].setNativeValue(textarea, transcript);
    _EventBus_js__WEBPACK_IMPORTED_MODULE_2__["default"].emit("saypi:autoSubmit");
  } else {
    _EventModule_js__WEBPACK_IMPORTED_MODULE_3__["default"].simulateTyping(textarea, transcript + " ");
  }
}

/***/ }),

/***/ "./src/UserAgentModule.js":
/*!********************************!*\
  !*** ./src/UserAgentModule.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addDeviceFlags: () => (/* binding */ addDeviceFlags),
/* harmony export */   addUserAgentFlags: () => (/* binding */ addUserAgentFlags),
/* harmony export */   addViewFlags: () => (/* binding */ addViewFlags),
/* harmony export */   enterMobileMode: () => (/* binding */ enterMobileMode),
/* harmony export */   exitMobileMode: () => (/* binding */ exitMobileMode),
/* harmony export */   isMobileDevice: () => (/* binding */ isMobileDevice),
/* harmony export */   isMobileView: () => (/* binding */ isMobileView),
/* harmony export */   isSafari: () => (/* binding */ isSafari)
/* harmony export */ });
function isSafari() {
  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
}
function isMobileDevice() {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.matchMedia("(max-width: 768px)").matches;
}

// this function determines whether to show the mobile view or not
function isMobileView() {
  var userViewPreference = null;
  try {
    userViewPreference = localStorage.getItem("userViewPreference");
  } catch (e) {
    console.warn("Could not access localStorage: ", e);
  }
  var prefersMobile = false;
  if (userViewPreference) {
    prefersMobile = userViewPreference === "mobile";
  }

  // Make sure isMobileDevice is defined or imported
  return isMobileDevice() && prefersMobile;
}
function exitMobileMode() {
  localStorage.setItem("userViewPreference", "desktop"); // Save preference

  var element = document.documentElement;
  element.classList.remove("mobile-view");
  element.classList.add("desktop-view");
}
function enterMobileMode() {
  localStorage.setItem("userViewPreference", "mobile"); // Save preference

  var element = document.documentElement;
  element.classList.remove("desktop-view");
  element.classList.add("mobile-view");
}
function addUserAgentFlags() {
  var isFirefoxAndroid = /Firefox/.test(navigator.userAgent) && /Android/.test(navigator.userAgent);
  var element = document.documentElement;
  if (isFirefoxAndroid) {
    element.classList.add("firefox-android");
  }
  addDeviceFlags(element);
  addViewFlags(element);
}
function addDeviceFlags(element) {
  if (isMobileDevice()) {
    element.classList.add("mobile-device");
  }
}
function addViewFlags(element) {
  if (isMobileView()) {
    element.classList.remove("desktop-view");
    element.classList.add("mobile-view");
  } else {
    element.classList.remove("mobile-view");
    element.classList.add("desktop-view");
  }
}

/***/ }),

/***/ "./src/state-machines/SayPiMachine.js":
/*!********************************************!*\
  !*** ./src/state-machines/SayPiMachine.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   machine: () => (/* binding */ machine)
/* harmony export */ });
/* harmony import */ var _ButtonModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ButtonModule */ "./src/ButtonModule.js");
/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! xstate */ "./node_modules/xstate/es/Machine.js");
/* harmony import */ var _AnimationModule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../AnimationModule */ "./src/AnimationModule.js");
/* harmony import */ var _UserAgentModule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../UserAgentModule */ "./src/UserAgentModule.js");
/* harmony import */ var _TranscriptionModule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../TranscriptionModule */ "./src/TranscriptionModule.js");
/* harmony import */ var _EventBus__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../EventBus */ "./src/EventBus.js");






var machine = (0,xstate__WEBPACK_IMPORTED_MODULE_5__.createMachine)({
  /** @xstate-layout N4IgpgJg5mDOIC5SwIYE8AKBLAdFiANmAMSpoAOWCArrGAE4DK5YKA1lgHZQDaADAF1EocgHtYWAC5ZRnYSAAeiAMwB2PjmUBOPgDYAjLq379y3QBoQaRPr5atOXaq26ALKoBMy-QA5TAX39LMmw8QhIySgRUADMUeiwAIQJRAGM2SH4hJBAxCWlZeSUEPktrEsDg9FD8IlJ0KMpmVg5uLPk8qRk5HOK1DW09Q2NTCytEVx8PHHddAFZVI2UF3V0+OcqQENxaBmb2Lih6iipd+gAxLixYAAtIfdbeQQ7xLsLexA97Vxw5vlVVMt1Ho5soyohQbpfh55otlJMtHMPJttjgzg9DscoujJKJyCwIBi2s8cp0Cj1QMUPHwfA4pnwzMo7LS5j4weMEB5XBotIs5qy-qtVr4UdUdnQmCwDtwsVRJPQUJxYKkEgAjQ7tUmvclFT7fX7-QELPgg9nlVzzHB8GFIrQ+BkA-mizC4VUpdKQWU0ThutJsTUibXdXUIWw6TSuNSqOa6NnU7zghAAn7qbzWjyqVweJGuZ2hX0eiBe+isCBoAO5IPvSmIVY82OLGF6GnKHyJtbKHAeG0xr4+TwefR53BNKWPL1NXH4+5jjUkwP5YMfUNZqGuLTdi3Z5ZzFyJ3k+HAblxOHyxnwLIdBLZinCjlqYyKnCVEp7ZBdvCmKT40unx3RMnaiJsom66HhmsJfMmMLKMOd5YK+E5YJcnDXHchKzsS76Vou1bfiuMK-N4yjeFo3JAloiZmPoOCePMCwAnoPiTBs16ovKirKmqj4NHKCpKiqWCqpk844Z+IaAYe+i9joJHdoiiZ+AaJr-HwvhsvoGZwRxAncTKT4IDpXFCWA5woFgRAQBWZJLqA5rWrRfILD4F5zK4u6WH0zGHmoYFfJGqwxtp-HGeq+m8YZIWCcJEAAKIALbkJI5aiTZeHFKUHJ8HBKQoBAPEnAg97Sm+Ly4V+xT6KuMwblyujbvye4cs4qiOM4bgxv8+g6D4cEMPQoj0LAxAKLAkgoJIYA4CgMSTfQAAUtgqQAlMcoT9YNsDWVWFWIJl5TZWxt4bUNI1jRNU0zXNi0qXwq2oidW36NhaW7SUiaHdenCiBAcDyNsZXicuAC0kyJsD-a-HBtRgIDOrLlmiaaXMmhzNJvbdn43W5kdLpoi+mFQHDtn4dmDl-IxUysoMqigaYXZ8lm3asussG4-m7oZBAxPpRCdoRr5g7uBesaJoCUL6O1UzeBmTKsVUePFY8PNvYYzG0X8NJ0Qs66gRa0KQaY1J+MFnHRYcKsSVmKOaX5ZFmPMYz2dMAL0aoLn8u5Wg5aIeUW1q5UhsjPl2gi7iZvCYvuUeXxuLMvjufLN5449lsIx4imuD8ksuNLmmAusfX0ANQ04EZ0WmeZllpzWCA6Puiw4DnsZePnctFyXsA4PFWCpLFxeDTX+H1xyJgLG1LjSfYbimGzgRAA */
  id: "sayPi",
  initial: "idle",
  states: {
    idle: {
      description: "Initial state.\nGentle pulsing animation.",
      entry: ["stopAllAnimations", "acquireMicrophone"],
      on: {
        "saypi:userSpeaking": {
          target: "userSpeaking"
        },
        "saypi:safariBlocked": {
          target: "blocked",
          cond: "isSafari"
        },
        "saypi:piSpeaking": {
          target: "piSpeaking"
        }
      }
    },
    userSpeaking: {
      description: "User is speaking and being recorded by the microphone.\nWaveform animation.",
      entry: [{
        type: "startAnimation",
        params: {
          animation: "userSpeaking"
        }
      }, "activateTalkButton"],
      exit: [{
        type: "stopAnimation",
        params: {
          animation: "userSpeaking"
        }
      }, "deactivateTalkButton"],
      on: {
        "saypi:userFinishedSpeaking": {
          target: "transcribing",
          cond: "longEnoughForUpload"
        },
        "saypi:userStoppedSpeaking": {
          target: "idle",
          cond: "tooShortForUpload"
        },
        "saypi:transcribing": {
          target: "transcribing"
        }
      }
    },
    blocked: {
      description: "Blocking action on Safari.\nUser must press play to hear Pi's response.\nBounce animation.",
      entry: [{
        type: "startAnimation",
        params: {
          animation: "paused"
        }
      }, "showPlayButton"],
      exit: [{
        type: "stopAnimation",
        params: {
          animation: "paused"
        }
      }, "hidePlayButton"],
      on: {
        "saypi:ready": {
          target: "blocked",
          internal: true,
          description: "Enough audio has been buffered to start playback.",
          actions: "showPlayButton"
        },
        "saypi:unblock": {
          target: "loading"
        }
      }
    },
    piSpeaking: {
      description: "Pi's synthesised speech audio is playing.\nPlayful animation.",
      entry: {
        type: "startAnimation",
        params: {
          animation: "piSpeaking"
        }
      },
      exit: {
        type: "stopAnimation",
        params: {
          animation: "piSpeaking"
        }
      },
      on: {
        "saypi:piStoppedSpeaking": {
          target: "idle"
        },
        "saypi:userSpeaking": {
          target: "userSpeaking"
        },
        "saypi:piFinishedSpeaking": {
          target: "idle"
        }
      }
    },
    transcribing: {
      description: "Transcribing audio to text.\nCard flip animation.",
      entry: [{
        type: "startAnimation",
        params: {
          animation: "transcribing"
        }
      }, {
        type: "transcribeAudio",
        params: {}
      }],
      exit: {
        type: "stopAnimation",
        params: {
          animation: "transcribing"
        }
      },
      on: {
        "saypi:transcribed": {
          target: "idle",
          actions: {
            type: "handleTranscriptionResponse",
            params: {}
          },
          description: "Successfully transcribed user audio to text."
        },
        "saypi:transcribeFailed": {
          target: "#sayPi.errors.transcribeFailed",
          description: "Received an error response from the /transcribe API"
        },
        "saypi:transcribedEmpty": {
          target: "#sayPi.errors.micError",
          description: "Received an empty response from the /transcribe API (no speech detected)"
        }
      }
    },
    loading: {
      description: "Pi's audio is loading.",
      entry: {
        type: "startAnimation",
        params: {
          animation: "loading"
        }
      },
      exit: {
        type: "stopAnimation",
        params: {
          animation: "loading"
        }
      },
      on: {
        "saypi:piSpeaking": {
          target: "piSpeaking"
        }
      }
    },
    errors: {
      description: "Error parent state.",
      after: {
        10000: [{
          target: "#sayPi.idle",
          actions: [],
          description: "Reset to the idle state and clear errors."
        }, {
          internal: false
        }]
      },
      initial: "transcribeFailed",
      states: {
        transcribeFailed: {
          description: "The /transcribe API responded with an error.",
          type: "final",
          entry: {
            type: "startAnimation",
            params: {
              animation: "error"
            }
          },
          exit: {
            type: "stopAnimation",
            params: {
              animation: "error"
            }
          }
        },
        micError: {
          type: "final",
          description: "No audio input detected",
          entry: {
            type: "showNotification",
            params: {
              icon: "muted-microphone"
            }
          },
          exit: {
            type: "dismissNotification",
            params: {}
          }
        }
      }
    }
  },
  predictableActionArguments: true,
  preserveActionOrder: true
}, {
  actions: {
    stopAllAnimations: function stopAllAnimations(context, event) {
      _AnimationModule__WEBPACK_IMPORTED_MODULE_1__["default"].stopAllAnimations();
    },
    startAnimation: function startAnimation(context, event, _ref) {
      var action = _ref.action;
      _AnimationModule__WEBPACK_IMPORTED_MODULE_1__["default"].startAnimation(action.params.animation);
    },
    stopAnimation: function stopAnimation(context, event, _ref2) {
      var action = _ref2.action;
      _AnimationModule__WEBPACK_IMPORTED_MODULE_1__["default"].stopAnimation(action.params.animation);
    },
    transcribeAudio: function transcribeAudio(context, event) {
      console.log("transcribeAudio", event);
      var audioBlob = event.blob;
      (0,_TranscriptionModule__WEBPACK_IMPORTED_MODULE_3__.uploadAudio)(audioBlob, event.duration);
    },
    handleTranscriptionResponse: function handleTranscriptionResponse(context, event) {
      console.log("handleTranscriptionResponse", event);
      var transcription = event.text;
      (0,_TranscriptionModule__WEBPACK_IMPORTED_MODULE_3__.handleTranscriptionResponse)(transcription);
    },
    showPlayButton: function showPlayButton(context, event) {
      _ButtonModule__WEBPACK_IMPORTED_MODULE_0__.buttonModule.showPlayButton();
    },
    hidePlayButton: function hidePlayButton(context, event) {
      _ButtonModule__WEBPACK_IMPORTED_MODULE_0__.buttonModule.hidePlayButton();
    },
    activateTalkButton: function activateTalkButton(context, event) {
      var talkButton = document.getElementById("saypi-talkButton");
      talkButton.classList.add("active"); // Add the active class (for Firefox on Android)
    },

    deactivateTalkButton: function deactivateTalkButton(context, event) {
      var talkButton = document.getElementById("saypi-talkButton");
      talkButton.classList.remove("active"); // Remove the active class (for Firefox on Android)
    },

    acquireMicrophone: function acquireMicrophone(context, event) {
      // warmup the microphone on idle in mobile view,
      // since there's no mouseover event to trigger it
      if ((0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_2__.isMobileView)()) {
        _EventBus__WEBPACK_IMPORTED_MODULE_4__["default"].emit("audio:setupRecording");
      }
    },
    showNotification: function showNotification(context, event, _ref3) {
      var action = _ref3.action;
      var icon = action.params.icon;
      var message = action.params.message;
      _ButtonModule__WEBPACK_IMPORTED_MODULE_0__.buttonModule.showNotification({
        icon: icon,
        message: message
      });
    },
    dismissNotification: function dismissNotification(context, event) {
      _ButtonModule__WEBPACK_IMPORTED_MODULE_0__.buttonModule.dismissNotification();
    }
  },
  services: {},
  guards: {
    tooShortForUpload: function tooShortForUpload(context, event) {
      return event.duration < 1000;
    },
    longEnoughForUpload: function longEnoughForUpload(context, event) {
      return event.duration >= 1000;
    },
    isSafari: function isSafari(context, event) {
      return (0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_2__.isSafari)();
    }
  },
  delays: {}
});

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/rectangles.css":
/*!*************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/rectangles.css ***!
  \*************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `@keyframes pulse_outermost {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.92);
  }
}
.outermost {
  animation: pulse_outermost 5s infinite;
  transform-origin: center;
}

@keyframes pulse_second {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.856);
  }
}
.second {
  animation: pulse_second 5s infinite;
  transform-origin: center;
}

@keyframes pulse_third {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.792);
  }
}
.third {
  animation: pulse_third 5s infinite;
  transform-origin: center;
}

@keyframes pulse_fourth {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.728);
  }
}
.fourth {
  animation: pulse_fourth 5s infinite;
  transform-origin: center;
}

@keyframes pulse_fifth {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.664);
  }
}
.fifth {
  animation: pulse_fifth 5s infinite;
  transform-origin: center;
}

@keyframes pulse_innermost {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.6);
  }
}
.innermost {
  animation: pulse_innermost 5s infinite;
  transform-origin: center;
}

/* bounce animation to indicate Pi is paused awaiting permission to speak */
@keyframes bounce_outermost {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-5%);
  }
  60% {
    transform: translateY(-3%);
  }
}
.outermost.paused {
  animation-name: bounce_outermost;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

@keyframes bounce_second {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-5.8%);
  }
  60% {
    transform: translateY(-3.48%);
  }
}
.second.paused {
  animation-name: bounce_second;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

@keyframes bounce_third {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-6.6%);
  }
  60% {
    transform: translateY(-3.96%);
  }
}
.third.paused {
  animation-name: bounce_third;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

@keyframes bounce_fourth {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-7.4%);
  }
  60% {
    transform: translateY(-4.44%);
  }
}
.fourth.paused {
  animation-name: bounce_fourth;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

@keyframes bounce_fifth {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-8.2%);
  }
  60% {
    transform: translateY(-4.92%);
  }
}
.fifth.paused {
  animation-name: bounce_fifth;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

@keyframes bounce_innermost {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-9%);
  }
  60% {
    transform: translateY(-5.4%);
  }
}
.innermost.paused {
  animation-name: bounce_innermost;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

/* playful animation to indicate Pi is speaking */
@keyframes speaking_outermost {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
  }
  25% {
    transform: scale(0.995);
  }
  50% {
    transform: scale(0.9);
  }
  75% {
    transform: scale(0.895);
  }
}
.outermost.piSpeaking {
  animation: speaking_outermost 2s infinite;
  transform-origin: center;
}

@keyframes speaking_second {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
  }
  25% {
    transform: scale(0.98) rotate(-1deg);
  }
  50% {
    transform: scale(0.87) rotate(0deg);
  }
  75% {
    transform: scale(0.865) rotate(1deg);
  }
}
.second.piSpeaking {
  animation: speaking_second 2s infinite;
  transform-origin: center;
}

@keyframes speaking_third {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
  }
  25% {
    transform: scale(0.965) rotate(-2deg);
  }
  50% {
    transform: scale(0.84) rotate(0deg);
  }
  75% {
    transform: scale(0.835) rotate(2deg);
  }
}
.third.piSpeaking {
  animation: speaking_third 2s infinite;
  transform-origin: center;
}

@keyframes speaking_fourth {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
  }
  25% {
    transform: scale(0.95) rotate(-3deg);
  }
  50% {
    transform: scale(0.81) rotate(0deg);
  }
  75% {
    transform: scale(0.805) rotate(3deg);
  }
}
.fourth.piSpeaking {
  animation: speaking_fourth 2s infinite;
  transform-origin: center;
}

@keyframes speaking_fifth {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
  }
  25% {
    transform: scale(0.935) rotate(-4deg);
  }
  50% {
    transform: scale(0.78) rotate(0deg);
  }
  75% {
    transform: scale(0.775) rotate(4deg);
  }
}
.fifth.piSpeaking {
  animation: speaking_fifth 2s infinite;
  transform-origin: center;
}

@keyframes speaking_innermost {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
  }
  25% {
    transform: scale(0.92) rotate(-5deg);
  }
  50% {
    transform: scale(0.75) rotate(0deg);
  }
  75% {
    transform: scale(0.745) rotate(5deg);
  }
}
.innermost.piSpeaking {
  animation: speaking_innermost 2s infinite;
  transform-origin: center;
}

/* wave animation to indicate user is speaking */
@keyframes userSpeakingAnimation {
  50% {
    transform: scaleY(0.05) scaleX(var(--width-factor))
      translateX(calc(-50% + var(--spread-amount)));
  }
  100% {
    transform: scaleY(1) scaleX(var(--width-factor))
      translateX(calc(-50% + var(--spread-amount)));
  }
}
/* user speaking oscillation animation */
@keyframes waveform_outermost {
  0%,
  100% {
    transform: scaleY(1) scaleX(1);
  }
  25%,
  75% {
    transform: scaleY(0.9) scaleX(0.9);
  }
}

@keyframes waveform_second {
  0%,
  100% {
    transform: scaleY(0.9) scaleX(0.9);
  }
  25%,
  75% {
    transform: scaleY(0.8) scaleX(0.8);
  }
}

@keyframes waveform_third {
  0%,
  100% {
    transform: scaleY(0.8) scaleX(0.8);
  }
  25%,
  75% {
    transform: scaleY(0.7) scaleX(0.7);
  }
}

@keyframes waveform_fourth {
  0%,
  100% {
    transform: scaleY(0.7) scaleX(0.7);
  }
  25%,
  75% {
    transform: scaleY(0.6) scaleX(0.6);
  }
}

@keyframes waveform_fifth {
  0%,
  100% {
    transform: scaleY(0.6) scaleX(0.6);
  }
  25%,
  75% {
    transform: scaleY(0.5) scaleX(0.5);
  }
}

@keyframes waveform_innermost {
  0%,
  100% {
    transform: scaleY(0.5) scaleX(0.5);
  }
  25%,
  75% {
    transform: scaleY(0.4) scaleX(0.4);
  }
}

.outermost.userSpeaking {
  animation: waveform_outermost 0.7s infinite alternate;
}

.second.userSpeaking {
  animation: waveform_second 0.65s infinite alternate;
}

.third.userSpeaking {
  animation: waveform_third 0.6s infinite alternate;
}

.fourth.userSpeaking {
  animation: waveform_fourth 0.55s infinite alternate;
}

.fifth.userSpeaking {
  animation: waveform_fifth 0.5s infinite alternate;
}

.innermost.userSpeaking {
  animation: waveform_innermost 0.45s infinite alternate;
}

/* flipcard animation to indicate Say, Pi is transcribing audio to text */
@keyframes transcribingFlip {
  0%,
  100% {
    transform: rotateY(0deg);
    fill: var(--original-color);
  }
  50% {
    transform: rotateY(180deg);
    fill: var(--transcribing-color);
  }
}

.outermost.transcribing {
  --original-color: #e4f2d1;
  --transcribing-color: #b3e0fe;
  animation: transcribingFlip 1.5s infinite;
}

.second.transcribing {
  --original-color: #cce8b5;
  --transcribing-color: #89c2ff;
  animation: transcribingFlip 1.6s infinite;
}

.third.transcribing {
  --original-color: #b3db95;
  --transcribing-color: #5fa4ff;
  animation: transcribingFlip 1.7s infinite;
}

.fourth.transcribing {
  --original-color: #9bd078;
  --transcribing-color: #3586ff;
  animation: transcribingFlip 1.8s infinite;
}

.fifth.transcribing {
  --original-color: #83c55c;
  --transcribing-color: #0b69e3;
  animation: transcribingFlip 1.9s infinite;
}

.innermost.transcribing {
  --original-color: #428a2f;
  --transcribing-color: #0053bf;
  animation: transcribingFlip 2s infinite;
}

/* heartbeat animation to indicate Pi is preparing to speak */
@keyframes heartbeat {
  0%,
  100% {
    opacity: 1;
    fill: var(--original-color);
  }
  50% {
    opacity: 0.5;
    fill: rgb(245 238 223); /* bg-cream-550 */
  }
}

.outermost.loading {
  --original-color: #e4f2d1;
  animation: heartbeat 2s infinite;
  animation-delay: 0s;
}

.second.loading {
  --original-color: #cce8b5;
  animation: heartbeat 2s infinite;
  animation-delay: 0.4s;
}

.third.loading {
  --original-color: #b3db95;
  animation: heartbeat 2s infinite;
  animation-delay: 0.8s;
}

.fourth.loading {
  --original-color: #9bd078;
  animation: heartbeat 2s infinite;
  animation-delay: 1.2s;
}

.fifth.loading {
  --original-color: #83c55c;
  animation: heartbeat 2s infinite;
  animation-delay: 1.6s;
}

.innermost.loading {
  --original-color: #428a2f;
  animation: heartbeat 2s infinite;
  animation-delay: 2s;
}

/* toned-down dissary animation to indicate an error */
/* toned-down error animation with reduced opacity */
@keyframes errorAnimation {
  0% {
    transform: rotate(0deg) translate(0%, 0%);
  }
  25% {
    transform: rotate(-5deg) translate(-5%, 5%);
  }
  50% {
    transform: rotate(5deg) translate(5%, -5%);
  }
  75% {
    transform: rotate(-5deg) translate(-5%, 5%);
  }
  100% {
    transform: rotate(0deg) translate(0%, 0%);
  }
}

.outermost.error {
  animation: errorAnimation 25s 1;
  fill: #ff0000;
  fill-opacity: 0.7;
}

.second.error {
  animation: errorAnimation 25s 1;
  fill: #ff3300;
  fill-opacity: 0.7;
}

.third.error {
  animation: errorAnimation 25s 1;
  fill: #ff6600;
  fill-opacity: 0.7;
}

.fourth.error {
  animation: errorAnimation 25s 1;
  fill: #ff9900;
  fill-opacity: 0.7;
}

.fifth.error {
  animation: errorAnimation 25s 1;
  fill: #ffcc00;
  fill-opacity: 0.7;
}

.innermost.error {
  animation: errorAnimation 25s 1;
  fill: #ffff00;
  fill-opacity: 0.7;
}
`, "",{"version":3,"sources":["webpack://./src/styles/rectangles.css"],"names":[],"mappings":"AAAA;EACE;;IAEE,mBAAmB;EACrB;EACA;IACE,sBAAsB;EACxB;AACF;AACA;EACE,sCAAsC;EACtC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,mBAAmB;EACrB;EACA;IACE,uBAAuB;EACzB;AACF;AACA;EACE,mCAAmC;EACnC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,mBAAmB;EACrB;EACA;IACE,uBAAuB;EACzB;AACF;AACA;EACE,kCAAkC;EAClC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,mBAAmB;EACrB;EACA;IACE,uBAAuB;EACzB;AACF;AACA;EACE,mCAAmC;EACnC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,mBAAmB;EACrB;EACA;IACE,uBAAuB;EACzB;AACF;AACA;EACE,kCAAkC;EAClC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,mBAAmB;EACrB;EACA;IACE,qBAAqB;EACvB;AACF;AACA;EACE,sCAAsC;EACtC,wBAAwB;AAC1B;;AAEA,2EAA2E;AAC3E;EACE;;;;;IAKE,wBAAwB;EAC1B;EACA;IACE,0BAA0B;EAC5B;EACA;IACE,0BAA0B;EAC5B;AACF;AACA;EACE,gCAAgC;EAChC,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE;;;;;IAKE,wBAAwB;EAC1B;EACA;IACE,4BAA4B;EAC9B;EACA;IACE,6BAA6B;EAC/B;AACF;AACA;EACE,6BAA6B;EAC7B,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE;;;;;IAKE,wBAAwB;EAC1B;EACA;IACE,4BAA4B;EAC9B;EACA;IACE,6BAA6B;EAC/B;AACF;AACA;EACE,4BAA4B;EAC5B,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE;;;;;IAKE,wBAAwB;EAC1B;EACA;IACE,4BAA4B;EAC9B;EACA;IACE,6BAA6B;EAC/B;AACF;AACA;EACE,6BAA6B;EAC7B,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE;;;;;IAKE,wBAAwB;EAC1B;EACA;IACE,4BAA4B;EAC9B;EACA;IACE,6BAA6B;EAC/B;AACF;AACA;EACE,4BAA4B;EAC5B,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE;;;;;IAKE,wBAAwB;EAC1B;EACA;IACE,0BAA0B;EAC5B;EACA;IACE,4BAA4B;EAC9B;AACF;AACA;EACE,gCAAgC;EAChC,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA,iDAAiD;AACjD;EACE;;IAEE,gCAAgC;EAClC;EACA;IACE,uBAAuB;EACzB;EACA;IACE,qBAAqB;EACvB;EACA;IACE,uBAAuB;EACzB;AACF;AACA;EACE,yCAAyC;EACzC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,gCAAgC;EAClC;EACA;IACE,oCAAoC;EACtC;EACA;IACE,mCAAmC;EACrC;EACA;IACE,oCAAoC;EACtC;AACF;AACA;EACE,sCAAsC;EACtC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,gCAAgC;EAClC;EACA;IACE,qCAAqC;EACvC;EACA;IACE,mCAAmC;EACrC;EACA;IACE,oCAAoC;EACtC;AACF;AACA;EACE,qCAAqC;EACrC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,gCAAgC;EAClC;EACA;IACE,oCAAoC;EACtC;EACA;IACE,mCAAmC;EACrC;EACA;IACE,oCAAoC;EACtC;AACF;AACA;EACE,sCAAsC;EACtC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,gCAAgC;EAClC;EACA;IACE,qCAAqC;EACvC;EACA;IACE,mCAAmC;EACrC;EACA;IACE,oCAAoC;EACtC;AACF;AACA;EACE,qCAAqC;EACrC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,gCAAgC;EAClC;EACA;IACE,oCAAoC;EACtC;EACA;IACE,mCAAmC;EACrC;EACA;IACE,oCAAoC;EACtC;AACF;AACA;EACE,yCAAyC;EACzC,wBAAwB;AAC1B;;AAEA,gDAAgD;AAChD;EACE;IACE;mDAC+C;EACjD;EACA;IACE;mDAC+C;EACjD;AACF;AACA,wCAAwC;AACxC;EACE;;IAEE,8BAA8B;EAChC;EACA;;IAEE,kCAAkC;EACpC;AACF;;AAEA;EACE;;IAEE,kCAAkC;EACpC;EACA;;IAEE,kCAAkC;EACpC;AACF;;AAEA;EACE;;IAEE,kCAAkC;EACpC;EACA;;IAEE,kCAAkC;EACpC;AACF;;AAEA;EACE;;IAEE,kCAAkC;EACpC;EACA;;IAEE,kCAAkC;EACpC;AACF;;AAEA;EACE;;IAEE,kCAAkC;EACpC;EACA;;IAEE,kCAAkC;EACpC;AACF;;AAEA;EACE;;IAEE,kCAAkC;EACpC;EACA;;IAEE,kCAAkC;EACpC;AACF;;AAEA;EACE,qDAAqD;AACvD;;AAEA;EACE,mDAAmD;AACrD;;AAEA;EACE,iDAAiD;AACnD;;AAEA;EACE,mDAAmD;AACrD;;AAEA;EACE,iDAAiD;AACnD;;AAEA;EACE,sDAAsD;AACxD;;AAEA,yEAAyE;AACzE;EACE;;IAEE,wBAAwB;IACxB,2BAA2B;EAC7B;EACA;IACE,0BAA0B;IAC1B,+BAA+B;EACjC;AACF;;AAEA;EACE,yBAAyB;EACzB,6BAA6B;EAC7B,yCAAyC;AAC3C;;AAEA;EACE,yBAAyB;EACzB,6BAA6B;EAC7B,yCAAyC;AAC3C;;AAEA;EACE,yBAAyB;EACzB,6BAA6B;EAC7B,yCAAyC;AAC3C;;AAEA;EACE,yBAAyB;EACzB,6BAA6B;EAC7B,yCAAyC;AAC3C;;AAEA;EACE,yBAAyB;EACzB,6BAA6B;EAC7B,yCAAyC;AAC3C;;AAEA;EACE,yBAAyB;EACzB,6BAA6B;EAC7B,uCAAuC;AACzC;;AAEA,6DAA6D;AAC7D;EACE;;IAEE,UAAU;IACV,2BAA2B;EAC7B;EACA;IACE,YAAY;IACZ,sBAAsB,EAAE,iBAAiB;EAC3C;AACF;;AAEA;EACE,yBAAyB;EACzB,gCAAgC;EAChC,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;EACzB,gCAAgC;EAChC,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;EACzB,gCAAgC;EAChC,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;EACzB,gCAAgC;EAChC,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;EACzB,gCAAgC;EAChC,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;EACzB,gCAAgC;EAChC,mBAAmB;AACrB;;AAEA,sDAAsD;AACtD,oDAAoD;AACpD;EACE;IACE,yCAAyC;EAC3C;EACA;IACE,2CAA2C;EAC7C;EACA;IACE,0CAA0C;EAC5C;EACA;IACE,2CAA2C;EAC7C;EACA;IACE,yCAAyC;EAC3C;AACF;;AAEA;EACE,+BAA+B;EAC/B,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,+BAA+B;EAC/B,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,+BAA+B;EAC/B,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,+BAA+B;EAC/B,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,+BAA+B;EAC/B,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,+BAA+B;EAC/B,aAAa;EACb,iBAAiB;AACnB","sourcesContent":["@keyframes pulse_outermost {\n  0%,\n  100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(0.92);\n  }\n}\n.outermost {\n  animation: pulse_outermost 5s infinite;\n  transform-origin: center;\n}\n\n@keyframes pulse_second {\n  0%,\n  100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(0.856);\n  }\n}\n.second {\n  animation: pulse_second 5s infinite;\n  transform-origin: center;\n}\n\n@keyframes pulse_third {\n  0%,\n  100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(0.792);\n  }\n}\n.third {\n  animation: pulse_third 5s infinite;\n  transform-origin: center;\n}\n\n@keyframes pulse_fourth {\n  0%,\n  100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(0.728);\n  }\n}\n.fourth {\n  animation: pulse_fourth 5s infinite;\n  transform-origin: center;\n}\n\n@keyframes pulse_fifth {\n  0%,\n  100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(0.664);\n  }\n}\n.fifth {\n  animation: pulse_fifth 5s infinite;\n  transform-origin: center;\n}\n\n@keyframes pulse_innermost {\n  0%,\n  100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(0.6);\n  }\n}\n.innermost {\n  animation: pulse_innermost 5s infinite;\n  transform-origin: center;\n}\n\n/* bounce animation to indicate Pi is paused awaiting permission to speak */\n@keyframes bounce_outermost {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-5%);\n  }\n  60% {\n    transform: translateY(-3%);\n  }\n}\n.outermost.paused {\n  animation-name: bounce_outermost;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n\n@keyframes bounce_second {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-5.8%);\n  }\n  60% {\n    transform: translateY(-3.48%);\n  }\n}\n.second.paused {\n  animation-name: bounce_second;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n\n@keyframes bounce_third {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-6.6%);\n  }\n  60% {\n    transform: translateY(-3.96%);\n  }\n}\n.third.paused {\n  animation-name: bounce_third;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n\n@keyframes bounce_fourth {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-7.4%);\n  }\n  60% {\n    transform: translateY(-4.44%);\n  }\n}\n.fourth.paused {\n  animation-name: bounce_fourth;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n\n@keyframes bounce_fifth {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-8.2%);\n  }\n  60% {\n    transform: translateY(-4.92%);\n  }\n}\n.fifth.paused {\n  animation-name: bounce_fifth;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n\n@keyframes bounce_innermost {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-9%);\n  }\n  60% {\n    transform: translateY(-5.4%);\n  }\n}\n.innermost.paused {\n  animation-name: bounce_innermost;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n\n/* playful animation to indicate Pi is speaking */\n@keyframes speaking_outermost {\n  0%,\n  100% {\n    transform: scale(1) rotate(0deg);\n  }\n  25% {\n    transform: scale(0.995);\n  }\n  50% {\n    transform: scale(0.9);\n  }\n  75% {\n    transform: scale(0.895);\n  }\n}\n.outermost.piSpeaking {\n  animation: speaking_outermost 2s infinite;\n  transform-origin: center;\n}\n\n@keyframes speaking_second {\n  0%,\n  100% {\n    transform: scale(1) rotate(0deg);\n  }\n  25% {\n    transform: scale(0.98) rotate(-1deg);\n  }\n  50% {\n    transform: scale(0.87) rotate(0deg);\n  }\n  75% {\n    transform: scale(0.865) rotate(1deg);\n  }\n}\n.second.piSpeaking {\n  animation: speaking_second 2s infinite;\n  transform-origin: center;\n}\n\n@keyframes speaking_third {\n  0%,\n  100% {\n    transform: scale(1) rotate(0deg);\n  }\n  25% {\n    transform: scale(0.965) rotate(-2deg);\n  }\n  50% {\n    transform: scale(0.84) rotate(0deg);\n  }\n  75% {\n    transform: scale(0.835) rotate(2deg);\n  }\n}\n.third.piSpeaking {\n  animation: speaking_third 2s infinite;\n  transform-origin: center;\n}\n\n@keyframes speaking_fourth {\n  0%,\n  100% {\n    transform: scale(1) rotate(0deg);\n  }\n  25% {\n    transform: scale(0.95) rotate(-3deg);\n  }\n  50% {\n    transform: scale(0.81) rotate(0deg);\n  }\n  75% {\n    transform: scale(0.805) rotate(3deg);\n  }\n}\n.fourth.piSpeaking {\n  animation: speaking_fourth 2s infinite;\n  transform-origin: center;\n}\n\n@keyframes speaking_fifth {\n  0%,\n  100% {\n    transform: scale(1) rotate(0deg);\n  }\n  25% {\n    transform: scale(0.935) rotate(-4deg);\n  }\n  50% {\n    transform: scale(0.78) rotate(0deg);\n  }\n  75% {\n    transform: scale(0.775) rotate(4deg);\n  }\n}\n.fifth.piSpeaking {\n  animation: speaking_fifth 2s infinite;\n  transform-origin: center;\n}\n\n@keyframes speaking_innermost {\n  0%,\n  100% {\n    transform: scale(1) rotate(0deg);\n  }\n  25% {\n    transform: scale(0.92) rotate(-5deg);\n  }\n  50% {\n    transform: scale(0.75) rotate(0deg);\n  }\n  75% {\n    transform: scale(0.745) rotate(5deg);\n  }\n}\n.innermost.piSpeaking {\n  animation: speaking_innermost 2s infinite;\n  transform-origin: center;\n}\n\n/* wave animation to indicate user is speaking */\n@keyframes userSpeakingAnimation {\n  50% {\n    transform: scaleY(0.05) scaleX(var(--width-factor))\n      translateX(calc(-50% + var(--spread-amount)));\n  }\n  100% {\n    transform: scaleY(1) scaleX(var(--width-factor))\n      translateX(calc(-50% + var(--spread-amount)));\n  }\n}\n/* user speaking oscillation animation */\n@keyframes waveform_outermost {\n  0%,\n  100% {\n    transform: scaleY(1) scaleX(1);\n  }\n  25%,\n  75% {\n    transform: scaleY(0.9) scaleX(0.9);\n  }\n}\n\n@keyframes waveform_second {\n  0%,\n  100% {\n    transform: scaleY(0.9) scaleX(0.9);\n  }\n  25%,\n  75% {\n    transform: scaleY(0.8) scaleX(0.8);\n  }\n}\n\n@keyframes waveform_third {\n  0%,\n  100% {\n    transform: scaleY(0.8) scaleX(0.8);\n  }\n  25%,\n  75% {\n    transform: scaleY(0.7) scaleX(0.7);\n  }\n}\n\n@keyframes waveform_fourth {\n  0%,\n  100% {\n    transform: scaleY(0.7) scaleX(0.7);\n  }\n  25%,\n  75% {\n    transform: scaleY(0.6) scaleX(0.6);\n  }\n}\n\n@keyframes waveform_fifth {\n  0%,\n  100% {\n    transform: scaleY(0.6) scaleX(0.6);\n  }\n  25%,\n  75% {\n    transform: scaleY(0.5) scaleX(0.5);\n  }\n}\n\n@keyframes waveform_innermost {\n  0%,\n  100% {\n    transform: scaleY(0.5) scaleX(0.5);\n  }\n  25%,\n  75% {\n    transform: scaleY(0.4) scaleX(0.4);\n  }\n}\n\n.outermost.userSpeaking {\n  animation: waveform_outermost 0.7s infinite alternate;\n}\n\n.second.userSpeaking {\n  animation: waveform_second 0.65s infinite alternate;\n}\n\n.third.userSpeaking {\n  animation: waveform_third 0.6s infinite alternate;\n}\n\n.fourth.userSpeaking {\n  animation: waveform_fourth 0.55s infinite alternate;\n}\n\n.fifth.userSpeaking {\n  animation: waveform_fifth 0.5s infinite alternate;\n}\n\n.innermost.userSpeaking {\n  animation: waveform_innermost 0.45s infinite alternate;\n}\n\n/* flipcard animation to indicate Say, Pi is transcribing audio to text */\n@keyframes transcribingFlip {\n  0%,\n  100% {\n    transform: rotateY(0deg);\n    fill: var(--original-color);\n  }\n  50% {\n    transform: rotateY(180deg);\n    fill: var(--transcribing-color);\n  }\n}\n\n.outermost.transcribing {\n  --original-color: #e4f2d1;\n  --transcribing-color: #b3e0fe;\n  animation: transcribingFlip 1.5s infinite;\n}\n\n.second.transcribing {\n  --original-color: #cce8b5;\n  --transcribing-color: #89c2ff;\n  animation: transcribingFlip 1.6s infinite;\n}\n\n.third.transcribing {\n  --original-color: #b3db95;\n  --transcribing-color: #5fa4ff;\n  animation: transcribingFlip 1.7s infinite;\n}\n\n.fourth.transcribing {\n  --original-color: #9bd078;\n  --transcribing-color: #3586ff;\n  animation: transcribingFlip 1.8s infinite;\n}\n\n.fifth.transcribing {\n  --original-color: #83c55c;\n  --transcribing-color: #0b69e3;\n  animation: transcribingFlip 1.9s infinite;\n}\n\n.innermost.transcribing {\n  --original-color: #428a2f;\n  --transcribing-color: #0053bf;\n  animation: transcribingFlip 2s infinite;\n}\n\n/* heartbeat animation to indicate Pi is preparing to speak */\n@keyframes heartbeat {\n  0%,\n  100% {\n    opacity: 1;\n    fill: var(--original-color);\n  }\n  50% {\n    opacity: 0.5;\n    fill: rgb(245 238 223); /* bg-cream-550 */\n  }\n}\n\n.outermost.loading {\n  --original-color: #e4f2d1;\n  animation: heartbeat 2s infinite;\n  animation-delay: 0s;\n}\n\n.second.loading {\n  --original-color: #cce8b5;\n  animation: heartbeat 2s infinite;\n  animation-delay: 0.4s;\n}\n\n.third.loading {\n  --original-color: #b3db95;\n  animation: heartbeat 2s infinite;\n  animation-delay: 0.8s;\n}\n\n.fourth.loading {\n  --original-color: #9bd078;\n  animation: heartbeat 2s infinite;\n  animation-delay: 1.2s;\n}\n\n.fifth.loading {\n  --original-color: #83c55c;\n  animation: heartbeat 2s infinite;\n  animation-delay: 1.6s;\n}\n\n.innermost.loading {\n  --original-color: #428a2f;\n  animation: heartbeat 2s infinite;\n  animation-delay: 2s;\n}\n\n/* toned-down dissary animation to indicate an error */\n/* toned-down error animation with reduced opacity */\n@keyframes errorAnimation {\n  0% {\n    transform: rotate(0deg) translate(0%, 0%);\n  }\n  25% {\n    transform: rotate(-5deg) translate(-5%, 5%);\n  }\n  50% {\n    transform: rotate(5deg) translate(5%, -5%);\n  }\n  75% {\n    transform: rotate(-5deg) translate(-5%, 5%);\n  }\n  100% {\n    transform: rotate(0deg) translate(0%, 0%);\n  }\n}\n\n.outermost.error {\n  animation: errorAnimation 25s 1;\n  fill: #ff0000;\n  fill-opacity: 0.7;\n}\n\n.second.error {\n  animation: errorAnimation 25s 1;\n  fill: #ff3300;\n  fill-opacity: 0.7;\n}\n\n.third.error {\n  animation: errorAnimation 25s 1;\n  fill: #ff6600;\n  fill-opacity: 0.7;\n}\n\n.fourth.error {\n  animation: errorAnimation 25s 1;\n  fill: #ff9900;\n  fill-opacity: 0.7;\n}\n\n.fifth.error {\n  animation: errorAnimation 25s 1;\n  fill: #ffcc00;\n  fill-opacity: 0.7;\n}\n\n.innermost.error {\n  animation: errorAnimation 25s 1;\n  fill: #ffff00;\n  fill-opacity: 0.7;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/common.scss":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/common.scss ***!
  \*********************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.hidden {
  display: none !important;
}

#saypi-playButton.play-button {
  /* position over the talk button, but under any controls */
  z-index: 70; /* talk button z-index is 59 or 60 */
  background-color: rgba(0, 0, 0, 0); /* transparent without holes */
  border: none;
}

.mobile-device {
  /* maximize (mobile view) button is only displayed on compatible devices */
}
.mobile-device #saypi-enterButton,
.mobile-device #saypi-exitButton {
  position: fixed;
  top: 4rem;
  left: 1.25rem;
  width: 3rem;
  height: 3rem;
  padding: 6px;
  border: 0;
  z-index: 60;
}`, "",{"version":3,"sources":["webpack://./src/styles/common.scss"],"names":[],"mappings":"AAAA;EACE,wBAAA;AACF;;AACA;EACE,0DAAA;EACA,WAAA,EAAA,oCAAA;EACA,kCAAA,EAAA,8BAAA;EACA,YAAA;AAEF;;AACA;EACE,0EAAA;AAEF;AADE;;EAEE,eAAA;EACA,SAAA;EACA,aAAA;EACA,WAAA;EACA,YAAA;EACA,YAAA;EACA,SAAA;EACA,WAAA;AAGJ","sourcesContent":[".hidden {\n  display: none !important;\n}\n#saypi-playButton.play-button {\n  /* position over the talk button, but under any controls */\n  z-index: 70; /* talk button z-index is 59 or 60 */\n  background-color: rgba(0, 0, 0, 0); /* transparent without holes */\n  border: none;\n}\n\n.mobile-device {\n  /* maximize (mobile view) button is only displayed on compatible devices */\n  #saypi-enterButton,\n  #saypi-exitButton {\n    position: fixed;\n    top: 4rem;\n    left: 1.25rem;\n    width: 3rem;\n    height: 3rem;\n    padding: 6px;\n    border: 0;\n    z-index: 60;\n  }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/desktop.scss":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/desktop.scss ***!
  \**********************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.9);
  }
  100% {
    transform: scale(1);
  }
}
html.desktop-view #saypi-talkButton,
html.desktop-view .play-button {
  margin: 0.5rem;
  border-radius: 18px;
  height: 2.25rem;
  width: 5rem;
  display: block; /* For Safari */
}
html.desktop-view #saypi-playButton {
  position: fixed;
  top: 50%; /* Center vertically */
  left: 50%; /* Center horizontally */
  max-width: 500px; /* Maximum width */
  width: 100%;
  transform: translate(-50%, -50%); /* Necessary for perfect centering */
  text-align: center; /* To center the inner contents, if any */
}
html.desktop-view #saypi-playButton svg {
  padding: 2.5rem;
}
html.desktop-view html:not(.firefox-android) #saypi-talkButton:active .waveform,
html.desktop-view #saypi-talkButton.active .waveform {
  animation: pulse 1s infinite;
}
html.desktop-view #saypi-talkButton .waveform {
  fill: #776d6d;
}
html.desktop-view #saypi-talkButton.autoSubmit .waveform {
  fill: rgb(65, 138, 47); /* Pi's text-brand-green-600 */
}
html.desktop-view #saypi-notification > svg {
  width: 3rem;
  height: 3rem;
  bottom: 4rem;
  right: 12rem;
  position: fixed;
}
html.desktop-view #saypi-exitButton {
  display: none;
}`, "",{"version":3,"sources":["webpack://./src/styles/desktop.scss"],"names":[],"mappings":"AACE;EACE;IACE,mBAAA;EAAJ;EAEE;IACE,qBAAA;EAAJ;EAEE;IACE,mBAAA;EAAJ;AACF;AAEE;;EAEE,cAAA;EACA,mBAAA;EACA,eAAA;EACA,WAAA;EACA,cAAA,EAAA,eAAA;AAAJ;AAGE;EACE,eAAA;EACA,QAAA,EAAA,sBAAA;EACA,SAAA,EAAA,wBAAA;EACA,gBAAA,EAAA,kBAAA;EACA,WAAA;EACA,gCAAA,EAAA,oCAAA;EACA,kBAAA,EAAA,yCAAA;AADJ;AAGI;EACE,eAAA;AADN;AAKE;;EAEE,4BAAA;AAHJ;AAKE;EACE,aAAA;AAHJ;AAKE;EACE,sBAAA,EAAA,8BAAA;AAHJ;AAME;EACE,WAAA;EACA,YAAA;EACA,YAAA;EACA,YAAA;EACA,eAAA;AAJJ;AAOE;EACE,aAAA;AALJ","sourcesContent":["html.desktop-view {\n  @keyframes pulse {\n    0% {\n      transform: scale(1);\n    }\n    50% {\n      transform: scale(0.9);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n  #saypi-talkButton,\n  .play-button {\n    margin: 0.5rem;\n    border-radius: 18px;\n    height: 2.25rem;\n    width: 5rem;\n    display: block; /* For Safari */\n  }\n\n  #saypi-playButton {\n    position: fixed;\n    top: 50%; /* Center vertically */\n    left: 50%; /* Center horizontally */\n    max-width: 500px; /* Maximum width */\n    width: 100%;\n    transform: translate(-50%, -50%); /* Necessary for perfect centering */\n    text-align: center; /* To center the inner contents, if any */\n\n    svg {\n      padding: 2.5rem;\n    }\n  }\n\n  html:not(.firefox-android) #saypi-talkButton:active .waveform,\n  #saypi-talkButton.active .waveform {\n    animation: pulse 1s infinite;\n  }\n  #saypi-talkButton .waveform {\n    fill: #776d6d;\n  }\n  #saypi-talkButton.autoSubmit .waveform {\n    fill: rgb(65 138 47); /* Pi's text-brand-green-600 */\n  }\n\n  #saypi-notification > svg {\n    width: 3rem;\n    height: 3rem;\n    bottom: 4rem;\n    right: 12rem;\n    position: fixed;\n  }\n\n  #saypi-exitButton {\n    display: none;\n  }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/mobile.scss":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/mobile.scss ***!
  \*********************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `html.mobile-view {
  /* Pi controls: ellipsis, experiences */
  /* Pi controls: mute/unmute */
  /* fix an alignment issue with the "new ui layout" */
}
html.mobile-view #saypi-panel,
html.mobile-view .play-button,
html.mobile-view .notification {
  width: 100%;
  position: fixed;
  left: 0;
  background-color: rgba(245, 238, 223, 0.98);
  height: 100vh;
  top: 0;
}
html.mobile-view #saypi-playButton {
  background-color: rgba(245, 238, 223, 0.55);
}
html.mobile-view #saypi-playButton svg {
  padding: 2.5rem;
}
html.mobile-view #saypi-talkButton {
  width: 100%;
  height: 100%;
  background-color: transparent;
  border-radius: 0;
  margin: 0;
}
html.mobile-view #saypi-notification {
  z-index: 100;
  background-color: transparent;
}
html.mobile-view #saypi-notification svg {
  width: 75%;
  height: 100%;
  margin: auto;
}
html.mobile-view #__next > main > div > div > div.fixed.top-4.right-6 > button,
html.mobile-view #saypi-experiences-button {
  transform: scale(1.5);
}
html.mobile-view #saypi-audio-controls {
  /* hide the voice options */
  /* scale the mute button */
}
html.mobile-view #saypi-audio-controls div.p-1 {
  display: none;
}
html.mobile-view #saypi-audio-controls button.group {
  transform: scale(2) !important;
  z-index: 50;
  /* hide the voice selector twisty */
}
html.mobile-view #saypi-audio-controls button.group + button {
  display: none;
}
html.mobile-view .text-body-chat-m {
  padding-top: 0;
}
html.mobile-view #saypi-enterButton {
  display: none;
}
html.mobile-view #saypi-footer {
  display: none;
}
html.mobile-view #saypi-prompt {
  /* hides virtual keyboard on android */
  display: none;
}
html.mobile-view #saypi-submitButton {
  display: none;
}`, "",{"version":3,"sources":["webpack://./src/styles/mobile.scss"],"names":[],"mappings":"AAAA;EAsCE,uCAAA;EAMA,6BAAA;EAiBA,oDAAA;AAzDF;AAHE;;;EAGE,WAAA;EACA,eAAA;EACA,OAAA;EACA,2CAAA;EAEA,aAAA;EACA,MAAA;AAIJ;AADE;EACE,2CAAA;AAGJ;AAFI;EACE,eAAA;AAIN;AAAE;EACE,WAAA;EACA,YAAA;EACA,6BAAA;EACA,gBAAA;EACA,SAAA;AAEJ;AACE;EACE,YAAA;EACA,6BAAA;AACJ;AAAI;EACE,UAAA;EACA,YAAA;EACA,YAAA;AAEN;AAGE;;EAEE,qBAAA;AADJ;AAKE;EACE,2BAAA;EAIA,0BAAA;AANJ;AAGI;EACE,aAAA;AADN;AAII;EACE,8BAAA;EACA,WAAA;EACA,mCAAA;AAFN;AAGM;EACE,aAAA;AADR;AAOE;EACE,cAAA;AALJ;AAQE;EACE,aAAA;AANJ;AASE;EACE,aAAA;AAPJ;AAUE;EACE,sCAAA;EACA,aAAA;AARJ;AAWE;EACE,aAAA;AATJ","sourcesContent":["html.mobile-view {\n  #saypi-panel,\n  .play-button,\n  .notification {\n    width: 100%;\n    position: fixed;\n    left: 0;\n    background-color: rgba(245, 238, 223, 0.98);\n\n    height: 100vh;\n    top: 0;\n  }\n\n  #saypi-playButton {\n    background-color: rgba(245, 238, 223, 0.55);\n    svg {\n      padding: 2.5rem;\n    }\n  }\n\n  #saypi-talkButton {\n    width: 100%;\n    height: 100%;\n    background-color: transparent;\n    border-radius: 0;\n    margin: 0;\n  }\n\n  #saypi-notification {\n    z-index: 100;\n    background-color: transparent;\n    svg {\n      width: 75%;\n      height: 100%;\n      margin: auto;\n    }\n  }\n\n  /* Pi controls: ellipsis, experiences */\n  #__next > main > div > div > div.fixed.top-4.right-6 > button,\n  #saypi-experiences-button {\n    transform: scale(1.5);\n  }\n\n  /* Pi controls: mute/unmute */\n  #saypi-audio-controls {\n    /* hide the voice options */\n    div.p-1 {\n      display: none;\n    }\n    /* scale the mute button */\n    button.group {\n      transform: scale(2) !important;\n      z-index: 50;\n      /* hide the voice selector twisty */\n      + button {\n        display: none;\n      }\n    }\n  }\n\n  /* fix an alignment issue with the \"new ui layout\" */\n  .text-body-chat-m {\n    padding-top: 0;\n  }\n\n  #saypi-enterButton {\n    display: none;\n  }\n\n  #saypi-footer {\n    display: none;\n  }\n\n  #saypi-prompt {\n    /* hides virtual keyboard on android */\n    display: none;\n  }\n\n  #saypi-submitButton {\n    display: none;\n  }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {



module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./public/audioModule.bundle.js":
/*!****************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./public/audioModule.bundle.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("function _typeof2(obj){\"@babel/helpers - typeof\";return _typeof2=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&\"function\"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;},_typeof2(obj);}// ==UserScript==\n// @name         Say, Pi\n// @namespace    http://www.saypi.ai/\n// @version      1.3.8\n// @description  Speak to Pi with OpenAI's Whisper\n// @author       Ross Cadogan\n// @match        https://pi.ai/talk\n// @inject-into  page\n// @updateURL    https://app.saypi.ai/saypi.user.js\n// @downloadURL  https://app.saypi.ai/saypi.user.js\n// @license      MIT\n// ==/UserScript==\n/******/(function(){// webpackBootstrap\n/******/var __webpack_modules__={/***/\"./src/LoggingModule.js\":/*!******************************!*\\\n  !*** ./src/LoggingModule.js ***!\n  \\******************************/ /***/function srcLoggingModuleJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */serializeStateValue:function serializeStateValue(){return(/* binding */_serializeStateValue);}/* harmony export */});function _serializeStateValue(stateValue){if(typeof stateValue===\"string\"){return stateValue;}return Object.keys(stateValue).map(function(key){return\"\".concat(key,\":\").concat(_serializeStateValue(stateValue[key]));}).join(\",\");}/***/},/***/\"./src/UserAgentModule.js\":/*!********************************!*\\\n  !*** ./src/UserAgentModule.js ***!\n  \\********************************/ /***/function srcUserAgentModuleJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */addDeviceFlags:function addDeviceFlags(){return(/* binding */_addDeviceFlags);},/* harmony export */addUserAgentFlags:function addUserAgentFlags(){return(/* binding */_addUserAgentFlags);},/* harmony export */addViewFlags:function addViewFlags(){return(/* binding */_addViewFlags);},/* harmony export */enterMobileMode:function enterMobileMode(){return(/* binding */_enterMobileMode);},/* harmony export */exitMobileMode:function exitMobileMode(){return(/* binding */_exitMobileMode);},/* harmony export */isMobileDevice:function isMobileDevice(){return(/* binding */_isMobileDevice);},/* harmony export */isMobileView:function isMobileView(){return(/* binding */_isMobileView);},/* harmony export */isSafari:function isSafari(){return(/* binding */_isSafari);}/* harmony export */});function _isSafari(){return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);}function _isMobileDevice(){return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||window.matchMedia(\"(max-width: 768px)\").matches;}// this function determines whether to show the mobile view or not\nfunction _isMobileView(){var userViewPreference=null;try{userViewPreference=localStorage.getItem(\"userViewPreference\");}catch(e){console.warn(\"Could not access localStorage: \",e);}var prefersMobile=false;if(userViewPreference){prefersMobile=userViewPreference===\"mobile\";}// Make sure isMobileDevice is defined or imported\nreturn _isMobileDevice()&&prefersMobile;}function _exitMobileMode(){localStorage.setItem(\"userViewPreference\",\"desktop\");// Save preference\nvar element=document.documentElement;element.classList.remove(\"mobile-view\");element.classList.add(\"desktop-view\");}function _enterMobileMode(){localStorage.setItem(\"userViewPreference\",\"mobile\");// Save preference\nvar element=document.documentElement;element.classList.remove(\"desktop-view\");element.classList.add(\"mobile-view\");}function _addUserAgentFlags(){var isFirefoxAndroid=/Firefox/.test(navigator.userAgent)&&/Android/.test(navigator.userAgent);var element=document.documentElement;if(isFirefoxAndroid){element.classList.add(\"firefox-android\");}_addDeviceFlags(element);_addViewFlags(element);}function _addDeviceFlags(element){if(_isMobileDevice()){element.classList.add(\"mobile-device\");}}function _addViewFlags(element){if(_isMobileView()){element.classList.remove(\"desktop-view\");element.classList.add(\"mobile-view\");}else{element.classList.remove(\"mobile-view\");element.classList.add(\"desktop-view\");}}/***/},/***/\"./src/state-machines/AudioInputMachine.js\":/*!*************************************************!*\\\n  !*** ./src/state-machines/AudioInputMachine.js ***!\n  \\*************************************************/ /***/function srcStateMachinesAudioInputMachineJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */audioInputMachine:function audioInputMachine(){return(/* binding */_audioInputMachine);}/* harmony export */});/* harmony import */var xstate__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! xstate */\"./node_modules/xstate/es/Machine.js\");var EventBus=window.EventBus;var audioMimeType=\"audio/webm;codecs=opus\";var threshold=1000;// 1000 ms = 1 second, about the length of \"Hey, Pi\"\n// Declare a global variable for the mediaRecorder\nvar mediaRecorder;function setupRecording(callback){if(mediaRecorder){return;}// Get a stream from the user's microphone\nnavigator.mediaDevices.getUserMedia({audio:true}).then(function(stream){if(!MediaRecorder.isTypeSupported(audioMimeType)){// use MP4 for Safari\naudioMimeType=\"audio/mp4\";}// Create a new MediaRecorder object using the stream and specifying the MIME type\nvar options={mimeType:audioMimeType};mediaRecorder=new MediaRecorder(stream,options);mediaRecorder.addEventListener(\"dataavailable\",function(event){EventBus.emit(\"audio:dataavailable\",{data:event.data});});mediaRecorder.addEventListener(\"stop\",function(){EventBus.emit(\"audio:input:stop\");});}).then(function(){// Invoke the callback function\nif(typeof callback===\"function\"){callback();}})[\"catch\"](function(err){console.error(\"Error getting audio stream: \"+err);});}function tearDownRecording(){// Check if the MediaRecorder is set up\nif(!mediaRecorder){return;}// Stop any ongoing recording\nif(mediaRecorder.state===\"recording\"){mediaRecorder.stop();}// Clear the MediaRecorder variable\nmediaRecorder=null;}var _audioInputMachine=(0,xstate__WEBPACK_IMPORTED_MODULE_0__.createMachine)({/** @xstate-layout N4IgpgJg5mDOIC5QEMCuECWB7AkgOwAdUAXAOgCcwAbMZWSAYmQGMBHVDSgbQAYBdRKAJZYGYtjyCQAD0QBGAGwBmUgFYANCACeiJXIAcpBQHYAnAtP6l+gCw2lAJgU2Avi81pMuQiVIt2nBh4UAwQWHhgpEEAblgA1pGe2PhEZP4c5EFQCDFYzMji4bx8xVLCooWSSDKIqg6aOgj6xnJqCqo8qtbKpjwODm4e6Mk+aWwZWQxg5ORY5KQEVAUAZnMAtn7D3ql+44HBOXix+ZXFpdXlYhJSsghyxioa2oj9qqT97Q-Wdo4KgyBJba+dKcRiUGh0MDnIQiK7hG7yB5qBqIfStDo8HhyHj6Wz2Jxyf6AlLAvaUCBRCA0BiwYjIcjEaEgS6VBEIGxyFSWezGJ6NfTmUhyVQKRSmbFKZQtIlbEljALkihgZhzTDBGnELAEABKYHYcGIkCZLOu1VuJgUaiUvQUDj5iHFrRsAo6DnsFmMnRlXjluwVkCVKvIapCEAKyAAgtFkBglgAjGjG2Gss21Bw8NT6VSmJS8lFNO2kGwOcw8BQKHiS3OE9wA2WjP0ZAMEMB4EMAZU1BA1WqTFVNoFucjkOaMdvzphspiFjgeikrUprQx9DZBipbbayna1oXDUZj8cT-DKyYHNQQk5UVnTenHzwLb1MJYr5YX1e9Ix2a4DtK1LYgDB9nCVSDvII4qLa9oIJ6bz3OYSjOjYXTGKKbi1ngWAQHAUjEqMJ79vCqYIAAtAo+bEY+phUbyPDFs4T6obWuE7OCtD0BA+HAWyxb5sONhGFiqhfHivxLnWK5fmSWScSmoHsumRiIbmUH9NOw6WH0qiqNiVFKB+QLyk2HEXKehFyQ4+gOEWtjKfmQkqHBr6CdpSiqPpvrfhSGBUmAMlnrcShKBmSl5ve4rTsoDhzhWVbSkx9aSf6FKUEGIZ+WZ55dJaJgGKFjQMaQuJRXoMWLu5q5ks2rYdl26UgeetjTlRDi5VBT7GKQ1jFfOsVicxpJJaQv4EP+dVsnIJatBZE2epOWZOG1E2kC0Fb6AoVi5mWaEuEAA */context:{audioDataChunks:[]},id:\"audioInput\",initial:\"released\",states:{released:{on:{acquire:{target:\"acquiring\"}}},acquiring:{description:\"Acquiring the microphone. Waits until asynchronous call has completed.\",invoke:{src:\"acquireMediaRecorder\",onDone:{target:\"acquired\"},onError:{target:\"released\",actions:\"logError\"}}},acquired:{description:\"Microphone acquired and ready to start recording.\",initial:\"idle\",states:{idle:{on:{start:{target:\"recording\",actions:{type:\"startRecording\",cond:\"mediaRecorderAcquired\"}}}},recording:{on:{stopRequested:{target:\"pendingStop\",actions:{type:\"stopRecording\"}},dataAvailable:{actions:{type:\"addData\",params:{}},internal:true}}},pendingStop:{description:\"Waiting for the MediaRecorder to stop recording.\",on:{stop:{target:\"stopped\"},dataAvailable:{actions:{type:\"addData\",params:{}},internal:true}}},stopped:{entry:{type:\"sendData\",params:{},cond:\"hasData\"},always:\"idle\"}},on:{release:{target:\"released\",actions:{type:\"releaseMediaRecorder\"}}}}},predictableActionArguments:true,preserveActionOrder:true},{actions:{startRecording:function startRecording(context,event){// Clear the array for the next recording\ncontext.audioDataChunks=[];context.startTime=Date.now();// Start recording\nmediaRecorder.start();EventBus.emit(\"saypi:userSpeaking\");},stopRecording:function stopRecording(context,event){// TODO: do I need this state check?\nif(mediaRecorder&&mediaRecorder.state===\"recording\"){// Stop recording\nmediaRecorder.stop();// Record the stop time and calculate the duration\nvar stopTime=Date.now();var duration=stopTime-context.startTime;EventBus.emit(\"saypi:userStoppedSpeaking\",{duration:duration});}},addData:function addData(context,event){// Add the new data to the array\ncontext.audioDataChunks.push(event.data);},sendData:function sendData(context,event){// Create a Blob from the audio data chunks\nvar audioBlob=new Blob(context.audioDataChunks,{type:mediaRecorder.mimeType});// Get the stop time and calculate the duration\nvar stopTime=Date.now();var duration=stopTime-context.startTime;// If the duration is greater than the threshold, upload the audio for transcription\nif(duration>=threshold){// Upload the audio to the server for transcription\nEventBus.emit(\"saypi:userFinishedSpeaking\",{duration:duration,blob:audioBlob});}else{console.log(\"Recording was too short, not uploading for transcription\");}},releaseMediaRecorder:function releaseMediaRecorder(context,event){tearDownRecording();},logError:function logError(context,event){console.error(\"Error acquiring MediaRecorder: \",event.data);}},services:{acquireMediaRecorder:function acquireMediaRecorder(context,event,_ref){var send=_ref.send;return new Promise(function(resolve,reject){setupRecording(function(){if(mediaRecorder){resolve();}else{reject(new Error(\"Failed to acquire MediaRecorder\"));}});});}},guards:{mediaRecorderAcquired:function mediaRecorderAcquired(context,event){return mediaRecorder!==null;},hasData:function hasData(context,event){return context.audioDataChunks.length>0;}},delays:{}});/***/},/***/\"./src/state-machines/AudioOutputMachine.js\":/*!**************************************************!*\\\n  !*** ./src/state-machines/AudioOutputMachine.js ***!\n  \\**************************************************/ /***/function srcStateMachinesAudioOutputMachineJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */audioOutputMachine:function audioOutputMachine(){return(/* binding */_audioOutputMachine);}/* harmony export */});/* harmony import */var xstate__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! xstate */\"./node_modules/xstate/es/Machine.js\");/* harmony import */var xstate__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! xstate */\"./node_modules/xstate/es/index.js\");/* harmony import */var _UserAgentModule__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ../UserAgentModule */\"./src/UserAgentModule.js\");var EventBus=window.EventBus;var audioElement=document.querySelector(\"audio\");if(!audioElement){console.error(\"Audio element not found in output machine!\");}var _audioOutputMachine=(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createMachine)({/** @xstate-layout N4IgpgJg5mDOIC5QEMCuECWB7A8qgLgA4EDEYAtofhpANoAMAuoqIVrBtVgHYsgCeiALQBGAOwBWADQgAHohEBOACzKAdMrEA2LQA4ATPq0iJW-QF9zMtJlwFi+NRggAbMCRdZkEWPmQAnfAZmJBA2Di5eUPkEQwk1aQFERX1FNXoM+hMAZnoJXRFsrUtrdGw8IgI1T28MbigPLwhIcjA-CGQ-YL5wzmwo0BiJfRlBBAKEzPpFDPFdbP1lEpAbcvsqmuaINX8wb34SQhdkfm7Q3si+GJEsrQTsmbNEsdTsybEDD7yCouXVu0qjk2kDURxOdQahDQsDAZ1Y7D6PCuySM90UIn0GKMym+o0Qqn0ai0C0+um+hWKVhWZQBDmqTRBYP4ELI3C2cLCCMu0RRdwkDwxWK0OPyeIQ4noan0Eg++i++UK+T+NIqdOB2yZLIAxshuEz8AALfxYVBQA0ci79ZEIRQytRibTTehaPLZbLzMXDMT23QzB1khW-Kn-VUbBka47M+okC1cq08m2o-nozGGYW4pIIB53Yn6UnkoOlWyhoHh0HQyCHSOxiLxwYKLLqIpiRZmbEZsbZZS6NSFPNygM-SlFtaA+neRkViAkXabGuIgZyBR5ntiG6KRRt9OizPKW32iSzfkFiTK4vrUsT7ZgNmVmFgADWdCYPTjSITpj5Yno2Qxz0QRSEn2-r0GIyjiOIlhUtwWDNPAoQhher61u+9YIEIWhikIRiEqewYqheTiuGAyELtaygjJm2hvKkIh6EoLbdj+Z6jmqTQQqR3JoXRvr2iINwykYJhmGKvGHkeHyHroujKHhI60mGV6cXWS6xBIaTJs60qiYSkhfHu+hFO6igsQpl5bDsewQGM8IoYuMQUeomlPGK+hZESCwgWBEFiKZJbjhZmr1MpqGqVoiirqoMnOq67rZGKCzqH2+aBsO1LnmO6rlqgMIQCF9kKAJRLiK2aYiroCXge8KVDn5hFZTeWz5dauTes52mZhIdq5jVFJQeYQA */id:\"audioOutput\",context:{autoplay:false,audioElement:audioElement},initial:\"idle\",states:{idle:{on:{loadstart:\"loading\"}},loading:{on:{loadedmetadata:\"loaded\"}},loaded:{initial:\"ready\",on:{emptied:\"idle\"},states:{ready:{description:\"Audio has loaded and is ready to start playing (further buffering may be required to reach the end).\",on:{play:\"playing\"},entry:{type:\"emitEvent\",params:{eventName:\"saypi:ready\"}}},playing:{on:{pause:\"paused\",ended:\"ended\",canplaythrough:{target:\"playing\",internal:true}},always:{target:\"paused\",cond:\"isSafariAutoPlay\",actions:[\"requestPause\",{type:\"emitEvent\",params:{eventName:\"saypi:safariBlocked\"}}]},entry:[{type:\"emitEvent\",params:{eventName:\"saypi:piSpeaking\"}}],exit:[{type:\"emitEvent\",params:{eventName:\"saypi:piStoppedSpeaking\"}},(0,xstate__WEBPACK_IMPORTED_MODULE_2__.assign)({autoplay:true,audioElement:function audioElement(context){return context.audioElement;}})]},paused:{on:{play:\"playing\",reload:{target:\"#audioOutput.loading\",description:\"Reload the audio stream for Safari. This is the only command that external modules can send the machine.\",actions:[(0,xstate__WEBPACK_IMPORTED_MODULE_2__.assign)(function(context){return{autoplay:false,audioElement:context.audioElement};}),\"requestReload\"],cond:\"isSafari\"}}},ended:{on:{seeked:{target:\"#audioOutput.loaded.ready\",description:\"An ended track is seeked back to earlier in the track.\"}},entry:[{type:\"emitEvent\",params:{eventName:\"saypi:piFinishedSpeaking\"}}]}}}},predictableActionArguments:true,preserveActionOrder:true},{actions:{emitEvent:function emitEvent(context,event,_ref){var action=_ref.action;EventBus.emit(action.params.eventName);},requestPause:function requestPause(context,event){context.audioElement.pause();},seekToEnd:function seekToEnd(context,event){var audio=context.audioElement;if(audio.duration&&!audio.ended&&audio.currentTime<audio.duration){audio.currentTime=audio.duration;// seek the audio to the end\naudio.play();// trigger the ended event\n}EventBus.emit(\"saypi:piFinishedSpeaking\");},requestReload:function requestReload(context){var audio=context.audioElement;audio.load();audio.play();}},guards:{isSafari:function isSafari(context,event){return(0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_0__.isSafari)();},isSafariAutoPlay:function isSafariAutoPlay(context,event){return(0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_0__.isSafari)()&&context.autoplay;}}});/***/},/***/\"./node_modules/xstate/es/Actor.js\":/*!*****************************************!*\\\n  !*** ./node_modules/xstate/es/Actor.js ***!\n  \\*****************************************/ /***/function node_modulesXstateEsActorJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */createDeferredActor:function createDeferredActor(){return(/* binding */_createDeferredActor);},/* harmony export */createInvocableActor:function createInvocableActor(){return(/* binding */_createInvocableActor);},/* harmony export */createNullActor:function createNullActor(){return(/* binding */_createNullActor);},/* harmony export */isActor:function isActor(){return(/* binding */_isActor);},/* harmony export */isSpawnedActor:function isSpawnedActor(){return(/* binding */_isSpawnedActor);},/* harmony export */toActorRef:function toActorRef(){return(/* binding */_toActorRef);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");/* harmony import */var _serviceScope_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./serviceScope.js */\"./node_modules/xstate/es/serviceScope.js\");function _createNullActor(id){var _a;return _a={id:id,send:function send(){return void 0;},subscribe:function subscribe(){return{unsubscribe:function unsubscribe(){return void 0;}};},getSnapshot:function getSnapshot(){return undefined;},toJSON:function toJSON(){return{id:id};}},_a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;},_a;}/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */function _createInvocableActor(invokeDefinition,machine,context,_event){var _a;var invokeSrc=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(invokeDefinition.src);var serviceCreator=(_a=machine===null||machine===void 0?void 0:machine.options.services)===null||_a===void 0?void 0:_a[invokeSrc.type];var resolvedData=invokeDefinition.data?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(invokeDefinition.data,context,_event):undefined;var tempActor=serviceCreator?_createDeferredActor(serviceCreator,invokeDefinition.id,resolvedData):_createNullActor(invokeDefinition.id);// @ts-ignore\ntempActor.meta=invokeDefinition;return tempActor;}function _createDeferredActor(entity,id,data){var tempActor=_createNullActor(id);// @ts-ignore\ntempActor.deferred=true;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)){// \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\nvar initialState_1=tempActor.state=(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_1__.provide)(undefined,function(){return(data?entity.withContext(data):entity).initialState;});tempActor.getSnapshot=function(){return initialState_1;};}return tempActor;}function _isActor(item){try{return typeof item.send==='function';}catch(e){return false;}}function _isSpawnedActor(item){return _isActor(item)&&'id'in item;}// TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now\nfunction _toActorRef(actorRefLike){var _a;return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a={subscribe:function subscribe(){return{unsubscribe:function unsubscribe(){return void 0;}};},id:'anonymous',getSnapshot:function getSnapshot(){return undefined;}},_a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;},_a),actorRefLike);}/***/},/***/\"./node_modules/xstate/es/Machine.js\":/*!*******************************************!*\\\n  !*** ./node_modules/xstate/es/Machine.js ***!\n  \\*******************************************/ /***/function node_modulesXstateEsMachineJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */Machine:function Machine(){return(/* binding */_Machine);},/* harmony export */createMachine:function createMachine(){return(/* binding */_createMachine);}/* harmony export */});/* harmony import */var _StateNode_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./StateNode.js */\"./node_modules/xstate/es/StateNode.js\");/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");var warned=false;function _Machine(config,options,initialContext){if(initialContext===void 0){initialContext=config.context;}return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config,options,initialContext);}function _createMachine(config,options){if(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION&&!('predictableActionArguments'in config)&&!warned){warned=true;console.warn('It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html');}return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config,options);}/***/},/***/\"./node_modules/xstate/es/State.js\":/*!*****************************************!*\\\n  !*** ./node_modules/xstate/es/State.js ***!\n  \\*****************************************/ /***/function node_modulesXstateEsStateJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */State:function State(){return(/* binding */_State);},/* harmony export */bindActionToState:function bindActionToState(){return(/* binding */_bindActionToState);},/* harmony export */isState:function isState(){return(/* binding */_isState);},/* harmony export */isStateConfig:function isStateConfig(){return(/* binding */_isStateConfig);},/* harmony export */stateValuesEqual:function stateValuesEqual(){return(/* binding */_stateValuesEqual);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _constants_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./constants.js */\"./node_modules/xstate/es/constants.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");/* harmony import */var _stateUtils_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(/*! ./stateUtils.js */\"./node_modules/xstate/es/stateUtils.js\");/* harmony import */var _actions_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(/*! ./actions.js */\"./node_modules/xstate/es/actions.js\");/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");function _stateValuesEqual(a,b){if(a===b){return true;}if(a===undefined||b===undefined){return false;}if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(a)||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(b)){return a===b;}var aKeys=Object.keys(a);var bKeys=Object.keys(b);return aKeys.length===bKeys.length&&aKeys.every(function(key){return _stateValuesEqual(a[key],b[key]);});}function _isStateConfig(state){if(_typeof2(state)!=='object'||state===null){return false;}return'value'in state&&'_event'in state;}/**\r\n * @deprecated Use `isStateConfig(object)` or `state instanceof State` instead.\r\n */var _isState=_isStateConfig;function _bindActionToState(action,state){var exec=action.exec;var boundAction=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({},action),{exec:exec!==undefined?function(){return exec(state.context,state.event,{action:action,state:state,_event:state._event});}:undefined});return boundAction;}var _State=/*#__PURE__*/ /** @class */function(){/**\r\n   * Creates a new State instance.\r\n   * @param value The state value\r\n   * @param context The extended state\r\n   * @param historyValue The tree representing historical values of the state nodes\r\n   * @param history The previous state\r\n   * @param actions An array of action objects to execute as side-effects\r\n   * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).\r\n   * @param meta\r\n   * @param events Internal event queue. Should be empty with run-to-completion semantics.\r\n   * @param configuration\r\n   */function State(config){var _this=this;var _a;this.actions=[];this.activities=_constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;this.meta={};this.events=[];this.value=config.value;this.context=config.context;this._event=config._event;this._sessionid=config._sessionid;this.event=this._event.data;this.historyValue=config.historyValue;this.history=config.history;this.actions=config.actions||[];this.activities=config.activities||_constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;this.meta=(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.getMeta)(config.configuration);this.events=config.events||[];this.matches=this.matches.bind(this);this.toStrings=this.toStrings.bind(this);this.configuration=config.configuration;this.transitions=config.transitions;this.children=config.children;this.done=!!config.done;this.tags=(_a=Array.isArray(config.tags)?new Set(config.tags):config.tags)!==null&&_a!==void 0?_a:new Set();this.machine=config.machine;Object.defineProperty(this,'nextEvents',{get:function get(){return(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.nextEvents)(_this.configuration);}});}/**\r\n   * Creates a new State instance for the given `stateValue` and `context`.\r\n   * @param stateValue\r\n   * @param context\r\n   */State.from=function(stateValue,context){if(stateValue instanceof State){if(stateValue.context!==context){return new State({value:stateValue.value,context:context,_event:stateValue._event,_sessionid:null,historyValue:stateValue.historyValue,history:stateValue.history,actions:[],activities:stateValue.activities,meta:{},events:[],configuration:[],transitions:[],children:{}});}return stateValue;}var _event=_actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;return new State({value:stateValue,context:context,_event:_event,_sessionid:null,historyValue:undefined,history:undefined,actions:[],activities:undefined,meta:undefined,events:[],configuration:[],transitions:[],children:{}});};/**\r\n   * Creates a new State instance for the given `config`.\r\n   * @param config The state config\r\n   */State.create=function(config){return new State(config);};/**\r\n   * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).\r\n   * @param stateValue\r\n   * @param context\r\n   */State.inert=function(stateValue,context){if(stateValue instanceof State){if(!stateValue.actions.length){return stateValue;}var _event=_actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;return new State({value:stateValue.value,context:context,_event:_event,_sessionid:null,historyValue:stateValue.historyValue,history:stateValue.history,activities:stateValue.activities,configuration:stateValue.configuration,transitions:[],children:{}});}return State.from(stateValue,context);};/**\r\n   * Returns an array of all the string leaf state node paths.\r\n   * @param stateValue\r\n   * @param delimiter The character(s) that separate each subpath in the string state node path.\r\n   */State.prototype.toStrings=function(stateValue,delimiter){var _this=this;if(stateValue===void 0){stateValue=this.value;}if(delimiter===void 0){delimiter='.';}if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)){return[stateValue];}var valueKeys=Object.keys(stateValue);return valueKeys.concat.apply(valueKeys,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(valueKeys.map(function(key){return _this.toStrings(stateValue[key],delimiter).map(function(s){return key+delimiter+s;});})),false));};State.prototype.toJSON=function(){var _a=this;_a.configuration;_a.transitions;var tags=_a.tags;_a.machine;var jsonValues=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a,[\"configuration\",\"transitions\",\"tags\",\"machine\"]);return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({},jsonValues),{tags:Array.from(tags)});};State.prototype.matches=function(parentStateValue){return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)(parentStateValue,this.value);};/**\r\n   * Whether the current state configuration has a state node with the specified `tag`.\r\n   * @param tag\r\n   */State.prototype.hasTag=function(tag){return this.tags.has(tag);};/**\r\n   * Determines whether sending the `event` will cause a non-forbidden transition\r\n   * to be selected, even if the transitions have no actions nor\r\n   * change the state value.\r\n   *\r\n   * @param event The event to test\r\n   * @returns Whether the event will cause a transition\r\n   */State.prototype.can=function(event){var _a;if(_environment_js__WEBPACK_IMPORTED_MODULE_5__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!this.machine,\"state.can(...) used outside of a machine-created State object; this will always return false.\");}var transitionData=(_a=this.machine)===null||_a===void 0?void 0:_a.getTransitionData(this,event);return!!(transitionData===null||transitionData===void 0?void 0:transitionData.transitions.length)&&// Check that at least one transition is not forbidden\ntransitionData.transitions.some(function(t){return t.target!==undefined||t.actions.length;});};return State;}();/***/},/***/\"./node_modules/xstate/es/StateNode.js\":/*!*********************************************!*\\\n  !*** ./node_modules/xstate/es/StateNode.js ***!\n  \\*********************************************/ /***/function node_modulesXstateEsStateNodeJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */StateNode:function StateNode(){return(/* binding */_StateNode);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");/* harmony import */var _State_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(/*! ./State.js */\"./node_modules/xstate/es/State.js\");/* harmony import */var _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(/*! ./actionTypes.js */\"./node_modules/xstate/es/actionTypes.js\");/* harmony import */var _actions_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(/*! ./actions.js */\"./node_modules/xstate/es/actions.js\");/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");/* harmony import */var _constants_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./constants.js */\"./node_modules/xstate/es/constants.js\");/* harmony import */var _stateUtils_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(/*! ./stateUtils.js */\"./node_modules/xstate/es/stateUtils.js\");/* harmony import */var _Actor_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(/*! ./Actor.js */\"./node_modules/xstate/es/Actor.js\");/* harmony import */var _invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(/*! ./invokeUtils.js */\"./node_modules/xstate/es/invokeUtils.js\");var NULL_EVENT='';var STATE_IDENTIFIER='#';var WILDCARD='*';var EMPTY_OBJECT={};var isStateId=function isStateId(str){return str[0]===STATE_IDENTIFIER;};var createDefaultOptions=function createDefaultOptions(){return{actions:{},guards:{},services:{},activities:{},delays:{}};};var validateArrayifiedTransitions=function validateArrayifiedTransitions(stateNode,event,transitions){var hasNonLastUnguardedTarget=transitions.slice(0,-1).some(function(transition){return!('cond'in transition)&&!('in'in transition)&&((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(transition.target)||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(transition.target));});var eventText=event===NULL_EVENT?'the transient event':\"event '\".concat(event,\"'\");(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!hasNonLastUnguardedTarget,\"One or more transitions for \".concat(eventText,\" on state '\").concat(stateNode.id,\"' are unreachable. \")+\"Make sure that the default transition is the last one defined.\");};var _StateNode=/*#__PURE__*/ /** @class */function(){function StateNode(/**\r\n   * The raw config used to create the machine.\r\n   */config,options,/**\r\n   * The initial extended state\r\n   */_context,// TODO: this is unsafe, but we're removing it in v5 anyway\n_stateInfo){if(_context===void 0){_context='context'in config?config.context:undefined;}var _this=this;var _a;this.config=config;this._context=_context;/**\r\n     * The order this state node appears. Corresponds to the implicit SCXML document order.\r\n     */this.order=-1;this.__xstatenode=true;this.__cache={events:undefined,relativeValue:new Map(),initialStateValue:undefined,initialState:undefined,on:undefined,transitions:undefined,candidates:{},delayedTransitions:undefined};this.idMap={};this.tags=[];this.options=Object.assign(createDefaultOptions(),options);this.parent=_stateInfo===null||_stateInfo===void 0?void 0:_stateInfo.parent;this.key=this.config.key||(_stateInfo===null||_stateInfo===void 0?void 0:_stateInfo.key)||this.config.id||'(machine)';this.machine=this.parent?this.parent.machine:this;this.path=this.parent?this.parent.path.concat(this.key):[];this.delimiter=this.config.delimiter||(this.parent?this.parent.delimiter:_constants_js__WEBPACK_IMPORTED_MODULE_1__.STATE_DELIMITER);this.id=this.config.id||(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([this.machine.key],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(this.path),false).join(this.delimiter);this.version=this.parent?this.parent.version:this.config.version;this.type=this.config.type||(this.config.parallel?'parallel':this.config.states&&Object.keys(this.config.states).length?'compound':this.config.history?'history':'atomic');this.schema=this.parent?this.machine.schema:(_a=this.config.schema)!==null&&_a!==void 0?_a:{};this.description=this.config.description;if(!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!('parallel'in this.config),\"The \\\"parallel\\\" property is deprecated and will be removed in version 4.1. \".concat(this.config.parallel?\"Replace with `type: 'parallel'`\":\"Use `type: '\".concat(this.type,\"'`\"),\" in the config for state node '\").concat(this.id,\"' instead.\"));}this.initial=this.config.initial;this.states=this.config.states?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.config.states,function(stateConfig,key){var _a;var stateNode=new StateNode(stateConfig,{},undefined,{parent:_this,key:key});Object.assign(_this.idMap,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a={},_a[stateNode.id]=stateNode,_a),stateNode.idMap));return stateNode;}):EMPTY_OBJECT;// Document order\nvar order=0;function dfs(stateNode){var e_1,_a;stateNode.order=order++;try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllChildren)(stateNode)),_c=_b.next();!_c.done;_c=_b.next()){var child=_c.value;dfs(child);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_1)throw e_1.error;}}}dfs(this);// History config\nthis.history=this.config.history===true?'shallow':this.config.history||false;this._transient=!!this.config.always||(!this.config.on?false:Array.isArray(this.config.on)?this.config.on.some(function(_a){var event=_a.event;return event===NULL_EVENT;}):NULL_EVENT in this.config.on);this.strict=!!this.config.strict;// TODO: deprecate (entry)\nthis.onEntry=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.entry||this.config.onEntry).map(function(action){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);});// TODO: deprecate (exit)\nthis.onExit=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.exit||this.config.onExit).map(function(action){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);});this.meta=this.config.meta;this.doneData=this.type==='final'?this.config.data:undefined;this.invoke=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.invoke).map(function(invokeConfig,i){var _a,_b;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig)){var invokeId=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id,i);_this.machine.options.services=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a={},_a[invokeId]=invokeConfig,_a),_this.machine.options.services);return(0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)({src:invokeId,id:invokeId});}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(invokeConfig.src)){var invokeId=invokeConfig.id||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id,i);return(0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},invokeConfig),{id:invokeId,src:invokeConfig.src}));}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig.src)||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(invokeConfig.src)){var invokeId=invokeConfig.id||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id,i);_this.machine.options.services=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_b={},_b[invokeId]=invokeConfig.src,_b),_this.machine.options.services);return(0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({id:invokeId},invokeConfig),{src:invokeId}));}else{var invokeSource=invokeConfig.src;return(0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({id:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id,i)},invokeConfig),{src:invokeSource}));}});this.activities=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.activities).concat(this.invoke).map(function(activity){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActivityDefinition)(activity);});this.transition=this.transition.bind(this);this.tags=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.tags);// TODO: this is the real fix for initialization once\n// state node getters are deprecated\n// if (!this.parent) {\n//   this._init();\n// }\n}StateNode.prototype._init=function(){if(this.__cache.transitions){return;}(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllStateNodes)(this).forEach(function(stateNode){return stateNode.on;});};/**\r\n   * Clones this state machine with custom options and context.\r\n   *\r\n   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.\r\n   * @param context Custom context (will override predefined context)\r\n   */StateNode.prototype.withConfig=function(options,context){var _a=this.options,actions=_a.actions,activities=_a.activities,guards=_a.guards,services=_a.services,delays=_a.delays;return new StateNode(this.config,{actions:(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},actions),options.actions),activities:(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},activities),options.activities),guards:(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},guards),options.guards),services:(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},services),options.services),delays:(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},delays),options.delays)},context!==null&&context!==void 0?context:this.context);};/**\r\n   * Clones this state machine with custom context.\r\n   *\r\n   * @param context Custom context (will override predefined context, not recursive)\r\n   */StateNode.prototype.withContext=function(context){return new StateNode(this.config,this.options,context);};Object.defineProperty(StateNode.prototype,\"context\",{get:function get(){return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(this._context)?this._context():this._context;},enumerable:false,configurable:true});Object.defineProperty(StateNode.prototype,\"definition\",{/**\r\n     * The well-structured state node definition.\r\n     */get:function get(){return{id:this.id,key:this.key,version:this.version,context:this.context,type:this.type,initial:this.initial,history:this.history,states:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.states,function(state){return state.definition;}),on:this.on,transitions:this.transitions,entry:this.onEntry,exit:this.onExit,activities:this.activities||[],meta:this.meta,order:this.order||-1,data:this.doneData,invoke:this.invoke,description:this.description,tags:this.tags};},enumerable:false,configurable:true});StateNode.prototype.toJSON=function(){return this.definition;};Object.defineProperty(StateNode.prototype,\"on\",{/**\r\n     * The mapping of events to transitions.\r\n     */get:function get(){if(this.__cache.on){return this.__cache.on;}var transitions=this.transitions;return this.__cache.on=transitions.reduce(function(map,transition){map[transition.eventType]=map[transition.eventType]||[];map[transition.eventType].push(transition);return map;},{});},enumerable:false,configurable:true});Object.defineProperty(StateNode.prototype,\"after\",{get:function get(){return this.__cache.delayedTransitions||(this.__cache.delayedTransitions=this.getDelayedTransitions(),this.__cache.delayedTransitions);},enumerable:false,configurable:true});Object.defineProperty(StateNode.prototype,\"transitions\",{/**\r\n     * All the transitions that can be taken from this state node.\r\n     */get:function get(){return this.__cache.transitions||(this.__cache.transitions=this.formatTransitions(),this.__cache.transitions);},enumerable:false,configurable:true});StateNode.prototype.getCandidates=function(eventName){if(this.__cache.candidates[eventName]){return this.__cache.candidates[eventName];}var _transient=eventName===NULL_EVENT;var candidates=this.transitions.filter(function(transition){var sameEventType=transition.eventType===eventName;// null events should only match against eventless transitions\nreturn _transient?sameEventType:sameEventType||transition.eventType===WILDCARD;});this.__cache.candidates[eventName]=candidates;return candidates;};/**\r\n   * All delayed transitions from the config.\r\n   */StateNode.prototype.getDelayedTransitions=function(){var _this=this;var afterConfig=this.config.after;if(!afterConfig){return[];}var mutateEntryExit=function mutateEntryExit(delay,i){var delayRef=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(delay)?\"\".concat(_this.id,\":delay[\").concat(i,\"]\"):delay;var eventType=(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.after)(delayRef,_this.id);_this.onEntry.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.send)(eventType,{delay:delay}));_this.onExit.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.cancel)(eventType));return eventType;};var delayedTransitions=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(afterConfig)?afterConfig.map(function(transition,i){var eventType=mutateEntryExit(transition.delay,i);return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},transition),{event:eventType});}):(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(afterConfig).map(function(delay,i){var configTransition=afterConfig[delay];var resolvedTransition=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(configTransition)?{target:configTransition}:configTransition;var resolvedDelay=!isNaN(+delay)?+delay:delay;var eventType=mutateEntryExit(resolvedDelay,i);return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(resolvedTransition).map(function(transition){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},transition),{event:eventType,delay:resolvedDelay});});}));return delayedTransitions.map(function(delayedTransition){var delay=delayedTransition.delay;return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},_this.formatTransition(delayedTransition)),{delay:delay});});};/**\r\n   * Returns the state nodes represented by the current state value.\r\n   *\r\n   * @param state The state value or State instance\r\n   */StateNode.prototype.getStateNodes=function(state){var _a;var _this=this;if(!state){return[];}var stateValue=state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State?state.value:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(state,this.delimiter);if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)){var initialStateValue=this.getStateNode(stateValue).initial;return initialStateValue!==undefined?this.getStateNodes((_a={},_a[stateValue]=initialStateValue,_a)):[this,this.states[stateValue]];}var subStateKeys=Object.keys(stateValue);var subStateNodes=[this];subStateNodes.push.apply(subStateNodes,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(subStateKeys.map(function(subStateKey){return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);}))),false));return subStateNodes;};/**\r\n   * Returns `true` if this state node explicitly handles the given event.\r\n   *\r\n   * @param event The event in question\r\n   */StateNode.prototype.handles=function(event){var eventType=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getEventType)(event);return this.events.includes(eventType);};/**\r\n   * Resolves the given `state` to a new `State` instance relative to this machine.\r\n   *\r\n   * This ensures that `.events` and `.nextEvents` represent the correct values.\r\n   *\r\n   * @param state The state to resolve\r\n   */StateNode.prototype.resolveState=function(state){var stateFromConfig=state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State?state:_State_js__WEBPACK_IMPORTED_MODULE_7__.State.create(state);var configuration=Array.from((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([],this.getStateNodes(stateFromConfig.value)));return new _State_js__WEBPACK_IMPORTED_MODULE_7__.State((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},stateFromConfig),{value:this.resolve(stateFromConfig.value),configuration:configuration,done:(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(configuration,this),tags:(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(configuration),machine:this.machine}));};StateNode.prototype.transitionLeafNode=function(stateValue,state,_event){var stateNode=this.getStateNode(stateValue);var next=stateNode.next(state,_event);if(!next||!next.transitions.length){return this.next(state,_event);}return next;};StateNode.prototype.transitionCompoundNode=function(stateValue,state,_event){var subStateKeys=Object.keys(stateValue);var stateNode=this.getStateNode(subStateKeys[0]);var next=stateNode._transition(stateValue[subStateKeys[0]],state,_event);if(!next||!next.transitions.length){return this.next(state,_event);}return next;};StateNode.prototype.transitionParallelNode=function(stateValue,state,_event){var e_2,_a;var transitionMap={};try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(stateValue)),_c=_b.next();!_c.done;_c=_b.next()){var subStateKey=_c.value;var subStateValue=stateValue[subStateKey];if(!subStateValue){continue;}var subStateNode=this.getStateNode(subStateKey);var next=subStateNode._transition(subStateValue,state,_event);if(next){transitionMap[subStateKey]=next;}}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_2)throw e_2.error;}}var stateTransitions=Object.keys(transitionMap).map(function(key){return transitionMap[key];});var enabledTransitions=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function(st){return st.transitions;}));var willTransition=stateTransitions.some(function(st){return st.transitions.length>0;});if(!willTransition){return this.next(state,_event);}var configuration=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function(key){return transitionMap[key].configuration;}));return{transitions:enabledTransitions,exitSet:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function(t){return t.exitSet;})),configuration:configuration,source:state,actions:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function(key){return transitionMap[key].actions;}))};};StateNode.prototype._transition=function(stateValue,state,_event){// leaf node\nif((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)){return this.transitionLeafNode(stateValue,state,_event);}// hierarchical node\nif(Object.keys(stateValue).length===1){return this.transitionCompoundNode(stateValue,state,_event);}// orthogonal node\nreturn this.transitionParallelNode(stateValue,state,_event);};StateNode.prototype.getTransitionData=function(state,event){return this._transition(state.value,state,(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event));};StateNode.prototype.next=function(state,_event){var e_3,_a;var _this=this;var eventName=_event.name;var actions=[];var nextStateNodes=[];var selectedTransition;try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(this.getCandidates(eventName)),_c=_b.next();!_c.done;_c=_b.next()){var candidate=_c.value;var cond=candidate.cond,stateIn=candidate[\"in\"];var resolvedContext=state.context;var isInState=stateIn?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateIn)&&isStateId(stateIn)?// Check if in state by ID\nstate.matches((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(this.getStateNodeById(stateIn).path,this.delimiter)):// Check if in state by relative grandparent\n(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(stateIn,this.delimiter),(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.path)(this.path.slice(0,-2))(state.value)):true;var guardPassed=false;try{guardPassed=!cond||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.evaluateGuard)(this.machine,cond,resolvedContext,_event,state);}catch(err){throw new Error(\"Unable to evaluate guard '\".concat(cond.name||cond.type,\"' in transition for event '\").concat(eventName,\"' in state node '\").concat(this.id,\"':\\n\").concat(err.message));}if(guardPassed&&isInState){if(candidate.target!==undefined){nextStateNodes=candidate.target;}actions.push.apply(actions,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(candidate.actions),false));selectedTransition=candidate;break;}}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_3)throw e_3.error;}}if(!selectedTransition){return undefined;}if(!nextStateNodes.length){return{transitions:[selectedTransition],exitSet:[],configuration:state.value?[this]:[],source:state,actions:actions};}var allNextStateNodes=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function(stateNode){return _this.getRelativeStateNodes(stateNode,state.historyValue);}));var isInternal=!!selectedTransition.internal;return{transitions:[selectedTransition],exitSet:isInternal?[]:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function(targetNode){return _this.getPotentiallyReenteringNodes(targetNode);})),configuration:allNextStateNodes,source:state,actions:actions};};// even though the name of this function mentions reentry nodes\n// we are pushing its result into `exitSet`\n// that's because what we exit might be reentered (it's an invariant of reentrancy)\nStateNode.prototype.getPotentiallyReenteringNodes=function(targetNode){if(this.order<targetNode.order){return[this];}var nodes=[];var marker=this;var possibleAncestor=targetNode;while(marker&&marker!==possibleAncestor){nodes.push(marker);marker=marker.parent;}if(marker!==possibleAncestor){// we never got to `possibleAncestor`, therefore the initial `marker` \"escapes\" it\n// it's in a different part of the tree so no states will be reentered for such an external transition\nreturn[];}nodes.push(possibleAncestor);return nodes;};StateNode.prototype.getActions=function(resolvedConfig,isDone,transition,currentContext,_event,prevState,predictableExec){var e_4,_a,e_5,_b;var _this=this;var prevConfig=prevState?(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([],this.getStateNodes(prevState.value)):[];var entrySet=new Set();try{for(var _c=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Array.from(resolvedConfig).sort(function(a,b){return a.order-b.order;})),_d=_c.next();!_d.done;_d=_c.next()){var sn=_d.value;if(!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(prevConfig,sn)||(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet,sn)||sn.parent&&entrySet.has(sn.parent)){entrySet.add(sn);}}}catch(e_4_1){e_4={error:e_4_1};}finally{try{if(_d&&!_d.done&&(_a=_c[\"return\"]))_a.call(_c);}finally{if(e_4)throw e_4.error;}}try{for(var prevConfig_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(prevConfig),prevConfig_1_1=prevConfig_1.next();!prevConfig_1_1.done;prevConfig_1_1=prevConfig_1.next()){var sn=prevConfig_1_1.value;if(!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(resolvedConfig,sn)||(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet,sn.parent)){transition.exitSet.push(sn);}}}catch(e_5_1){e_5={error:e_5_1};}finally{try{if(prevConfig_1_1&&!prevConfig_1_1.done&&(_b=prevConfig_1[\"return\"]))_b.call(prevConfig_1);}finally{if(e_5)throw e_5.error;}}transition.exitSet.sort(function(a,b){return b.order-a.order;});var entryStates=Array.from(entrySet).sort(function(a,b){return a.order-b.order;});var exitStates=new Set(transition.exitSet);var doneEvents=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(entryStates.map(function(sn){var events=[];if(sn.type!=='final'){return events;}var parent=sn.parent;if(!parent.parent){return events;}events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(sn.id,sn.doneData),// TODO: deprecate - final states should not emit done events for their own state.\n(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(parent.id,sn.doneData?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(sn.doneData,currentContext,_event):undefined));var grandparent=parent.parent;if(grandparent.type==='parallel'){if((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getChildren)(grandparent).every(function(parentNode){return(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(transition.configuration,parentNode);})){events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(grandparent.id));}}return events;}));var entryActions=entryStates.map(function(stateNode){var entryActions=stateNode.onEntry;var invokeActions=stateNode.activities.map(function(activity){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.start)(activity);});return{type:'entry',actions:(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(predictableExec?(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions),false),(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions),false):(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions),false),(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions),false),_this.machine.options.actions)};}).concat({type:'state_done',actions:doneEvents.map(function(event){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.raise)(event);})});var exitActions=Array.from(exitStates).map(function(stateNode){return{type:'exit',actions:(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.onExit),false),(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.activities.map(function(activity){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.stop)(activity);})),false),_this.machine.options.actions)};});var actions=exitActions.concat({type:'transition',actions:(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(transition.actions,this.machine.options.actions)}).concat(entryActions);if(isDone){var stopActions=(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig),false).sort(function(a,b){return b.order-a.order;}).map(function(stateNode){return stateNode.onExit;})),this.machine.options.actions).filter(function(action){return!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);});return actions.concat({type:'stop',actions:stopActions});}return actions;};/**\r\n   * Determines the next state given the current `state` and sent `event`.\r\n   *\r\n   * @param state The current State instance or state value\r\n   * @param event The event that was sent at the current state\r\n   * @param context The current context (extended state) of the current state\r\n   */StateNode.prototype.transition=function(state,event,context,exec){if(state===void 0){state=this.initialState;}var _event=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event);var currentState;if(state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State){currentState=context===undefined?state:this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(state,context));}else{var resolvedStateValue=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(state)?this.resolve((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.getResolvedPath(state))):this.resolve(state);var resolvedContext=context!==null&&context!==void 0?context:this.machine.context;currentState=this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(resolvedStateValue,resolvedContext));}if(!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION&&_event.name===WILDCARD){throw new Error(\"An event cannot have the wildcard type ('\".concat(WILDCARD,\"')\"));}if(this.strict){if(!this.events.includes(_event.name)&&!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBuiltInEvent)(_event.name)){throw new Error(\"Machine '\".concat(this.id,\"' does not accept event '\").concat(_event.name,\"'\"));}}var stateTransition=this._transition(currentState.value,currentState,_event)||{transitions:[],configuration:[],exitSet:[],source:currentState,actions:[]};var prevConfig=(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([],this.getStateNodes(currentState.value));var resolvedConfig=stateTransition.configuration.length?(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)(prevConfig,stateTransition.configuration):prevConfig;stateTransition.configuration=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig),false);return this.resolveTransition(stateTransition,currentState,currentState.context,exec,_event);};StateNode.prototype.resolveRaisedTransition=function(state,_event,originalEvent,predictableExec){var _a;var currentActions=state.actions;state=this.transition(state,_event,undefined,predictableExec);// Save original event to state\n// TODO: this should be the raised event! Delete in V5 (breaking)\nstate._event=originalEvent;state.event=originalEvent.data;(_a=state.actions).unshift.apply(_a,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(currentActions),false));return state;};StateNode.prototype.resolveTransition=function(stateTransition,currentState,context,predictableExec,_event){var e_6,_a,e_7,_b;var _this=this;if(_event===void 0){_event=_actions_js__WEBPACK_IMPORTED_MODULE_5__.initEvent;}var configuration=stateTransition.configuration;// Transition will \"apply\" if:\n// - this is the initial state (there is no current state)\n// - OR there are transitions\nvar willTransition=!currentState||stateTransition.transitions.length>0;var resolvedConfiguration=willTransition?stateTransition.configuration:currentState?currentState.configuration:[];var isDone=(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(resolvedConfiguration,this);var resolvedStateValue=willTransition?(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getValue)(this.machine,configuration):undefined;var historyValue=currentState?currentState.historyValue?currentState.historyValue:stateTransition.source?this.machine.historyValue(currentState.value):undefined:undefined;var actionBlocks=this.getActions(new Set(resolvedConfiguration),isDone,stateTransition,context,_event,currentState,predictableExec);var activities=currentState?(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},currentState.activities):{};try{for(var actionBlocks_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks),actionBlocks_1_1=actionBlocks_1.next();!actionBlocks_1_1.done;actionBlocks_1_1=actionBlocks_1.next()){var block=actionBlocks_1_1.value;try{for(var _c=(e_7=void 0,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions)),_d=_c.next();!_d.done;_d=_c.next()){var action=_d.value;if(action.type===_actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start){activities[action.activity.id||action.activity.type]=action;}else if(action.type===_actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.stop){activities[action.activity.id||action.activity.type]=false;}}}catch(e_7_1){e_7={error:e_7_1};}finally{try{if(_d&&!_d.done&&(_b=_c[\"return\"]))_b.call(_c);}finally{if(e_7)throw e_7.error;}}}}catch(e_6_1){e_6={error:e_6_1};}finally{try{if(actionBlocks_1_1&&!actionBlocks_1_1.done&&(_a=actionBlocks_1[\"return\"]))_a.call(actionBlocks_1);}finally{if(e_6)throw e_6.error;}}var _e=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.resolveActions)(this,currentState,context,_event,actionBlocks,predictableExec,this.machine.config.predictableActionArguments||this.machine.config.preserveActionOrder),2),resolvedActions=_e[0],updatedContext=_e[1];var _f=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.partition)(resolvedActions,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction),2),raisedEvents=_f[0],nonRaisedActions=_f[1];var invokeActions=resolvedActions.filter(function(action){var _a;return action.type===_actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start&&((_a=action.activity)===null||_a===void 0?void 0:_a.type)===_actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.invoke;});var children=invokeActions.reduce(function(acc,action){acc[action.activity.id]=(0,_Actor_js__WEBPACK_IMPORTED_MODULE_9__.createInvocableActor)(action.activity,_this.machine,updatedContext,_event);return acc;},currentState?(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},currentState.children):{});var nextState=new _State_js__WEBPACK_IMPORTED_MODULE_7__.State({value:resolvedStateValue||currentState.value,context:updatedContext,_event:_event,// Persist _sessionid between states\n_sessionid:currentState?currentState._sessionid:null,historyValue:resolvedStateValue?historyValue?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.updateHistoryValue)(historyValue,resolvedStateValue):undefined:currentState?currentState.historyValue:undefined,history:!resolvedStateValue||stateTransition.source?currentState:undefined,actions:resolvedStateValue?nonRaisedActions:[],activities:resolvedStateValue?activities:currentState?currentState.activities:{},events:[],configuration:resolvedConfiguration,transitions:stateTransition.transitions,children:children,done:isDone,tags:(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(resolvedConfiguration),machine:this});var didUpdateContext=context!==updatedContext;nextState.changed=_event.name===_actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.update||didUpdateContext;// Dispose of penultimate histories to prevent memory leaks\nvar history=nextState.history;if(history){delete history.history;}// There are transient transitions if the machine is not in a final state\n// and if some of the state nodes have transient (\"always\") transitions.\nvar hasAlwaysTransitions=!isDone&&(this._transient||configuration.some(function(stateNode){return stateNode._transient;}));// If there are no enabled transitions, check if there are transient transitions.\n// If there are transient transitions, continue checking for more transitions\n// because an transient transition should be triggered even if there are no\n// enabled transitions.\n//\n// If we're already working on an transient transition then stop to prevent an infinite loop.\n//\n// Otherwise, if there are no enabled nor transient transitions, we are done.\nif(!willTransition&&(!hasAlwaysTransitions||_event.name===NULL_EVENT)){return nextState;}var maybeNextState=nextState;if(!isDone){if(hasAlwaysTransitions){maybeNextState=this.resolveRaisedTransition(maybeNextState,{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.nullEvent},_event,predictableExec);}while(raisedEvents.length){var raisedEvent=raisedEvents.shift();maybeNextState=this.resolveRaisedTransition(maybeNextState,raisedEvent._event,_event,predictableExec);}}// Detect if state changed\nvar changed=maybeNextState.changed||(history?!!maybeNextState.actions.length||didUpdateContext||_typeof2(history.value)!==_typeof2(maybeNextState.value)||!(0,_State_js__WEBPACK_IMPORTED_MODULE_7__.stateValuesEqual)(maybeNextState.value,history.value):undefined);maybeNextState.changed=changed;// Preserve original history after raised events\nmaybeNextState.history=history;return maybeNextState;};/**\r\n   * Returns the child state node from its relative `stateKey`, or throws.\r\n   */StateNode.prototype.getStateNode=function(stateKey){if(isStateId(stateKey)){return this.machine.getStateNodeById(stateKey);}if(!this.states){throw new Error(\"Unable to retrieve child state '\".concat(stateKey,\"' from '\").concat(this.id,\"'; no child states exist.\"));}var result=this.states[stateKey];if(!result){throw new Error(\"Child state '\".concat(stateKey,\"' does not exist on '\").concat(this.id,\"'\"));}return result;};/**\r\n   * Returns the state node with the given `stateId`, or throws.\r\n   *\r\n   * @param stateId The state ID. The prefix \"#\" is removed.\r\n   */StateNode.prototype.getStateNodeById=function(stateId){var resolvedStateId=isStateId(stateId)?stateId.slice(STATE_IDENTIFIER.length):stateId;if(resolvedStateId===this.id){return this;}var stateNode=this.machine.idMap[resolvedStateId];if(!stateNode){throw new Error(\"Child state node '#\".concat(resolvedStateId,\"' does not exist on machine '\").concat(this.id,\"'\"));}return stateNode;};/**\r\n   * Returns the relative state node from the given `statePath`, or throws.\r\n   *\r\n   * @param statePath The string or string array relative path to the state node.\r\n   */StateNode.prototype.getStateNodeByPath=function(statePath){if(typeof statePath==='string'&&isStateId(statePath)){try{return this.getStateNodeById(statePath.slice(1));}catch(e){// try individual paths\n// throw e;\n}}var arrayStatePath=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(statePath,this.delimiter).slice();var currentStateNode=this;while(arrayStatePath.length){var key=arrayStatePath.shift();if(!key.length){break;}currentStateNode=currentStateNode.getStateNode(key);}return currentStateNode;};/**\r\n   * Resolves a partial state value with its full representation in this machine.\r\n   *\r\n   * @param stateValue The partial state value to resolve.\r\n   */StateNode.prototype.resolve=function(stateValue){var _a;var _this=this;if(!stateValue){return this.initialStateValue||EMPTY_OBJECT;// TODO: type-specific properties\n}switch(this.type){case'parallel':return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.initialStateValue,function(subStateValue,subStateKey){return subStateValue?_this.getStateNode(subStateKey).resolve(stateValue[subStateKey]||subStateValue):EMPTY_OBJECT;});case'compound':if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)){var subStateNode=this.getStateNode(stateValue);if(subStateNode.type==='parallel'||subStateNode.type==='compound'){return _a={},_a[stateValue]=subStateNode.initialStateValue,_a;}return stateValue;}if(!Object.keys(stateValue).length){return this.initialStateValue||{};}return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(stateValue,function(subStateValue,subStateKey){return subStateValue?_this.getStateNode(subStateKey).resolve(subStateValue):EMPTY_OBJECT;});default:return stateValue||EMPTY_OBJECT;}};StateNode.prototype.getResolvedPath=function(stateIdentifier){if(isStateId(stateIdentifier)){var stateNode=this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];if(!stateNode){throw new Error(\"Unable to find state node '\".concat(stateIdentifier,\"'\"));}return stateNode.path;}return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(stateIdentifier,this.delimiter);};Object.defineProperty(StateNode.prototype,\"initialStateValue\",{get:function get(){var _a;if(this.__cache.initialStateValue){return this.__cache.initialStateValue;}var initialStateValue;if(this.type==='parallel'){initialStateValue=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states,function(state){return state.initialStateValue||EMPTY_OBJECT;},function(stateNode){return!(stateNode.type==='history');});}else if(this.initial!==undefined){if(!this.states[this.initial]){throw new Error(\"Initial state '\".concat(this.initial,\"' not found on '\").concat(this.key,\"'\"));}initialStateValue=(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this.states[this.initial])?this.initial:(_a={},_a[this.initial]=this.states[this.initial].initialStateValue,_a);}else{// The finite state value of a machine without child states is just an empty object\ninitialStateValue={};}this.__cache.initialStateValue=initialStateValue;return this.__cache.initialStateValue;},enumerable:false,configurable:true});StateNode.prototype.getInitialState=function(stateValue,context){this._init();// TODO: this should be in the constructor (see note in constructor)\nvar configuration=this.getStateNodes(stateValue);return this.resolveTransition({configuration:configuration,exitSet:[],transitions:[],source:undefined,actions:[]},undefined,context!==null&&context!==void 0?context:this.machine.context,undefined);};Object.defineProperty(StateNode.prototype,\"initialState\",{/**\r\n     * The initial State instance, which includes all actions to be executed from\r\n     * entering the initial state.\r\n     */get:function get(){var initialStateValue=this.initialStateValue;if(!initialStateValue){throw new Error(\"Cannot retrieve initial state from simple state '\".concat(this.id,\"'.\"));}return this.getInitialState(initialStateValue);},enumerable:false,configurable:true});Object.defineProperty(StateNode.prototype,\"target\",{/**\r\n     * The target state value of the history state node, if it exists. This represents the\r\n     * default state value to transition to if no history value exists yet.\r\n     */get:function get(){var target;if(this.type==='history'){var historyConfig=this.config;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(historyConfig.target)){target=isStateId(historyConfig.target)?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length-1)):historyConfig.target;}else{target=historyConfig.target;}}return target;},enumerable:false,configurable:true});/**\r\n   * Returns the leaf nodes from a state path relative to this state node.\r\n   *\r\n   * @param relativeStateId The relative state path to retrieve the state nodes\r\n   * @param history The previous state to retrieve history\r\n   * @param resolve Whether state nodes should resolve to initial child state nodes\r\n   */StateNode.prototype.getRelativeStateNodes=function(relativeStateId,historyValue,resolve){if(resolve===void 0){resolve=true;}return resolve?relativeStateId.type==='history'?relativeStateId.resolveHistory(historyValue):relativeStateId.initialStateNodes:[relativeStateId];};Object.defineProperty(StateNode.prototype,\"initialStateNodes\",{get:function get(){var _this=this;if((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this)){return[this];}// Case when state node is compound but no initial state is defined\nif(this.type==='compound'&&!this.initial){if(!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"Compound state node '\".concat(this.id,\"' has no initial state.\"));}return[this];}var initialStateNodePaths=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(this.initialStateValue);return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(initialStateNodePaths.map(function(initialPath){return _this.getFromRelativePath(initialPath);}));},enumerable:false,configurable:true});/**\r\n   * Retrieves state nodes from a relative path to this state node.\r\n   *\r\n   * @param relativePath The relative path from this state node\r\n   * @param historyValue\r\n   */StateNode.prototype.getFromRelativePath=function(relativePath){if(!relativePath.length){return[this];}var _a=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(relativePath),stateKey=_a[0],childStatePath=_a.slice(1);if(!this.states){throw new Error(\"Cannot retrieve subPath '\".concat(stateKey,\"' from node with no states\"));}var childStateNode=this.getStateNode(stateKey);if(childStateNode.type==='history'){return childStateNode.resolveHistory();}if(!this.states[stateKey]){throw new Error(\"Child state '\".concat(stateKey,\"' does not exist on '\").concat(this.id,\"'\"));}return this.states[stateKey].getFromRelativePath(childStatePath);};StateNode.prototype.historyValue=function(relativeStateValue){if(!Object.keys(this.states).length){return undefined;}return{current:relativeStateValue||this.initialStateValue,states:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states,function(stateNode,key){if(!relativeStateValue){return stateNode.historyValue();}var subStateValue=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(relativeStateValue)?undefined:relativeStateValue[key];return stateNode.historyValue(subStateValue||stateNode.initialStateValue);},function(stateNode){return!stateNode.history;})};};/**\r\n   * Resolves to the historical value(s) of the parent state node,\r\n   * represented by state nodes.\r\n   *\r\n   * @param historyValue\r\n   */StateNode.prototype.resolveHistory=function(historyValue){var _this=this;if(this.type!=='history'){return[this];}var parent=this.parent;if(!historyValue){var historyTarget=this.target;return historyTarget?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(historyTarget).map(function(relativeChildPath){return parent.getFromRelativePath(relativeChildPath);})):parent.initialStateNodes;}var subHistoryValue=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.nestedPath)(parent.path,'states')(historyValue).current;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(subHistoryValue)){return[parent.getStateNode(subHistoryValue)];}return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(subHistoryValue).map(function(subStatePath){return _this.history==='deep'?parent.getFromRelativePath(subStatePath):[parent.states[subStatePath[0]]];}));};Object.defineProperty(StateNode.prototype,\"stateIds\",{/**\r\n     * All the state node IDs of this state node and its descendant state nodes.\r\n     */get:function get(){var _this=this;var childStateIds=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(this.states).map(function(stateKey){return _this.states[stateKey].stateIds;}));return[this.id].concat(childStateIds);},enumerable:false,configurable:true});Object.defineProperty(StateNode.prototype,\"events\",{/**\r\n     * All the event types accepted by this state node and its descendants.\r\n     */get:function get(){var e_8,_a,e_9,_b;if(this.__cache.events){return this.__cache.events;}var states=this.states;var events=new Set(this.ownEvents);if(states){try{for(var _c=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(states)),_d=_c.next();!_d.done;_d=_c.next()){var stateId=_d.value;var state=states[stateId];if(state.states){try{for(var _e=(e_9=void 0,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(state.events)),_f=_e.next();!_f.done;_f=_e.next()){var event_1=_f.value;events.add(\"\".concat(event_1));}}catch(e_9_1){e_9={error:e_9_1};}finally{try{if(_f&&!_f.done&&(_b=_e[\"return\"]))_b.call(_e);}finally{if(e_9)throw e_9.error;}}}}}catch(e_8_1){e_8={error:e_8_1};}finally{try{if(_d&&!_d.done&&(_a=_c[\"return\"]))_a.call(_c);}finally{if(e_8)throw e_8.error;}}}return this.__cache.events=Array.from(events);},enumerable:false,configurable:true});Object.defineProperty(StateNode.prototype,\"ownEvents\",{/**\r\n     * All the events that have transitions directly from this state node.\r\n     *\r\n     * Excludes any inert events.\r\n     */get:function get(){var events=new Set(this.transitions.filter(function(transition){return!(!transition.target&&!transition.actions.length&&transition.internal);}).map(function(transition){return transition.eventType;}));return Array.from(events);},enumerable:false,configurable:true});StateNode.prototype.resolveTarget=function(_target){var _this=this;if(_target===undefined){// an undefined target signals that the state node should not transition from that state when receiving that event\nreturn undefined;}return _target.map(function(target){if(!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(target)){return target;}var isInternalTarget=target[0]===_this.delimiter;// If internal target is defined on machine,\n// do not include machine key on target\nif(isInternalTarget&&!_this.parent){return _this.getStateNodeByPath(target.slice(1));}var resolvedTarget=isInternalTarget?_this.key+target:target;if(_this.parent){try{var targetStateNode=_this.parent.getStateNodeByPath(resolvedTarget);return targetStateNode;}catch(err){throw new Error(\"Invalid transition definition for state node '\".concat(_this.id,\"':\\n\").concat(err.message));}}else{return _this.getStateNodeByPath(resolvedTarget);}});};StateNode.prototype.formatTransition=function(transitionConfig){var _this=this;var normalizedTarget=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.normalizeTarget)(transitionConfig.target);var internal='internal'in transitionConfig?transitionConfig.internal:normalizedTarget?normalizedTarget.some(function(_target){return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(_target)&&_target[0]===_this.delimiter;}):true;var guards=this.machine.options.guards;var target=this.resolveTarget(normalizedTarget);var transition=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},transitionConfig),{actions:(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig.actions)),cond:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toGuard)(transitionConfig.cond,guards),target:target,source:this,internal:internal,eventType:transitionConfig.event,toJSON:function toJSON(){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},transition),{target:transition.target?transition.target.map(function(t){return\"#\".concat(t.id);}):undefined,source:\"#\".concat(_this.id)});}});return transition;};StateNode.prototype.formatTransitions=function(){var e_10,_a;var _this=this;var onConfig;if(!this.config.on){onConfig=[];}else if(Array.isArray(this.config.on)){onConfig=this.config.on;}else{var _b=this.config.on,_c=WILDCARD,_d=_b[_c],wildcardConfigs=_d===void 0?[]:_d,strictTransitionConfigs_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__rest)(_b,[_typeof2(_c)===\"symbol\"?_c:_c+\"\"]);onConfig=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(strictTransitionConfigs_1).map(function(key){if(!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION&&key===NULL_EVENT){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. \"+\"Please check the `on` configuration for \\\"#\".concat(_this.id,\"\\\".\"));}var transitionConfigArray=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(key,strictTransitionConfigs_1[key]);if(!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION){validateArrayifiedTransitions(_this,key,transitionConfigArray);}return transitionConfigArray;}).concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(WILDCARD,wildcardConfigs)));}var eventlessConfig=this.config.always?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)('',this.config.always):[];var doneConfig=this.config.onDone?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(this.id)),this.config.onDone):[];if(!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!(this.config.onDone&&!this.parent),\"Root nodes cannot have an \\\".onDone\\\" transition. Please check the config of \\\"\".concat(this.id,\"\\\".\"));}var invokeConfig=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(this.invoke.map(function(invokeDef){var settleTransitions=[];if(invokeDef.onDone){settleTransitions.push.apply(settleTransitions,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.doneInvoke)(invokeDef.id)),invokeDef.onDone)),false));}if(invokeDef.onError){settleTransitions.push.apply(settleTransitions,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.error)(invokeDef.id)),invokeDef.onError)),false));}return settleTransitions;}));var delayedTransitions=this.after;var formattedTransitions=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(doneConfig),false),(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeConfig),false),(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(onConfig),false),(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(eventlessConfig),false).map(function(transitionConfig){return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig).map(function(transition){return _this.formatTransition(transition);});}));try{for(var delayedTransitions_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(delayedTransitions),delayedTransitions_1_1=delayedTransitions_1.next();!delayedTransitions_1_1.done;delayedTransitions_1_1=delayedTransitions_1.next()){var delayedTransition=delayedTransitions_1_1.value;formattedTransitions.push(delayedTransition);}}catch(e_10_1){e_10={error:e_10_1};}finally{try{if(delayedTransitions_1_1&&!delayedTransitions_1_1.done&&(_a=delayedTransitions_1[\"return\"]))_a.call(delayedTransitions_1);}finally{if(e_10)throw e_10.error;}}return formattedTransitions;};return StateNode;}();/***/},/***/\"./node_modules/xstate/es/_virtual/_tslib.js\":/*!***************************************************!*\\\n  !*** ./node_modules/xstate/es/_virtual/_tslib.js ***!\n  \\***************************************************/ /***/function node_modulesXstateEs_virtual_tslibJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */__assign:function __assign(){return(/* binding */_assign2);},/* harmony export */__read:function __read(){return(/* binding */_read);},/* harmony export */__rest:function __rest(){return(/* binding */_rest);},/* harmony export */__spreadArray:function __spreadArray(){return(/* binding */_spreadArray);},/* harmony export */__values:function __values(){return(/* binding */_values);}/* harmony export */});/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */var _assign2=function _assign(){_assign2=Object.assign||function __assign(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p];}return t;};return _assign2.apply(this,arguments);};function _rest(s,e){var t={};for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0)t[p]=s[p];if(s!=null&&typeof Object.getOwnPropertySymbols===\"function\")for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++){if(e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i]))t[p[i]]=s[p[i]];}return t;}function _values(o){var s=typeof Symbol===\"function\"&&Symbol.iterator,m=s&&o[s],i=0;if(m)return m.call(o);if(o&&typeof o.length===\"number\")return{next:function next(){if(o&&i>=o.length)o=void 0;return{value:o&&o[i++],done:!o};}};throw new TypeError(s?\"Object is not iterable.\":\"Symbol.iterator is not defined.\");}function _read(o,n){var m=typeof Symbol===\"function\"&&o[Symbol.iterator];if(!m)return o;var i=m.call(o),r,ar=[],e;try{while((n===void 0||n-->0)&&!(r=i.next()).done)ar.push(r.value);}catch(error){e={error:error};}finally{try{if(r&&!r.done&&(m=i[\"return\"]))m.call(i);}finally{if(e)throw e.error;}}return ar;}function _spreadArray(to,from,pack){if(pack||arguments.length===2)for(var i=0,l=from.length,ar;i<l;i++){if(ar||!(i in from)){if(!ar)ar=Array.prototype.slice.call(from,0,i);ar[i]=from[i];}}return to.concat(ar||Array.prototype.slice.call(from));}/***/},/***/\"./node_modules/xstate/es/actionTypes.js\":/*!***********************************************!*\\\n  !*** ./node_modules/xstate/es/actionTypes.js ***!\n  \\***********************************************/ /***/function node_modulesXstateEsActionTypesJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */after:function after(){return(/* binding */_after);},/* harmony export */assign:function assign(){return(/* binding */_assign3);},/* harmony export */cancel:function cancel(){return(/* binding */_cancel);},/* harmony export */choose:function choose(){return(/* binding */_choose);},/* harmony export */doneState:function doneState(){return(/* binding */_doneState);},/* harmony export */error:function error(){return(/* binding */_error);},/* harmony export */errorExecution:function errorExecution(){return(/* binding */_errorExecution);},/* harmony export */errorPlatform:function errorPlatform(){return(/* binding */_errorPlatform);},/* harmony export */init:function init(){return(/* binding */_init);},/* harmony export */invoke:function invoke(){return(/* binding */_invoke);},/* harmony export */log:function log(){return(/* binding */_log);},/* harmony export */nullEvent:function nullEvent(){return(/* binding */_nullEvent);},/* harmony export */pure:function pure(){return(/* binding */_pure);},/* harmony export */raise:function raise(){return(/* binding */_raise);},/* harmony export */send:function send(){return(/* binding */_send);},/* harmony export */start:function start(){return(/* binding */_start);},/* harmony export */stop:function stop(){return(/* binding */_stop);},/* harmony export */update:function update(){return(/* binding */_update);}/* harmony export */});/* harmony import */var _types_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./types.js */\"./node_modules/xstate/es/types.js\");var _start=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Start;var _stop=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Stop;var _raise=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Raise;var _send=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Send;var _cancel=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Cancel;var _nullEvent=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.NullEvent;var _assign3=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Assign;var _after=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.After;var _doneState=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.DoneState;var _log=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Log;var _init=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Init;var _invoke=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Invoke;var _errorExecution=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorExecution;var _errorPlatform=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorPlatform;var _error=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorCustom;var _update=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Update;var _choose=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Choose;var _pure=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Pure;/***/},/***/\"./node_modules/xstate/es/actions.js\":/*!*******************************************!*\\\n  !*** ./node_modules/xstate/es/actions.js ***!\n  \\*******************************************/ /***/function node_modulesXstateEsActionsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */actionTypes:function actionTypes(){return(/* reexport module object */_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__);},/* harmony export */after:function after(){return(/* binding */_after2);},/* harmony export */assign:function assign(){return(/* binding */_assign4);},/* harmony export */cancel:function cancel(){return(/* binding */_cancel2);},/* harmony export */choose:function choose(){return(/* binding */_choose2);},/* harmony export */done:function done(){return(/* binding */_done);},/* harmony export */doneInvoke:function doneInvoke(){return(/* binding */_doneInvoke);},/* harmony export */error:function error(){return(/* binding */_error2);},/* harmony export */escalate:function escalate(){return(/* binding */_escalate);},/* harmony export */forwardTo:function forwardTo(){return(/* binding */_forwardTo);},/* harmony export */getActionFunction:function getActionFunction(){return(/* binding */_getActionFunction);},/* harmony export */initEvent:function initEvent(){return(/* binding */_initEvent);},/* harmony export */isActionObject:function isActionObject(){return(/* binding */_isActionObject);},/* harmony export */log:function log(){return(/* binding */_log2);},/* harmony export */pure:function pure(){return(/* binding */_pure2);},/* harmony export */raise:function raise(){return(/* binding */_raise2);},/* harmony export */resolveActions:function resolveActions(){return(/* binding */_resolveActions);},/* harmony export */resolveLog:function resolveLog(){return(/* binding */_resolveLog);},/* harmony export */resolveRaise:function resolveRaise(){return(/* binding */_resolveRaise);},/* harmony export */resolveSend:function resolveSend(){return(/* binding */_resolveSend);},/* harmony export */resolveStop:function resolveStop(){return(/* binding */_resolveStop);},/* harmony export */respond:function respond(){return(/* binding */_respond);},/* harmony export */send:function send(){return(/* binding */_send2);},/* harmony export */sendParent:function sendParent(){return(/* binding */_sendParent);},/* harmony export */sendTo:function sendTo(){return(/* binding */_sendTo);},/* harmony export */sendUpdate:function sendUpdate(){return(/* binding */_sendUpdate);},/* harmony export */start:function start(){return(/* binding */_start2);},/* harmony export */stop:function stop(){return(/* binding */_stop2);},/* harmony export */toActionObject:function toActionObject(){return(/* binding */_toActionObject);},/* harmony export */toActionObjects:function toActionObjects(){return(/* binding */_toActionObjects);},/* harmony export */toActivityDefinition:function toActivityDefinition(){return(/* binding */_toActivityDefinition);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _types_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(/*! ./types.js */\"./node_modules/xstate/es/types.js\");/* harmony import */var _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./actionTypes.js */\"./node_modules/xstate/es/actionTypes.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");var _initEvent=/*#__PURE__*/(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)({type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.init});function _getActionFunction(actionType,actionFunctionMap){return actionFunctionMap?actionFunctionMap[actionType]||undefined:undefined;}function _toActionObject(action,actionFunctionMap){var actionObject;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action)||typeof action==='number'){var exec=_getActionFunction(action,actionFunctionMap);if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)){actionObject={type:action,exec:exec};}else if(exec){actionObject=exec;}else{actionObject={type:action,exec:undefined};}}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action)){actionObject={// Convert action to string if unnamed\ntype:action.name||action.toString(),exec:action};}else{var exec=_getActionFunction(action.type,actionFunctionMap);if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)){actionObject=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},action),{exec:exec});}else if(exec){var actionType=exec.type||action.type;actionObject=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},exec),action),{type:actionType});}else{actionObject=action;}}return actionObject;}var _toActionObjects=function _toActionObjects(action,actionFunctionMap){if(!action){return[];}var actions=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(action)?action:[action];return actions.map(function(subAction){return _toActionObject(subAction,actionFunctionMap);});};function _toActivityDefinition(action){var actionObject=_toActionObject(action);return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({id:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action)?action:actionObject.id},actionObject),{type:actionObject.type});}/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */function _raise2(event,options){return{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,event:typeof event==='function'?event:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),delay:options?options.delay:undefined,id:options===null||options===void 0?void 0:options.id};}function _resolveRaise(action,ctx,_event,delaysMap){var meta={_event:_event};var resolvedEvent=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event)?action.event(ctx,_event.data,meta):action.event);var resolvedDelay;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)){var configDelay=delaysMap&&delaysMap[action.delay];resolvedDelay=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay)?configDelay(ctx,_event.data,meta):configDelay;}else{resolvedDelay=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay)?action.delay(ctx,_event.data,meta):action.delay;}return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},action),{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,_event:resolvedEvent,delay:resolvedDelay});}/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @deprecated Use the `sendTo(...)` action creator instead.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */function _send2(event,options){return{to:options?options.to:undefined,type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send,event:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event)?event:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),delay:options?options.delay:undefined,// TODO: don't auto-generate IDs here like that\n// there is too big chance of the ID collision\nid:options&&options.id!==undefined?options.id:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event)?event.name:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getEventType)(event)};}function _resolveSend(action,ctx,_event,delaysMap){var meta={_event:_event};// TODO: helper function for resolving Expr\nvar resolvedEvent=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event)?action.event(ctx,_event.data,meta):action.event);var resolvedDelay;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)){var configDelay=delaysMap&&delaysMap[action.delay];resolvedDelay=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay)?configDelay(ctx,_event.data,meta):configDelay;}else{resolvedDelay=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay)?action.delay(ctx,_event.data,meta):action.delay;}var resolvedTarget=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.to)?action.to(ctx,_event.data,meta):action.to;return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},action),{to:resolvedTarget,_event:resolvedEvent,event:resolvedEvent.data,delay:resolvedDelay});}/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */function _sendParent(event,options){return _send2(event,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},options),{to:_types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent}));}/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */function _sendTo(actor,event,options){return _send2(event,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},options),{to:actor}));}/**\r\n * Sends an update event to this machine's parent.\r\n */function _sendUpdate(){return _sendParent(_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.update);}/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */function _respond(event,options){return _send2(event,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},options),{to:function to(_,__,_a){var _event=_a._event;return _event.origin;// TODO: handle when _event.origin is undefined\n}}));}var defaultLogExpr=function defaultLogExpr(context,event){return{context:context,event:event};};/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */function _log2(expr,label){if(expr===void 0){expr=defaultLogExpr;}return{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log,label:label,expr:expr};}var _resolveLog=function _resolveLog(action,ctx,_event){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},action),{value:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.expr)?action.expr:action.expr(ctx,_event.data,{_event:_event})});};/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */var _cancel2=function _cancel2(sendId){return{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.cancel,sendId:sendId};};/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */function _start2(activity){var activityDef=_toActivityDefinition(activity);return{type:_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Start,activity:activityDef,exec:undefined};}/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */function _stop2(actorRef){var activity=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(actorRef)?actorRef:_toActivityDefinition(actorRef);return{type:_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,activity:activity,exec:undefined};}function _resolveStop(action,context,_event){var actorRefOrString=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.activity)?action.activity(context,_event.data):action.activity;var resolvedActorRef=typeof actorRefOrString==='string'?{id:actorRefOrString}:actorRefOrString;var actionObject={type:_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,activity:resolvedActorRef};return actionObject;}/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */var _assign4=function _assign4(assignment){return{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign,assignment:assignment};};function _isActionObject(action){return _typeof2(action)==='object'&&'type'in action;}/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */function _after2(delayRef,id){var idSuffix=id?\"#\".concat(id):'';return\"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.After,\"(\").concat(delayRef,\")\").concat(idSuffix);}/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */function _done(id,data){var type=\"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneState,\".\").concat(id);var eventObject={type:type,data:data};eventObject.toString=function(){return type;};return eventObject;}/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */function _doneInvoke(id,data){var type=\"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneInvoke,\".\").concat(id);var eventObject={type:type,data:data};eventObject.toString=function(){return type;};return eventObject;}function _error2(id,data){var type=\"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.ErrorPlatform,\".\").concat(id);var eventObject={type:type,data:data};eventObject.toString=function(){return type;};return eventObject;}function _pure2(getActions){return{type:_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Pure,get:getActions};}/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */function _forwardTo(target,options){if(!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION&&(!target||typeof target==='function')){var originalTarget_1=target;target=function target(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i];}var resolvedTarget=typeof originalTarget_1==='function'?originalTarget_1.apply(void 0,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args),false)):originalTarget_1;if(!resolvedTarget){throw new Error(\"Attempted to forward event to undefined actor. This risks an infinite loop in the sender.\");}return resolvedTarget;};}return _send2(function(_,event){return event;},(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},options),{to:target}));}/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */function _escalate(errorData,options){return _sendParent(function(context,event,meta){return{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.error,data:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(errorData)?errorData(context,event,meta):errorData};},(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},options),{to:_types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent}));}function _choose2(conds){return{type:_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Choose,conds:conds};}var pluckAssigns=function pluckAssigns(actionBlocks){var e_1,_a;var assignActions=[];try{for(var actionBlocks_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks),actionBlocks_1_1=actionBlocks_1.next();!actionBlocks_1_1.done;actionBlocks_1_1=actionBlocks_1.next()){var block=actionBlocks_1_1.value;var i=0;while(i<block.actions.length){if(block.actions[i].type===_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign){assignActions.push(block.actions[i]);block.actions.splice(i,1);continue;}i++;}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(actionBlocks_1_1&&!actionBlocks_1_1.done&&(_a=actionBlocks_1[\"return\"]))_a.call(actionBlocks_1);}finally{if(e_1)throw e_1.error;}}return assignActions;};function _resolveActions(machine,currentState,currentContext,_event,actionBlocks,predictableExec,preserveActionOrder){if(preserveActionOrder===void 0){preserveActionOrder=false;}var assignActions=preserveActionOrder?[]:pluckAssigns(actionBlocks);var updatedContext=assignActions.length?(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(currentContext,_event,assignActions,currentState):currentContext;var preservedContexts=preserveActionOrder?[currentContext]:undefined;var deferredToBlockEnd=[];function handleAction(blockType,actionObject){var _a;switch(actionObject.type){case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise:{var raisedAction=_resolveRaise(actionObject,updatedContext,_event,machine.options.delays);if(predictableExec&&typeof raisedAction.delay==='number'){predictableExec(raisedAction,updatedContext,_event);}return raisedAction;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send:var sendAction=_resolveSend(actionObject,updatedContext,_event,machine.options.delays);// TODO: fix ActionTypes.Init\nif(!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION){var configuredDelay=actionObject.delay;// warn after resolving as we can create better contextual message here\n(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.warn)(!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(configuredDelay)||typeof sendAction.delay==='number',// tslint:disable-next-line:max-line-length\n\"No delay reference for delay expression '\".concat(configuredDelay,\"' was found on machine '\").concat(machine.id,\"'\"));}if(predictableExec&&sendAction.to!==_types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Internal){if(blockType==='entry'){deferredToBlockEnd.push(sendAction);}else{predictableExec(sendAction,updatedContext,_event);}}return sendAction;case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log:{var resolved=_resolveLog(actionObject,updatedContext,_event);predictableExec===null||predictableExec===void 0?void 0:predictableExec(resolved,updatedContext,_event);return resolved;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.choose:{var chooseAction=actionObject;var matchedActions=(_a=chooseAction.conds.find(function(condition){var guard=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toGuard)(condition.cond,machine.options.guards);return!guard||(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.evaluateGuard)(machine,guard,updatedContext,_event,!predictableExec?currentState:undefined);}))===null||_a===void 0?void 0:_a.actions;if(!matchedActions){return[];}var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(_resolveActions(machine,currentState,updatedContext,_event,[{type:blockType,actions:_toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions),machine.options.actions)}],predictableExec,preserveActionOrder),2),resolvedActionsFromChoose=_b[0],resolvedContextFromChoose=_b[1];updatedContext=resolvedContextFromChoose;preservedContexts===null||preservedContexts===void 0?void 0:preservedContexts.push(updatedContext);return resolvedActionsFromChoose;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.pure:{var matchedActions=actionObject.get(updatedContext,_event.data);if(!matchedActions){return[];}var _c=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(_resolveActions(machine,currentState,updatedContext,_event,[{type:blockType,actions:_toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions),machine.options.actions)}],predictableExec,preserveActionOrder),2),resolvedActionsFromPure=_c[0],resolvedContext=_c[1];updatedContext=resolvedContext;preservedContexts===null||preservedContexts===void 0?void 0:preservedContexts.push(updatedContext);return resolvedActionsFromPure;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.stop:{var resolved=_resolveStop(actionObject,updatedContext,_event);predictableExec===null||predictableExec===void 0?void 0:predictableExec(resolved,currentContext,_event);return resolved;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign:{updatedContext=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(updatedContext,_event,[actionObject],!predictableExec?currentState:undefined);preservedContexts===null||preservedContexts===void 0?void 0:preservedContexts.push(updatedContext);break;}default:var resolvedActionObject=_toActionObject(actionObject,machine.options.actions);var exec_1=resolvedActionObject.exec;if(predictableExec){predictableExec(resolvedActionObject,updatedContext,_event);}else if(exec_1&&preservedContexts){var contextIndex_1=preservedContexts.length-1;var wrapped=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},resolvedActionObject),{exec:function exec(_ctx){var args=[];for(var _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i];}exec_1.apply(void 0,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([preservedContexts[contextIndex_1]],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args),false));}});resolvedActionObject=wrapped;}return resolvedActionObject;}}function processBlock(block){var e_2,_a;var resolvedActions=[];try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions),_c=_b.next();!_c.done;_c=_b.next()){var action=_c.value;var resolved=handleAction(block.type,action);if(resolved){resolvedActions=resolvedActions.concat(resolved);}}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_2)throw e_2.error;}}deferredToBlockEnd.forEach(function(action){predictableExec(action,updatedContext,_event);});deferredToBlockEnd.length=0;return resolvedActions;}var resolvedActions=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(actionBlocks.map(processBlock));return[resolvedActions,updatedContext];}/***/},/***/\"./node_modules/xstate/es/behaviors.js\":/*!*********************************************!*\\\n  !*** ./node_modules/xstate/es/behaviors.js ***!\n  \\*********************************************/ /***/function node_modulesXstateEsBehaviorsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */fromPromise:function fromPromise(){return(/* binding */_fromPromise);},/* harmony export */fromReducer:function fromReducer(){return(/* binding */_fromReducer);},/* harmony export */spawnBehavior:function spawnBehavior(){return(/* binding */_spawnBehavior);}/* harmony export */});/* harmony import */var _actions_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./actions.js */\"./node_modules/xstate/es/actions.js\");/* harmony import */var _Actor_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./Actor.js */\"./node_modules/xstate/es/Actor.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");/**\r\n * Returns an actor behavior from a reducer and its initial state.\r\n *\r\n * @param transition The pure reducer that returns the next state given the current state and event.\r\n * @param initialState The initial state of the reducer.\r\n * @returns An actor behavior\r\n */function _fromReducer(transition,initialState){return{transition:transition,initialState:initialState};}function _fromPromise(promiseFn){var initialState={error:undefined,data:undefined,status:'pending'};return{transition:function transition(state,event,_a){var parent=_a.parent,id=_a.id,observers=_a.observers;switch(event.type){case'fulfill':parent===null||parent===void 0?void 0:parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.doneInvoke)(id,event.data));return{error:undefined,data:event.data,status:'fulfilled'};case'reject':parent===null||parent===void 0?void 0:parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.error)(id,event.error));observers.forEach(function(observer){observer.error(event.error);});return{error:event.error,data:undefined,status:'rejected'};default:return state;}},initialState:initialState,start:function start(_a){var self=_a.self;promiseFn().then(function(data){self.send({type:'fulfill',data:data});},function(reason){self.send({type:'reject',error:reason});});return initialState;}};}function _spawnBehavior(behavior,options){if(options===void 0){options={};}var state=behavior.initialState;var observers=new Set();var mailbox=[];var flushing=false;var flush=function flush(){if(flushing){return;}flushing=true;while(mailbox.length>0){var event_1=mailbox.shift();state=behavior.transition(state,event_1,actorCtx);observers.forEach(function(observer){return observer.next(state);});}flushing=false;};var actor=(0,_Actor_js__WEBPACK_IMPORTED_MODULE_1__.toActorRef)({id:options.id,send:function send(event){mailbox.push(event);flush();},getSnapshot:function getSnapshot(){return state;},subscribe:function subscribe(next,handleError,complete){var observer=(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toObserver)(next,handleError,complete);observers.add(observer);observer.next(state);return{unsubscribe:function unsubscribe(){observers[\"delete\"](observer);}};}});var actorCtx={parent:options.parent,self:actor,id:options.id||'anonymous',observers:observers};state=behavior.start?behavior.start(actorCtx):state;return actor;}/***/},/***/\"./node_modules/xstate/es/constants.js\":/*!*********************************************!*\\\n  !*** ./node_modules/xstate/es/constants.js ***!\n  \\*********************************************/ /***/function node_modulesXstateEsConstantsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */DEFAULT_GUARD_TYPE:function DEFAULT_GUARD_TYPE(){return(/* binding */_DEFAULT_GUARD_TYPE);},/* harmony export */EMPTY_ACTIVITY_MAP:function EMPTY_ACTIVITY_MAP(){return(/* binding */_EMPTY_ACTIVITY_MAP);},/* harmony export */STATE_DELIMITER:function STATE_DELIMITER(){return(/* binding */_STATE_DELIMITER);},/* harmony export */TARGETLESS_KEY:function TARGETLESS_KEY(){return(/* binding */_TARGETLESS_KEY);}/* harmony export */});var _STATE_DELIMITER='.';var _EMPTY_ACTIVITY_MAP={};var _DEFAULT_GUARD_TYPE='xstate.guard';var _TARGETLESS_KEY='';/***/},/***/\"./node_modules/xstate/es/devTools.js\":/*!********************************************!*\\\n  !*** ./node_modules/xstate/es/devTools.js ***!\n  \\********************************************/ /***/function node_modulesXstateEsDevToolsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */getGlobal:function getGlobal(){return(/* binding */_getGlobal);},/* harmony export */registerService:function registerService(){return(/* binding */_registerService);}/* harmony export */});/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");function _getGlobal(){if(typeof globalThis!=='undefined'){return globalThis;}if(typeof self!=='undefined'){return self;}if(typeof window!=='undefined'){return window;}if(typeof __webpack_require__.g!=='undefined'){return __webpack_require__.g;}if(!_environment_js__WEBPACK_IMPORTED_MODULE_0__.IS_PRODUCTION){console.warn('XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues');}}function getDevTools(){var global=_getGlobal();if(global&&'__xstate__'in global){return global.__xstate__;}return undefined;}function _registerService(service){if(!_getGlobal()){return;}var devTools=getDevTools();if(devTools){devTools.register(service);}}/***/},/***/\"./node_modules/xstate/es/environment.js\":/*!***********************************************!*\\\n  !*** ./node_modules/xstate/es/environment.js ***!\n  \\***********************************************/ /***/function node_modulesXstateEsEnvironmentJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */IS_PRODUCTION:function IS_PRODUCTION(){return(/* binding */_IS_PRODUCTION);}/* harmony export */});var _IS_PRODUCTION=\"development\"==='production';/***/},/***/\"./node_modules/xstate/es/index.js\":/*!*****************************************!*\\\n  !*** ./node_modules/xstate/es/index.js ***!\n  \\*****************************************/ /***/function node_modulesXstateEsIndexJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */ActionTypes:function ActionTypes(){return(/* reexport safe */_types_js__WEBPACK_IMPORTED_MODULE_10__.ActionTypes);},/* harmony export */Interpreter:function Interpreter(){return(/* reexport safe */_interpreter_js__WEBPACK_IMPORTED_MODULE_2__.Interpreter);},/* harmony export */InterpreterStatus:function InterpreterStatus(){return(/* reexport safe */_interpreter_js__WEBPACK_IMPORTED_MODULE_2__.InterpreterStatus);},/* harmony export */Machine:function Machine(){return(/* reexport safe */_Machine_js__WEBPACK_IMPORTED_MODULE_3__.Machine);},/* harmony export */SpecialTargets:function SpecialTargets(){return(/* reexport safe */_types_js__WEBPACK_IMPORTED_MODULE_10__.SpecialTargets);},/* harmony export */State:function State(){return(/* reexport safe */_State_js__WEBPACK_IMPORTED_MODULE_7__.State);},/* harmony export */StateNode:function StateNode(){return(/* reexport safe */_StateNode_js__WEBPACK_IMPORTED_MODULE_8__.StateNode);},/* harmony export */actions:function actions(){return(/* reexport module object */_actions_js__WEBPACK_IMPORTED_MODULE_0__);},/* harmony export */assign:function assign(){return(/* binding */_assign5);},/* harmony export */cancel:function cancel(){return(/* binding */_cancel3);},/* harmony export */choose:function choose(){return(/* binding */_choose3);},/* harmony export */createMachine:function createMachine(){return(/* reexport safe */_Machine_js__WEBPACK_IMPORTED_MODULE_3__.createMachine);},/* harmony export */createSchema:function createSchema(){return(/* reexport safe */_schema_js__WEBPACK_IMPORTED_MODULE_6__.createSchema);},/* harmony export */doneInvoke:function doneInvoke(){return(/* binding */_doneInvoke2);},/* harmony export */forwardTo:function forwardTo(){return(/* binding */_forwardTo2);},/* harmony export */interpret:function interpret(){return(/* reexport safe */_interpreter_js__WEBPACK_IMPORTED_MODULE_2__.interpret);},/* harmony export */log:function log(){return(/* binding */_log3);},/* harmony export */mapState:function mapState(){return(/* reexport safe */_mapState_js__WEBPACK_IMPORTED_MODULE_4__.mapState);},/* harmony export */matchState:function matchState(){return(/* reexport safe */_match_js__WEBPACK_IMPORTED_MODULE_5__.matchState);},/* harmony export */matchesState:function matchesState(){return(/* reexport safe */_utils_js__WEBPACK_IMPORTED_MODULE_11__.matchesState);},/* harmony export */pure:function pure(){return(/* binding */_pure3);},/* harmony export */raise:function raise(){return(/* binding */_raise3);},/* harmony export */send:function send(){return(/* binding */_send3);},/* harmony export */sendParent:function sendParent(){return(/* binding */_sendParent2);},/* harmony export */sendTo:function sendTo(){return(/* binding */_sendTo2);},/* harmony export */sendUpdate:function sendUpdate(){return(/* binding */_sendUpdate2);},/* harmony export */spawn:function spawn(){return(/* reexport safe */_interpreter_js__WEBPACK_IMPORTED_MODULE_2__.spawn);},/* harmony export */spawnBehavior:function spawnBehavior(){return(/* reexport safe */_behaviors_js__WEBPACK_IMPORTED_MODULE_9__.spawnBehavior);},/* harmony export */stop:function stop(){return(/* binding */_stop3);},/* harmony export */t:function t(){return(/* reexport safe */_schema_js__WEBPACK_IMPORTED_MODULE_6__.t);},/* harmony export */toActorRef:function toActorRef(){return(/* reexport safe */_Actor_js__WEBPACK_IMPORTED_MODULE_1__.toActorRef);},/* harmony export */toEventObject:function toEventObject(){return(/* reexport safe */_utils_js__WEBPACK_IMPORTED_MODULE_11__.toEventObject);},/* harmony export */toObserver:function toObserver(){return(/* reexport safe */_utils_js__WEBPACK_IMPORTED_MODULE_11__.toObserver);},/* harmony export */toSCXMLEvent:function toSCXMLEvent(){return(/* reexport safe */_utils_js__WEBPACK_IMPORTED_MODULE_11__.toSCXMLEvent);}/* harmony export */});/* harmony import */var _actions_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./actions.js */\"./node_modules/xstate/es/actions.js\");/* harmony import */var _Actor_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./Actor.js */\"./node_modules/xstate/es/Actor.js\");/* harmony import */var _interpreter_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./interpreter.js */\"./node_modules/xstate/es/interpreter.js\");/* harmony import */var _Machine_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(/*! ./Machine.js */\"./node_modules/xstate/es/Machine.js\");/* harmony import */var _mapState_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(/*! ./mapState.js */\"./node_modules/xstate/es/mapState.js\");/* harmony import */var _match_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(/*! ./match.js */\"./node_modules/xstate/es/match.js\");/* harmony import */var _schema_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(/*! ./schema.js */\"./node_modules/xstate/es/schema.js\");/* harmony import */var _State_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(/*! ./State.js */\"./node_modules/xstate/es/State.js\");/* harmony import */var _StateNode_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(/*! ./StateNode.js */\"./node_modules/xstate/es/StateNode.js\");/* harmony import */var _behaviors_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(/*! ./behaviors.js */\"./node_modules/xstate/es/behaviors.js\");/* harmony import */var _types_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(/*! ./types.js */\"./node_modules/xstate/es/types.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");var _assign5=_actions_js__WEBPACK_IMPORTED_MODULE_0__.assign,_cancel3=_actions_js__WEBPACK_IMPORTED_MODULE_0__.cancel,_send3=_actions_js__WEBPACK_IMPORTED_MODULE_0__.send,_sendTo2=_actions_js__WEBPACK_IMPORTED_MODULE_0__.sendTo,_sendParent2=_actions_js__WEBPACK_IMPORTED_MODULE_0__.sendParent,_sendUpdate2=_actions_js__WEBPACK_IMPORTED_MODULE_0__.sendUpdate,_forwardTo2=_actions_js__WEBPACK_IMPORTED_MODULE_0__.forwardTo,_doneInvoke2=_actions_js__WEBPACK_IMPORTED_MODULE_0__.doneInvoke,_raise3=_actions_js__WEBPACK_IMPORTED_MODULE_0__.raise,_log3=_actions_js__WEBPACK_IMPORTED_MODULE_0__.log,_pure3=_actions_js__WEBPACK_IMPORTED_MODULE_0__.pure,_choose3=_actions_js__WEBPACK_IMPORTED_MODULE_0__.choose,_stop3=_actions_js__WEBPACK_IMPORTED_MODULE_0__.stop;/***/},/***/\"./node_modules/xstate/es/interpreter.js\":/*!***********************************************!*\\\n  !*** ./node_modules/xstate/es/interpreter.js ***!\n  \\***********************************************/ /***/function node_modulesXstateEsInterpreterJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */Interpreter:function Interpreter(){return(/* binding */_Interpreter);},/* harmony export */InterpreterStatus:function InterpreterStatus(){return(/* binding */_InterpreterStatus);},/* harmony export */interpret:function interpret(){return(/* binding */_interpret);},/* harmony export */spawn:function spawn(){return(/* binding */_spawn);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _types_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./types.js */\"./node_modules/xstate/es/types.js\");/* harmony import */var _State_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(/*! ./State.js */\"./node_modules/xstate/es/State.js\");/* harmony import */var _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(/*! ./actionTypes.js */\"./node_modules/xstate/es/actionTypes.js\");/* harmony import */var _actions_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(/*! ./actions.js */\"./node_modules/xstate/es/actions.js\");/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");/* harmony import */var _scheduler_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(/*! ./scheduler.js */\"./node_modules/xstate/es/scheduler.js\");/* harmony import */var _Actor_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(/*! ./Actor.js */\"./node_modules/xstate/es/Actor.js\");/* harmony import */var _registry_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(/*! ./registry.js */\"./node_modules/xstate/es/registry.js\");/* harmony import */var _devTools_js__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(/*! ./devTools.js */\"./node_modules/xstate/es/devTools.js\");/* harmony import */var _serviceScope_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(/*! ./serviceScope.js */\"./node_modules/xstate/es/serviceScope.js\");/* harmony import */var _behaviors_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(/*! ./behaviors.js */\"./node_modules/xstate/es/behaviors.js\");var DEFAULT_SPAWN_OPTIONS={sync:false,autoForward:false};var _InterpreterStatus;(function(InterpreterStatus){InterpreterStatus[InterpreterStatus[\"NotStarted\"]=0]=\"NotStarted\";InterpreterStatus[InterpreterStatus[\"Running\"]=1]=\"Running\";InterpreterStatus[InterpreterStatus[\"Stopped\"]=2]=\"Stopped\";})(_InterpreterStatus||(_InterpreterStatus={}));var _Interpreter=/*#__PURE__*/ /** @class */function(){/**\r\n   * Creates a new Interpreter instance (i.e., service) for the given machine with the provided options, if any.\r\n   *\r\n   * @param machine The machine to be interpreted\r\n   * @param options Interpreter options\r\n   */function Interpreter(machine,options){if(options===void 0){options=Interpreter.defaultOptions;}var _this=this;this.machine=machine;this.delayedEventsMap={};this.listeners=new Set();this.contextListeners=new Set();this.stopListeners=new Set();this.doneListeners=new Set();this.eventListeners=new Set();this.sendListeners=new Set();/**\r\n     * Whether the service is started.\r\n     */this.initialized=false;this.status=_InterpreterStatus.NotStarted;this.children=new Map();this.forwardTo=new Set();this._outgoingQueue=[];/**\r\n     * Alias for Interpreter.prototype.start\r\n     */this.init=this.start;/**\r\n     * Sends an event to the running interpreter to trigger a transition.\r\n     *\r\n     * An array of events (batched) can be sent as well, which will send all\r\n     * batched events to the running interpreter. The listeners will be\r\n     * notified only **once** when all events are processed.\r\n     *\r\n     * @param event The event(s) to send\r\n     */this.send=function(event,payload){if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(event)){_this.batch(event);return _this.state;}var _event=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toEventObject)(event,payload));if(_this.status===_InterpreterStatus.Stopped){// do nothing\nif(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"Event \\\"\".concat(_event.name,\"\\\" was sent to stopped service \\\"\").concat(_this.machine.id,\"\\\". This service has already reached its final state, and will not transition.\\nEvent: \").concat(JSON.stringify(_event.data)));}return _this.state;}if(_this.status!==_InterpreterStatus.Running&&!_this.options.deferEvents){throw new Error(\"Event \\\"\".concat(_event.name,\"\\\" was sent to uninitialized service \\\"\").concat(_this.machine.id// tslint:disable-next-line:max-line-length\n,\"\\\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\\nEvent: \").concat(JSON.stringify(_event.data)));}_this.scheduler.schedule(function(){// Forward copy of event to child actors\n_this.forward(_event);var nextState=_this._nextState(_event);_this.update(nextState,_event);});return _this._state;// TODO: deprecate (should return void)\n// tslint:disable-next-line:semicolon\n};this.sendTo=function(event,to,immediate){var isParent=_this.parent&&(to===_types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Parent||_this.parent.id===to);var target=isParent?_this.parent:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(to)?to===_types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Internal?_this:_this.children.get(to)||_registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.get(to):(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isActor)(to)?to:undefined;if(!target){if(!isParent){throw new Error(\"Unable to send event to child '\".concat(to,\"' from service '\").concat(_this.id,\"'.\"));}// tslint:disable-next-line:no-console\nif(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"Service '\".concat(_this.id,\"' has no parent: unable to send event \").concat(event.type));}return;}if('machine'in target){// perhaps those events should be rejected in the parent\n// but atm it doesn't have easy access to all of the information that is required to do it reliably\nif(_this.status!==_InterpreterStatus.Stopped||_this.parent!==target||// we need to send events to the parent from exit handlers of a machine that reached its final state\n_this.state.done){// Send SCXML events to machines\nvar scxmlEvent=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},event),{name:event.name===_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.error?\"\".concat((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(_this.id)):event.name,origin:_this.sessionId});if(!immediate&&_this.machine.config.predictableActionArguments){_this._outgoingQueue.push([target,scxmlEvent]);}else{target.send(scxmlEvent);}}}else{// Send normal events to other targets\nif(!immediate&&_this.machine.config.predictableActionArguments){_this._outgoingQueue.push([target,event.data]);}else{target.send(event.data);}}};this._exec=function(action,context,_event,actionFunctionMap){if(actionFunctionMap===void 0){actionFunctionMap=_this.machine.options.actions;}var actionOrExec=action.exec||(0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.getActionFunction)(action.type,actionFunctionMap);var exec=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(actionOrExec)?actionOrExec:actionOrExec?actionOrExec.exec:action.exec;if(exec){try{return exec(context,_event.data,!_this.machine.config.predictableActionArguments?{action:action,state:_this.state,_event:_event}:{action:action,_event:_event});}catch(err){if(_this.parent){_this.parent.send({type:'xstate.error',data:err});}throw err;}}switch(action.type){case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.raise:{// if raise action reached the interpreter then it's a delayed one\nvar sendAction_1=action;_this.defer(sendAction_1);break;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.send:var sendAction=action;if(typeof sendAction.delay==='number'){_this.defer(sendAction);return;}else{if(sendAction.to){_this.sendTo(sendAction._event,sendAction.to,_event===_actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);}else{_this.send(sendAction._event);}}break;case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.cancel:_this.cancel(action.sendId);break;case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.start:{if(_this.status!==_InterpreterStatus.Running){return;}var activity=action.activity;// If the activity will be stopped right after it's started\n// (such as in transient states)\n// don't bother starting the activity.\nif(// in v4 with `predictableActionArguments` invokes are called eagerly when the `this.state` still points to the previous state\n!_this.machine.config.predictableActionArguments&&!_this.state.activities[activity.id||activity.type]){break;}// Invoked services\nif(activity.type===_types_js__WEBPACK_IMPORTED_MODULE_2__.ActionTypes.Invoke){var invokeSource=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(activity.src);var serviceCreator=_this.machine.options.services?_this.machine.options.services[invokeSource.type]:undefined;var id=activity.id,data=activity.data;if(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!('forward'in activity),// tslint:disable-next-line:max-line-length\n\"`forward` property is deprecated (found in invocation of '\".concat(activity.src,\"' in in machine '\").concat(_this.machine.id,\"'). \")+\"Please use `autoForward` instead.\");}var autoForward='autoForward'in activity?activity.autoForward:!!activity.forward;if(!serviceCreator){// tslint:disable-next-line:no-console\nif(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"No service found for invocation '\".concat(activity.src,\"' in machine '\").concat(_this.machine.id,\"'.\"));}return;}var resolvedData=data?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(data,context,_event):undefined;if(typeof serviceCreator==='string'){// TODO: warn\nreturn;}var source=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(serviceCreator)?serviceCreator(context,_event.data,{data:resolvedData,src:invokeSource,meta:activity.meta}):serviceCreator;if(!source){// TODO: warn?\nreturn;}var options=void 0;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(source)){source=resolvedData?source.withContext(resolvedData):source;options={autoForward:autoForward};}_this.spawn(source,id,options);}else{_this.spawnActivity(activity);}break;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.stop:{_this.stopChild(action.activity.id);break;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.log:var _a=action,label=_a.label,value=_a.value;if(label){_this.logger(label,value);}else{_this.logger(value);}break;default:if(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"No implementation found for action type '\".concat(action.type,\"'\"));}break;}};var resolvedOptions=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},Interpreter.defaultOptions),options);var clock=resolvedOptions.clock,logger=resolvedOptions.logger,parent=resolvedOptions.parent,id=resolvedOptions.id;var resolvedId=id!==undefined?id:machine.id;this.id=resolvedId;this.logger=logger;this.clock=clock;this.parent=parent;this.options=resolvedOptions;this.scheduler=new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({deferEvents:this.options.deferEvents});this.sessionId=_registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.bookId();}Object.defineProperty(Interpreter.prototype,\"initialState\",{get:function get(){var _this=this;if(this._initialState){return this._initialState;}return(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this,function(){_this._initialState=_this.machine.initialState;return _this._initialState;});},enumerable:false,configurable:true});Object.defineProperty(Interpreter.prototype,\"state\",{/**\r\n     * @deprecated Use `.getSnapshot()` instead.\r\n     */get:function get(){if(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(this.status!==_InterpreterStatus.NotStarted,\"Attempted to read state from uninitialized service '\".concat(this.id,\"'. Make sure the service is started first.\"));}return this._state;},enumerable:false,configurable:true});/**\r\n   * Executes the actions of the given state, with that state's `context` and `event`.\r\n   *\r\n   * @param state The state whose actions will be executed\r\n   * @param actionsConfig The action implementations to use\r\n   */Interpreter.prototype.execute=function(state,actionsConfig){var e_1,_a;try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(state.actions),_c=_b.next();!_c.done;_c=_b.next()){var action=_c.value;this.exec(action,state,actionsConfig);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_1)throw e_1.error;}}};Interpreter.prototype.update=function(state,_event){var e_2,_a,e_3,_b,e_4,_c,e_5,_d;var _this=this;// Attach session ID to state\nstate._sessionid=this.sessionId;// Update state\nthis._state=state;// Execute actions\nif((!this.machine.config.predictableActionArguments||// this is currently required to execute initial actions as the `initialState` gets cached\n// we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns\n_event===_actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent)&&this.options.execute){this.execute(this.state);}else{var item=void 0;while(item=this._outgoingQueue.shift()){item[0].send(item[1]);}}// Update children\nthis.children.forEach(function(child){_this.state.children[child.id]=child;});// Dev tools\nif(this.devTools){this.devTools.send(_event.data,state);}// Execute listeners\nif(state.event){try{for(var _e=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.eventListeners),_f=_e.next();!_f.done;_f=_e.next()){var listener=_f.value;listener(state.event);}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(_f&&!_f.done&&(_a=_e[\"return\"]))_a.call(_e);}finally{if(e_2)throw e_2.error;}}}try{for(var _g=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners),_h=_g.next();!_h.done;_h=_g.next()){var listener=_h.value;listener(state,state.event);}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(_h&&!_h.done&&(_b=_g[\"return\"]))_b.call(_g);}finally{if(e_3)throw e_3.error;}}try{for(var _j=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners),_k=_j.next();!_k.done;_k=_j.next()){var contextListener=_k.value;contextListener(this.state.context,this.state.history?this.state.history.context:undefined);}}catch(e_4_1){e_4={error:e_4_1};}finally{try{if(_k&&!_k.done&&(_c=_j[\"return\"]))_c.call(_j);}finally{if(e_4)throw e_4.error;}}if(this.state.done){// get final child state node\nvar finalChildStateNode=state.configuration.find(function(sn){return sn.type==='final'&&sn.parent===_this.machine;});var doneData=finalChildStateNode&&finalChildStateNode.doneData?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(finalChildStateNode.doneData,state.context,_event):undefined;this._doneEvent=(0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(this.id,doneData);try{for(var _l=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners),_m=_l.next();!_m.done;_m=_l.next()){var listener=_m.value;listener(this._doneEvent);}}catch(e_5_1){e_5={error:e_5_1};}finally{try{if(_m&&!_m.done&&(_d=_l[\"return\"]))_d.call(_l);}finally{if(e_5)throw e_5.error;}}this._stop();this._stopChildren();_registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(this.sessionId);}};/*\r\n   * Adds a listener that is notified whenever a state transition happens. The listener is called with\r\n   * the next state and the event object that caused the state transition.\r\n   *\r\n   * @param listener The state listener\r\n   */Interpreter.prototype.onTransition=function(listener){this.listeners.add(listener);// Send current state to listener\nif(this.status===_InterpreterStatus.Running){listener(this.state,this.state.event);}return this;};Interpreter.prototype.subscribe=function(nextListenerOrObserver,_,// TODO: error listener\ncompleteListener){var _this=this;var observer=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(nextListenerOrObserver,_,completeListener);this.listeners.add(observer.next);// Send current state to listener\nif(this.status!==_InterpreterStatus.NotStarted){observer.next(this.state);}var completeOnce=function completeOnce(){_this.doneListeners[\"delete\"](completeOnce);_this.stopListeners[\"delete\"](completeOnce);observer.complete();};if(this.status===_InterpreterStatus.Stopped){observer.complete();}else{this.onDone(completeOnce);this.onStop(completeOnce);}return{unsubscribe:function unsubscribe(){_this.listeners[\"delete\"](observer.next);_this.doneListeners[\"delete\"](completeOnce);_this.stopListeners[\"delete\"](completeOnce);}};};/**\r\n   * Adds an event listener that is notified whenever an event is sent to the running interpreter.\r\n   * @param listener The event listener\r\n   */Interpreter.prototype.onEvent=function(listener){this.eventListeners.add(listener);return this;};/**\r\n   * Adds an event listener that is notified whenever a `send` event occurs.\r\n   * @param listener The event listener\r\n   */Interpreter.prototype.onSend=function(listener){this.sendListeners.add(listener);return this;};/**\r\n   * Adds a context listener that is notified whenever the state context changes.\r\n   * @param listener The context listener\r\n   */Interpreter.prototype.onChange=function(listener){this.contextListeners.add(listener);return this;};/**\r\n   * Adds a listener that is notified when the machine is stopped.\r\n   * @param listener The listener\r\n   */Interpreter.prototype.onStop=function(listener){this.stopListeners.add(listener);return this;};/**\r\n   * Adds a state listener that is notified when the statechart has reached its final state.\r\n   * @param listener The state listener\r\n   */Interpreter.prototype.onDone=function(listener){if(this.status===_InterpreterStatus.Stopped&&this._doneEvent){listener(this._doneEvent);}else{this.doneListeners.add(listener);}return this;};/**\r\n   * Removes a listener.\r\n   * @param listener The listener to remove\r\n   */Interpreter.prototype.off=function(listener){this.listeners[\"delete\"](listener);this.eventListeners[\"delete\"](listener);this.sendListeners[\"delete\"](listener);this.stopListeners[\"delete\"](listener);this.doneListeners[\"delete\"](listener);this.contextListeners[\"delete\"](listener);return this;};/**\r\n   * Starts the interpreter from the given state, or the initial state.\r\n   * @param initialState The state to start the statechart from\r\n   */Interpreter.prototype.start=function(initialState){var _this=this;if(this.status===_InterpreterStatus.Running){// Do not restart the service if it is already started\nreturn this;}// yes, it's a hack but we need the related cache to be populated for some things to work (like delayed transitions)\n// this is usually called by `machine.getInitialState` but if we rehydrate from a state we might bypass this call\n// we also don't want to call this method here as it resolves the full initial state which might involve calling assign actions\n// and that could potentially lead to some unwanted side-effects (even such as creating some rogue actors)\nthis.machine._init();_registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.register(this.sessionId,this);this.initialized=true;this.status=_InterpreterStatus.Running;var resolvedState=initialState===undefined?this.initialState:(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this,function(){return(0,_State_js__WEBPACK_IMPORTED_MODULE_9__.isStateConfig)(initialState)?_this.machine.resolveState(initialState):_this.machine.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_9__.State.from(initialState,_this.machine.context));});if(this.options.devTools){this.attachDev();}this.scheduler.initialize(function(){_this.update(resolvedState,_actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);});return this;};Interpreter.prototype._stopChildren=function(){// TODO: think about converting those to actions\nthis.children.forEach(function(child){if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)){child.stop();}});this.children.clear();};Interpreter.prototype._stop=function(){var e_6,_a,e_7,_b,e_8,_c,e_9,_d,e_10,_e;try{for(var _f=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners),_g=_f.next();!_g.done;_g=_f.next()){var listener=_g.value;this.listeners[\"delete\"](listener);}}catch(e_6_1){e_6={error:e_6_1};}finally{try{if(_g&&!_g.done&&(_a=_f[\"return\"]))_a.call(_f);}finally{if(e_6)throw e_6.error;}}try{for(var _h=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.stopListeners),_j=_h.next();!_j.done;_j=_h.next()){var listener=_j.value;// call listener, then remove\nlistener();this.stopListeners[\"delete\"](listener);}}catch(e_7_1){e_7={error:e_7_1};}finally{try{if(_j&&!_j.done&&(_b=_h[\"return\"]))_b.call(_h);}finally{if(e_7)throw e_7.error;}}try{for(var _k=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners),_l=_k.next();!_l.done;_l=_k.next()){var listener=_l.value;this.contextListeners[\"delete\"](listener);}}catch(e_8_1){e_8={error:e_8_1};}finally{try{if(_l&&!_l.done&&(_c=_k[\"return\"]))_c.call(_k);}finally{if(e_8)throw e_8.error;}}try{for(var _m=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners),_o=_m.next();!_o.done;_o=_m.next()){var listener=_o.value;this.doneListeners[\"delete\"](listener);}}catch(e_9_1){e_9={error:e_9_1};}finally{try{if(_o&&!_o.done&&(_d=_m[\"return\"]))_d.call(_m);}finally{if(e_9)throw e_9.error;}}if(!this.initialized){// Interpreter already stopped; do nothing\nreturn this;}this.initialized=false;this.status=_InterpreterStatus.Stopped;this._initialState=undefined;try{// we are going to stop within the current sync frame\n// so we can safely just cancel this here as nothing async should be fired anyway\nfor(var _p=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(Object.keys(this.delayedEventsMap)),_q=_p.next();!_q.done;_q=_p.next()){var key=_q.value;this.clock.clearTimeout(this.delayedEventsMap[key]);}}catch(e_10_1){e_10={error:e_10_1};}finally{try{if(_q&&!_q.done&&(_e=_p[\"return\"]))_e.call(_p);}finally{if(e_10)throw e_10.error;}}// clear everything that might be enqueued\nthis.scheduler.clear();this.scheduler=new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({deferEvents:this.options.deferEvents});};/**\r\n   * Stops the interpreter and unsubscribe all listeners.\r\n   *\r\n   * This will also notify the `onStop` listeners.\r\n   */Interpreter.prototype.stop=function(){// TODO: add warning for stopping non-root interpreters\nvar _this=this;// grab the current scheduler as it will be replaced in _stop\nvar scheduler=this.scheduler;this._stop();// let what is currently processed to be finished\nscheduler.schedule(function(){// it feels weird to handle this here but we need to handle this even slightly \"out of band\"\nvar _event=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)({type:'xstate.stop'});var nextState=(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this,function(){var exitActions=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.state.configuration),false).sort(function(a,b){return b.order-a.order;}).map(function(stateNode){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.toActionObjects)(stateNode.onExit,_this.machine.options.actions);}));var _a=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.resolveActions)(_this.machine,_this.state,_this.state.context,_event,[{type:'exit',actions:exitActions}],_this.machine.config.predictableActionArguments?_this._exec:undefined,_this.machine.config.predictableActionArguments||_this.machine.config.preserveActionOrder),2),resolvedActions=_a[0],updatedContext=_a[1];var newState=new _State_js__WEBPACK_IMPORTED_MODULE_9__.State({value:_this.state.value,context:updatedContext,_event:_event,_sessionid:_this.sessionId,historyValue:undefined,history:_this.state,actions:resolvedActions.filter(function(action){return!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);}),activities:{},events:[],configuration:[],transitions:[],children:{},done:_this.state.done,tags:_this.state.tags,machine:_this.machine});newState.changed=true;return newState;});_this.update(nextState,_event);_this._stopChildren();_registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(_this.sessionId);});return this;};Interpreter.prototype.batch=function(events){var _this=this;if(this.status===_InterpreterStatus.NotStarted&&this.options.deferEvents){// tslint:disable-next-line:no-console\nif(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"\".concat(events.length,\" event(s) were sent to uninitialized service \\\"\").concat(this.machine.id,\"\\\" and are deferred. Make sure .start() is called for this service.\\nEvent: \").concat(JSON.stringify(event)));}}else if(this.status!==_InterpreterStatus.Running){throw new Error(// tslint:disable-next-line:max-line-length\n\"\".concat(events.length,\" event(s) were sent to uninitialized service \\\"\").concat(this.machine.id,\"\\\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\"));}if(!events.length){return;}var exec=!!this.machine.config.predictableActionArguments&&this._exec;this.scheduler.schedule(function(){var e_11,_a;var nextState=_this.state;var batchChanged=false;var batchedActions=[];var _loop_1=function _loop_1(event_1){var _event=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event_1);_this.forward(_event);nextState=(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this,function(){return _this.machine.transition(nextState,_event,undefined,exec||undefined);});batchedActions.push.apply(batchedActions,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.machine.config.predictableActionArguments?nextState.actions:nextState.actions.map(function(a){return(0,_State_js__WEBPACK_IMPORTED_MODULE_9__.bindActionToState)(a,nextState);})),false));batchChanged=batchChanged||!!nextState.changed;};try{for(var events_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(events),events_1_1=events_1.next();!events_1_1.done;events_1_1=events_1.next()){var event_1=events_1_1.value;_loop_1(event_1);}}catch(e_11_1){e_11={error:e_11_1};}finally{try{if(events_1_1&&!events_1_1.done&&(_a=events_1[\"return\"]))_a.call(events_1);}finally{if(e_11)throw e_11.error;}}nextState.changed=batchChanged;nextState.actions=batchedActions;_this.update(nextState,(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(events[events.length-1]));});};/**\r\n   * Returns a send function bound to this interpreter instance.\r\n   *\r\n   * @param event The event to be sent by the sender.\r\n   */Interpreter.prototype.sender=function(event){return this.send.bind(this,event);};Interpreter.prototype._nextState=function(event,exec){var _this=this;if(exec===void 0){exec=!!this.machine.config.predictableActionArguments&&this._exec;}var _event=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event);if(_event.name.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform)===0&&!this.state.nextEvents.some(function(nextEvent){return nextEvent.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform)===0;})){throw _event.data.data;}var nextState=(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this,function(){return _this.machine.transition(_this.state,_event,undefined,exec||undefined);});return nextState;};/**\r\n   * Returns the next state given the interpreter's current state and the event.\r\n   *\r\n   * This is a pure method that does _not_ update the interpreter's state.\r\n   *\r\n   * @param event The event to determine the next state\r\n   */Interpreter.prototype.nextState=function(event){return this._nextState(event,false);};Interpreter.prototype.forward=function(event){var e_12,_a;try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.forwardTo),_c=_b.next();!_c.done;_c=_b.next()){var id=_c.value;var child=this.children.get(id);if(!child){throw new Error(\"Unable to forward event '\".concat(event,\"' from interpreter '\").concat(this.id,\"' to nonexistant child '\").concat(id,\"'.\"));}child.send(event);}}catch(e_12_1){e_12={error:e_12_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_12)throw e_12.error;}}};Interpreter.prototype.defer=function(sendAction){var _this=this;var timerId=this.clock.setTimeout(function(){if('to'in sendAction&&sendAction.to){_this.sendTo(sendAction._event,sendAction.to,true);}else{_this.send(sendAction._event);}},sendAction.delay);if(sendAction.id){this.delayedEventsMap[sendAction.id]=timerId;}};Interpreter.prototype.cancel=function(sendId){this.clock.clearTimeout(this.delayedEventsMap[sendId]);delete this.delayedEventsMap[sendId];};Interpreter.prototype.exec=function(action,state,actionFunctionMap){if(actionFunctionMap===void 0){actionFunctionMap=this.machine.options.actions;}this._exec(action,state.context,state._event,actionFunctionMap);};Interpreter.prototype.removeChild=function(childId){var _a;this.children[\"delete\"](childId);this.forwardTo[\"delete\"](childId);// this.state might not exist at the time this is called,\n// such as when a child is added then removed while initializing the state\n(_a=this.state)===null||_a===void 0?true:delete _a.children[childId];};Interpreter.prototype.stopChild=function(childId){var child=this.children.get(childId);if(!child){return;}this.removeChild(childId);if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)){child.stop();}};Interpreter.prototype.spawn=function(entity,name,options){if(this.status!==_InterpreterStatus.Running){return(0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity,name);}if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(entity)){return this.spawnPromise(Promise.resolve(entity),name);}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity)){return this.spawnCallback(entity,name);}else if((0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.isSpawnedActor)(entity)){return this.spawnActor(entity,name);}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isObservable)(entity)){return this.spawnObservable(entity,name);}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)){return this.spawnMachine(entity,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},options),{id:name}));}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBehavior)(entity)){return this.spawnBehavior(entity,name);}else{throw new Error(\"Unable to spawn entity \\\"\".concat(name,\"\\\" of type \\\"\").concat(_typeof2(entity),\"\\\".\"));}};Interpreter.prototype.spawnMachine=function(machine,options){var _this=this;if(options===void 0){options={};}var childService=new Interpreter(machine,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},this.options),{parent:this,id:options.id||machine.id}));var resolvedOptions=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},DEFAULT_SPAWN_OPTIONS),options);if(resolvedOptions.sync){childService.onTransition(function(state){_this.send(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.update,{state:state,id:childService.id});});}var actor=childService;this.children.set(childService.id,actor);if(resolvedOptions.autoForward){this.forwardTo.add(childService.id);}childService.onDone(function(doneEvent){_this.removeChild(childService.id);_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(doneEvent,{origin:childService.id}));}).start();return actor;};Interpreter.prototype.spawnBehavior=function(behavior,id){var actorRef=(0,_behaviors_js__WEBPACK_IMPORTED_MODULE_11__.spawnBehavior)(behavior,{id:id,parent:this});this.children.set(id,actorRef);return actorRef;};Interpreter.prototype.spawnPromise=function(promise,id){var _a;var _this=this;var canceled=false;var resolvedData;promise.then(function(response){if(!canceled){resolvedData=response;_this.removeChild(id);_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id,response),{origin:id}));}},function(errorData){if(!canceled){_this.removeChild(id);var errorEvent=(0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id,errorData);try{// Send \"error.platform.id\" to this (parent).\n_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(errorEvent,{origin:id}));}catch(error){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.reportUnhandledExceptionOnInvocation)(errorData,error,id);if(_this.devTools){_this.devTools.send(errorEvent,_this.state);}if(_this.machine.strict){// it would be better to always stop the state machine if unhandled\n// exception/promise rejection happens but because we don't want to\n// break existing code so enforce it on strict mode only especially so\n// because documentation says that onError is optional\n_this.stop();}}}});var actor=(_a={id:id,send:function send(){return void 0;},subscribe:function subscribe(next,handleError,complete){var observer=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next,handleError,complete);var unsubscribed=false;promise.then(function(response){if(unsubscribed){return;}observer.next(response);if(unsubscribed){return;}observer.complete();},function(err){if(unsubscribed){return;}observer.error(err);});return{unsubscribe:function unsubscribe(){return unsubscribed=true;}};},stop:function stop(){canceled=true;},toJSON:function toJSON(){return{id:id};},getSnapshot:function getSnapshot(){return resolvedData;}},_a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;},_a);this.children.set(id,actor);return actor;};Interpreter.prototype.spawnCallback=function(callback,id){var _a;var _this=this;var canceled=false;var receivers=new Set();var listeners=new Set();var emitted;var receive=function receive(e){emitted=e;listeners.forEach(function(listener){return listener(e);});if(canceled){return;}_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(e,{origin:id}));};var callbackStop;try{callbackStop=callback(receive,function(newListener){receivers.add(newListener);});}catch(err){this.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id,err));}if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(callbackStop)){// it turned out to be an async function, can't reliably check this before calling `callback`\n// because transpiled async functions are not recognizable\nreturn this.spawnPromise(callbackStop,id);}var actor=(_a={id:id,send:function send(event){return receivers.forEach(function(receiver){return receiver(event);});},subscribe:function subscribe(next){var observer=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next);listeners.add(observer.next);return{unsubscribe:function unsubscribe(){listeners[\"delete\"](observer.next);}};},stop:function stop(){canceled=true;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(callbackStop)){callbackStop();}},toJSON:function toJSON(){return{id:id};},getSnapshot:function getSnapshot(){return emitted;}},_a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;},_a);this.children.set(id,actor);return actor;};Interpreter.prototype.spawnObservable=function(source,id){var _a;var _this=this;var emitted;var subscription=source.subscribe(function(value){emitted=value;_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(value,{origin:id}));},function(err){_this.removeChild(id);_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id,err),{origin:id}));},function(){_this.removeChild(id);_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id),{origin:id}));});var actor=(_a={id:id,send:function send(){return void 0;},subscribe:function subscribe(next,handleError,complete){return source.subscribe(next,handleError,complete);},stop:function stop(){return subscription.unsubscribe();},getSnapshot:function getSnapshot(){return emitted;},toJSON:function toJSON(){return{id:id};}},_a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;},_a);this.children.set(id,actor);return actor;};Interpreter.prototype.spawnActor=function(actor,name){this.children.set(name,actor);return actor;};Interpreter.prototype.spawnActivity=function(activity){var implementation=this.machine.options&&this.machine.options.activities?this.machine.options.activities[activity.type]:undefined;if(!implementation){if(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"No implementation found for activity '\".concat(activity.type,\"'\"));}// tslint:disable-next-line:no-console\nreturn;}// Start implementation\nvar dispose=implementation(this.state.context,activity);this.spawnEffect(activity.id,dispose);};Interpreter.prototype.spawnEffect=function(id,dispose){var _a;this.children.set(id,(_a={id:id,send:function send(){return void 0;},subscribe:function subscribe(){return{unsubscribe:function unsubscribe(){return void 0;}};},stop:dispose||undefined,getSnapshot:function getSnapshot(){return undefined;},toJSON:function toJSON(){return{id:id};}},_a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;},_a));};Interpreter.prototype.attachDev=function(){var global=(0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.getGlobal)();if(this.options.devTools&&global){if(global.__REDUX_DEVTOOLS_EXTENSION__){var devToolsOptions=_typeof2(this.options.devTools)==='object'?this.options.devTools:undefined;this.devTools=global.__REDUX_DEVTOOLS_EXTENSION__.connect((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({name:this.id,autoPause:true,stateSanitizer:function stateSanitizer(state){return{value:state.value,context:state.context,actions:state.actions};}},devToolsOptions),{features:(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({jump:false,skip:false},devToolsOptions?devToolsOptions.features:undefined)}),this.machine);this.devTools.init(this.state);}// add XState-specific dev tooling hook\n(0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.registerService)(this);}};Interpreter.prototype.toJSON=function(){return{id:this.id};};Interpreter.prototype[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;};Interpreter.prototype.getSnapshot=function(){if(this.status===_InterpreterStatus.NotStarted){return this.initialState;}return this._state;};/**\r\n   * The default interpreter options:\r\n   *\r\n   * - `clock` uses the global `setTimeout` and `clearTimeout` functions\r\n   * - `logger` uses the global `console.log()` method\r\n   */Interpreter.defaultOptions={execute:true,deferEvents:true,clock:{setTimeout:function(_setTimeout){function setTimeout(_x,_x2){return _setTimeout.apply(this,arguments);}setTimeout.toString=function(){return _setTimeout.toString();};return setTimeout;}(function(fn,ms){return setTimeout(fn,ms);}),clearTimeout:function(_clearTimeout){function clearTimeout(_x3){return _clearTimeout.apply(this,arguments);}clearTimeout.toString=function(){return _clearTimeout.toString();};return clearTimeout;}(function(id){return clearTimeout(id);})},logger:/*#__PURE__*/console.log.bind(console),devTools:false};Interpreter.interpret=_interpret;return Interpreter;}();var resolveSpawnOptions=function resolveSpawnOptions(nameOrOptions){if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(nameOrOptions)){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},DEFAULT_SPAWN_OPTIONS),{name:nameOrOptions});}return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},DEFAULT_SPAWN_OPTIONS),{name:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.uniqueId)()}),nameOrOptions);};function _spawn(entity,nameOrOptions){var resolvedOptions=resolveSpawnOptions(nameOrOptions);return(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.consume)(function(service){if(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){var isLazyEntity=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity);(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!service||isLazyEntity,\"Attempted to spawn an Actor (ID: \\\"\".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)?entity.id:'undefined',\"\\\") outside of a service. This will have no effect.\"));}if(service){return service.spawn(entity,resolvedOptions.name,resolvedOptions);}else{return(0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity,resolvedOptions.name);}});}/**\r\n * Creates a new Interpreter instance for the given machine with the provided options, if any.\r\n *\r\n * @param machine The machine to interpret\r\n * @param options Interpreter options\r\n */function _interpret(machine,options){var interpreter=new _Interpreter(machine,options);return interpreter;}/***/},/***/\"./node_modules/xstate/es/invokeUtils.js\":/*!***********************************************!*\\\n  !*** ./node_modules/xstate/es/invokeUtils.js ***!\n  \\***********************************************/ /***/function node_modulesXstateEsInvokeUtilsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */toInvokeDefinition:function toInvokeDefinition(){return(/* binding */_toInvokeDefinition);},/* harmony export */toInvokeSource:function toInvokeSource(){return(/* binding */_toInvokeSource);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./actionTypes.js */\"./node_modules/xstate/es/actionTypes.js\");function _toInvokeSource(src){if(typeof src==='string'){var simpleSrc={type:src};simpleSrc.toString=function(){return src;};// v4 compat - TODO: remove in v5\nreturn simpleSrc;}return src;}function _toInvokeDefinition(invokeConfig){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke},invokeConfig),{toJSON:function toJSON(){invokeConfig.onDone;invokeConfig.onError;var invokeDef=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__rest)(invokeConfig,[\"onDone\",\"onError\"]);return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({},invokeDef),{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke,src:_toInvokeSource(invokeConfig.src)});}});}/***/},/***/\"./node_modules/xstate/es/mapState.js\":/*!********************************************!*\\\n  !*** ./node_modules/xstate/es/mapState.js ***!\n  \\********************************************/ /***/function node_modulesXstateEsMapStateJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */mapState:function mapState(){return(/* binding */_mapState);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");function _mapState(stateMap,stateId){var e_1,_a;var foundStateId;try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__values)(Object.keys(stateMap)),_c=_b.next();!_c.done;_c=_b.next()){var mappedStateId=_c.value;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.matchesState)(mappedStateId,stateId)&&(!foundStateId||stateId.length>foundStateId.length)){foundStateId=mappedStateId;}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_1)throw e_1.error;}}return stateMap[foundStateId];}/***/},/***/\"./node_modules/xstate/es/match.js\":/*!*****************************************!*\\\n  !*** ./node_modules/xstate/es/match.js ***!\n  \\*****************************************/ /***/function node_modulesXstateEsMatchJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */matchState:function matchState(){return(/* binding */_matchState);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _State_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./State.js */\"./node_modules/xstate/es/State.js\");function _matchState(state,patterns,defaultValue){var e_1,_a;var resolvedState=_State_js__WEBPACK_IMPORTED_MODULE_0__.State.from(state,state instanceof _State_js__WEBPACK_IMPORTED_MODULE_0__.State?state.context:undefined);try{for(var patterns_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(patterns),patterns_1_1=patterns_1.next();!patterns_1_1.done;patterns_1_1=patterns_1.next()){var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(patterns_1_1.value,2),stateValue=_b[0],getValue=_b[1];if(resolvedState.matches(stateValue)){return getValue(resolvedState);}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(patterns_1_1&&!patterns_1_1.done&&(_a=patterns_1[\"return\"]))_a.call(patterns_1);}finally{if(e_1)throw e_1.error;}}return defaultValue(resolvedState);}/***/},/***/\"./node_modules/xstate/es/registry.js\":/*!********************************************!*\\\n  !*** ./node_modules/xstate/es/registry.js ***!\n  \\********************************************/ /***/function node_modulesXstateEsRegistryJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */registry:function registry(){return(/* binding */_registry);}/* harmony export */});var children=/*#__PURE__*/new Map();var sessionIdIndex=0;var _registry={bookId:function bookId(){return\"x:\".concat(sessionIdIndex++);},register:function register(id,actor){children.set(id,actor);return id;},get:function get(id){return children.get(id);},free:function free(id){children[\"delete\"](id);}};/***/},/***/\"./node_modules/xstate/es/scheduler.js\":/*!*********************************************!*\\\n  !*** ./node_modules/xstate/es/scheduler.js ***!\n  \\*********************************************/ /***/function node_modulesXstateEsSchedulerJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */Scheduler:function Scheduler(){return(/* binding */_Scheduler);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");var defaultOptions={deferEvents:false};var _Scheduler=/*#__PURE__*/ /** @class */function(){function Scheduler(options){this.processingEvent=false;this.queue=[];this.initialized=false;this.options=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({},defaultOptions),options);}Scheduler.prototype.initialize=function(callback){this.initialized=true;if(callback){if(!this.options.deferEvents){this.schedule(callback);return;}this.process(callback);}this.flushEvents();};Scheduler.prototype.schedule=function(task){if(!this.initialized||this.processingEvent){this.queue.push(task);return;}if(this.queue.length!==0){throw new Error('Event queue should be empty when it is not processing events');}this.process(task);this.flushEvents();};Scheduler.prototype.clear=function(){this.queue=[];};Scheduler.prototype.flushEvents=function(){var nextCallback=this.queue.shift();while(nextCallback){this.process(nextCallback);nextCallback=this.queue.shift();}};Scheduler.prototype.process=function(callback){this.processingEvent=true;try{callback();}catch(e){// there is no use to keep the future events\n// as the situation is not anymore the same\nthis.clear();throw e;}finally{this.processingEvent=false;}};return Scheduler;}();/***/},/***/\"./node_modules/xstate/es/schema.js\":/*!******************************************!*\\\n  !*** ./node_modules/xstate/es/schema.js ***!\n  \\******************************************/ /***/function node_modulesXstateEsSchemaJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */createSchema:function createSchema(){return(/* binding */_createSchema);},/* harmony export */t:function t(){return(/* binding */_t);}/* harmony export */});function _createSchema(schema){return schema;}var _t=_createSchema;/***/},/***/\"./node_modules/xstate/es/serviceScope.js\":/*!************************************************!*\\\n  !*** ./node_modules/xstate/es/serviceScope.js ***!\n  \\************************************************/ /***/function node_modulesXstateEsServiceScopeJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */consume:function consume(){return(/* binding */_consume);},/* harmony export */provide:function provide(){return(/* binding */_provide);}/* harmony export */});/**\r\n * Maintains a stack of the current service in scope.\r\n * This is used to provide the correct service to spawn().\r\n */var serviceStack=[];var _provide=function _provide(service,fn){serviceStack.push(service);var result=fn(service);serviceStack.pop();return result;};var _consume=function _consume(fn){return fn(serviceStack[serviceStack.length-1]);};/***/},/***/\"./node_modules/xstate/es/stateUtils.js\":/*!**********************************************!*\\\n  !*** ./node_modules/xstate/es/stateUtils.js ***!\n  \\**********************************************/ /***/function node_modulesXstateEsStateUtilsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */getAdjList:function getAdjList(){return(/* binding */_getAdjList);},/* harmony export */getAllChildren:function getAllChildren(){return(/* binding */_getAllChildren);},/* harmony export */getAllStateNodes:function getAllStateNodes(){return(/* binding */_getAllStateNodes);},/* harmony export */getChildren:function getChildren(){return(/* binding */_getChildren);},/* harmony export */getConfiguration:function getConfiguration(){return(/* binding */_getConfiguration);},/* harmony export */getMeta:function getMeta(){return(/* binding */_getMeta);},/* harmony export */getTagsFromConfiguration:function getTagsFromConfiguration(){return(/* binding */_getTagsFromConfiguration);},/* harmony export */getValue:function getValue(){return(/* binding */_getValue);},/* harmony export */has:function has(){return(/* binding */_has);},/* harmony export */isInFinalState:function isInFinalState(){return(/* binding */_isInFinalState);},/* harmony export */isLeafNode:function isLeafNode(){return(/* binding */_isLeafNode);},/* harmony export */nextEvents:function nextEvents(){return(/* binding */_nextEvents);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");var _isLeafNode=function _isLeafNode(stateNode){return stateNode.type==='atomic'||stateNode.type==='final';};function _getAllChildren(stateNode){return Object.keys(stateNode.states).map(function(key){return stateNode.states[key];});}function _getChildren(stateNode){return _getAllChildren(stateNode).filter(function(sn){return sn.type!=='history';});}function _getAllStateNodes(stateNode){var stateNodes=[stateNode];if(_isLeafNode(stateNode)){return stateNodes;}return stateNodes.concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(_getChildren(stateNode).map(_getAllStateNodes)));}function _getConfiguration(prevStateNodes,stateNodes){var e_1,_a,e_2,_b,e_3,_c,e_4,_d;var prevConfiguration=new Set(prevStateNodes);var prevAdjList=_getAdjList(prevConfiguration);var configuration=new Set(stateNodes);try{// add all ancestors\nfor(var configuration_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration),configuration_1_1=configuration_1.next();!configuration_1_1.done;configuration_1_1=configuration_1.next()){var s=configuration_1_1.value;var m=s.parent;while(m&&!configuration.has(m)){configuration.add(m);m=m.parent;}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(configuration_1_1&&!configuration_1_1.done&&(_a=configuration_1[\"return\"]))_a.call(configuration_1);}finally{if(e_1)throw e_1.error;}}var adjList=_getAdjList(configuration);try{// add descendants\nfor(var configuration_2=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration),configuration_2_1=configuration_2.next();!configuration_2_1.done;configuration_2_1=configuration_2.next()){var s=configuration_2_1.value;// if previously active, add existing child nodes\nif(s.type==='compound'&&(!adjList.get(s)||!adjList.get(s).length)){if(prevAdjList.get(s)){prevAdjList.get(s).forEach(function(sn){return configuration.add(sn);});}else{s.initialStateNodes.forEach(function(sn){return configuration.add(sn);});}}else{if(s.type==='parallel'){try{for(var _e=(e_3=void 0,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(_getChildren(s))),_f=_e.next();!_f.done;_f=_e.next()){var child=_f.value;if(!configuration.has(child)){configuration.add(child);if(prevAdjList.get(child)){prevAdjList.get(child).forEach(function(sn){return configuration.add(sn);});}else{child.initialStateNodes.forEach(function(sn){return configuration.add(sn);});}}}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(_f&&!_f.done&&(_c=_e[\"return\"]))_c.call(_e);}finally{if(e_3)throw e_3.error;}}}}}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(configuration_2_1&&!configuration_2_1.done&&(_b=configuration_2[\"return\"]))_b.call(configuration_2);}finally{if(e_2)throw e_2.error;}}try{// add all ancestors\nfor(var configuration_3=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration),configuration_3_1=configuration_3.next();!configuration_3_1.done;configuration_3_1=configuration_3.next()){var s=configuration_3_1.value;var m=s.parent;while(m&&!configuration.has(m)){configuration.add(m);m=m.parent;}}}catch(e_4_1){e_4={error:e_4_1};}finally{try{if(configuration_3_1&&!configuration_3_1.done&&(_d=configuration_3[\"return\"]))_d.call(configuration_3);}finally{if(e_4)throw e_4.error;}}return configuration;}function getValueFromAdj(baseNode,adjList){var childStateNodes=adjList.get(baseNode);if(!childStateNodes){return{};// todo: fix?\n}if(baseNode.type==='compound'){var childStateNode=childStateNodes[0];if(childStateNode){if(_isLeafNode(childStateNode)){return childStateNode.key;}}else{return{};}}var stateValue={};childStateNodes.forEach(function(csn){stateValue[csn.key]=getValueFromAdj(csn,adjList);});return stateValue;}function _getAdjList(configuration){var e_5,_a;var adjList=new Map();try{for(var configuration_4=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration),configuration_4_1=configuration_4.next();!configuration_4_1.done;configuration_4_1=configuration_4.next()){var s=configuration_4_1.value;if(!adjList.has(s)){adjList.set(s,[]);}if(s.parent){if(!adjList.has(s.parent)){adjList.set(s.parent,[]);}adjList.get(s.parent).push(s);}}}catch(e_5_1){e_5={error:e_5_1};}finally{try{if(configuration_4_1&&!configuration_4_1.done&&(_a=configuration_4[\"return\"]))_a.call(configuration_4);}finally{if(e_5)throw e_5.error;}}return adjList;}function _getValue(rootNode,configuration){var config=_getConfiguration([rootNode],configuration);return getValueFromAdj(rootNode,_getAdjList(config));}function _has(iterable,item){if(Array.isArray(iterable)){return iterable.some(function(member){return member===item;});}if(iterable instanceof Set){return iterable.has(item);}return false;// TODO: fix\n}function _nextEvents(configuration){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(configuration.map(function(sn){return sn.ownEvents;})),false)))),false);}function _isInFinalState(configuration,stateNode){if(stateNode.type==='compound'){return _getChildren(stateNode).some(function(s){return s.type==='final'&&_has(configuration,s);});}if(stateNode.type==='parallel'){return _getChildren(stateNode).every(function(sn){return _isInFinalState(configuration,sn);});}return false;}function _getMeta(configuration){if(configuration===void 0){configuration=[];}return configuration.reduce(function(acc,stateNode){if(stateNode.meta!==undefined){acc[stateNode.id]=stateNode.meta;}return acc;},{});}function _getTagsFromConfiguration(configuration){return new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(configuration.map(function(sn){return sn.tags;})));}/***/},/***/\"./node_modules/xstate/es/types.js\":/*!*****************************************!*\\\n  !*** ./node_modules/xstate/es/types.js ***!\n  \\*****************************************/ /***/function node_modulesXstateEsTypesJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */ActionTypes:function ActionTypes(){return(/* binding */_ActionTypes);},/* harmony export */SpecialTargets:function SpecialTargets(){return(/* binding */_SpecialTargets);}/* harmony export */});var _ActionTypes;(function(ActionTypes){ActionTypes[\"Start\"]=\"xstate.start\";ActionTypes[\"Stop\"]=\"xstate.stop\";ActionTypes[\"Raise\"]=\"xstate.raise\";ActionTypes[\"Send\"]=\"xstate.send\";ActionTypes[\"Cancel\"]=\"xstate.cancel\";ActionTypes[\"NullEvent\"]=\"\";ActionTypes[\"Assign\"]=\"xstate.assign\";ActionTypes[\"After\"]=\"xstate.after\";ActionTypes[\"DoneState\"]=\"done.state\";ActionTypes[\"DoneInvoke\"]=\"done.invoke\";ActionTypes[\"Log\"]=\"xstate.log\";ActionTypes[\"Init\"]=\"xstate.init\";ActionTypes[\"Invoke\"]=\"xstate.invoke\";ActionTypes[\"ErrorExecution\"]=\"error.execution\";ActionTypes[\"ErrorCommunication\"]=\"error.communication\";ActionTypes[\"ErrorPlatform\"]=\"error.platform\";ActionTypes[\"ErrorCustom\"]=\"xstate.error\";ActionTypes[\"Update\"]=\"xstate.update\";ActionTypes[\"Pure\"]=\"xstate.pure\";ActionTypes[\"Choose\"]=\"xstate.choose\";})(_ActionTypes||(_ActionTypes={}));var _SpecialTargets;(function(SpecialTargets){SpecialTargets[\"Parent\"]=\"#_parent\";SpecialTargets[\"Internal\"]=\"#_internal\";})(_SpecialTargets||(_SpecialTargets={}));/***/},/***/\"./node_modules/xstate/es/utils.js\":/*!*****************************************!*\\\n  !*** ./node_modules/xstate/es/utils.js ***!\n  \\*****************************************/ /***/function node_modulesXstateEsUtilsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */createInvokeId:function createInvokeId(){return(/* binding */_createInvokeId);},/* harmony export */evaluateGuard:function evaluateGuard(){return(/* binding */_evaluateGuard);},/* harmony export */flatten:function flatten(){return(/* binding */_flatten);},/* harmony export */getActionType:function getActionType(){return(/* binding */_getActionType);},/* harmony export */getEventType:function getEventType(){return(/* binding */_getEventType);},/* harmony export */interopSymbols:function interopSymbols(){return(/* binding */_interopSymbols);},/* harmony export */isActor:function isActor(){return(/* binding */_isActor2);},/* harmony export */isArray:function isArray(){return(/* binding */_isArray);},/* harmony export */isBehavior:function isBehavior(){return(/* binding */_isBehavior);},/* harmony export */isBuiltInEvent:function isBuiltInEvent(){return(/* binding */_isBuiltInEvent);},/* harmony export */isFunction:function isFunction(){return(/* binding */_isFunction);},/* harmony export */isMachine:function isMachine(){return(/* binding */_isMachine);},/* harmony export */isObservable:function isObservable(){return(/* binding */_isObservable);},/* harmony export */isPromiseLike:function isPromiseLike(){return(/* binding */_isPromiseLike);},/* harmony export */isRaisableAction:function isRaisableAction(){return(/* binding */_isRaisableAction);},/* harmony export */isStateLike:function isStateLike(){return(/* binding */_isStateLike);},/* harmony export */isString:function isString(){return(/* binding */_isString);},/* harmony export */keys:function keys(){return(/* binding */_keys);},/* harmony export */mapContext:function mapContext(){return(/* binding */_mapContext);},/* harmony export */mapFilterValues:function mapFilterValues(){return(/* binding */_mapFilterValues);},/* harmony export */mapValues:function mapValues(){return(/* binding */_mapValues);},/* harmony export */matchesState:function matchesState(){return(/* binding */_matchesState);},/* harmony export */nestedPath:function nestedPath(){return(/* binding */_nestedPath);},/* harmony export */normalizeTarget:function normalizeTarget(){return(/* binding */_normalizeTarget);},/* harmony export */partition:function partition(){return(/* binding */_partition);},/* harmony export */path:function path(){return(/* binding */_path);},/* harmony export */pathToStateValue:function pathToStateValue(){return(/* binding */_pathToStateValue);},/* harmony export */pathsToStateValue:function pathsToStateValue(){return(/* binding */_pathsToStateValue);},/* harmony export */reportUnhandledExceptionOnInvocation:function reportUnhandledExceptionOnInvocation(){return(/* binding */_reportUnhandledExceptionOnInvocation);},/* harmony export */symbolObservable:function symbolObservable(){return(/* binding */_symbolObservable);},/* harmony export */toArray:function toArray(){return(/* binding */_toArray);},/* harmony export */toArrayStrict:function toArrayStrict(){return(/* binding */_toArrayStrict);},/* harmony export */toEventObject:function toEventObject(){return(/* binding */_toEventObject);},/* harmony export */toGuard:function toGuard(){return(/* binding */_toGuard);},/* harmony export */toInvokeSource:function toInvokeSource(){return(/* binding */_toInvokeSource2);},/* harmony export */toObserver:function toObserver(){return(/* binding */_toObserver);},/* harmony export */toSCXMLEvent:function toSCXMLEvent(){return(/* binding */_toSCXMLEvent);},/* harmony export */toStatePath:function toStatePath(){return(/* binding */_toStatePath);},/* harmony export */toStatePaths:function toStatePaths(){return(/* binding */_toStatePaths);},/* harmony export */toStateValue:function toStateValue(){return(/* binding */_toStateValue);},/* harmony export */toTransitionConfigArray:function toTransitionConfigArray(){return(/* binding */_toTransitionConfigArray);},/* harmony export */uniqueId:function uniqueId(){return(/* binding */_uniqueId);},/* harmony export */updateContext:function updateContext(){return(/* binding */_updateContext);},/* harmony export */updateHistoryStates:function updateHistoryStates(){return(/* binding */_updateHistoryStates);},/* harmony export */updateHistoryValue:function updateHistoryValue(){return(/* binding */_updateHistoryValue);},/* harmony export */warn:function warn(){return(/* binding */_warn);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _types_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(/*! ./types.js */\"./node_modules/xstate/es/types.js\");/* harmony import */var _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(/*! ./actionTypes.js */\"./node_modules/xstate/es/actionTypes.js\");/* harmony import */var _constants_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./constants.js */\"./node_modules/xstate/es/constants.js\");/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");var _a;function _keys(value){return Object.keys(value);}function _matchesState(parentStateId,childStateId,delimiter){if(delimiter===void 0){delimiter=_constants_js__WEBPACK_IMPORTED_MODULE_0__.STATE_DELIMITER;}var parentStateValue=_toStateValue(parentStateId,delimiter);var childStateValue=_toStateValue(childStateId,delimiter);if(_isString(childStateValue)){if(_isString(parentStateValue)){return childStateValue===parentStateValue;}// Parent more specific than child\nreturn false;}if(_isString(parentStateValue)){return parentStateValue in childStateValue;}return Object.keys(parentStateValue).every(function(key){if(!(key in childStateValue)){return false;}return _matchesState(parentStateValue[key],childStateValue[key]);});}function _getEventType(event){try{return _isString(event)||typeof event==='number'?\"\".concat(event):event.type;}catch(e){throw new Error('Events must be strings or objects with a string event.type property.');}}function _getActionType(action){try{return _isString(action)||typeof action==='number'?\"\".concat(action):_isFunction(action)?action.name:action.type;}catch(e){throw new Error('Actions must be strings or objects with a string action.type property.');}}function _toStatePath(stateId,delimiter){try{if(_isArray(stateId)){return stateId;}return stateId.toString().split(delimiter);}catch(e){throw new Error(\"'\".concat(stateId,\"' is not a valid state path.\"));}}function _isStateLike(state){return _typeof2(state)==='object'&&'value'in state&&'context'in state&&'event'in state&&'_event'in state;}function _toStateValue(stateValue,delimiter){if(_isStateLike(stateValue)){return stateValue.value;}if(_isArray(stateValue)){return _pathToStateValue(stateValue);}if(typeof stateValue!=='string'){return stateValue;}var statePath=_toStatePath(stateValue,delimiter);return _pathToStateValue(statePath);}function _pathToStateValue(statePath){if(statePath.length===1){return statePath[0];}var value={};var marker=value;for(var i=0;i<statePath.length-1;i++){if(i===statePath.length-2){marker[statePath[i]]=statePath[i+1];}else{marker[statePath[i]]={};marker=marker[statePath[i]];}}return value;}function _mapValues(collection,iteratee){var result={};var collectionKeys=Object.keys(collection);for(var i=0;i<collectionKeys.length;i++){var key=collectionKeys[i];result[key]=iteratee(collection[key],key,collection,i);}return result;}function _mapFilterValues(collection,iteratee,predicate){var e_1,_a;var result={};try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(collection)),_c=_b.next();!_c.done;_c=_b.next()){var key=_c.value;var item=collection[key];if(!predicate(item)){continue;}result[key]=iteratee(item,key,collection);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_1)throw e_1.error;}}return result;}/**\r\n * Retrieves a value at the given path.\r\n * @param props The deep path to the prop of the desired value\r\n */var _path=function _path(props){return function(object){var e_2,_a;var result=object;try{for(var props_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props),props_1_1=props_1.next();!props_1_1.done;props_1_1=props_1.next()){var prop=props_1_1.value;result=result[prop];}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(props_1_1&&!props_1_1.done&&(_a=props_1[\"return\"]))_a.call(props_1);}finally{if(e_2)throw e_2.error;}}return result;};};/**\r\n * Retrieves a value at the given path via the nested accessor prop.\r\n * @param props The deep path to the prop of the desired value\r\n */function _nestedPath(props,accessorProp){return function(object){var e_3,_a;var result=object;try{for(var props_2=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props),props_2_1=props_2.next();!props_2_1.done;props_2_1=props_2.next()){var prop=props_2_1.value;result=result[accessorProp][prop];}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(props_2_1&&!props_2_1.done&&(_a=props_2[\"return\"]))_a.call(props_2);}finally{if(e_3)throw e_3.error;}}return result;};}function _toStatePaths(stateValue){if(!stateValue){return[[]];}if(_isString(stateValue)){return[[stateValue]];}var result=_flatten(Object.keys(stateValue).map(function(key){var subStateValue=stateValue[key];if(typeof subStateValue!=='string'&&(!subStateValue||!Object.keys(subStateValue).length)){return[[key]];}return _toStatePaths(stateValue[key]).map(function(subPath){return[key].concat(subPath);});}));return result;}function _pathsToStateValue(paths){var e_4,_a;var result={};if(paths&&paths.length===1&&paths[0].length===1){return paths[0][0];}try{for(var paths_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(paths),paths_1_1=paths_1.next();!paths_1_1.done;paths_1_1=paths_1.next()){var currentPath=paths_1_1.value;var marker=result;// tslint:disable-next-line:prefer-for-of\nfor(var i=0;i<currentPath.length;i++){var subPath=currentPath[i];if(i===currentPath.length-2){marker[subPath]=currentPath[i+1];break;}marker[subPath]=marker[subPath]||{};marker=marker[subPath];}}}catch(e_4_1){e_4={error:e_4_1};}finally{try{if(paths_1_1&&!paths_1_1.done&&(_a=paths_1[\"return\"]))_a.call(paths_1);}finally{if(e_4)throw e_4.error;}}return result;}function _flatten(array){var _a;return(_a=[]).concat.apply(_a,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(array),false));}function _toArrayStrict(value){if(_isArray(value)){return value;}return[value];}function _toArray(value){if(value===undefined){return[];}return _toArrayStrict(value);}function _mapContext(mapper,context,_event){var e_5,_a;if(_isFunction(mapper)){return mapper(context,_event.data);}var result={};try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(mapper)),_c=_b.next();!_c.done;_c=_b.next()){var key=_c.value;var subMapper=mapper[key];if(_isFunction(subMapper)){result[key]=subMapper(context,_event.data);}else{result[key]=subMapper;}}}catch(e_5_1){e_5={error:e_5_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_5)throw e_5.error;}}return result;}function _isBuiltInEvent(eventType){return /^(done|error)\\./.test(eventType);}function _isPromiseLike(value){if(value instanceof Promise){return true;}// Check if shape matches the Promise/A+ specification for a \"thenable\".\nif(value!==null&&(_isFunction(value)||_typeof2(value)==='object')&&_isFunction(value.then)){return true;}return false;}function _isBehavior(value){return value!==null&&_typeof2(value)==='object'&&'transition'in value&&typeof value.transition==='function';}function _partition(items,predicate){var e_6,_a;var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)([[],[]],2),truthy=_b[0],falsy=_b[1];try{for(var items_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(items),items_1_1=items_1.next();!items_1_1.done;items_1_1=items_1.next()){var item=items_1_1.value;if(predicate(item)){truthy.push(item);}else{falsy.push(item);}}}catch(e_6_1){e_6={error:e_6_1};}finally{try{if(items_1_1&&!items_1_1.done&&(_a=items_1[\"return\"]))_a.call(items_1);}finally{if(e_6)throw e_6.error;}}return[truthy,falsy];}function _updateHistoryStates(hist,stateValue){return _mapValues(hist.states,function(subHist,key){if(!subHist){return undefined;}var subStateValue=(_isString(stateValue)?undefined:stateValue[key])||(subHist?subHist.current:undefined);if(!subStateValue){return undefined;}return{current:subStateValue,states:_updateHistoryStates(subHist,subStateValue)};});}function _updateHistoryValue(hist,stateValue){return{current:stateValue,states:_updateHistoryStates(hist,stateValue)};}function _updateContext(context,_event,assignActions,state){if(!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION){_warn(!!context,'Attempting to update undefined context');}var updatedContext=context?assignActions.reduce(function(acc,assignAction){var e_7,_a;var assignment=assignAction.assignment;var meta={state:state,action:assignAction,_event:_event};var partialUpdate={};if(_isFunction(assignment)){partialUpdate=assignment(acc,_event.data,meta);}else{try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(assignment)),_c=_b.next();!_c.done;_c=_b.next()){var key=_c.value;var propAssignment=assignment[key];partialUpdate[key]=_isFunction(propAssignment)?propAssignment(acc,_event.data,meta):propAssignment;}}catch(e_7_1){e_7={error:e_7_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_7)throw e_7.error;}}}return Object.assign({},acc,partialUpdate);},context):context;return updatedContext;}// tslint:disable-next-line:no-empty\nvar _warn=function _warn(){};if(!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION){_warn=function _warn(condition,message){var error=condition instanceof Error?condition:undefined;if(!error&&condition){return;}if(console!==undefined){var args=[\"Warning: \".concat(message)];if(error){args.push(error);}// tslint:disable-next-line:no-console\nconsole.warn.apply(console,args);}};}function _isArray(value){return Array.isArray(value);}// tslint:disable-next-line:ban-types\nfunction _isFunction(value){return typeof value==='function';}function _isString(value){return typeof value==='string';}function _toGuard(condition,guardMap){if(!condition){return undefined;}if(_isString(condition)){return{type:_constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,name:condition,predicate:guardMap?guardMap[condition]:undefined};}if(_isFunction(condition)){return{type:_constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,name:condition.name,predicate:condition};}return condition;}function _isObservable(value){try{return'subscribe'in value&&_isFunction(value.subscribe);}catch(e){return false;}}var _symbolObservable=/*#__PURE__*/function(){return typeof Symbol==='function'&&Symbol.observable||'@@observable';}();// TODO: to be removed in v5, left it out just to minimize the scope of the change and maintain compatibility with older versions of integration paackages\nvar _interopSymbols=(_a={},_a[_symbolObservable]=function(){return this;},_a[Symbol.observable]=function(){return this;},_a);function _isMachine(value){return!!value&&'__xstatenode'in value;}function _isActor2(value){return!!value&&typeof value.send==='function';}var _uniqueId=/*#__PURE__*/function(){var currentId=0;return function(){currentId++;return currentId.toString(16);};}();function _toEventObject(event,payload// id?: TEvent['type']\n){if(_isString(event)||typeof event==='number'){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({type:event},payload);}return event;}function _toSCXMLEvent(event,scxmlEvent){if(!_isString(event)&&'$$type'in event&&event.$$type==='scxml'){return event;}var eventObject=_toEventObject(event);return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({name:eventObject.type,data:eventObject,$$type:'scxml',type:'external'},scxmlEvent);}function _toTransitionConfigArray(event,configLike){var transitions=_toArrayStrict(configLike).map(function(transitionLike){if(typeof transitionLike==='undefined'||typeof transitionLike==='string'||_isMachine(transitionLike)){return{target:transitionLike,event:event};}return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({},transitionLike),{event:event});});return transitions;}function _normalizeTarget(target){if(target===undefined||target===_constants_js__WEBPACK_IMPORTED_MODULE_0__.TARGETLESS_KEY){return undefined;}return _toArray(target);}function _reportUnhandledExceptionOnInvocation(originalError,currentError,id){if(!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION){var originalStackTrace=originalError.stack?\" Stacktrace was '\".concat(originalError.stack,\"'\"):'';if(originalError===currentError){// tslint:disable-next-line:no-console\nconsole.error(\"Missing onError handler for invocation '\".concat(id,\"', error was '\").concat(originalError,\"'.\").concat(originalStackTrace));}else{var stackTrace=currentError.stack?\" Stacktrace was '\".concat(currentError.stack,\"'\"):'';// tslint:disable-next-line:no-console\nconsole.error(\"Missing onError handler and/or unhandled exception/promise rejection for invocation '\".concat(id,\"'. \")+\"Original error: '\".concat(originalError,\"'. \").concat(originalStackTrace,\" Current error is '\").concat(currentError,\"'.\").concat(stackTrace));}}}function _evaluateGuard(machine,guard,context,_event,state){var guards=machine.options.guards;var guardMeta={state:state,cond:guard,_event:_event};// TODO: do not hardcode!\nif(guard.type===_constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE){return((guards===null||guards===void 0?void 0:guards[guard.name])||guard.predicate)(context,_event.data,guardMeta);}var condFn=guards===null||guards===void 0?void 0:guards[guard.type];if(!condFn){throw new Error(\"Guard '\".concat(guard.type,\"' is not implemented on machine '\").concat(machine.id,\"'.\"));}return condFn(context,_event.data,guardMeta);}function _toInvokeSource2(src){if(typeof src==='string'){return{type:src};}return src;}function _toObserver(nextHandler,errorHandler,completionHandler){var noop=function noop(){};var isObserver=_typeof2(nextHandler)==='object';var self=isObserver?nextHandler:null;return{next:((isObserver?nextHandler.next:nextHandler)||noop).bind(self),error:((isObserver?nextHandler.error:errorHandler)||noop).bind(self),complete:((isObserver?nextHandler.complete:completionHandler)||noop).bind(self)};}function _createInvokeId(stateNodeId,index){return\"\".concat(stateNodeId,\":invocation[\").concat(index,\"]\");}function _isRaisableAction(action){return(action.type===_actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.raise||action.type===_actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.send&&action.to===_types_js__WEBPACK_IMPORTED_MODULE_4__.SpecialTargets.Internal)&&typeof action.delay!=='number';}/***/}/******/};/************************************************************************/ /******/ // The module cache\n/******/var __webpack_module_cache__={};/******/ /******/ // The require function\n/******/function __webpack_require__(moduleId){/******/ // Check if module is in cache\n/******/var cachedModule=__webpack_module_cache__[moduleId];/******/if(cachedModule!==undefined){/******/return cachedModule.exports;/******/}/******/ // Create a new module (and put it into the cache)\n/******/var module=__webpack_module_cache__[moduleId]={/******/ // no module.id needed\n/******/ // no module.loaded needed\n/******/exports:{}/******/};/******/ /******/ // Execute the module function\n/******/__webpack_modules__[moduleId](module,module.exports,__webpack_require__);/******/ /******/ // Return the exports of the module\n/******/return module.exports;/******/}/******/ /************************************************************************/ /******/ /* webpack/runtime/define property getters */ /******/(function(){/******/ // define getter functions for harmony exports\n/******/__webpack_require__.d=function(exports,definition){/******/for(var key in definition){/******/if(__webpack_require__.o(definition,key)&&!__webpack_require__.o(exports,key)){/******/Object.defineProperty(exports,key,{enumerable:true,get:definition[key]});/******/}/******/}/******/};/******/})();/******/ /******/ /* webpack/runtime/global */ /******/(function(){/******/__webpack_require__.g=function(){/******/if((typeof globalThis===\"undefined\"?\"undefined\":_typeof2(globalThis))==='object')return globalThis;/******/try{/******/return this||new Function('return this')();/******/}catch(e){/******/if((typeof window===\"undefined\"?\"undefined\":_typeof2(window))==='object')return window;/******/}/******/}();/******/})();/******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/(function(){/******/__webpack_require__.o=function(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);};/******/})();/******/ /******/ /* webpack/runtime/make namespace object */ /******/(function(){/******/ // define __esModule on exports\n/******/__webpack_require__.r=function(exports){/******/if(typeof Symbol!=='undefined'&&Symbol.toStringTag){/******/Object.defineProperty(exports,Symbol.toStringTag,{value:'Module'});/******/}/******/Object.defineProperty(exports,'__esModule',{value:true});/******/};/******/})();/******/ /************************************************************************/var __webpack_exports__={};// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n(function(){/*!****************************!*\\\n  !*** ./src/AudioModule.js ***!\n  \\****************************/function _typeof(obj){\"@babel/helpers - typeof\";return _typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&\"function\"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;},_typeof(obj);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _defineProperty(obj,key,value){key=_toPropertyKey(key);if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _toPropertyKey(arg){var key=_toPrimitive(arg,\"string\");return _typeof(key)===\"symbol\"?key:String(key);}function _toPrimitive(input,hint){if(_typeof(input)!==\"object\"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||\"default\");if(_typeof(res)!==\"object\")return res;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(hint===\"string\"?String:Number)(input);}// import state machines for audio input and output\nvar _require=__webpack_require__(/*! xstate */\"./node_modules/xstate/es/index.js\"),interpret=_require.interpret;var _require2=__webpack_require__(/*! ./state-machines/AudioInputMachine */\"./src/state-machines/AudioInputMachine.js\"),audioInputMachine=_require2.audioInputMachine;var _require3=__webpack_require__(/*! ./state-machines/AudioOutputMachine */\"./src/state-machines/AudioOutputMachine.js\"),audioOutputMachine=_require3.audioOutputMachine;var _require4=__webpack_require__(/*! ./LoggingModule */\"./src/LoggingModule.js\"),serializeStateValue=_require4.serializeStateValue;// depends on the injecting script (saypi.index.js) declaring the EventBus as a global variable\nvar EventBus=window.EventBus;// audio output (Pi)\nvar audioElement=document.querySelector(\"audio\");if(!audioElement){console.error(\"Audio element not found!\");}else{audioElement.preload=\"auto\";// enable aggressive preloading of audio\n}var audioOutputActor=interpret(audioOutputMachine).onTransition(function(state){if(state.changed){var fromState=state.history?serializeStateValue(state.history.value):\"N/A\";var toState=serializeStateValue(state.value);console.log(\"Audio Output Machine transitioned from \".concat(fromState,\" to \").concat(toState,\" with \").concat(state.event.type));console.log(state.context);}}).start();function registerAudioPlaybackEvents(audio,actor){var events=[\"loadstart\",\"loadedmetadata\",\"canplaythrough\",\"play\",\"pause\",\"ended\",\"seeked\",\"emptied\"];events.forEach(function(event){audio.addEventListener(event,function(){return actor.send(event);});});audio.addEventListener(\"playing\",function(){actor.send(\"play\");});}registerAudioPlaybackEvents(audioElement,audioOutputActor);// audio input (user)\nvar audioInputActor=interpret(audioInputMachine).start();/* These events are used to control/pass requests to the audio module from other modules */function registerAudioCommands(){// audio input (recording) commands\nEventBus.on(\"audio:setupRecording\",function(e){audioInputActor.send(\"acquire\");});EventBus.on(\"audio:tearDownRecording\",function(e){audioInputActor.send(\"release\");});EventBus.on(\"audio:startRecording\",function(e){// Check if Pi is currently speaking and stop her audio\naudioOutputActor.send(\"pause\");// Check if the MediaRecorder is acquired before starting?\naudioInputActor.send([\"acquire\",\"start\"]);});EventBus.on(\"audio:stopRecording\",function(e){audioInputActor.send(\"stopRequested\");/* resume or cancel Pi's audio */ /* TODO: reassess how to handle interruptions\n    audioOutputActor.send(\"play\"); // resume Pi's audio\n    audioOutputActor.send(\"stop\"); // cancel Pi's audio\n    */});// audio input (recording) events (pass MediaRecorder events -> audio input machine actor)\nEventBus.on(\"audio:dataavailable\",function(detail){audioInputActor.send(_objectSpread({type:\"dataAvailable\"},detail));});EventBus.on(\"audio:input:stop\",function(e){audioInputActor.send(\"stop\");});// audio output (playback) commands\nEventBus.on(\"audio:reload\",function(e){audioOutputActor.send(\"reload\");});}registerAudioCommands();})();/******/})();");

/***/ }),

/***/ "./src/icons/exit.svg":
/*!****************************!*\
  !*** ./src/icons/exit.svg ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64.06 64.33\">\n  <defs>\n    <style>\n      .cls-1 {\n        fill: #24381b;\n      }\n\n      .cls-1, .cls-2 {\n        stroke-width: 0px;\n      }\n\n      .cls-2 {\n        fill: #dfd7c2;\n      }\n    </style>\n  </defs>\n  <path class=\"cls-2\" d=\"m31.71,64.32C14.77,64.46-.44,49.93,0,31.33.41,14.47,14.29-.32,32.7,0c16.91.3,31.8,14.32,31.36,33.14-.39,16.76-14.49,31.55-32.34,31.18Zm10.67-23.19c.06-.7-.41-1.12-.84-1.55-2-2-3.94-4.07-6.02-5.97-1.14-1.04-1.32-1.68-.06-2.82,2.13-1.93,4.07-4.08,6.1-6.12.78-.79,1.31-1.64.34-2.56-.92-.87-1.72-.28-2.43.45-2.17,2.21-4.39,4.39-6.52,6.65-.72.77-1.16.7-1.84-.02-2.06-2.17-4.19-4.28-6.29-6.41-.76-.77-1.59-1.68-2.66-.63-1.14,1.12-.19,1.98.62,2.79,2.07,2.09,4.09,4.22,6.2,6.26.77.75.82,1.2.02,1.97-2.21,2.1-4.33,4.3-6.49,6.45-.79.78-1.3,1.65-.32,2.56.92.85,1.71.26,2.43-.47,2.11-2.12,4.28-4.19,6.33-6.38.88-.94,1.37-.86,2.21.03,2.13,2.26,4.37,4.41,6.57,6.6.51.51,1.09.78,1.8.48.56-.24.85-.68.87-1.3Z\"/>\n  <path class=\"cls-1\" d=\"m42.47,41.27c-.02.62-.32,1.06-.87,1.3-.71.31-1.29.03-1.8-.48-2.2-2.2-4.44-4.35-6.57-6.6-.84-.89-1.33-.96-2.21-.03-2.04,2.19-4.22,4.25-6.33,6.38-.72.72-1.51,1.32-2.43.47-.98-.91-.47-1.78.32-2.56,2.16-2.15,4.28-4.35,6.49-6.45.81-.77.76-1.22-.02-1.97-2.11-2.04-4.13-4.17-6.2-6.26-.8-.81-1.75-1.67-.62-2.79,1.07-1.05,1.9-.14,2.66.63,2.1,2.13,4.23,4.24,6.29,6.41.69.73,1.12.79,1.84.02,2.13-2.26,4.35-4.43,6.52-6.65.72-.73,1.51-1.31,2.43-.45.97.92.44,1.78-.34,2.56-2.03,2.04-3.97,4.19-6.1,6.12-1.25,1.14-1.08,1.78.06,2.82,2.09,1.91,4.02,3.97,6.02,5.97.43.43.9.85.84,1.55Z\"/>\n</svg>");

/***/ }),

/***/ "./src/icons/maximize.svg":
/*!********************************!*\
  !*** ./src/icons/maximize.svg ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" zoomAndPan=\"magnify\" viewBox=\"0 0 768 767.999994\" preserveAspectRatio=\"xMidYMid meet\" version=\"1.0\"><path fill=\"#e4d8c1\" d=\"M 768.132812 379.535156 C 768.132812 169.089844 597.523438 -1.496094 387.050781 -1.496094 C 176.609375 -1.496094 5.996094 169.089844 5.996094 379.535156 C 5.996094 589.949219 176.609375 760.539062 387.050781 760.539062 C 597.523438 760.539062 768.132812 589.949219 768.132812 379.535156 \" fill-opacity=\"1\" fill-rule=\"nonzero\"/><path fill=\"#776d6d\" d=\"M 538.996094 223.152344 L 306.535156 229.855469 L 538.996094 455.695312 Z M 538.996094 223.152344 \" fill-opacity=\"1\" fill-rule=\"nonzero\"/><path fill=\"#776d6d\" d=\"M 235.105469 535.890625 L 467.597656 529.1875 L 235.105469 303.34375 Z M 235.105469 535.890625 \" fill-opacity=\"1\" fill-rule=\"nonzero\"/></svg>");

/***/ }),

/***/ "./src/icons/muted_microphone.svg":
/*!****************************************!*\
  !*** ./src/icons/muted_microphone.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"500\" zoomAndPan=\"magnify\" viewBox=\"0 0 375 374.999991\" height=\"500\" preserveAspectRatio=\"xMidYMid meet\" version=\"1.0\"><path fill=\"#776d6d\" d=\"M 239.722656 126.441406 L 239.722656 122.300781 C 239.722656 93.507812 216.296875 70.078125 187.5 70.078125 C 158.703125 70.078125 135.277344 93.507812 135.277344 122.300781 L 135.277344 187.953125 C 135.277344 199.988281 139.410156 211.050781 146.273438 219.890625 Z M 239.722656 126.441406 \" fill-opacity=\"1\" fill-rule=\"nonzero\"/><path fill=\"#776d6d\" d=\"M 155.046875 228.792969 C 163.964844 235.898438 175.234375 240.175781 187.5 240.175781 C 216.296875 240.175781 239.722656 216.75 239.722656 187.953125 L 239.722656 144.113281 Z M 155.046875 228.792969 \" fill-opacity=\"1\" fill-rule=\"nonzero\"/><path fill=\"#776d6d\" d=\"M 187.5 0 C 83.945312 0 0 83.945312 0 187.5 C 0 291.054688 83.945312 375 187.5 375 C 291.054688 375 375 291.054688 375 187.5 C 375 83.945312 291.054688 0 187.5 0 Z M 287.484375 96.355469 L 254.640625 129.195312 L 254.640625 187.953125 C 254.640625 224.976562 224.523438 255.097656 187.5 255.097656 C 171.117188 255.097656 156.105469 249.183594 144.4375 239.402344 L 138.109375 245.730469 C 151.417969 257.121094 168.652344 264.046875 187.5 264.046875 C 229.457031 264.046875 263.59375 229.914062 263.59375 187.953125 C 263.59375 183.832031 266.933594 180.496094 271.054688 180.496094 C 275.175781 180.496094 278.515625 183.835938 278.515625 187.953125 C 278.515625 235.625 241.667969 274.828125 194.960938 278.640625 L 194.960938 304.921875 L 220.121094 304.921875 C 224.242188 304.921875 227.582031 308.261719 227.582031 312.382812 C 227.582031 316.5 224.242188 319.839844 220.121094 319.839844 L 154.875 319.839844 C 150.757812 319.839844 147.417969 316.5 147.417969 312.382812 C 147.417969 308.261719 150.757812 304.921875 154.875 304.921875 L 180.039062 304.921875 L 180.039062 278.636719 C 160.007812 277.003906 141.816406 268.824219 127.542969 256.296875 L 96.351562 287.484375 C 95.132812 288.703125 93.53125 289.316406 91.933594 289.316406 C 90.335938 289.316406 88.734375 288.703125 87.515625 287.484375 C 85.074219 285.042969 85.074219 281.085938 87.515625 278.644531 L 118.761719 247.398438 C 104.929688 231.4375 96.484375 210.6875 96.484375 187.953125 C 96.484375 183.832031 99.824219 180.496094 103.941406 180.496094 C 108.0625 180.496094 111.402344 183.835938 111.402344 187.953125 C 111.402344 206.574219 118.148438 223.628906 129.292969 236.867188 L 135.628906 230.53125 C 126.089844 218.9375 120.355469 204.105469 120.355469 187.953125 L 120.355469 122.300781 C 120.355469 85.28125 150.476562 55.160156 187.496094 55.160156 C 221.128906 55.160156 248.980469 80.039062 253.816406 112.34375 L 278.640625 87.515625 C 281.082031 85.078125 285.039062 85.078125 287.480469 87.515625 C 289.925781 89.957031 289.925781 93.914062 287.484375 96.355469 Z M 287.484375 96.355469 \" fill-opacity=\"1\" fill-rule=\"nonzero\"/></svg>");

/***/ }),

/***/ "./src/icons/play.svg":
/*!****************************!*\
  !*** ./src/icons/play.svg ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    zoomAndPan=\"magnify\" viewBox=\"0 0 375 374.999991\"\n    preserveAspectRatio=\"xMidYMid meet\" version=\"1.0\">\n    <defs>\n        <filter x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\" id=\"ee10b8e1b3\">\n            <feColorMatrix values=\"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0\"\n                color-interpolation-filters=\"sRGB\" />\n        </filter>\n        <mask id=\"e7d148bedc\">\n            <g filter=\"url(#ee10b8e1b3)\">\n                <rect x=\"-37.5\" width=\"450\" fill=\"#000000\" y=\"-37.499999\" height=\"449.999989\"\n                    fill-opacity=\"0.55\" />\n            </g>\n        </mask>\n        <clipPath id=\"9ca5135f77\">\n            <rect x=\"0\" width=\"375\" y=\"0\" height=\"375\" />\n        </clipPath>\n    </defs>\n    <g mask=\"url(#e7d148bedc)\">\n        <g transform=\"matrix(1, 0, 0, 1, 0, 0)\">\n            <g clip-path=\"url(#9ca5135f77)\">\n                <path fill=\"#418a2f\"\n                    d=\"M 375 187.5 C 375 190.570312 374.925781 193.636719 374.773438 196.699219 C 374.625 199.765625 374.398438 202.824219 374.097656 205.878906 C 373.796875 208.933594 373.421875 211.976562 372.96875 215.011719 C 372.519531 218.046875 371.996094 221.070312 371.398438 224.078125 C 370.796875 227.089844 370.125 230.082031 369.382812 233.058594 C 368.636719 236.035156 367.816406 238.992188 366.925781 241.929688 C 366.035156 244.863281 365.074219 247.777344 364.039062 250.667969 C 363.003906 253.554688 361.902344 256.417969 360.726562 259.253906 C 359.554688 262.089844 358.308594 264.894531 356.996094 267.667969 C 355.6875 270.441406 354.308594 273.179688 352.859375 275.886719 C 351.414062 278.59375 349.902344 281.261719 348.324219 283.894531 C 346.746094 286.527344 345.105469 289.117188 343.402344 291.667969 C 341.695312 294.222656 339.929688 296.730469 338.101562 299.195312 C 336.273438 301.660156 334.386719 304.078125 332.441406 306.449219 C 330.492188 308.820312 328.488281 311.144531 326.429688 313.417969 C 324.367188 315.691406 322.253906 317.914062 320.082031 320.082031 C 317.914062 322.253906 315.691406 324.367188 313.417969 326.429688 C 311.144531 328.488281 308.820312 330.492188 306.449219 332.441406 C 304.078125 334.386719 301.660156 336.273438 299.195312 338.101562 C 296.730469 339.929688 294.222656 341.695312 291.667969 343.402344 C 289.117188 345.105469 286.527344 346.746094 283.894531 348.324219 C 281.261719 349.902344 278.59375 351.414062 275.886719 352.859375 C 273.179688 354.308594 270.441406 355.6875 267.667969 356.996094 C 264.890625 358.308594 262.089844 359.554688 259.253906 360.726562 C 256.417969 361.902344 253.554688 363.003906 250.667969 364.039062 C 247.777344 365.074219 244.863281 366.035156 241.929688 366.925781 C 238.992188 367.816406 236.035156 368.636719 233.058594 369.378906 C 230.082031 370.125 227.089844 370.796875 224.078125 371.398438 C 221.070312 371.996094 218.046875 372.519531 215.011719 372.96875 C 211.976562 373.421875 208.933594 373.796875 205.878906 374.097656 C 202.824219 374.398438 199.765625 374.625 196.699219 374.773438 C 193.636719 374.925781 190.570312 375 187.5 375 C 184.429688 375 181.363281 374.925781 178.300781 374.773438 C 175.234375 374.625 172.175781 374.398438 169.121094 374.097656 C 166.066406 373.796875 163.023438 373.421875 159.988281 372.96875 C 156.953125 372.519531 153.929688 371.996094 150.921875 371.398438 C 147.910156 370.796875 144.917969 370.125 141.941406 369.378906 C 138.964844 368.636719 136.007812 367.816406 133.070312 366.925781 C 130.136719 366.035156 127.222656 365.074219 124.332031 364.039062 C 121.445312 363.003906 118.582031 361.902344 115.746094 360.726562 C 112.910156 359.554688 110.105469 358.308594 107.332031 356.996094 C 104.558594 355.6875 101.820312 354.308594 99.113281 352.859375 C 96.40625 351.414062 93.738281 349.902344 91.105469 348.324219 C 88.472656 346.746094 85.882812 345.105469 83.332031 343.402344 C 80.777344 341.695312 78.269531 339.929688 75.804688 338.101562 C 73.339844 336.273438 70.921875 334.386719 68.550781 332.4375 C 66.179688 330.492188 63.855469 328.488281 61.582031 326.429688 C 59.308594 324.367188 57.085938 322.253906 54.917969 320.082031 C 52.746094 317.914062 50.632812 315.691406 48.570312 313.417969 C 46.511719 311.144531 44.507812 308.820312 42.5625 306.449219 C 40.613281 304.078125 38.726562 301.660156 36.898438 299.195312 C 35.070312 296.730469 33.304688 294.222656 31.597656 291.667969 C 29.894531 289.117188 28.253906 286.527344 26.675781 283.894531 C 25.097656 281.261719 23.585938 278.59375 22.140625 275.886719 C 20.691406 273.179688 19.3125 270.441406 18.003906 267.667969 C 16.691406 264.894531 15.445312 262.089844 14.273438 259.253906 C 13.097656 256.417969 11.996094 253.554688 10.960938 250.667969 C 9.925781 247.777344 8.964844 244.863281 8.074219 241.929688 C 7.183594 238.992188 6.363281 236.035156 5.617188 233.058594 C 4.875 230.082031 4.203125 227.089844 3.601562 224.078125 C 3.003906 221.070312 2.480469 218.046875 2.03125 215.011719 C 1.578125 211.976562 1.203125 208.933594 0.902344 205.878906 C 0.601562 202.824219 0.375 199.765625 0.226562 196.699219 C 0.0742188 193.636719 0 190.570312 0 187.5 C 0 184.429688 0.0742188 181.363281 0.226562 178.300781 C 0.375 175.234375 0.601562 172.175781 0.902344 169.121094 C 1.203125 166.066406 1.578125 163.023438 2.03125 159.988281 C 2.480469 156.953125 3.003906 153.929688 3.601562 150.921875 C 4.203125 147.910156 4.875 144.917969 5.617188 141.941406 C 6.363281 138.964844 7.183594 136.007812 8.074219 133.070312 C 8.964844 130.136719 9.925781 127.222656 10.960938 124.332031 C 11.996094 121.445312 13.097656 118.582031 14.273438 115.746094 C 15.445312 112.910156 16.691406 110.105469 18.003906 107.332031 C 19.3125 104.558594 20.691406 101.820312 22.140625 99.113281 C 23.585938 96.40625 25.097656 93.738281 26.675781 91.105469 C 28.253906 88.472656 29.894531 85.882812 31.597656 83.332031 C 33.304688 80.777344 35.070312 78.269531 36.898438 75.804688 C 38.726562 73.339844 40.613281 70.921875 42.5625 68.550781 C 44.507812 66.179688 46.511719 63.855469 48.570312 61.582031 C 50.632812 59.308594 52.746094 57.085938 54.917969 54.917969 C 57.085938 52.746094 59.308594 50.632812 61.582031 48.570312 C 63.855469 46.511719 66.179688 44.507812 68.550781 42.558594 C 70.921875 40.613281 73.339844 38.726562 75.804688 36.898438 C 78.269531 35.070312 80.777344 33.304688 83.332031 31.597656 C 85.882812 29.894531 88.472656 28.253906 91.105469 26.675781 C 93.738281 25.097656 96.40625 23.585938 99.113281 22.140625 C 101.820312 20.691406 104.558594 19.3125 107.332031 18.003906 C 110.105469 16.691406 112.910156 15.445312 115.746094 14.273438 C 118.582031 13.097656 121.445312 11.996094 124.332031 10.960938 C 127.222656 9.925781 130.136719 8.964844 133.070312 8.074219 C 136.007812 7.183594 138.964844 6.363281 141.941406 5.621094 C 144.917969 4.875 147.910156 4.203125 150.921875 3.601562 C 153.929688 3.003906 156.953125 2.480469 159.988281 2.03125 C 163.023438 1.578125 166.066406 1.203125 169.121094 0.902344 C 172.175781 0.601562 175.234375 0.375 178.300781 0.226562 C 181.363281 0.0742188 184.429688 0 187.5 0 C 190.570312 0 193.636719 0.0742188 196.699219 0.226562 C 199.765625 0.375 202.824219 0.601562 205.878906 0.902344 C 208.933594 1.203125 211.976562 1.578125 215.011719 2.03125 C 218.046875 2.480469 221.070312 3.003906 224.078125 3.601562 C 227.089844 4.203125 230.082031 4.875 233.058594 5.617188 C 236.035156 6.363281 238.992188 7.183594 241.929688 8.074219 C 244.863281 8.964844 247.777344 9.925781 250.667969 10.960938 C 253.554688 11.996094 256.417969 13.097656 259.253906 14.273438 C 262.089844 15.445312 264.894531 16.691406 267.667969 18.003906 C 270.441406 19.3125 273.179688 20.691406 275.886719 22.140625 C 278.59375 23.585938 281.261719 25.097656 283.894531 26.675781 C 286.527344 28.253906 289.117188 29.894531 291.667969 31.597656 C 294.222656 33.304688 296.730469 35.070312 299.195312 36.898438 C 301.660156 38.726562 304.078125 40.613281 306.449219 42.558594 C 308.820312 44.507812 311.144531 46.511719 313.417969 48.570312 C 315.691406 50.632812 317.914062 52.746094 320.082031 54.917969 C 322.253906 57.085938 324.367188 59.308594 326.429688 61.582031 C 328.488281 63.855469 330.492188 66.179688 332.441406 68.550781 C 334.386719 70.921875 336.273438 73.339844 338.101562 75.804688 C 339.929688 78.269531 341.695312 80.777344 343.402344 83.332031 C 345.105469 85.882812 346.746094 88.472656 348.324219 91.105469 C 349.902344 93.738281 351.414062 96.40625 352.859375 99.113281 C 354.308594 101.820312 355.6875 104.558594 356.996094 107.332031 C 358.308594 110.105469 359.554688 112.910156 360.726562 115.746094 C 361.902344 118.582031 363.003906 121.445312 364.039062 124.332031 C 365.074219 127.222656 366.035156 130.136719 366.925781 133.070312 C 367.816406 136.007812 368.636719 138.964844 369.382812 141.941406 C 370.125 144.917969 370.796875 147.910156 371.398438 150.921875 C 371.996094 153.929688 372.519531 156.953125 372.96875 159.988281 C 373.421875 163.023438 373.796875 166.066406 374.097656 169.121094 C 374.398438 172.175781 374.625 175.234375 374.773438 178.300781 C 374.925781 181.363281 375 184.429688 375 187.5 Z M 375 187.5 \"\n                    fill-opacity=\"1\" fill-rule=\"nonzero\" />\n            </g>\n        </g>\n    </g>\n    <path fill=\"#ffffff\"\n        d=\"M 290.066406 188.304688 L 141.457031 280.796875 C 134.203125 288.050781 121.707031 282.914062 121.707031 272.636719 L 121.40625 102.566406 C 121.40625 92.289062 133.800781 87.152344 141.152344 94.40625 L 290.066406 171.882812 C 294.601562 176.519531 294.601562 183.773438 290.066406 188.304688 Z M 290.066406 188.304688 \"\n        fill-opacity=\"1\" fill-rule=\"nonzero\" />\n</svg>");

/***/ }),

/***/ "./src/icons/rectangles.svg":
/*!**********************************!*\
  !*** ./src/icons/rectangles.svg ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 307 640\">\n  <defs>\n    <style>\n      .innermost, .second, .third, .fourth, .fifth, .outermost {\n        stroke-width: 0px;\n      }\n      \n      .outermost {\n        fill: #e4f2d1;\n      }\n\n      .second {\n        fill: #cce8b5;\n      }\n\n      .third {\n        fill: #b3db95;\n      }\n\n      .fourth {\n        fill: #9bd078;\n      }\n\n      .fifth {\n        fill: #83c55c;\n      }\n\n      .innermost {\n        fill: #428a2f;\n      }\n    </style>\n  </defs>\n  <path class=\"outermost\" d=\"m306.9,320c0,105.3-.02,210.6.1,315.91,0,3.42-.67,4.1-4.09,4.09-99.6-.12-199.21-.12-298.81,0C.67,640,0,639.33,0,635.91.11,425.3.11,214.7,0,4.09,0,.67.67,0,4.09,0,103.7.12,203.3.12,302.91,0c3.42,0,4.1.67,4.09,4.09-.12,105.3-.1,210.6-.1,315.91Z\"/>\n  <path class=\"second\" d=\"m275.92,323c0,87.63,0,175.27,0,262.9,0,7.24-.55,7.93-7.86,7.98-14.66.09-29.31.03-43.97.03-60.96,0-121.92,0-182.88,0q-7.13,0-7.14-7.24c0-176.1,0-352.21,0-528.31q0-7.26,7.12-7.26c75.78,0,151.56,0,227.35,0q7.38,0,7.38,7.5c0,88.13,0,176.27,0,264.4Z\"/>\n  <path class=\"third\" d=\"m68.06,322.24c0-69.47,0-138.94,0-208.41,0-8.99,1.33-10.13,10.49-9.12,1.98.22,3.98.32,5.97.32,46.13.02,92.26.02,138.39,0,3.48,0,6.92-.23,10.41-.67,5.5-.7,8.74.46,8.73,7.25-.18,138.94-.13,277.88-.13,416.81,0,.33,0,.67,0,1q-.14,10.51-10.39,10.51c-52.13,0-104.25,0-156.38,0q-7.09,0-7.09-7.28c0-70.14,0-140.27,0-210.41Z\"/>\n  <path class=\"fourth\" d=\"m103.02,322.5c0-52.46,0-104.91,0-157.37,0-6.68.36-7.06,7.07-7.06,30.3-.01,60.6.07,90.9-.09,4.54-.02,6.08,1.33,6.07,5.98-.1,105.58-.1,211.16,0,316.74,0,4.18-1.27,5.37-5.38,5.35-29.3-.15-58.6-.08-87.9-.08q-10.76,0-10.76-11.09c0-50.79,0-101.58,0-152.37Z\"/>\n  <path class=\"fifth\" d=\"m173,322.2c0,35.29,0,70.58,0,105.88q0,6.89-6.99,6.9c-8.15,0-16.31-.13-24.46.06-3.47.08-4.68-1.09-4.61-4.59.18-9.65.06-19.31.06-28.96,0-58.26-.01-116.53.02-174.79,0-4.76-1.12-9.46-.14-14.3.51-2.54,1.39-3.38,3.8-3.36,8.82.06,17.64.14,26.46-.02,4.59-.09,5.95,1.85,5.94,6.33-.14,35.62-.08,71.25-.08,106.87Z\"/>\n  <path class=\"innermost\" d=\"m151.04,322.01c0-9.99.07-19.97-.05-29.96-.04-2.93.83-4.18,3.95-4.18,3.06,0,4.03,1.12,4.02,4.11-.09,19.97-.08,39.94.01,59.91.01,2.96-.84,4.16-3.96,4.14-3.03-.01-4.08-1.04-4.03-4.08.14-9.98.05-19.97.05-29.96Z\"/>\n</svg>");

/***/ }),

/***/ "./src/icons/waveform.svg":
/*!********************************!*\
  !*** ./src/icons/waveform.svg ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" viewBox=\"0 0 56.25 30\" class=\"waveform\">\n    <defs>\n        <clipPath id=\"a\">\n            <path d=\"M.54 12H3v5H.54Zm0 0\"/>\n        </clipPath>\n        <clipPath id=\"b\">\n            <path d=\"M25 2.2h2v24.68h-2Zm0 0\"/>\n        </clipPath>\n        <clipPath id=\"c\">\n            <path d=\"M53 12h1.98v5H53Zm0 0\"/>\n        </clipPath>\n    </defs>\n    <g clip-path=\"url(#a)\">\n        <path d=\"M1.48 12.71c-.5 0-.9.4-.9.9v1.85a.9.9 0 0 0 1.8 0v-1.84c0-.5-.4-.9-.9-.9Zm0 0\"/>\n    </g>\n    <path d=\"M4.98 6.63c-.5 0-.9.4-.9.9v14.01a.9.9 0 0 0 1.81 0v-14c0-.5-.4-.92-.9-.92Zm3.51 3.1a.9.9 0 0 0-.9.91v7.79a.9.9 0 0 0 1.8 0v-7.79c0-.5-.4-.9-.9-.9ZM12 3.83a.9.9 0 0 0-.91.9v19.6a.9.9 0 0 0 1.8 0V4.74c0-.5-.4-.9-.9-.9Zm3.5 8.29a.9.9 0 0 0-.91.9v3.03a.9.9 0 0 0 1.81 0v-3.03c0-.5-.4-.9-.9-.9ZM19 6.8c-.5 0-.9.4-.9.9v13.68a.9.9 0 0 0 1.8 0V7.7c0-.5-.4-.9-.9-.9Zm3.58-2.97h-.01c-.5 0-.9.4-.9.9l-.13 19.6c0 .5.4.9.9.91.5 0 .9-.4.9-.9l.14-19.6a.9.9 0 0 0-.9-.9Zm0 0\"/>\n    <g clip-path=\"url(#b)\">\n        <path d=\"M26 2.2c-.5 0-.9.4-.9.9v22.86a.9.9 0 1 0 1.81 0V3.11a.9.9 0 0 0-.9-.91Zm0 0\"/>\n    </g>\n    <path d=\"M29.52 7.71a.9.9 0 0 0-.91.9v11.85a.9.9 0 0 0 1.81 0V8.62c0-.5-.4-.9-.9-.9Zm3.5 2.93a.9.9 0 0 0-.9.91v5.97a.9.9 0 0 0 1.8 0v-5.97c0-.5-.4-.9-.9-.9Zm3.5-5.78c-.5 0-.9.4-.9.9v17.55a.9.9 0 0 0 1.81 0V5.76c0-.5-.4-.9-.9-.9Zm3.51 3.34c-.5 0-.9.4-.9.9v10.87a.9.9 0 0 0 1.8 0V9.1a.9.9 0 0 0-.9-.91Zm3.5 3.08c-.5 0-.9.4-.9.91v4.7a.9.9 0 1 0 1.8 0v-4.7a.9.9 0 0 0-.9-.9Zm3.51-7.45a.9.9 0 0 0-.91.9v19.6a.9.9 0 0 0 1.81 0V4.74c0-.5-.4-.9-.9-.9Zm3.5 5.57a.9.9 0 0 0-.9.91v8.45a.9.9 0 0 0 1.8 0v-8.45c0-.5-.4-.9-.9-.9Zm0 0\"/>\n    <g clip-path=\"url(#c)\">\n        <path d=\"M54.04 12.96a.9.9 0 0 0-.9.91v1.33a.9.9 0 1 0 1.8 0v-1.32a.9.9 0 0 0-.9-.92Zm0 0\"/>\n    </g>\n</svg>");

/***/ }),

/***/ "./src/styles/rectangles.css":
/*!***********************************!*\
  !*** ./src/styles/rectangles.css ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_rectangles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./rectangles.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/rectangles.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_rectangles_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_rectangles_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_rectangles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_rectangles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/styles/common.scss":
/*!********************************!*\
  !*** ./src/styles/common.scss ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_common_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./common.scss */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/common.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_common_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_common_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_common_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_common_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/styles/desktop.scss":
/*!*********************************!*\
  !*** ./src/styles/desktop.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_desktop_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./desktop.scss */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/desktop.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_desktop_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_desktop_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_desktop_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_desktop_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/styles/mobile.scss":
/*!********************************!*\
  !*** ./src/styles/mobile.scss ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_mobile_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./mobile.scss */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/mobile.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_mobile_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_mobile_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_mobile_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_mobile_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {



var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {



var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./node_modules/xstate/es/Actor.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/Actor.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDeferredActor: () => (/* binding */ createDeferredActor),
/* harmony export */   createInvocableActor: () => (/* binding */ createInvocableActor),
/* harmony export */   createNullActor: () => (/* binding */ createNullActor),
/* harmony export */   isActor: () => (/* binding */ isActor),
/* harmony export */   isSpawnedActor: () => (/* binding */ isSpawnedActor),
/* harmony export */   toActorRef: () => (/* binding */ toActorRef)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");
/* harmony import */ var _serviceScope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serviceScope.js */ "./node_modules/xstate/es/serviceScope.js");




function createNullActor(id) {
  var _a;

  return _a = {
    id: id,
    send: function () {
      return void 0;
    },
    subscribe: function () {
      return {
        unsubscribe: function () {
          return void 0;
        }
      };
    },
    getSnapshot: function () {
      return undefined;
    },
    toJSON: function () {
      return {
        id: id
      };
    }
  }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
    return this;
  }, _a;
}
/**
 * Creates a deferred actor that is able to be invoked given the provided
 * invocation information in its `.meta` value.
 *
 * @param invokeDefinition The meta information needed to invoke the actor.
 */

function createInvocableActor(invokeDefinition, machine, context, _event) {
  var _a;

  var invokeSrc = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(invokeDefinition.src);
  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];
  var resolvedData = invokeDefinition.data ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(invokeDefinition.data, context, _event) : undefined;
  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore

  tempActor.meta = invokeDefinition;
  return tempActor;
}
function createDeferredActor(entity, id, data) {
  var tempActor = createNullActor(id); // @ts-ignore

  tempActor.deferred = true;

  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)) {
    // "mute" the existing service scope so potential spawned actors within the `.initialState` stay deferred here
    var initialState_1 = tempActor.state = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_1__.provide)(undefined, function () {
      return (data ? entity.withContext(data) : entity).initialState;
    });

    tempActor.getSnapshot = function () {
      return initialState_1;
    };
  }

  return tempActor;
}
function isActor(item) {
  try {
    return typeof item.send === 'function';
  } catch (e) {
    return false;
  }
}
function isSpawnedActor(item) {
  return isActor(item) && 'id' in item;
} // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now

function toActorRef(actorRefLike) {
  var _a;

  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {
    subscribe: function () {
      return {
        unsubscribe: function () {
          return void 0;
        }
      };
    },
    id: 'anonymous',
    getSnapshot: function () {
      return undefined;
    }
  }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
    return this;
  }, _a), actorRefLike);
}




/***/ }),

/***/ "./node_modules/xstate/es/Machine.js":
/*!*******************************************!*\
  !*** ./node_modules/xstate/es/Machine.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Machine: () => (/* binding */ Machine),
/* harmony export */   createMachine: () => (/* binding */ createMachine)
/* harmony export */ });
/* harmony import */ var _StateNode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StateNode.js */ "./node_modules/xstate/es/StateNode.js");
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");



var warned = false;
function Machine(config, options, initialContext) {
  if (initialContext === void 0) {
    initialContext = config.context;
  }

  return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config, options, initialContext);
}
function createMachine(config, options) {
  if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION && !('predictableActionArguments' in config) && !warned) {
    warned = true;
    console.warn('It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html');
  }

  return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config, options);
}




/***/ }),

/***/ "./node_modules/xstate/es/State.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/State.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   State: () => (/* binding */ State),
/* harmony export */   bindActionToState: () => (/* binding */ bindActionToState),
/* harmony export */   isState: () => (/* binding */ isState),
/* harmony export */   isStateConfig: () => (/* binding */ isStateConfig),
/* harmony export */   stateValuesEqual: () => (/* binding */ stateValuesEqual)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ "./node_modules/xstate/es/constants.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");
/* harmony import */ var _stateUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stateUtils.js */ "./node_modules/xstate/es/stateUtils.js");
/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./actions.js */ "./node_modules/xstate/es/actions.js");
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");







function stateValuesEqual(a, b) {
  if (a === b) {
    return true;
  }

  if (a === undefined || b === undefined) {
    return false;
  }

  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(a) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(b)) {
    return a === b;
  }

  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  return aKeys.length === bKeys.length && aKeys.every(function (key) {
    return stateValuesEqual(a[key], b[key]);
  });
}
function isStateConfig(state) {
  if (typeof state !== 'object' || state === null) {
    return false;
  }

  return 'value' in state && '_event' in state;
}
/**
 * @deprecated Use `isStateConfig(object)` or `state instanceof State` instead.
 */

var isState = isStateConfig;
function bindActionToState(action, state) {
  var exec = action.exec;

  var boundAction = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, action), {
    exec: exec !== undefined ? function () {
      return exec(state.context, state.event, {
        action: action,
        state: state,
        _event: state._event
      });
    } : undefined
  });

  return boundAction;
}

var State =
/*#__PURE__*/

/** @class */
function () {
  /**
   * Creates a new State instance.
   * @param value The state value
   * @param context The extended state
   * @param historyValue The tree representing historical values of the state nodes
   * @param history The previous state
   * @param actions An array of action objects to execute as side-effects
   * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).
   * @param meta
   * @param events Internal event queue. Should be empty with run-to-completion semantics.
   * @param configuration
   */
  function State(config) {
    var _this = this;

    var _a;

    this.actions = [];
    this.activities = _constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;
    this.meta = {};
    this.events = [];
    this.value = config.value;
    this.context = config.context;
    this._event = config._event;
    this._sessionid = config._sessionid;
    this.event = this._event.data;
    this.historyValue = config.historyValue;
    this.history = config.history;
    this.actions = config.actions || [];
    this.activities = config.activities || _constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;
    this.meta = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.getMeta)(config.configuration);
    this.events = config.events || [];
    this.matches = this.matches.bind(this);
    this.toStrings = this.toStrings.bind(this);
    this.configuration = config.configuration;
    this.transitions = config.transitions;
    this.children = config.children;
    this.done = !!config.done;
    this.tags = (_a = Array.isArray(config.tags) ? new Set(config.tags) : config.tags) !== null && _a !== void 0 ? _a : new Set();
    this.machine = config.machine;
    Object.defineProperty(this, 'nextEvents', {
      get: function () {
        return (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.nextEvents)(_this.configuration);
      }
    });
  }
  /**
   * Creates a new State instance for the given `stateValue` and `context`.
   * @param stateValue
   * @param context
   */


  State.from = function (stateValue, context) {
    if (stateValue instanceof State) {
      if (stateValue.context !== context) {
        return new State({
          value: stateValue.value,
          context: context,
          _event: stateValue._event,
          _sessionid: null,
          historyValue: stateValue.historyValue,
          history: stateValue.history,
          actions: [],
          activities: stateValue.activities,
          meta: {},
          events: [],
          configuration: [],
          transitions: [],
          children: {}
        });
      }

      return stateValue;
    }

    var _event = _actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;
    return new State({
      value: stateValue,
      context: context,
      _event: _event,
      _sessionid: null,
      historyValue: undefined,
      history: undefined,
      actions: [],
      activities: undefined,
      meta: undefined,
      events: [],
      configuration: [],
      transitions: [],
      children: {}
    });
  };
  /**
   * Creates a new State instance for the given `config`.
   * @param config The state config
   */


  State.create = function (config) {
    return new State(config);
  };
  /**
   * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).
   * @param stateValue
   * @param context
   */


  State.inert = function (stateValue, context) {
    if (stateValue instanceof State) {
      if (!stateValue.actions.length) {
        return stateValue;
      }

      var _event = _actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;
      return new State({
        value: stateValue.value,
        context: context,
        _event: _event,
        _sessionid: null,
        historyValue: stateValue.historyValue,
        history: stateValue.history,
        activities: stateValue.activities,
        configuration: stateValue.configuration,
        transitions: [],
        children: {}
      });
    }

    return State.from(stateValue, context);
  };
  /**
   * Returns an array of all the string leaf state node paths.
   * @param stateValue
   * @param delimiter The character(s) that separate each subpath in the string state node path.
   */


  State.prototype.toStrings = function (stateValue, delimiter) {
    var _this = this;

    if (stateValue === void 0) {
      stateValue = this.value;
    }

    if (delimiter === void 0) {
      delimiter = '.';
    }

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {
      return [stateValue];
    }

    var valueKeys = Object.keys(stateValue);
    return valueKeys.concat.apply(valueKeys, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(valueKeys.map(function (key) {
      return _this.toStrings(stateValue[key], delimiter).map(function (s) {
        return key + delimiter + s;
      });
    })), false));
  };

  State.prototype.toJSON = function () {
    var _a = this;
        _a.configuration;
        _a.transitions;
        var tags = _a.tags;
        _a.machine;
        var jsonValues = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, ["configuration", "transitions", "tags", "machine"]);

    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, jsonValues), {
      tags: Array.from(tags)
    });
  };

  State.prototype.matches = function (parentStateValue) {
    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)(parentStateValue, this.value);
  };
  /**
   * Whether the current state configuration has a state node with the specified `tag`.
   * @param tag
   */


  State.prototype.hasTag = function (tag) {
    return this.tags.has(tag);
  };
  /**
   * Determines whether sending the `event` will cause a non-forbidden transition
   * to be selected, even if the transitions have no actions nor
   * change the state value.
   *
   * @param event The event to test
   * @returns Whether the event will cause a transition
   */


  State.prototype.can = function (event) {
    var _a;

    if (_environment_js__WEBPACK_IMPORTED_MODULE_5__.IS_PRODUCTION) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!this.machine, "state.can(...) used outside of a machine-created State object; this will always return false.");
    }

    var transitionData = (_a = this.machine) === null || _a === void 0 ? void 0 : _a.getTransitionData(this, event);
    return !!(transitionData === null || transitionData === void 0 ? void 0 : transitionData.transitions.length) && // Check that at least one transition is not forbidden
    transitionData.transitions.some(function (t) {
      return t.target !== undefined || t.actions.length;
    });
  };

  return State;
}();




/***/ }),

/***/ "./node_modules/xstate/es/StateNode.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/StateNode.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StateNode: () => (/* binding */ StateNode)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");
/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./State.js */ "./node_modules/xstate/es/State.js");
/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./actionTypes.js */ "./node_modules/xstate/es/actionTypes.js");
/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actions.js */ "./node_modules/xstate/es/actions.js");
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ "./node_modules/xstate/es/constants.js");
/* harmony import */ var _stateUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stateUtils.js */ "./node_modules/xstate/es/stateUtils.js");
/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Actor.js */ "./node_modules/xstate/es/Actor.js");
/* harmony import */ var _invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./invokeUtils.js */ "./node_modules/xstate/es/invokeUtils.js");











var NULL_EVENT = '';
var STATE_IDENTIFIER = '#';
var WILDCARD = '*';
var EMPTY_OBJECT = {};

var isStateId = function (str) {
  return str[0] === STATE_IDENTIFIER;
};

var createDefaultOptions = function () {
  return {
    actions: {},
    guards: {},
    services: {},
    activities: {},
    delays: {}
  };
};

var validateArrayifiedTransitions = function (stateNode, event, transitions) {
  var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {
    return !('cond' in transition) && !('in' in transition) && ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(transition.target) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(transition.target));
  });
  var eventText = event === NULL_EVENT ? 'the transient event' : "event '".concat(event, "'");
  (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!hasNonLastUnguardedTarget, "One or more transitions for ".concat(eventText, " on state '").concat(stateNode.id, "' are unreachable. ") + "Make sure that the default transition is the last one defined.");
};

var StateNode =
/*#__PURE__*/

/** @class */
function () {
  function StateNode(
  /**
   * The raw config used to create the machine.
   */
  config, options,
  /**
   * The initial extended state
   */
  _context, // TODO: this is unsafe, but we're removing it in v5 anyway
  _stateInfo) {
    if (_context === void 0) {
      _context = 'context' in config ? config.context : undefined;
    }

    var _this = this;

    var _a;

    this.config = config;
    this._context = _context;
    /**
     * The order this state node appears. Corresponds to the implicit SCXML document order.
     */

    this.order = -1;
    this.__xstatenode = true;
    this.__cache = {
      events: undefined,
      relativeValue: new Map(),
      initialStateValue: undefined,
      initialState: undefined,
      on: undefined,
      transitions: undefined,
      candidates: {},
      delayedTransitions: undefined
    };
    this.idMap = {};
    this.tags = [];
    this.options = Object.assign(createDefaultOptions(), options);
    this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;
    this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || '(machine)';
    this.machine = this.parent ? this.parent.machine : this;
    this.path = this.parent ? this.parent.path.concat(this.key) : [];
    this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : _constants_js__WEBPACK_IMPORTED_MODULE_1__.STATE_DELIMITER);
    this.id = this.config.id || (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([this.machine.key], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(this.path), false).join(this.delimiter);
    this.version = this.parent ? this.parent.version : this.config.version;
    this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');
    this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};
    this.description = this.config.description;

    if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!('parallel' in this.config), "The \"parallel\" property is deprecated and will be removed in version 4.1. ".concat(this.config.parallel ? "Replace with `type: 'parallel'`" : "Use `type: '".concat(this.type, "'`"), " in the config for state node '").concat(this.id, "' instead."));
    }

    this.initial = this.config.initial;
    this.states = this.config.states ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.config.states, function (stateConfig, key) {
      var _a;

      var stateNode = new StateNode(stateConfig, {}, undefined, {
        parent: _this,
        key: key
      });
      Object.assign(_this.idMap, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));
      return stateNode;
    }) : EMPTY_OBJECT; // Document order

    var order = 0;

    function dfs(stateNode) {
      var e_1, _a;

      stateNode.order = order++;

      try {
        for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllChildren)(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var child = _c.value;
          dfs(child);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    }

    dfs(this); // History config

    this.history = this.config.history === true ? 'shallow' : this.config.history || false;
    this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {
      var event = _a.event;
      return event === NULL_EVENT;
    }) : NULL_EVENT in this.config.on);
    this.strict = !!this.config.strict; // TODO: deprecate (entry)

    this.onEntry = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.entry || this.config.onEntry).map(function (action) {
      return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);
    }); // TODO: deprecate (exit)

    this.onExit = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.exit || this.config.onExit).map(function (action) {
      return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);
    });
    this.meta = this.config.meta;
    this.doneData = this.type === 'final' ? this.config.data : undefined;
    this.invoke = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.invoke).map(function (invokeConfig, i) {
      var _a, _b;

      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig)) {
        var invokeId = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);
        _this.machine.options.services = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);
        return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)({
          src: invokeId,
          id: invokeId
        });
      } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(invokeConfig.src)) {
        var invokeId = invokeConfig.id || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);
        return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, invokeConfig), {
          id: invokeId,
          src: invokeConfig.src
        }));
      } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig.src) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(invokeConfig.src)) {
        var invokeId = invokeConfig.id || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);
        _this.machine.options.services = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);
        return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({
          id: invokeId
        }, invokeConfig), {
          src: invokeId
        }));
      } else {
        var invokeSource = invokeConfig.src;
        return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({
          id: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i)
        }, invokeConfig), {
          src: invokeSource
        }));
      }
    });
    this.activities = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.activities).concat(this.invoke).map(function (activity) {
      return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActivityDefinition)(activity);
    });
    this.transition = this.transition.bind(this);
    this.tags = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.tags); // TODO: this is the real fix for initialization once
    // state node getters are deprecated
    // if (!this.parent) {
    //   this._init();
    // }
  }

  StateNode.prototype._init = function () {
    if (this.__cache.transitions) {
      return;
    }

    (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllStateNodes)(this).forEach(function (stateNode) {
      return stateNode.on;
    });
  };
  /**
   * Clones this state machine with custom options and context.
   *
   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.
   * @param context Custom context (will override predefined context)
   */


  StateNode.prototype.withConfig = function (options, context) {
    var _a = this.options,
        actions = _a.actions,
        activities = _a.activities,
        guards = _a.guards,
        services = _a.services,
        delays = _a.delays;
    return new StateNode(this.config, {
      actions: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, actions), options.actions),
      activities: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, activities), options.activities),
      guards: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, guards), options.guards),
      services: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, services), options.services),
      delays: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, delays), options.delays)
    }, context !== null && context !== void 0 ? context : this.context);
  };
  /**
   * Clones this state machine with custom context.
   *
   * @param context Custom context (will override predefined context, not recursive)
   */


  StateNode.prototype.withContext = function (context) {
    return new StateNode(this.config, this.options, context);
  };

  Object.defineProperty(StateNode.prototype, "context", {
    get: function () {
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(this._context) ? this._context() : this._context;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "definition", {
    /**
     * The well-structured state node definition.
     */
    get: function () {
      return {
        id: this.id,
        key: this.key,
        version: this.version,
        context: this.context,
        type: this.type,
        initial: this.initial,
        history: this.history,
        states: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.states, function (state) {
          return state.definition;
        }),
        on: this.on,
        transitions: this.transitions,
        entry: this.onEntry,
        exit: this.onExit,
        activities: this.activities || [],
        meta: this.meta,
        order: this.order || -1,
        data: this.doneData,
        invoke: this.invoke,
        description: this.description,
        tags: this.tags
      };
    },
    enumerable: false,
    configurable: true
  });

  StateNode.prototype.toJSON = function () {
    return this.definition;
  };

  Object.defineProperty(StateNode.prototype, "on", {
    /**
     * The mapping of events to transitions.
     */
    get: function () {
      if (this.__cache.on) {
        return this.__cache.on;
      }

      var transitions = this.transitions;
      return this.__cache.on = transitions.reduce(function (map, transition) {
        map[transition.eventType] = map[transition.eventType] || [];
        map[transition.eventType].push(transition);
        return map;
      }, {});
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "after", {
    get: function () {
      return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "transitions", {
    /**
     * All the transitions that can be taken from this state node.
     */
    get: function () {
      return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);
    },
    enumerable: false,
    configurable: true
  });

  StateNode.prototype.getCandidates = function (eventName) {
    if (this.__cache.candidates[eventName]) {
      return this.__cache.candidates[eventName];
    }

    var transient = eventName === NULL_EVENT;
    var candidates = this.transitions.filter(function (transition) {
      var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions

      return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;
    });
    this.__cache.candidates[eventName] = candidates;
    return candidates;
  };
  /**
   * All delayed transitions from the config.
   */


  StateNode.prototype.getDelayedTransitions = function () {
    var _this = this;

    var afterConfig = this.config.after;

    if (!afterConfig) {
      return [];
    }

    var mutateEntryExit = function (delay, i) {
      var delayRef = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(delay) ? "".concat(_this.id, ":delay[").concat(i, "]") : delay;
      var eventType = (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.after)(delayRef, _this.id);

      _this.onEntry.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.send)(eventType, {
        delay: delay
      }));

      _this.onExit.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.cancel)(eventType));

      return eventType;
    };

    var delayedTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(afterConfig) ? afterConfig.map(function (transition, i) {
      var eventType = mutateEntryExit(transition.delay, i);
      return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {
        event: eventType
      });
    }) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(afterConfig).map(function (delay, i) {
      var configTransition = afterConfig[delay];
      var resolvedTransition = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(configTransition) ? {
        target: configTransition
      } : configTransition;
      var resolvedDelay = !isNaN(+delay) ? +delay : delay;
      var eventType = mutateEntryExit(resolvedDelay, i);
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(resolvedTransition).map(function (transition) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {
          event: eventType,
          delay: resolvedDelay
        });
      });
    }));
    return delayedTransitions.map(function (delayedTransition) {
      var delay = delayedTransition.delay;
      return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, _this.formatTransition(delayedTransition)), {
        delay: delay
      });
    });
  };
  /**
   * Returns the state nodes represented by the current state value.
   *
   * @param state The state value or State instance
   */


  StateNode.prototype.getStateNodes = function (state) {
    var _a;

    var _this = this;

    if (!state) {
      return [];
    }

    var stateValue = state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State ? state.value : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(state, this.delimiter);

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {
      var initialStateValue = this.getStateNode(stateValue).initial;
      return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this, this.states[stateValue]];
    }

    var subStateKeys = Object.keys(stateValue);
    var subStateNodes = [this];
    subStateNodes.push.apply(subStateNodes, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(subStateKeys.map(function (subStateKey) {
      return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);
    }))), false));
    return subStateNodes;
  };
  /**
   * Returns `true` if this state node explicitly handles the given event.
   *
   * @param event The event in question
   */


  StateNode.prototype.handles = function (event) {
    var eventType = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getEventType)(event);
    return this.events.includes(eventType);
  };
  /**
   * Resolves the given `state` to a new `State` instance relative to this machine.
   *
   * This ensures that `.events` and `.nextEvents` represent the correct values.
   *
   * @param state The state to resolve
   */


  StateNode.prototype.resolveState = function (state) {
    var stateFromConfig = state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State ? state : _State_js__WEBPACK_IMPORTED_MODULE_7__.State.create(state);
    var configuration = Array.from((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(stateFromConfig.value)));
    return new _State_js__WEBPACK_IMPORTED_MODULE_7__.State((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, stateFromConfig), {
      value: this.resolve(stateFromConfig.value),
      configuration: configuration,
      done: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(configuration, this),
      tags: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(configuration),
      machine: this.machine
    }));
  };

  StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {
    var stateNode = this.getStateNode(stateValue);
    var next = stateNode.next(state, _event);

    if (!next || !next.transitions.length) {
      return this.next(state, _event);
    }

    return next;
  };

  StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {
    var subStateKeys = Object.keys(stateValue);
    var stateNode = this.getStateNode(subStateKeys[0]);

    var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);

    if (!next || !next.transitions.length) {
      return this.next(state, _event);
    }

    return next;
  };

  StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {
    var e_2, _a;

    var transitionMap = {};

    try {
      for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var subStateKey = _c.value;
        var subStateValue = stateValue[subStateKey];

        if (!subStateValue) {
          continue;
        }

        var subStateNode = this.getStateNode(subStateKey);

        var next = subStateNode._transition(subStateValue, state, _event);

        if (next) {
          transitionMap[subStateKey] = next;
        }
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_2) throw e_2.error;
      }
    }

    var stateTransitions = Object.keys(transitionMap).map(function (key) {
      return transitionMap[key];
    });
    var enabledTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function (st) {
      return st.transitions;
    }));
    var willTransition = stateTransitions.some(function (st) {
      return st.transitions.length > 0;
    });

    if (!willTransition) {
      return this.next(state, _event);
    }

    var configuration = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function (key) {
      return transitionMap[key].configuration;
    }));
    return {
      transitions: enabledTransitions,
      exitSet: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function (t) {
        return t.exitSet;
      })),
      configuration: configuration,
      source: state,
      actions: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function (key) {
        return transitionMap[key].actions;
      }))
    };
  };

  StateNode.prototype._transition = function (stateValue, state, _event) {
    // leaf node
    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {
      return this.transitionLeafNode(stateValue, state, _event);
    } // hierarchical node


    if (Object.keys(stateValue).length === 1) {
      return this.transitionCompoundNode(stateValue, state, _event);
    } // orthogonal node


    return this.transitionParallelNode(stateValue, state, _event);
  };

  StateNode.prototype.getTransitionData = function (state, event) {
    return this._transition(state.value, state, (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event));
  };

  StateNode.prototype.next = function (state, _event) {
    var e_3, _a;

    var _this = this;

    var eventName = _event.name;
    var actions = [];
    var nextStateNodes = [];
    var selectedTransition;

    try {
      for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var candidate = _c.value;
        var cond = candidate.cond,
            stateIn = candidate.in;
        var resolvedContext = state.context;
        var isInState = stateIn ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateIn) && isStateId(stateIn) ? // Check if in state by ID
        state.matches((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(this.getStateNodeById(stateIn).path, this.delimiter)) : // Check if in state by relative grandparent
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(stateIn, this.delimiter), (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.path)(this.path.slice(0, -2))(state.value)) : true;
        var guardPassed = false;

        try {
          guardPassed = !cond || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.evaluateGuard)(this.machine, cond, resolvedContext, _event, state);
        } catch (err) {
          throw new Error("Unable to evaluate guard '".concat(cond.name || cond.type, "' in transition for event '").concat(eventName, "' in state node '").concat(this.id, "':\n").concat(err.message));
        }

        if (guardPassed && isInState) {
          if (candidate.target !== undefined) {
            nextStateNodes = candidate.target;
          }

          actions.push.apply(actions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(candidate.actions), false));
          selectedTransition = candidate;
          break;
        }
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_3) throw e_3.error;
      }
    }

    if (!selectedTransition) {
      return undefined;
    }

    if (!nextStateNodes.length) {
      return {
        transitions: [selectedTransition],
        exitSet: [],
        configuration: state.value ? [this] : [],
        source: state,
        actions: actions
      };
    }

    var allNextStateNodes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function (stateNode) {
      return _this.getRelativeStateNodes(stateNode, state.historyValue);
    }));
    var isInternal = !!selectedTransition.internal;
    return {
      transitions: [selectedTransition],
      exitSet: isInternal ? [] : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function (targetNode) {
        return _this.getPotentiallyReenteringNodes(targetNode);
      })),
      configuration: allNextStateNodes,
      source: state,
      actions: actions
    };
  }; // even though the name of this function mentions reentry nodes
  // we are pushing its result into `exitSet`
  // that's because what we exit might be reentered (it's an invariant of reentrancy)


  StateNode.prototype.getPotentiallyReenteringNodes = function (targetNode) {
    if (this.order < targetNode.order) {
      return [this];
    }

    var nodes = [];
    var marker = this;
    var possibleAncestor = targetNode;

    while (marker && marker !== possibleAncestor) {
      nodes.push(marker);
      marker = marker.parent;
    }

    if (marker !== possibleAncestor) {
      // we never got to `possibleAncestor`, therefore the initial `marker` "escapes" it
      // it's in a different part of the tree so no states will be reentered for such an external transition
      return [];
    }

    nodes.push(possibleAncestor);
    return nodes;
  };

  StateNode.prototype.getActions = function (resolvedConfig, isDone, transition, currentContext, _event, prevState, predictableExec) {
    var e_4, _a, e_5, _b;

    var _this = this;

    var prevConfig = prevState ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(prevState.value)) : [];
    var entrySet = new Set();

    try {
      for (var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Array.from(resolvedConfig).sort(function (a, b) {
        return a.order - b.order;
      })), _d = _c.next(); !_d.done; _d = _c.next()) {
        var sn = _d.value;

        if (!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(prevConfig, sn) || (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet, sn) || sn.parent && entrySet.has(sn.parent)) {
          entrySet.add(sn);
        }
      }
    } catch (e_4_1) {
      e_4 = {
        error: e_4_1
      };
    } finally {
      try {
        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
      } finally {
        if (e_4) throw e_4.error;
      }
    }

    try {
      for (var prevConfig_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {
        var sn = prevConfig_1_1.value;

        if (!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(resolvedConfig, sn) || (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet, sn.parent)) {
          transition.exitSet.push(sn);
        }
      }
    } catch (e_5_1) {
      e_5 = {
        error: e_5_1
      };
    } finally {
      try {
        if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);
      } finally {
        if (e_5) throw e_5.error;
      }
    }

    transition.exitSet.sort(function (a, b) {
      return b.order - a.order;
    });
    var entryStates = Array.from(entrySet).sort(function (a, b) {
      return a.order - b.order;
    });
    var exitStates = new Set(transition.exitSet);
    var doneEvents = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(entryStates.map(function (sn) {
      var events = [];

      if (sn.type !== 'final') {
        return events;
      }

      var parent = sn.parent;

      if (!parent.parent) {
        return events;
      }

      events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(sn.id, sn.doneData), // TODO: deprecate - final states should not emit done events for their own state.
      (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(parent.id, sn.doneData ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(sn.doneData, currentContext, _event) : undefined));
      var grandparent = parent.parent;

      if (grandparent.type === 'parallel') {
        if ((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getChildren)(grandparent).every(function (parentNode) {
          return (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(transition.configuration, parentNode);
        })) {
          events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(grandparent.id));
        }
      }

      return events;
    }));
    var entryActions = entryStates.map(function (stateNode) {
      var entryActions = stateNode.onEntry;
      var invokeActions = stateNode.activities.map(function (activity) {
        return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.start)(activity);
      });
      return {
        type: 'entry',
        actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(predictableExec ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions), false) : (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions), false), _this.machine.options.actions)
      };
    }).concat({
      type: 'state_done',
      actions: doneEvents.map(function (event) {
        return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.raise)(event);
      })
    });
    var exitActions = Array.from(exitStates).map(function (stateNode) {
      return {
        type: 'exit',
        actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.onExit), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.activities.map(function (activity) {
          return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.stop)(activity);
        })), false), _this.machine.options.actions)
      };
    });
    var actions = exitActions.concat({
      type: 'transition',
      actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(transition.actions, this.machine.options.actions)
    }).concat(entryActions);

    if (isDone) {
      var stopActions = (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig), false).sort(function (a, b) {
        return b.order - a.order;
      }).map(function (stateNode) {
        return stateNode.onExit;
      })), this.machine.options.actions).filter(function (action) {
        return !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);
      });
      return actions.concat({
        type: 'stop',
        actions: stopActions
      });
    }

    return actions;
  };
  /**
   * Determines the next state given the current `state` and sent `event`.
   *
   * @param state The current State instance or state value
   * @param event The event that was sent at the current state
   * @param context The current context (extended state) of the current state
   */


  StateNode.prototype.transition = function (state, event, context, exec) {
    if (state === void 0) {
      state = this.initialState;
    }

    var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event);

    var currentState;

    if (state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State) {
      currentState = context === undefined ? state : this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(state, context));
    } else {
      var resolvedStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(state) ? this.resolve((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.getResolvedPath(state))) : this.resolve(state);
      var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;
      currentState = this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(resolvedStateValue, resolvedContext));
    }

    if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION && _event.name === WILDCARD) {
      throw new Error("An event cannot have the wildcard type ('".concat(WILDCARD, "')"));
    }

    if (this.strict) {
      if (!this.events.includes(_event.name) && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBuiltInEvent)(_event.name)) {
        throw new Error("Machine '".concat(this.id, "' does not accept event '").concat(_event.name, "'"));
      }
    }

    var stateTransition = this._transition(currentState.value, currentState, _event) || {
      transitions: [],
      configuration: [],
      exitSet: [],
      source: currentState,
      actions: []
    };
    var prevConfig = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(currentState.value));
    var resolvedConfig = stateTransition.configuration.length ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)(prevConfig, stateTransition.configuration) : prevConfig;
    stateTransition.configuration = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig), false);
    return this.resolveTransition(stateTransition, currentState, currentState.context, exec, _event);
  };

  StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent, predictableExec) {
    var _a;

    var currentActions = state.actions;
    state = this.transition(state, _event, undefined, predictableExec); // Save original event to state
    // TODO: this should be the raised event! Delete in V5 (breaking)

    state._event = originalEvent;
    state.event = originalEvent.data;

    (_a = state.actions).unshift.apply(_a, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(currentActions), false));

    return state;
  };

  StateNode.prototype.resolveTransition = function (stateTransition, currentState, context, predictableExec, _event) {
    var e_6, _a, e_7, _b;

    var _this = this;

    if (_event === void 0) {
      _event = _actions_js__WEBPACK_IMPORTED_MODULE_5__.initEvent;
    }

    var configuration = stateTransition.configuration; // Transition will "apply" if:
    // - this is the initial state (there is no current state)
    // - OR there are transitions

    var willTransition = !currentState || stateTransition.transitions.length > 0;
    var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];
    var isDone = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(resolvedConfiguration, this);
    var resolvedStateValue = willTransition ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getValue)(this.machine, configuration) : undefined;
    var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;
    var actionBlocks = this.getActions(new Set(resolvedConfiguration), isDone, stateTransition, context, _event, currentState, predictableExec);
    var activities = currentState ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, currentState.activities) : {};

    try {
      for (var actionBlocks_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {
        var block = actionBlocks_1_1.value;

        try {
          for (var _c = (e_7 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var action = _d.value;

            if (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start) {
              activities[action.activity.id || action.activity.type] = action;
            } else if (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.stop) {
              activities[action.activity.id || action.activity.type] = false;
            }
          }
        } catch (e_7_1) {
          e_7 = {
            error: e_7_1
          };
        } finally {
          try {
            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
          } finally {
            if (e_7) throw e_7.error;
          }
        }
      }
    } catch (e_6_1) {
      e_6 = {
        error: e_6_1
      };
    } finally {
      try {
        if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);
      } finally {
        if (e_6) throw e_6.error;
      }
    }

    var _e = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.resolveActions)(this, currentState, context, _event, actionBlocks, predictableExec, this.machine.config.predictableActionArguments || this.machine.config.preserveActionOrder), 2),
        resolvedActions = _e[0],
        updatedContext = _e[1];

    var _f = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.partition)(resolvedActions, _utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction), 2),
        raisedEvents = _f[0],
        nonRaisedActions = _f[1];

    var invokeActions = resolvedActions.filter(function (action) {
      var _a;

      return action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.invoke;
    });
    var children = invokeActions.reduce(function (acc, action) {
      acc[action.activity.id] = (0,_Actor_js__WEBPACK_IMPORTED_MODULE_9__.createInvocableActor)(action.activity, _this.machine, updatedContext, _event);
      return acc;
    }, currentState ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, currentState.children) : {});
    var nextState = new _State_js__WEBPACK_IMPORTED_MODULE_7__.State({
      value: resolvedStateValue || currentState.value,
      context: updatedContext,
      _event: _event,
      // Persist _sessionid between states
      _sessionid: currentState ? currentState._sessionid : null,
      historyValue: resolvedStateValue ? historyValue ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.updateHistoryValue)(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,
      history: !resolvedStateValue || stateTransition.source ? currentState : undefined,
      actions: resolvedStateValue ? nonRaisedActions : [],
      activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},
      events: [],
      configuration: resolvedConfiguration,
      transitions: stateTransition.transitions,
      children: children,
      done: isDone,
      tags: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(resolvedConfiguration),
      machine: this
    });
    var didUpdateContext = context !== updatedContext;
    nextState.changed = _event.name === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks

    var history = nextState.history;

    if (history) {
      delete history.history;
    } // There are transient transitions if the machine is not in a final state
    // and if some of the state nodes have transient ("always") transitions.


    var hasAlwaysTransitions = !isDone && (this._transient || configuration.some(function (stateNode) {
      return stateNode._transient;
    })); // If there are no enabled transitions, check if there are transient transitions.
    // If there are transient transitions, continue checking for more transitions
    // because an transient transition should be triggered even if there are no
    // enabled transitions.
    //
    // If we're already working on an transient transition then stop to prevent an infinite loop.
    //
    // Otherwise, if there are no enabled nor transient transitions, we are done.

    if (!willTransition && (!hasAlwaysTransitions || _event.name === NULL_EVENT)) {
      return nextState;
    }

    var maybeNextState = nextState;

    if (!isDone) {
      if (hasAlwaysTransitions) {
        maybeNextState = this.resolveRaisedTransition(maybeNextState, {
          type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.nullEvent
        }, _event, predictableExec);
      }

      while (raisedEvents.length) {
        var raisedEvent = raisedEvents.shift();
        maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event, predictableExec);
      }
    } // Detect if state changed


    var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !(0,_State_js__WEBPACK_IMPORTED_MODULE_7__.stateValuesEqual)(maybeNextState.value, history.value) : undefined);
    maybeNextState.changed = changed; // Preserve original history after raised events

    maybeNextState.history = history;
    return maybeNextState;
  };
  /**
   * Returns the child state node from its relative `stateKey`, or throws.
   */


  StateNode.prototype.getStateNode = function (stateKey) {
    if (isStateId(stateKey)) {
      return this.machine.getStateNodeById(stateKey);
    }

    if (!this.states) {
      throw new Error("Unable to retrieve child state '".concat(stateKey, "' from '").concat(this.id, "'; no child states exist."));
    }

    var result = this.states[stateKey];

    if (!result) {
      throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
    }

    return result;
  };
  /**
   * Returns the state node with the given `stateId`, or throws.
   *
   * @param stateId The state ID. The prefix "#" is removed.
   */


  StateNode.prototype.getStateNodeById = function (stateId) {
    var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;

    if (resolvedStateId === this.id) {
      return this;
    }

    var stateNode = this.machine.idMap[resolvedStateId];

    if (!stateNode) {
      throw new Error("Child state node '#".concat(resolvedStateId, "' does not exist on machine '").concat(this.id, "'"));
    }

    return stateNode;
  };
  /**
   * Returns the relative state node from the given `statePath`, or throws.
   *
   * @param statePath The string or string array relative path to the state node.
   */


  StateNode.prototype.getStateNodeByPath = function (statePath) {
    if (typeof statePath === 'string' && isStateId(statePath)) {
      try {
        return this.getStateNodeById(statePath.slice(1));
      } catch (e) {// try individual paths
        // throw e;
      }
    }

    var arrayStatePath = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(statePath, this.delimiter).slice();
    var currentStateNode = this;

    while (arrayStatePath.length) {
      var key = arrayStatePath.shift();

      if (!key.length) {
        break;
      }

      currentStateNode = currentStateNode.getStateNode(key);
    }

    return currentStateNode;
  };
  /**
   * Resolves a partial state value with its full representation in this machine.
   *
   * @param stateValue The partial state value to resolve.
   */


  StateNode.prototype.resolve = function (stateValue) {
    var _a;

    var _this = this;

    if (!stateValue) {
      return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties
    }

    switch (this.type) {
      case 'parallel':
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.initialStateValue, function (subStateValue, subStateKey) {
          return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;
        });

      case 'compound':
        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {
          var subStateNode = this.getStateNode(stateValue);

          if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {
            return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;
          }

          return stateValue;
        }

        if (!Object.keys(stateValue).length) {
          return this.initialStateValue || {};
        }

        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(stateValue, function (subStateValue, subStateKey) {
          return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;
        });

      default:
        return stateValue || EMPTY_OBJECT;
    }
  };

  StateNode.prototype.getResolvedPath = function (stateIdentifier) {
    if (isStateId(stateIdentifier)) {
      var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];

      if (!stateNode) {
        throw new Error("Unable to find state node '".concat(stateIdentifier, "'"));
      }

      return stateNode.path;
    }

    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(stateIdentifier, this.delimiter);
  };

  Object.defineProperty(StateNode.prototype, "initialStateValue", {
    get: function () {
      var _a;

      if (this.__cache.initialStateValue) {
        return this.__cache.initialStateValue;
      }

      var initialStateValue;

      if (this.type === 'parallel') {
        initialStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states, function (state) {
          return state.initialStateValue || EMPTY_OBJECT;
        }, function (stateNode) {
          return !(stateNode.type === 'history');
        });
      } else if (this.initial !== undefined) {
        if (!this.states[this.initial]) {
          throw new Error("Initial state '".concat(this.initial, "' not found on '").concat(this.key, "'"));
        }

        initialStateValue = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);
      } else {
        // The finite state value of a machine without child states is just an empty object
        initialStateValue = {};
      }

      this.__cache.initialStateValue = initialStateValue;
      return this.__cache.initialStateValue;
    },
    enumerable: false,
    configurable: true
  });

  StateNode.prototype.getInitialState = function (stateValue, context) {
    this._init(); // TODO: this should be in the constructor (see note in constructor)


    var configuration = this.getStateNodes(stateValue);
    return this.resolveTransition({
      configuration: configuration,
      exitSet: [],
      transitions: [],
      source: undefined,
      actions: []
    }, undefined, context !== null && context !== void 0 ? context : this.machine.context, undefined);
  };

  Object.defineProperty(StateNode.prototype, "initialState", {
    /**
     * The initial State instance, which includes all actions to be executed from
     * entering the initial state.
     */
    get: function () {
      var initialStateValue = this.initialStateValue;

      if (!initialStateValue) {
        throw new Error("Cannot retrieve initial state from simple state '".concat(this.id, "'."));
      }

      return this.getInitialState(initialStateValue);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "target", {
    /**
     * The target state value of the history state node, if it exists. This represents the
     * default state value to transition to if no history value exists yet.
     */
    get: function () {
      var target;

      if (this.type === 'history') {
        var historyConfig = this.config;

        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(historyConfig.target)) {
          target = isStateId(historyConfig.target) ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;
        } else {
          target = historyConfig.target;
        }
      }

      return target;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Returns the leaf nodes from a state path relative to this state node.
   *
   * @param relativeStateId The relative state path to retrieve the state nodes
   * @param history The previous state to retrieve history
   * @param resolve Whether state nodes should resolve to initial child state nodes
   */

  StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {
    if (resolve === void 0) {
      resolve = true;
    }

    return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];
  };

  Object.defineProperty(StateNode.prototype, "initialStateNodes", {
    get: function () {
      var _this = this;

      if ((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this)) {
        return [this];
      } // Case when state node is compound but no initial state is defined


      if (this.type === 'compound' && !this.initial) {
        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "Compound state node '".concat(this.id, "' has no initial state."));
        }

        return [this];
      }

      var initialStateNodePaths = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(this.initialStateValue);
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(initialStateNodePaths.map(function (initialPath) {
        return _this.getFromRelativePath(initialPath);
      }));
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Retrieves state nodes from a relative path to this state node.
   *
   * @param relativePath The relative path from this state node
   * @param historyValue
   */

  StateNode.prototype.getFromRelativePath = function (relativePath) {
    if (!relativePath.length) {
      return [this];
    }

    var _a = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(relativePath),
        stateKey = _a[0],
        childStatePath = _a.slice(1);

    if (!this.states) {
      throw new Error("Cannot retrieve subPath '".concat(stateKey, "' from node with no states"));
    }

    var childStateNode = this.getStateNode(stateKey);

    if (childStateNode.type === 'history') {
      return childStateNode.resolveHistory();
    }

    if (!this.states[stateKey]) {
      throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
    }

    return this.states[stateKey].getFromRelativePath(childStatePath);
  };

  StateNode.prototype.historyValue = function (relativeStateValue) {
    if (!Object.keys(this.states).length) {
      return undefined;
    }

    return {
      current: relativeStateValue || this.initialStateValue,
      states: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states, function (stateNode, key) {
        if (!relativeStateValue) {
          return stateNode.historyValue();
        }

        var subStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(relativeStateValue) ? undefined : relativeStateValue[key];
        return stateNode.historyValue(subStateValue || stateNode.initialStateValue);
      }, function (stateNode) {
        return !stateNode.history;
      })
    };
  };
  /**
   * Resolves to the historical value(s) of the parent state node,
   * represented by state nodes.
   *
   * @param historyValue
   */


  StateNode.prototype.resolveHistory = function (historyValue) {
    var _this = this;

    if (this.type !== 'history') {
      return [this];
    }

    var parent = this.parent;

    if (!historyValue) {
      var historyTarget = this.target;
      return historyTarget ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(historyTarget).map(function (relativeChildPath) {
        return parent.getFromRelativePath(relativeChildPath);
      })) : parent.initialStateNodes;
    }

    var subHistoryValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.nestedPath)(parent.path, 'states')(historyValue).current;

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(subHistoryValue)) {
      return [parent.getStateNode(subHistoryValue)];
    }

    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(subHistoryValue).map(function (subStatePath) {
      return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];
    }));
  };

  Object.defineProperty(StateNode.prototype, "stateIds", {
    /**
     * All the state node IDs of this state node and its descendant state nodes.
     */
    get: function () {
      var _this = this;

      var childStateIds = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(this.states).map(function (stateKey) {
        return _this.states[stateKey].stateIds;
      }));
      return [this.id].concat(childStateIds);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "events", {
    /**
     * All the event types accepted by this state node and its descendants.
     */
    get: function () {
      var e_8, _a, e_9, _b;

      if (this.__cache.events) {
        return this.__cache.events;
      }

      var states = this.states;
      var events = new Set(this.ownEvents);

      if (states) {
        try {
          for (var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var stateId = _d.value;
            var state = states[stateId];

            if (state.states) {
              try {
                for (var _e = (e_9 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {
                  var event_1 = _f.value;
                  events.add("".concat(event_1));
                }
              } catch (e_9_1) {
                e_9 = {
                  error: e_9_1
                };
              } finally {
                try {
                  if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                } finally {
                  if (e_9) throw e_9.error;
                }
              }
            }
          }
        } catch (e_8_1) {
          e_8 = {
            error: e_8_1
          };
        } finally {
          try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
          } finally {
            if (e_8) throw e_8.error;
          }
        }
      }

      return this.__cache.events = Array.from(events);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "ownEvents", {
    /**
     * All the events that have transitions directly from this state node.
     *
     * Excludes any inert events.
     */
    get: function () {
      var events = new Set(this.transitions.filter(function (transition) {
        return !(!transition.target && !transition.actions.length && transition.internal);
      }).map(function (transition) {
        return transition.eventType;
      }));
      return Array.from(events);
    },
    enumerable: false,
    configurable: true
  });

  StateNode.prototype.resolveTarget = function (_target) {
    var _this = this;

    if (_target === undefined) {
      // an undefined target signals that the state node should not transition from that state when receiving that event
      return undefined;
    }

    return _target.map(function (target) {
      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(target)) {
        return target;
      }

      var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,
      // do not include machine key on target

      if (isInternalTarget && !_this.parent) {
        return _this.getStateNodeByPath(target.slice(1));
      }

      var resolvedTarget = isInternalTarget ? _this.key + target : target;

      if (_this.parent) {
        try {
          var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);

          return targetStateNode;
        } catch (err) {
          throw new Error("Invalid transition definition for state node '".concat(_this.id, "':\n").concat(err.message));
        }
      } else {
        return _this.getStateNodeByPath(resolvedTarget);
      }
    });
  };

  StateNode.prototype.formatTransition = function (transitionConfig) {
    var _this = this;

    var normalizedTarget = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.normalizeTarget)(transitionConfig.target);
    var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(_target) && _target[0] === _this.delimiter;
    }) : true;
    var guards = this.machine.options.guards;
    var target = this.resolveTarget(normalizedTarget);

    var transition = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transitionConfig), {
      actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig.actions)),
      cond: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toGuard)(transitionConfig.cond, guards),
      target: target,
      source: this,
      internal: internal,
      eventType: transitionConfig.event,
      toJSON: function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {
          target: transition.target ? transition.target.map(function (t) {
            return "#".concat(t.id);
          }) : undefined,
          source: "#".concat(_this.id)
        });
      }
    });

    return transition;
  };

  StateNode.prototype.formatTransitions = function () {
    var e_10, _a;

    var _this = this;

    var onConfig;

    if (!this.config.on) {
      onConfig = [];
    } else if (Array.isArray(this.config.on)) {
      onConfig = this.config.on;
    } else {
      var _b = this.config.on,
          _c = WILDCARD,
          _d = _b[_c],
          wildcardConfigs = _d === void 0 ? [] : _d,
          strictTransitionConfigs_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__rest)(_b, [typeof _c === "symbol" ? _c : _c + ""]);

      onConfig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(strictTransitionConfigs_1).map(function (key) {
        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION && key === NULL_EVENT) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. " + "Please check the `on` configuration for \"#".concat(_this.id, "\"."));
        }

        var transitionConfigArray = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(key, strictTransitionConfigs_1[key]);

        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {
          validateArrayifiedTransitions(_this, key, transitionConfigArray);
        }

        return transitionConfigArray;
      }).concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(WILDCARD, wildcardConfigs)));
    }

    var eventlessConfig = this.config.always ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)('', this.config.always) : [];
    var doneConfig = this.config.onDone ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(this.id)), this.config.onDone) : [];

    if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!(this.config.onDone && !this.parent), "Root nodes cannot have an \".onDone\" transition. Please check the config of \"".concat(this.id, "\"."));
    }

    var invokeConfig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(this.invoke.map(function (invokeDef) {
      var settleTransitions = [];

      if (invokeDef.onDone) {
        settleTransitions.push.apply(settleTransitions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.doneInvoke)(invokeDef.id)), invokeDef.onDone)), false));
      }

      if (invokeDef.onError) {
        settleTransitions.push.apply(settleTransitions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.error)(invokeDef.id)), invokeDef.onError)), false));
      }

      return settleTransitions;
    }));
    var delayedTransitions = this.after;
    var formattedTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(doneConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(onConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(eventlessConfig), false).map(function (transitionConfig) {
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig).map(function (transition) {
        return _this.formatTransition(transition);
      });
    }));

    try {
      for (var delayedTransitions_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {
        var delayedTransition = delayedTransitions_1_1.value;
        formattedTransitions.push(delayedTransition);
      }
    } catch (e_10_1) {
      e_10 = {
        error: e_10_1
      };
    } finally {
      try {
        if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);
      } finally {
        if (e_10) throw e_10.error;
      }
    }

    return formattedTransitions;
  };

  return StateNode;
}();




/***/ }),

/***/ "./node_modules/xstate/es/_virtual/_tslib.js":
/*!***************************************************!*\
  !*** ./node_modules/xstate/es/_virtual/_tslib.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __assign: () => (/* binding */ __assign),
/* harmony export */   __read: () => (/* binding */ __read),
/* harmony export */   __rest: () => (/* binding */ __rest),
/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),
/* harmony export */   __values: () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}




/***/ }),

/***/ "./node_modules/xstate/es/actionTypes.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/actionTypes.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   after: () => (/* binding */ after),
/* harmony export */   assign: () => (/* binding */ assign),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   choose: () => (/* binding */ choose),
/* harmony export */   doneState: () => (/* binding */ doneState),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorExecution: () => (/* binding */ errorExecution),
/* harmony export */   errorPlatform: () => (/* binding */ errorPlatform),
/* harmony export */   init: () => (/* binding */ init),
/* harmony export */   invoke: () => (/* binding */ invoke),
/* harmony export */   log: () => (/* binding */ log),
/* harmony export */   nullEvent: () => (/* binding */ nullEvent),
/* harmony export */   pure: () => (/* binding */ pure),
/* harmony export */   raise: () => (/* binding */ raise),
/* harmony export */   send: () => (/* binding */ send),
/* harmony export */   start: () => (/* binding */ start),
/* harmony export */   stop: () => (/* binding */ stop),
/* harmony export */   update: () => (/* binding */ update)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ "./node_modules/xstate/es/types.js");


var start = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Start;
var stop = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Stop;
var raise = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Raise;
var send = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Send;
var cancel = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Cancel;
var nullEvent = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.NullEvent;
var assign = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Assign;
var after = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.After;
var doneState = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.DoneState;
var log = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Log;
var init = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Init;
var invoke = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Invoke;
var errorExecution = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorExecution;
var errorPlatform = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorPlatform;
var error = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorCustom;
var update = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Update;
var choose = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Choose;
var pure = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Pure;




/***/ }),

/***/ "./node_modules/xstate/es/actions.js":
/*!*******************************************!*\
  !*** ./node_modules/xstate/es/actions.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   actionTypes: () => (/* reexport module object */ _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   after: () => (/* binding */ after),
/* harmony export */   assign: () => (/* binding */ assign),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   choose: () => (/* binding */ choose),
/* harmony export */   done: () => (/* binding */ done),
/* harmony export */   doneInvoke: () => (/* binding */ doneInvoke),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   escalate: () => (/* binding */ escalate),
/* harmony export */   forwardTo: () => (/* binding */ forwardTo),
/* harmony export */   getActionFunction: () => (/* binding */ getActionFunction),
/* harmony export */   initEvent: () => (/* binding */ initEvent),
/* harmony export */   isActionObject: () => (/* binding */ isActionObject),
/* harmony export */   log: () => (/* binding */ log),
/* harmony export */   pure: () => (/* binding */ pure),
/* harmony export */   raise: () => (/* binding */ raise),
/* harmony export */   resolveActions: () => (/* binding */ resolveActions),
/* harmony export */   resolveLog: () => (/* binding */ resolveLog),
/* harmony export */   resolveRaise: () => (/* binding */ resolveRaise),
/* harmony export */   resolveSend: () => (/* binding */ resolveSend),
/* harmony export */   resolveStop: () => (/* binding */ resolveStop),
/* harmony export */   respond: () => (/* binding */ respond),
/* harmony export */   send: () => (/* binding */ send),
/* harmony export */   sendParent: () => (/* binding */ sendParent),
/* harmony export */   sendTo: () => (/* binding */ sendTo),
/* harmony export */   sendUpdate: () => (/* binding */ sendUpdate),
/* harmony export */   start: () => (/* binding */ start),
/* harmony export */   stop: () => (/* binding */ stop),
/* harmony export */   toActionObject: () => (/* binding */ toActionObject),
/* harmony export */   toActionObjects: () => (/* binding */ toActionObjects),
/* harmony export */   toActivityDefinition: () => (/* binding */ toActivityDefinition)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ "./node_modules/xstate/es/types.js");
/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actionTypes.js */ "./node_modules/xstate/es/actionTypes.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");








var initEvent = /*#__PURE__*/(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)({
  type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.init
});
function getActionFunction(actionType, actionFunctionMap) {
  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;
}
function toActionObject(action, actionFunctionMap) {
  var actionObject;

  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action) || typeof action === 'number') {
    var exec = getActionFunction(action, actionFunctionMap);

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)) {
      actionObject = {
        type: action,
        exec: exec
      };
    } else if (exec) {
      actionObject = exec;
    } else {
      actionObject = {
        type: action,
        exec: undefined
      };
    }
  } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action)) {
    actionObject = {
      // Convert action to string if unnamed
      type: action.name || action.toString(),
      exec: action
    };
  } else {
    var exec = getActionFunction(action.type, actionFunctionMap);

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)) {
      actionObject = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {
        exec: exec
      });
    } else if (exec) {
      var actionType = exec.type || action.type;
      actionObject = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, exec), action), {
        type: actionType
      });
    } else {
      actionObject = action;
    }
  }

  return actionObject;
}
var toActionObjects = function (action, actionFunctionMap) {
  if (!action) {
    return [];
  }

  var actions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(action) ? action : [action];
  return actions.map(function (subAction) {
    return toActionObject(subAction, actionFunctionMap);
  });
};
function toActivityDefinition(action) {
  var actionObject = toActionObject(action);
  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({
    id: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action) ? action : actionObject.id
  }, actionObject), {
    type: actionObject.type
  });
}
/**
 * Raises an event. This places the event in the internal event queue, so that
 * the event is immediately consumed by the machine in the current step.
 *
 * @param eventType The event to raise.
 */

function raise(event, options) {
  return {
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,
    event: typeof event === 'function' ? event : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),
    delay: options ? options.delay : undefined,
    id: options === null || options === void 0 ? void 0 : options.id
  };
}
function resolveRaise(action, ctx, _event, delaysMap) {
  var meta = {
    _event: _event
  };
  var resolvedEvent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event) ? action.event(ctx, _event.data, meta) : action.event);
  var resolvedDelay;

  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)) {
    var configDelay = delaysMap && delaysMap[action.delay];
    resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
  } else {
    resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
  }

  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,
    _event: resolvedEvent,
    delay: resolvedDelay
  });
}
/**
 * Sends an event. This returns an action that will be read by an interpreter to
 * send the event in the next step, after the current step is finished executing.
 *
 * @deprecated Use the `sendTo(...)` action creator instead.
 *
 * @param event The event to send.
 * @param options Options to pass into the send event:
 *  - `id` - The unique send event identifier (used with `cancel()`).
 *  - `delay` - The number of milliseconds to delay the sending of the event.
 *  - `to` - The target of this event (by default, the machine the event was sent from).
 */

function send(event, options) {
  return {
    to: options ? options.to : undefined,
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send,
    event: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event) ? event : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),
    delay: options ? options.delay : undefined,
    // TODO: don't auto-generate IDs here like that
    // there is too big chance of the ID collision
    id: options && options.id !== undefined ? options.id : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event) ? event.name : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getEventType)(event)
  };
}
function resolveSend(action, ctx, _event, delaysMap) {
  var meta = {
    _event: _event
  }; // TODO: helper function for resolving Expr

  var resolvedEvent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event) ? action.event(ctx, _event.data, meta) : action.event);
  var resolvedDelay;

  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)) {
    var configDelay = delaysMap && delaysMap[action.delay];
    resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
  } else {
    resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
  }

  var resolvedTarget = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.to) ? action.to(ctx, _event.data, meta) : action.to;
  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {
    to: resolvedTarget,
    _event: resolvedEvent,
    event: resolvedEvent.data,
    delay: resolvedDelay
  });
}
/**
 * Sends an event to this machine's parent.
 *
 * @param event The event to send to the parent machine.
 * @param options Options to pass into the send event.
 */

function sendParent(event, options) {
  return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {
    to: _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent
  }));
}
/**
 * Sends an event to an actor.
 *
 * @param actor The `ActorRef` to send the event to.
 * @param event The event to send, or an expression that evaluates to the event to send
 * @param options Send action options
 * @returns An XState send action object
 */

function sendTo(actor, event, options) {
  return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {
    to: actor
  }));
}
/**
 * Sends an update event to this machine's parent.
 */

function sendUpdate() {
  return sendParent(_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.update);
}
/**
 * Sends an event back to the sender of the original event.
 *
 * @param event The event to send back to the sender
 * @param options Options to pass into the send event
 */

function respond(event, options) {
  return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {
    to: function (_, __, _a) {
      var _event = _a._event;
      return _event.origin; // TODO: handle when _event.origin is undefined
    }
  }));
}

var defaultLogExpr = function (context, event) {
  return {
    context: context,
    event: event
  };
};
/**
 *
 * @param expr The expression function to evaluate which will be logged.
 *  Takes in 2 arguments:
 *  - `ctx` - the current state context
 *  - `event` - the event that caused this action to be executed.
 * @param label The label to give to the logged expression.
 */


function log(expr, label) {
  if (expr === void 0) {
    expr = defaultLogExpr;
  }

  return {
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log,
    label: label,
    expr: expr
  };
}
var resolveLog = function (action, ctx, _event) {
  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {
    value: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.expr) ? action.expr : action.expr(ctx, _event.data, {
      _event: _event
    })
  });
};
/**
 * Cancels an in-flight `send(...)` action. A canceled sent action will not
 * be executed, nor will its event be sent, unless it has already been sent
 * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).
 *
 * @param sendId The `id` of the `send(...)` action to cancel.
 */

var cancel = function (sendId) {
  return {
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.cancel,
    sendId: sendId
  };
};
/**
 * Starts an activity.
 *
 * @param activity The activity to start.
 */

function start(activity) {
  var activityDef = toActivityDefinition(activity);
  return {
    type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Start,
    activity: activityDef,
    exec: undefined
  };
}
/**
 * Stops an activity.
 *
 * @param actorRef The activity to stop.
 */

function stop(actorRef) {
  var activity = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(actorRef) ? actorRef : toActivityDefinition(actorRef);
  return {
    type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,
    activity: activity,
    exec: undefined
  };
}
function resolveStop(action, context, _event) {
  var actorRefOrString = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.activity) ? action.activity(context, _event.data) : action.activity;
  var resolvedActorRef = typeof actorRefOrString === 'string' ? {
    id: actorRefOrString
  } : actorRefOrString;
  var actionObject = {
    type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,
    activity: resolvedActorRef
  };
  return actionObject;
}
/**
 * Updates the current context of the machine.
 *
 * @param assignment An object that represents the partial context to update.
 */

var assign = function (assignment) {
  return {
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign,
    assignment: assignment
  };
};
function isActionObject(action) {
  return typeof action === 'object' && 'type' in action;
}
/**
 * Returns an event type that represents an implicit event that
 * is sent after the specified `delay`.
 *
 * @param delayRef The delay in milliseconds
 * @param id The state node ID where this event is handled
 */

function after(delayRef, id) {
  var idSuffix = id ? "#".concat(id) : '';
  return "".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.After, "(").concat(delayRef, ")").concat(idSuffix);
}
/**
 * Returns an event that represents that a final state node
 * has been reached in the parent state node.
 *
 * @param id The final state node's parent state node `id`
 * @param data The data to pass into the event
 */

function done(id, data) {
  var type = "".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneState, ".").concat(id);
  var eventObject = {
    type: type,
    data: data
  };

  eventObject.toString = function () {
    return type;
  };

  return eventObject;
}
/**
 * Returns an event that represents that an invoked service has terminated.
 *
 * An invoked service is terminated when it has reached a top-level final state node,
 * but not when it is canceled.
 *
 * @param id The final state node ID
 * @param data The data to pass into the event
 */

function doneInvoke(id, data) {
  var type = "".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneInvoke, ".").concat(id);
  var eventObject = {
    type: type,
    data: data
  };

  eventObject.toString = function () {
    return type;
  };

  return eventObject;
}
function error(id, data) {
  var type = "".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.ErrorPlatform, ".").concat(id);
  var eventObject = {
    type: type,
    data: data
  };

  eventObject.toString = function () {
    return type;
  };

  return eventObject;
}
function pure(getActions) {
  return {
    type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Pure,
    get: getActions
  };
}
/**
 * Forwards (sends) an event to a specified service.
 *
 * @param target The target service to forward the event to.
 * @param options Options to pass into the send action creator.
 */

function forwardTo(target, options) {
  if (!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION && (!target || typeof target === 'function')) {
    var originalTarget_1 = target;

    target = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      var resolvedTarget = typeof originalTarget_1 === 'function' ? originalTarget_1.apply(void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args), false)) : originalTarget_1;

      if (!resolvedTarget) {
        throw new Error("Attempted to forward event to undefined actor. This risks an infinite loop in the sender.");
      }

      return resolvedTarget;
    };
  }

  return send(function (_, event) {
    return event;
  }, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {
    to: target
  }));
}
/**
 * Escalates an error by sending it as an event to this machine's parent.
 *
 * @param errorData The error data to send, or the expression function that
 * takes in the `context`, `event`, and `meta`, and returns the error data to send.
 * @param options Options to pass into the send action creator.
 */

function escalate(errorData, options) {
  return sendParent(function (context, event, meta) {
    return {
      type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.error,
      data: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(errorData) ? errorData(context, event, meta) : errorData
    };
  }, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {
    to: _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent
  }));
}
function choose(conds) {
  return {
    type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Choose,
    conds: conds
  };
}

var pluckAssigns = function (actionBlocks) {
  var e_1, _a;

  var assignActions = [];

  try {
    for (var actionBlocks_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {
      var block = actionBlocks_1_1.value;
      var i = 0;

      while (i < block.actions.length) {
        if (block.actions[i].type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign) {
          assignActions.push(block.actions[i]);
          block.actions.splice(i, 1);
          continue;
        }

        i++;
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);
    } finally {
      if (e_1) throw e_1.error;
    }
  }

  return assignActions;
};

function resolveActions(machine, currentState, currentContext, _event, actionBlocks, predictableExec, preserveActionOrder) {
  if (preserveActionOrder === void 0) {
    preserveActionOrder = false;
  }

  var assignActions = preserveActionOrder ? [] : pluckAssigns(actionBlocks);
  var updatedContext = assignActions.length ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(currentContext, _event, assignActions, currentState) : currentContext;
  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;
  var deferredToBlockEnd = [];

  function handleAction(blockType, actionObject) {
    var _a;

    switch (actionObject.type) {
      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise:
        {
          var raisedAction = resolveRaise(actionObject, updatedContext, _event, machine.options.delays);

          if (predictableExec && typeof raisedAction.delay === 'number') {
            predictableExec(raisedAction, updatedContext, _event);
          }

          return raisedAction;
        }

      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send:
        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init

        if (!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION) {
          var configuredDelay = actionObject.delay; // warn after resolving as we can create better contextual message here

          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.warn)(!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(configuredDelay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length
          "No delay reference for delay expression '".concat(configuredDelay, "' was found on machine '").concat(machine.id, "'"));
        }

        if (predictableExec && sendAction.to !== _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Internal) {
          if (blockType === 'entry') {
            deferredToBlockEnd.push(sendAction);
          } else {
            predictableExec(sendAction, updatedContext, _event);
          }
        }

        return sendAction;

      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log:
        {
          var resolved = resolveLog(actionObject, updatedContext, _event);
          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);
          return resolved;
        }

      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.choose:
        {
          var chooseAction = actionObject;
          var matchedActions = (_a = chooseAction.conds.find(function (condition) {
            var guard = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toGuard)(condition.cond, machine.options.guards);
            return !guard || (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.evaluateGuard)(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);
          })) === null || _a === void 0 ? void 0 : _a.actions;

          if (!matchedActions) {
            return [];
          }

          var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolveActions(machine, currentState, updatedContext, _event, [{
            type: blockType,
            actions: toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions), machine.options.actions)
          }], predictableExec, preserveActionOrder), 2),
              resolvedActionsFromChoose = _b[0],
              resolvedContextFromChoose = _b[1];

          updatedContext = resolvedContextFromChoose;
          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
          return resolvedActionsFromChoose;
        }

      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.pure:
        {
          var matchedActions = actionObject.get(updatedContext, _event.data);

          if (!matchedActions) {
            return [];
          }

          var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolveActions(machine, currentState, updatedContext, _event, [{
            type: blockType,
            actions: toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions), machine.options.actions)
          }], predictableExec, preserveActionOrder), 2),
              resolvedActionsFromPure = _c[0],
              resolvedContext = _c[1];

          updatedContext = resolvedContext;
          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
          return resolvedActionsFromPure;
        }

      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.stop:
        {
          var resolved = resolveStop(actionObject, updatedContext, _event);
          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, currentContext, _event);
          return resolved;
        }

      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign:
        {
          updatedContext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(updatedContext, _event, [actionObject], !predictableExec ? currentState : undefined);
          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
          break;
        }

      default:
        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);
        var exec_1 = resolvedActionObject.exec;

        if (predictableExec) {
          predictableExec(resolvedActionObject, updatedContext, _event);
        } else if (exec_1 && preservedContexts) {
          var contextIndex_1 = preservedContexts.length - 1;

          var wrapped = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, resolvedActionObject), {
            exec: function (_ctx) {
              var args = [];

              for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
              }

              exec_1.apply(void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([preservedContexts[contextIndex_1]], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args), false));
            }
          });

          resolvedActionObject = wrapped;
        }

        return resolvedActionObject;
    }
  }

  function processBlock(block) {
    var e_2, _a;

    var resolvedActions = [];

    try {
      for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
        var action = _c.value;
        var resolved = handleAction(block.type, action);

        if (resolved) {
          resolvedActions = resolvedActions.concat(resolved);
        }
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_2) throw e_2.error;
      }
    }

    deferredToBlockEnd.forEach(function (action) {
      predictableExec(action, updatedContext, _event);
    });
    deferredToBlockEnd.length = 0;
    return resolvedActions;
  }

  var resolvedActions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(actionBlocks.map(processBlock));
  return [resolvedActions, updatedContext];
}




/***/ }),

/***/ "./node_modules/xstate/es/behaviors.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/behaviors.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fromPromise: () => (/* binding */ fromPromise),
/* harmony export */   fromReducer: () => (/* binding */ fromReducer),
/* harmony export */   spawnBehavior: () => (/* binding */ spawnBehavior)
/* harmony export */ });
/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions.js */ "./node_modules/xstate/es/actions.js");
/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Actor.js */ "./node_modules/xstate/es/Actor.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");




/**
 * Returns an actor behavior from a reducer and its initial state.
 *
 * @param transition The pure reducer that returns the next state given the current state and event.
 * @param initialState The initial state of the reducer.
 * @returns An actor behavior
 */

function fromReducer(transition, initialState) {
  return {
    transition: transition,
    initialState: initialState
  };
}
function fromPromise(promiseFn) {
  var initialState = {
    error: undefined,
    data: undefined,
    status: 'pending'
  };
  return {
    transition: function (state, event, _a) {
      var parent = _a.parent,
          id = _a.id,
          observers = _a.observers;

      switch (event.type) {
        case 'fulfill':
          parent === null || parent === void 0 ? void 0 : parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.doneInvoke)(id, event.data));
          return {
            error: undefined,
            data: event.data,
            status: 'fulfilled'
          };

        case 'reject':
          parent === null || parent === void 0 ? void 0 : parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.error)(id, event.error));
          observers.forEach(function (observer) {
            observer.error(event.error);
          });
          return {
            error: event.error,
            data: undefined,
            status: 'rejected'
          };

        default:
          return state;
      }
    },
    initialState: initialState,
    start: function (_a) {
      var self = _a.self;
      promiseFn().then(function (data) {
        self.send({
          type: 'fulfill',
          data: data
        });
      }, function (reason) {
        self.send({
          type: 'reject',
          error: reason
        });
      });
      return initialState;
    }
  };
}
function spawnBehavior(behavior, options) {
  if (options === void 0) {
    options = {};
  }

  var state = behavior.initialState;
  var observers = new Set();
  var mailbox = [];
  var flushing = false;

  var flush = function () {
    if (flushing) {
      return;
    }

    flushing = true;

    while (mailbox.length > 0) {
      var event_1 = mailbox.shift();
      state = behavior.transition(state, event_1, actorCtx);
      observers.forEach(function (observer) {
        return observer.next(state);
      });
    }

    flushing = false;
  };

  var actor = (0,_Actor_js__WEBPACK_IMPORTED_MODULE_1__.toActorRef)({
    id: options.id,
    send: function (event) {
      mailbox.push(event);
      flush();
    },
    getSnapshot: function () {
      return state;
    },
    subscribe: function (next, handleError, complete) {
      var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toObserver)(next, handleError, complete);
      observers.add(observer);
      observer.next(state);
      return {
        unsubscribe: function () {
          observers.delete(observer);
        }
      };
    }
  });
  var actorCtx = {
    parent: options.parent,
    self: actor,
    id: options.id || 'anonymous',
    observers: observers
  };
  state = behavior.start ? behavior.start(actorCtx) : state;
  return actor;
}




/***/ }),

/***/ "./node_modules/xstate/es/constants.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/constants.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_GUARD_TYPE: () => (/* binding */ DEFAULT_GUARD_TYPE),
/* harmony export */   EMPTY_ACTIVITY_MAP: () => (/* binding */ EMPTY_ACTIVITY_MAP),
/* harmony export */   STATE_DELIMITER: () => (/* binding */ STATE_DELIMITER),
/* harmony export */   TARGETLESS_KEY: () => (/* binding */ TARGETLESS_KEY)
/* harmony export */ });
var STATE_DELIMITER = '.';
var EMPTY_ACTIVITY_MAP = {};
var DEFAULT_GUARD_TYPE = 'xstate.guard';
var TARGETLESS_KEY = '';




/***/ }),

/***/ "./node_modules/xstate/es/devTools.js":
/*!********************************************!*\
  !*** ./node_modules/xstate/es/devTools.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getGlobal: () => (/* binding */ getGlobal),
/* harmony export */   registerService: () => (/* binding */ registerService)
/* harmony export */ });
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");


function getGlobal() {
  if (typeof globalThis !== 'undefined') {
    return globalThis;
  }

  if (typeof self !== 'undefined') {
    return self;
  }

  if (typeof window !== 'undefined') {
    return window;
  }

  if (typeof __webpack_require__.g !== 'undefined') {
    return __webpack_require__.g;
  }

  if (!_environment_js__WEBPACK_IMPORTED_MODULE_0__.IS_PRODUCTION) {
    console.warn('XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues');
  }
}

function getDevTools() {
  var global = getGlobal();

  if (global && '__xstate__' in global) {
    return global.__xstate__;
  }

  return undefined;
}

function registerService(service) {
  if (!getGlobal()) {
    return;
  }

  var devTools = getDevTools();

  if (devTools) {
    devTools.register(service);
  }
}




/***/ }),

/***/ "./node_modules/xstate/es/environment.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/environment.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IS_PRODUCTION: () => (/* binding */ IS_PRODUCTION)
/* harmony export */ });
var IS_PRODUCTION = "development" === 'production';




/***/ }),

/***/ "./node_modules/xstate/es/interpreter.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/interpreter.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Interpreter: () => (/* binding */ Interpreter),
/* harmony export */   InterpreterStatus: () => (/* binding */ InterpreterStatus),
/* harmony export */   interpret: () => (/* binding */ interpret),
/* harmony export */   spawn: () => (/* binding */ spawn)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ "./node_modules/xstate/es/types.js");
/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./State.js */ "./node_modules/xstate/es/State.js");
/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actionTypes.js */ "./node_modules/xstate/es/actionTypes.js");
/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./actions.js */ "./node_modules/xstate/es/actions.js");
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");
/* harmony import */ var _scheduler_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scheduler.js */ "./node_modules/xstate/es/scheduler.js");
/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Actor.js */ "./node_modules/xstate/es/Actor.js");
/* harmony import */ var _registry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./registry.js */ "./node_modules/xstate/es/registry.js");
/* harmony import */ var _devTools_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./devTools.js */ "./node_modules/xstate/es/devTools.js");
/* harmony import */ var _serviceScope_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./serviceScope.js */ "./node_modules/xstate/es/serviceScope.js");
/* harmony import */ var _behaviors_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./behaviors.js */ "./node_modules/xstate/es/behaviors.js");














var DEFAULT_SPAWN_OPTIONS = {
  sync: false,
  autoForward: false
};
var InterpreterStatus;

(function (InterpreterStatus) {
  InterpreterStatus[InterpreterStatus["NotStarted"] = 0] = "NotStarted";
  InterpreterStatus[InterpreterStatus["Running"] = 1] = "Running";
  InterpreterStatus[InterpreterStatus["Stopped"] = 2] = "Stopped";
})(InterpreterStatus || (InterpreterStatus = {}));

var Interpreter =
/*#__PURE__*/

/** @class */
function () {
  /**
   * Creates a new Interpreter instance (i.e., service) for the given machine with the provided options, if any.
   *
   * @param machine The machine to be interpreted
   * @param options Interpreter options
   */
  function Interpreter(machine, options) {
    if (options === void 0) {
      options = Interpreter.defaultOptions;
    }

    var _this = this;

    this.machine = machine;
    this.delayedEventsMap = {};
    this.listeners = new Set();
    this.contextListeners = new Set();
    this.stopListeners = new Set();
    this.doneListeners = new Set();
    this.eventListeners = new Set();
    this.sendListeners = new Set();
    /**
     * Whether the service is started.
     */

    this.initialized = false;
    this.status = InterpreterStatus.NotStarted;
    this.children = new Map();
    this.forwardTo = new Set();
    this._outgoingQueue = [];
    /**
     * Alias for Interpreter.prototype.start
     */

    this.init = this.start;
    /**
     * Sends an event to the running interpreter to trigger a transition.
     *
     * An array of events (batched) can be sent as well, which will send all
     * batched events to the running interpreter. The listeners will be
     * notified only **once** when all events are processed.
     *
     * @param event The event(s) to send
     */

    this.send = function (event, payload) {
      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(event)) {
        _this.batch(event);

        return _this.state;
      }

      var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toEventObject)(event, payload));

      if (_this.status === InterpreterStatus.Stopped) {
        // do nothing
        if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "Event \"".concat(_event.name, "\" was sent to stopped service \"").concat(_this.machine.id, "\". This service has already reached its final state, and will not transition.\nEvent: ").concat(JSON.stringify(_event.data)));
        }

        return _this.state;
      }

      if (_this.status !== InterpreterStatus.Running && !_this.options.deferEvents) {
        throw new Error("Event \"".concat(_event.name, "\" was sent to uninitialized service \"").concat(_this.machine.id // tslint:disable-next-line:max-line-length
        , "\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\nEvent: ").concat(JSON.stringify(_event.data)));
      }

      _this.scheduler.schedule(function () {
        // Forward copy of event to child actors
        _this.forward(_event);

        var nextState = _this._nextState(_event);

        _this.update(nextState, _event);
      });

      return _this._state; // TODO: deprecate (should return void)
      // tslint:disable-next-line:semicolon
    };

    this.sendTo = function (event, to, immediate) {
      var isParent = _this.parent && (to === _types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Parent || _this.parent.id === to);
      var target = isParent ? _this.parent : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(to) ? to === _types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Internal ? _this : _this.children.get(to) || _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.get(to) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isActor)(to) ? to : undefined;

      if (!target) {
        if (!isParent) {
          throw new Error("Unable to send event to child '".concat(to, "' from service '").concat(_this.id, "'."));
        } // tslint:disable-next-line:no-console


        if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "Service '".concat(_this.id, "' has no parent: unable to send event ").concat(event.type));
        }

        return;
      }

      if ('machine' in target) {
        // perhaps those events should be rejected in the parent
        // but atm it doesn't have easy access to all of the information that is required to do it reliably
        if (_this.status !== InterpreterStatus.Stopped || _this.parent !== target || // we need to send events to the parent from exit handlers of a machine that reached its final state
        _this.state.done) {
          // Send SCXML events to machines
          var scxmlEvent = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, event), {
            name: event.name === _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.error ? "".concat((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(_this.id)) : event.name,
            origin: _this.sessionId
          });

          if (!immediate && _this.machine.config.predictableActionArguments) {
            _this._outgoingQueue.push([target, scxmlEvent]);
          } else {
            target.send(scxmlEvent);
          }
        }
      } else {
        // Send normal events to other targets
        if (!immediate && _this.machine.config.predictableActionArguments) {
          _this._outgoingQueue.push([target, event.data]);
        } else {
          target.send(event.data);
        }
      }
    };

    this._exec = function (action, context, _event, actionFunctionMap) {
      if (actionFunctionMap === void 0) {
        actionFunctionMap = _this.machine.options.actions;
      }

      var actionOrExec = action.exec || (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.getActionFunction)(action.type, actionFunctionMap);
      var exec = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(actionOrExec) ? actionOrExec : actionOrExec ? actionOrExec.exec : action.exec;

      if (exec) {
        try {
          return exec(context, _event.data, !_this.machine.config.predictableActionArguments ? {
            action: action,
            state: _this.state,
            _event: _event
          } : {
            action: action,
            _event: _event
          });
        } catch (err) {
          if (_this.parent) {
            _this.parent.send({
              type: 'xstate.error',
              data: err
            });
          }

          throw err;
        }
      }

      switch (action.type) {
        case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.raise:
          {
            // if raise action reached the interpreter then it's a delayed one
            var sendAction_1 = action;

            _this.defer(sendAction_1);

            break;
          }

        case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.send:
          var sendAction = action;

          if (typeof sendAction.delay === 'number') {
            _this.defer(sendAction);

            return;
          } else {
            if (sendAction.to) {
              _this.sendTo(sendAction._event, sendAction.to, _event === _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);
            } else {
              _this.send(sendAction._event);
            }
          }

          break;

        case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.cancel:
          _this.cancel(action.sendId);

          break;

        case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.start:
          {
            if (_this.status !== InterpreterStatus.Running) {
              return;
            }

            var activity = action.activity; // If the activity will be stopped right after it's started
            // (such as in transient states)
            // don't bother starting the activity.

            if ( // in v4 with `predictableActionArguments` invokes are called eagerly when the `this.state` still points to the previous state
            !_this.machine.config.predictableActionArguments && !_this.state.activities[activity.id || activity.type]) {
              break;
            } // Invoked services


            if (activity.type === _types_js__WEBPACK_IMPORTED_MODULE_2__.ActionTypes.Invoke) {
              var invokeSource = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(activity.src);
              var serviceCreator = _this.machine.options.services ? _this.machine.options.services[invokeSource.type] : undefined;
              var id = activity.id,
                  data = activity.data;

              if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!('forward' in activity), // tslint:disable-next-line:max-line-length
                "`forward` property is deprecated (found in invocation of '".concat(activity.src, "' in in machine '").concat(_this.machine.id, "'). ") + "Please use `autoForward` instead.");
              }

              var autoForward = 'autoForward' in activity ? activity.autoForward : !!activity.forward;

              if (!serviceCreator) {
                // tslint:disable-next-line:no-console
                if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
                  (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "No service found for invocation '".concat(activity.src, "' in machine '").concat(_this.machine.id, "'."));
                }

                return;
              }

              var resolvedData = data ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(data, context, _event) : undefined;

              if (typeof serviceCreator === 'string') {
                // TODO: warn
                return;
              }

              var source = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(serviceCreator) ? serviceCreator(context, _event.data, {
                data: resolvedData,
                src: invokeSource,
                meta: activity.meta
              }) : serviceCreator;

              if (!source) {
                // TODO: warn?
                return;
              }

              var options = void 0;

              if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(source)) {
                source = resolvedData ? source.withContext(resolvedData) : source;
                options = {
                  autoForward: autoForward
                };
              }

              _this.spawn(source, id, options);
            } else {
              _this.spawnActivity(activity);
            }

            break;
          }

        case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.stop:
          {
            _this.stopChild(action.activity.id);

            break;
          }

        case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.log:
          var _a = action,
              label = _a.label,
              value = _a.value;

          if (label) {
            _this.logger(label, value);
          } else {
            _this.logger(value);
          }

          break;

        default:
          if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "No implementation found for action type '".concat(action.type, "'"));
          }

          break;
      }
    };

    var resolvedOptions = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, Interpreter.defaultOptions), options);

    var clock = resolvedOptions.clock,
        logger = resolvedOptions.logger,
        parent = resolvedOptions.parent,
        id = resolvedOptions.id;
    var resolvedId = id !== undefined ? id : machine.id;
    this.id = resolvedId;
    this.logger = logger;
    this.clock = clock;
    this.parent = parent;
    this.options = resolvedOptions;
    this.scheduler = new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({
      deferEvents: this.options.deferEvents
    });
    this.sessionId = _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.bookId();
  }

  Object.defineProperty(Interpreter.prototype, "initialState", {
    get: function () {
      var _this = this;

      if (this._initialState) {
        return this._initialState;
      }

      return (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function () {
        _this._initialState = _this.machine.initialState;
        return _this._initialState;
      });
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Interpreter.prototype, "state", {
    /**
     * @deprecated Use `.getSnapshot()` instead.
     */
    get: function () {
      if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(this.status !== InterpreterStatus.NotStarted, "Attempted to read state from uninitialized service '".concat(this.id, "'. Make sure the service is started first."));
      }

      return this._state;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Executes the actions of the given state, with that state's `context` and `event`.
   *
   * @param state The state whose actions will be executed
   * @param actionsConfig The action implementations to use
   */

  Interpreter.prototype.execute = function (state, actionsConfig) {
    var e_1, _a;

    try {
      for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(state.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
        var action = _c.value;
        this.exec(action, state, actionsConfig);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  };

  Interpreter.prototype.update = function (state, _event) {
    var e_2, _a, e_3, _b, e_4, _c, e_5, _d;

    var _this = this; // Attach session ID to state


    state._sessionid = this.sessionId; // Update state

    this._state = state; // Execute actions

    if ((!this.machine.config.predictableActionArguments || // this is currently required to execute initial actions as the `initialState` gets cached
    // we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns
    _event === _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent) && this.options.execute) {
      this.execute(this.state);
    } else {
      var item = void 0;

      while (item = this._outgoingQueue.shift()) {
        item[0].send(item[1]);
      }
    } // Update children


    this.children.forEach(function (child) {
      _this.state.children[child.id] = child;
    }); // Dev tools

    if (this.devTools) {
      this.devTools.send(_event.data, state);
    } // Execute listeners


    if (state.event) {
      try {
        for (var _e = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()) {
          var listener = _f.value;
          listener(state.event);
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
    }

    try {
      for (var _g = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()) {
        var listener = _h.value;
        listener(state, state.event);
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
      } finally {
        if (e_3) throw e_3.error;
      }
    }

    try {
      for (var _j = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()) {
        var contextListener = _k.value;
        contextListener(this.state.context, this.state.history ? this.state.history.context : undefined);
      }
    } catch (e_4_1) {
      e_4 = {
        error: e_4_1
      };
    } finally {
      try {
        if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
      } finally {
        if (e_4) throw e_4.error;
      }
    }

    if (this.state.done) {
      // get final child state node
      var finalChildStateNode = state.configuration.find(function (sn) {
        return sn.type === 'final' && sn.parent === _this.machine;
      });
      var doneData = finalChildStateNode && finalChildStateNode.doneData ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(finalChildStateNode.doneData, state.context, _event) : undefined;
      this._doneEvent = (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(this.id, doneData);

      try {
        for (var _l = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()) {
          var listener = _m.value;
          listener(this._doneEvent);
        }
      } catch (e_5_1) {
        e_5 = {
          error: e_5_1
        };
      } finally {
        try {
          if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
        } finally {
          if (e_5) throw e_5.error;
        }
      }

      this._stop();

      this._stopChildren();

      _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(this.sessionId);
    }
  };
  /*
   * Adds a listener that is notified whenever a state transition happens. The listener is called with
   * the next state and the event object that caused the state transition.
   *
   * @param listener The state listener
   */


  Interpreter.prototype.onTransition = function (listener) {
    this.listeners.add(listener); // Send current state to listener

    if (this.status === InterpreterStatus.Running) {
      listener(this.state, this.state.event);
    }

    return this;
  };

  Interpreter.prototype.subscribe = function (nextListenerOrObserver, _, // TODO: error listener
  completeListener) {
    var _this = this;

    var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(nextListenerOrObserver, _, completeListener);
    this.listeners.add(observer.next); // Send current state to listener

    if (this.status !== InterpreterStatus.NotStarted) {
      observer.next(this.state);
    }

    var completeOnce = function () {
      _this.doneListeners.delete(completeOnce);

      _this.stopListeners.delete(completeOnce);

      observer.complete();
    };

    if (this.status === InterpreterStatus.Stopped) {
      observer.complete();
    } else {
      this.onDone(completeOnce);
      this.onStop(completeOnce);
    }

    return {
      unsubscribe: function () {
        _this.listeners.delete(observer.next);

        _this.doneListeners.delete(completeOnce);

        _this.stopListeners.delete(completeOnce);
      }
    };
  };
  /**
   * Adds an event listener that is notified whenever an event is sent to the running interpreter.
   * @param listener The event listener
   */


  Interpreter.prototype.onEvent = function (listener) {
    this.eventListeners.add(listener);
    return this;
  };
  /**
   * Adds an event listener that is notified whenever a `send` event occurs.
   * @param listener The event listener
   */


  Interpreter.prototype.onSend = function (listener) {
    this.sendListeners.add(listener);
    return this;
  };
  /**
   * Adds a context listener that is notified whenever the state context changes.
   * @param listener The context listener
   */


  Interpreter.prototype.onChange = function (listener) {
    this.contextListeners.add(listener);
    return this;
  };
  /**
   * Adds a listener that is notified when the machine is stopped.
   * @param listener The listener
   */


  Interpreter.prototype.onStop = function (listener) {
    this.stopListeners.add(listener);
    return this;
  };
  /**
   * Adds a state listener that is notified when the statechart has reached its final state.
   * @param listener The state listener
   */


  Interpreter.prototype.onDone = function (listener) {
    if (this.status === InterpreterStatus.Stopped && this._doneEvent) {
      listener(this._doneEvent);
    } else {
      this.doneListeners.add(listener);
    }

    return this;
  };
  /**
   * Removes a listener.
   * @param listener The listener to remove
   */


  Interpreter.prototype.off = function (listener) {
    this.listeners.delete(listener);
    this.eventListeners.delete(listener);
    this.sendListeners.delete(listener);
    this.stopListeners.delete(listener);
    this.doneListeners.delete(listener);
    this.contextListeners.delete(listener);
    return this;
  };
  /**
   * Starts the interpreter from the given state, or the initial state.
   * @param initialState The state to start the statechart from
   */


  Interpreter.prototype.start = function (initialState) {
    var _this = this;

    if (this.status === InterpreterStatus.Running) {
      // Do not restart the service if it is already started
      return this;
    } // yes, it's a hack but we need the related cache to be populated for some things to work (like delayed transitions)
    // this is usually called by `machine.getInitialState` but if we rehydrate from a state we might bypass this call
    // we also don't want to call this method here as it resolves the full initial state which might involve calling assign actions
    // and that could potentially lead to some unwanted side-effects (even such as creating some rogue actors)


    this.machine._init();

    _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.register(this.sessionId, this);
    this.initialized = true;
    this.status = InterpreterStatus.Running;
    var resolvedState = initialState === undefined ? this.initialState : (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function () {
      return (0,_State_js__WEBPACK_IMPORTED_MODULE_9__.isStateConfig)(initialState) ? _this.machine.resolveState(initialState) : _this.machine.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_9__.State.from(initialState, _this.machine.context));
    });

    if (this.options.devTools) {
      this.attachDev();
    }

    this.scheduler.initialize(function () {
      _this.update(resolvedState, _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);
    });
    return this;
  };

  Interpreter.prototype._stopChildren = function () {
    // TODO: think about converting those to actions
    this.children.forEach(function (child) {
      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)) {
        child.stop();
      }
    });
    this.children.clear();
  };

  Interpreter.prototype._stop = function () {
    var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;

    try {
      for (var _f = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()) {
        var listener = _g.value;
        this.listeners.delete(listener);
      }
    } catch (e_6_1) {
      e_6 = {
        error: e_6_1
      };
    } finally {
      try {
        if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
      } finally {
        if (e_6) throw e_6.error;
      }
    }

    try {
      for (var _h = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()) {
        var listener = _j.value; // call listener, then remove

        listener();
        this.stopListeners.delete(listener);
      }
    } catch (e_7_1) {
      e_7 = {
        error: e_7_1
      };
    } finally {
      try {
        if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
      } finally {
        if (e_7) throw e_7.error;
      }
    }

    try {
      for (var _k = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()) {
        var listener = _l.value;
        this.contextListeners.delete(listener);
      }
    } catch (e_8_1) {
      e_8 = {
        error: e_8_1
      };
    } finally {
      try {
        if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
      } finally {
        if (e_8) throw e_8.error;
      }
    }

    try {
      for (var _m = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()) {
        var listener = _o.value;
        this.doneListeners.delete(listener);
      }
    } catch (e_9_1) {
      e_9 = {
        error: e_9_1
      };
    } finally {
      try {
        if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
      } finally {
        if (e_9) throw e_9.error;
      }
    }

    if (!this.initialized) {
      // Interpreter already stopped; do nothing
      return this;
    }

    this.initialized = false;
    this.status = InterpreterStatus.Stopped;
    this._initialState = undefined;

    try {
      // we are going to stop within the current sync frame
      // so we can safely just cancel this here as nothing async should be fired anyway
      for (var _p = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(Object.keys(this.delayedEventsMap)), _q = _p.next(); !_q.done; _q = _p.next()) {
        var key = _q.value;
        this.clock.clearTimeout(this.delayedEventsMap[key]);
      }
    } catch (e_10_1) {
      e_10 = {
        error: e_10_1
      };
    } finally {
      try {
        if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
      } finally {
        if (e_10) throw e_10.error;
      }
    } // clear everything that might be enqueued


    this.scheduler.clear();
    this.scheduler = new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({
      deferEvents: this.options.deferEvents
    });
  };
  /**
   * Stops the interpreter and unsubscribe all listeners.
   *
   * This will also notify the `onStop` listeners.
   */


  Interpreter.prototype.stop = function () {
    // TODO: add warning for stopping non-root interpreters
    var _this = this; // grab the current scheduler as it will be replaced in _stop


    var scheduler = this.scheduler;

    this._stop(); // let what is currently processed to be finished


    scheduler.schedule(function () {
      // it feels weird to handle this here but we need to handle this even slightly "out of band"
      var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)({
        type: 'xstate.stop'
      });

      var nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this, function () {
        var exitActions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.state.configuration), false).sort(function (a, b) {
          return b.order - a.order;
        }).map(function (stateNode) {
          return (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.toActionObjects)(stateNode.onExit, _this.machine.options.actions);
        }));

        var _a = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.resolveActions)(_this.machine, _this.state, _this.state.context, _event, [{
          type: 'exit',
          actions: exitActions
        }], _this.machine.config.predictableActionArguments ? _this._exec : undefined, _this.machine.config.predictableActionArguments || _this.machine.config.preserveActionOrder), 2),
            resolvedActions = _a[0],
            updatedContext = _a[1];

        var newState = new _State_js__WEBPACK_IMPORTED_MODULE_9__.State({
          value: _this.state.value,
          context: updatedContext,
          _event: _event,
          _sessionid: _this.sessionId,
          historyValue: undefined,
          history: _this.state,
          actions: resolvedActions.filter(function (action) {
            return !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);
          }),
          activities: {},
          events: [],
          configuration: [],
          transitions: [],
          children: {},
          done: _this.state.done,
          tags: _this.state.tags,
          machine: _this.machine
        });
        newState.changed = true;
        return newState;
      });

      _this.update(nextState, _event);

      _this._stopChildren();

      _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(_this.sessionId);
    });
    return this;
  };

  Interpreter.prototype.batch = function (events) {
    var _this = this;

    if (this.status === InterpreterStatus.NotStarted && this.options.deferEvents) {
      // tslint:disable-next-line:no-console
      if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "".concat(events.length, " event(s) were sent to uninitialized service \"").concat(this.machine.id, "\" and are deferred. Make sure .start() is called for this service.\nEvent: ").concat(JSON.stringify(event)));
      }
    } else if (this.status !== InterpreterStatus.Running) {
      throw new Error( // tslint:disable-next-line:max-line-length
      "".concat(events.length, " event(s) were sent to uninitialized service \"").concat(this.machine.id, "\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options."));
    }

    if (!events.length) {
      return;
    }

    var exec = !!this.machine.config.predictableActionArguments && this._exec;
    this.scheduler.schedule(function () {
      var e_11, _a;

      var nextState = _this.state;
      var batchChanged = false;
      var batchedActions = [];

      var _loop_1 = function (event_1) {
        var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event_1);

        _this.forward(_event);

        nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this, function () {
          return _this.machine.transition(nextState, _event, undefined, exec || undefined);
        });
        batchedActions.push.apply(batchedActions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.machine.config.predictableActionArguments ? nextState.actions : nextState.actions.map(function (a) {
          return (0,_State_js__WEBPACK_IMPORTED_MODULE_9__.bindActionToState)(a, nextState);
        })), false));
        batchChanged = batchChanged || !!nextState.changed;
      };

      try {
        for (var events_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
          var event_1 = events_1_1.value;

          _loop_1(event_1);
        }
      } catch (e_11_1) {
        e_11 = {
          error: e_11_1
        };
      } finally {
        try {
          if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
        } finally {
          if (e_11) throw e_11.error;
        }
      }

      nextState.changed = batchChanged;
      nextState.actions = batchedActions;

      _this.update(nextState, (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(events[events.length - 1]));
    });
  };
  /**
   * Returns a send function bound to this interpreter instance.
   *
   * @param event The event to be sent by the sender.
   */


  Interpreter.prototype.sender = function (event) {
    return this.send.bind(this, event);
  };

  Interpreter.prototype._nextState = function (event, exec) {
    var _this = this;

    if (exec === void 0) {
      exec = !!this.machine.config.predictableActionArguments && this._exec;
    }

    var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event);

    if (_event.name.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform) === 0 && !this.state.nextEvents.some(function (nextEvent) {
      return nextEvent.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform) === 0;
    })) {
      throw _event.data.data;
    }

    var nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function () {
      return _this.machine.transition(_this.state, _event, undefined, exec || undefined);
    });
    return nextState;
  };
  /**
   * Returns the next state given the interpreter's current state and the event.
   *
   * This is a pure method that does _not_ update the interpreter's state.
   *
   * @param event The event to determine the next state
   */


  Interpreter.prototype.nextState = function (event) {
    return this._nextState(event, false);
  };

  Interpreter.prototype.forward = function (event) {
    var e_12, _a;

    try {
      for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()) {
        var id = _c.value;
        var child = this.children.get(id);

        if (!child) {
          throw new Error("Unable to forward event '".concat(event, "' from interpreter '").concat(this.id, "' to nonexistant child '").concat(id, "'."));
        }

        child.send(event);
      }
    } catch (e_12_1) {
      e_12 = {
        error: e_12_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_12) throw e_12.error;
      }
    }
  };

  Interpreter.prototype.defer = function (sendAction) {
    var _this = this;

    var timerId = this.clock.setTimeout(function () {
      if ('to' in sendAction && sendAction.to) {
        _this.sendTo(sendAction._event, sendAction.to, true);
      } else {
        _this.send(sendAction._event);
      }
    }, sendAction.delay);

    if (sendAction.id) {
      this.delayedEventsMap[sendAction.id] = timerId;
    }
  };

  Interpreter.prototype.cancel = function (sendId) {
    this.clock.clearTimeout(this.delayedEventsMap[sendId]);
    delete this.delayedEventsMap[sendId];
  };

  Interpreter.prototype.exec = function (action, state, actionFunctionMap) {
    if (actionFunctionMap === void 0) {
      actionFunctionMap = this.machine.options.actions;
    }

    this._exec(action, state.context, state._event, actionFunctionMap);
  };

  Interpreter.prototype.removeChild = function (childId) {
    var _a;

    this.children.delete(childId);
    this.forwardTo.delete(childId); // this.state might not exist at the time this is called,
    // such as when a child is added then removed while initializing the state

    (_a = this.state) === null || _a === void 0 ? true : delete _a.children[childId];
  };

  Interpreter.prototype.stopChild = function (childId) {
    var child = this.children.get(childId);

    if (!child) {
      return;
    }

    this.removeChild(childId);

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)) {
      child.stop();
    }
  };

  Interpreter.prototype.spawn = function (entity, name, options) {
    if (this.status !== InterpreterStatus.Running) {
      return (0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity, name);
    }

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(entity)) {
      return this.spawnPromise(Promise.resolve(entity), name);
    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity)) {
      return this.spawnCallback(entity, name);
    } else if ((0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.isSpawnedActor)(entity)) {
      return this.spawnActor(entity, name);
    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isObservable)(entity)) {
      return this.spawnObservable(entity, name);
    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)) {
      return this.spawnMachine(entity, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {
        id: name
      }));
    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBehavior)(entity)) {
      return this.spawnBehavior(entity, name);
    } else {
      throw new Error("Unable to spawn entity \"".concat(name, "\" of type \"").concat(typeof entity, "\"."));
    }
  };

  Interpreter.prototype.spawnMachine = function (machine, options) {
    var _this = this;

    if (options === void 0) {
      options = {};
    }

    var childService = new Interpreter(machine, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, this.options), {
      parent: this,
      id: options.id || machine.id
    }));

    var resolvedOptions = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), options);

    if (resolvedOptions.sync) {
      childService.onTransition(function (state) {
        _this.send(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.update, {
          state: state,
          id: childService.id
        });
      });
    }

    var actor = childService;
    this.children.set(childService.id, actor);

    if (resolvedOptions.autoForward) {
      this.forwardTo.add(childService.id);
    }

    childService.onDone(function (doneEvent) {
      _this.removeChild(childService.id);

      _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(doneEvent, {
        origin: childService.id
      }));
    }).start();
    return actor;
  };

  Interpreter.prototype.spawnBehavior = function (behavior, id) {
    var actorRef = (0,_behaviors_js__WEBPACK_IMPORTED_MODULE_11__.spawnBehavior)(behavior, {
      id: id,
      parent: this
    });
    this.children.set(id, actorRef);
    return actorRef;
  };

  Interpreter.prototype.spawnPromise = function (promise, id) {
    var _a;

    var _this = this;

    var canceled = false;
    var resolvedData;
    promise.then(function (response) {
      if (!canceled) {
        resolvedData = response;

        _this.removeChild(id);

        _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id, response), {
          origin: id
        }));
      }
    }, function (errorData) {
      if (!canceled) {
        _this.removeChild(id);

        var errorEvent = (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, errorData);

        try {
          // Send "error.platform.id" to this (parent).
          _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(errorEvent, {
            origin: id
          }));
        } catch (error) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.reportUnhandledExceptionOnInvocation)(errorData, error, id);

          if (_this.devTools) {
            _this.devTools.send(errorEvent, _this.state);
          }

          if (_this.machine.strict) {
            // it would be better to always stop the state machine if unhandled
            // exception/promise rejection happens but because we don't want to
            // break existing code so enforce it on strict mode only especially so
            // because documentation says that onError is optional
            _this.stop();
          }
        }
      }
    });
    var actor = (_a = {
      id: id,
      send: function () {
        return void 0;
      },
      subscribe: function (next, handleError, complete) {
        var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next, handleError, complete);
        var unsubscribed = false;
        promise.then(function (response) {
          if (unsubscribed) {
            return;
          }

          observer.next(response);

          if (unsubscribed) {
            return;
          }

          observer.complete();
        }, function (err) {
          if (unsubscribed) {
            return;
          }

          observer.error(err);
        });
        return {
          unsubscribe: function () {
            return unsubscribed = true;
          }
        };
      },
      stop: function () {
        canceled = true;
      },
      toJSON: function () {
        return {
          id: id
        };
      },
      getSnapshot: function () {
        return resolvedData;
      }
    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
      return this;
    }, _a);
    this.children.set(id, actor);
    return actor;
  };

  Interpreter.prototype.spawnCallback = function (callback, id) {
    var _a;

    var _this = this;

    var canceled = false;
    var receivers = new Set();
    var listeners = new Set();
    var emitted;

    var receive = function (e) {
      emitted = e;
      listeners.forEach(function (listener) {
        return listener(e);
      });

      if (canceled) {
        return;
      }

      _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(e, {
        origin: id
      }));
    };

    var callbackStop;

    try {
      callbackStop = callback(receive, function (newListener) {
        receivers.add(newListener);
      });
    } catch (err) {
      this.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, err));
    }

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(callbackStop)) {
      // it turned out to be an async function, can't reliably check this before calling `callback`
      // because transpiled async functions are not recognizable
      return this.spawnPromise(callbackStop, id);
    }

    var actor = (_a = {
      id: id,
      send: function (event) {
        return receivers.forEach(function (receiver) {
          return receiver(event);
        });
      },
      subscribe: function (next) {
        var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next);
        listeners.add(observer.next);
        return {
          unsubscribe: function () {
            listeners.delete(observer.next);
          }
        };
      },
      stop: function () {
        canceled = true;

        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(callbackStop)) {
          callbackStop();
        }
      },
      toJSON: function () {
        return {
          id: id
        };
      },
      getSnapshot: function () {
        return emitted;
      }
    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
      return this;
    }, _a);
    this.children.set(id, actor);
    return actor;
  };

  Interpreter.prototype.spawnObservable = function (source, id) {
    var _a;

    var _this = this;

    var emitted;
    var subscription = source.subscribe(function (value) {
      emitted = value;

      _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(value, {
        origin: id
      }));
    }, function (err) {
      _this.removeChild(id);

      _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, err), {
        origin: id
      }));
    }, function () {
      _this.removeChild(id);

      _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id), {
        origin: id
      }));
    });
    var actor = (_a = {
      id: id,
      send: function () {
        return void 0;
      },
      subscribe: function (next, handleError, complete) {
        return source.subscribe(next, handleError, complete);
      },
      stop: function () {
        return subscription.unsubscribe();
      },
      getSnapshot: function () {
        return emitted;
      },
      toJSON: function () {
        return {
          id: id
        };
      }
    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
      return this;
    }, _a);
    this.children.set(id, actor);
    return actor;
  };

  Interpreter.prototype.spawnActor = function (actor, name) {
    this.children.set(name, actor);
    return actor;
  };

  Interpreter.prototype.spawnActivity = function (activity) {
    var implementation = this.machine.options && this.machine.options.activities ? this.machine.options.activities[activity.type] : undefined;

    if (!implementation) {
      if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "No implementation found for activity '".concat(activity.type, "'"));
      } // tslint:disable-next-line:no-console


      return;
    } // Start implementation


    var dispose = implementation(this.state.context, activity);
    this.spawnEffect(activity.id, dispose);
  };

  Interpreter.prototype.spawnEffect = function (id, dispose) {
    var _a;

    this.children.set(id, (_a = {
      id: id,
      send: function () {
        return void 0;
      },
      subscribe: function () {
        return {
          unsubscribe: function () {
            return void 0;
          }
        };
      },
      stop: dispose || undefined,
      getSnapshot: function () {
        return undefined;
      },
      toJSON: function () {
        return {
          id: id
        };
      }
    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
      return this;
    }, _a));
  };

  Interpreter.prototype.attachDev = function () {
    var global = (0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.getGlobal)();

    if (this.options.devTools && global) {
      if (global.__REDUX_DEVTOOLS_EXTENSION__) {
        var devToolsOptions = typeof this.options.devTools === 'object' ? this.options.devTools : undefined;
        this.devTools = global.__REDUX_DEVTOOLS_EXTENSION__.connect((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({
          name: this.id,
          autoPause: true,
          stateSanitizer: function (state) {
            return {
              value: state.value,
              context: state.context,
              actions: state.actions
            };
          }
        }, devToolsOptions), {
          features: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({
            jump: false,
            skip: false
          }, devToolsOptions ? devToolsOptions.features : undefined)
        }), this.machine);
        this.devTools.init(this.state);
      } // add XState-specific dev tooling hook


      (0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.registerService)(this);
    }
  };

  Interpreter.prototype.toJSON = function () {
    return {
      id: this.id
    };
  };

  Interpreter.prototype[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
    return this;
  };

  Interpreter.prototype.getSnapshot = function () {
    if (this.status === InterpreterStatus.NotStarted) {
      return this.initialState;
    }

    return this._state;
  };
  /**
   * The default interpreter options:
   *
   * - `clock` uses the global `setTimeout` and `clearTimeout` functions
   * - `logger` uses the global `console.log()` method
   */


  Interpreter.defaultOptions = {
    execute: true,
    deferEvents: true,
    clock: {
      setTimeout: function (fn, ms) {
        return setTimeout(fn, ms);
      },
      clearTimeout: function (id) {
        return clearTimeout(id);
      }
    },
    logger: /*#__PURE__*/console.log.bind(console),
    devTools: false
  };
  Interpreter.interpret = interpret;
  return Interpreter;
}();

var resolveSpawnOptions = function (nameOrOptions) {
  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(nameOrOptions)) {
    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), {
      name: nameOrOptions
    });
  }

  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), {
    name: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.uniqueId)()
  }), nameOrOptions);
};

function spawn(entity, nameOrOptions) {
  var resolvedOptions = resolveSpawnOptions(nameOrOptions);
  return (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.consume)(function (service) {
    if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
      var isLazyEntity = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity);
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!service || isLazyEntity, "Attempted to spawn an Actor (ID: \"".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity) ? entity.id : 'undefined', "\") outside of a service. This will have no effect."));
    }

    if (service) {
      return service.spawn(entity, resolvedOptions.name, resolvedOptions);
    } else {
      return (0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity, resolvedOptions.name);
    }
  });
}
/**
 * Creates a new Interpreter instance for the given machine with the provided options, if any.
 *
 * @param machine The machine to interpret
 * @param options Interpreter options
 */

function interpret(machine, options) {
  var interpreter = new Interpreter(machine, options);
  return interpreter;
}




/***/ }),

/***/ "./node_modules/xstate/es/invokeUtils.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/invokeUtils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   toInvokeDefinition: () => (/* binding */ toInvokeDefinition),
/* harmony export */   toInvokeSource: () => (/* binding */ toInvokeSource)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actionTypes.js */ "./node_modules/xstate/es/actionTypes.js");






function toInvokeSource(src) {
  if (typeof src === 'string') {
    var simpleSrc = {
      type: src
    };

    simpleSrc.toString = function () {
      return src;
    }; // v4 compat - TODO: remove in v5


    return simpleSrc;
  }

  return src;
}
function toInvokeDefinition(invokeConfig) {
  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke
  }, invokeConfig), {
    toJSON: function () {
      invokeConfig.onDone;
          invokeConfig.onError;
          var invokeDef = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__rest)(invokeConfig, ["onDone", "onError"]);

      return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, invokeDef), {
        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke,
        src: toInvokeSource(invokeConfig.src)
      });
    }
  });
}




/***/ }),

/***/ "./node_modules/xstate/es/registry.js":
/*!********************************************!*\
  !*** ./node_modules/xstate/es/registry.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   registry: () => (/* binding */ registry)
/* harmony export */ });
var children = /*#__PURE__*/new Map();
var sessionIdIndex = 0;
var registry = {
  bookId: function () {
    return "x:".concat(sessionIdIndex++);
  },
  register: function (id, actor) {
    children.set(id, actor);
    return id;
  },
  get: function (id) {
    return children.get(id);
  },
  free: function (id) {
    children.delete(id);
  }
};




/***/ }),

/***/ "./node_modules/xstate/es/scheduler.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/scheduler.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Scheduler: () => (/* binding */ Scheduler)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");


var defaultOptions = {
  deferEvents: false
};

var Scheduler =
/*#__PURE__*/

/** @class */
function () {
  function Scheduler(options) {
    this.processingEvent = false;
    this.queue = [];
    this.initialized = false;
    this.options = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, defaultOptions), options);
  }

  Scheduler.prototype.initialize = function (callback) {
    this.initialized = true;

    if (callback) {
      if (!this.options.deferEvents) {
        this.schedule(callback);
        return;
      }

      this.process(callback);
    }

    this.flushEvents();
  };

  Scheduler.prototype.schedule = function (task) {
    if (!this.initialized || this.processingEvent) {
      this.queue.push(task);
      return;
    }

    if (this.queue.length !== 0) {
      throw new Error('Event queue should be empty when it is not processing events');
    }

    this.process(task);
    this.flushEvents();
  };

  Scheduler.prototype.clear = function () {
    this.queue = [];
  };

  Scheduler.prototype.flushEvents = function () {
    var nextCallback = this.queue.shift();

    while (nextCallback) {
      this.process(nextCallback);
      nextCallback = this.queue.shift();
    }
  };

  Scheduler.prototype.process = function (callback) {
    this.processingEvent = true;

    try {
      callback();
    } catch (e) {
      // there is no use to keep the future events
      // as the situation is not anymore the same
      this.clear();
      throw e;
    } finally {
      this.processingEvent = false;
    }
  };

  return Scheduler;
}();




/***/ }),

/***/ "./node_modules/xstate/es/serviceScope.js":
/*!************************************************!*\
  !*** ./node_modules/xstate/es/serviceScope.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   consume: () => (/* binding */ consume),
/* harmony export */   provide: () => (/* binding */ provide)
/* harmony export */ });
/**
 * Maintains a stack of the current service in scope.
 * This is used to provide the correct service to spawn().
 */
var serviceStack = [];
var provide = function (service, fn) {
  serviceStack.push(service);
  var result = fn(service);
  serviceStack.pop();
  return result;
};
var consume = function (fn) {
  return fn(serviceStack[serviceStack.length - 1]);
};




/***/ }),

/***/ "./node_modules/xstate/es/stateUtils.js":
/*!**********************************************!*\
  !*** ./node_modules/xstate/es/stateUtils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getAdjList: () => (/* binding */ getAdjList),
/* harmony export */   getAllChildren: () => (/* binding */ getAllChildren),
/* harmony export */   getAllStateNodes: () => (/* binding */ getAllStateNodes),
/* harmony export */   getChildren: () => (/* binding */ getChildren),
/* harmony export */   getConfiguration: () => (/* binding */ getConfiguration),
/* harmony export */   getMeta: () => (/* binding */ getMeta),
/* harmony export */   getTagsFromConfiguration: () => (/* binding */ getTagsFromConfiguration),
/* harmony export */   getValue: () => (/* binding */ getValue),
/* harmony export */   has: () => (/* binding */ has),
/* harmony export */   isInFinalState: () => (/* binding */ isInFinalState),
/* harmony export */   isLeafNode: () => (/* binding */ isLeafNode),
/* harmony export */   nextEvents: () => (/* binding */ nextEvents)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");



var isLeafNode = function (stateNode) {
  return stateNode.type === 'atomic' || stateNode.type === 'final';
};
function getAllChildren(stateNode) {
  return Object.keys(stateNode.states).map(function (key) {
    return stateNode.states[key];
  });
}
function getChildren(stateNode) {
  return getAllChildren(stateNode).filter(function (sn) {
    return sn.type !== 'history';
  });
}
function getAllStateNodes(stateNode) {
  var stateNodes = [stateNode];

  if (isLeafNode(stateNode)) {
    return stateNodes;
  }

  return stateNodes.concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(getChildren(stateNode).map(getAllStateNodes)));
}
function getConfiguration(prevStateNodes, stateNodes) {
  var e_1, _a, e_2, _b, e_3, _c, e_4, _d;

  var prevConfiguration = new Set(prevStateNodes);
  var prevAdjList = getAdjList(prevConfiguration);
  var configuration = new Set(stateNodes);

  try {
    // add all ancestors
    for (var configuration_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()) {
      var s = configuration_1_1.value;
      var m = s.parent;

      while (m && !configuration.has(m)) {
        configuration.add(m);
        m = m.parent;
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return)) _a.call(configuration_1);
    } finally {
      if (e_1) throw e_1.error;
    }
  }

  var adjList = getAdjList(configuration);

  try {
    // add descendants
    for (var configuration_2 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()) {
      var s = configuration_2_1.value; // if previously active, add existing child nodes

      if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {
        if (prevAdjList.get(s)) {
          prevAdjList.get(s).forEach(function (sn) {
            return configuration.add(sn);
          });
        } else {
          s.initialStateNodes.forEach(function (sn) {
            return configuration.add(sn);
          });
        }
      } else {
        if (s.type === 'parallel') {
          try {
            for (var _e = (e_3 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(getChildren(s))), _f = _e.next(); !_f.done; _f = _e.next()) {
              var child = _f.value;

              if (!configuration.has(child)) {
                configuration.add(child);

                if (prevAdjList.get(child)) {
                  prevAdjList.get(child).forEach(function (sn) {
                    return configuration.add(sn);
                  });
                } else {
                  child.initialStateNodes.forEach(function (sn) {
                    return configuration.add(sn);
                  });
                }
              }
            }
          } catch (e_3_1) {
            e_3 = {
              error: e_3_1
            };
          } finally {
            try {
              if (_f && !_f.done && (_c = _e.return)) _c.call(_e);
            } finally {
              if (e_3) throw e_3.error;
            }
          }
        }
      }
    }
  } catch (e_2_1) {
    e_2 = {
      error: e_2_1
    };
  } finally {
    try {
      if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return)) _b.call(configuration_2);
    } finally {
      if (e_2) throw e_2.error;
    }
  }

  try {
    // add all ancestors
    for (var configuration_3 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()) {
      var s = configuration_3_1.value;
      var m = s.parent;

      while (m && !configuration.has(m)) {
        configuration.add(m);
        m = m.parent;
      }
    }
  } catch (e_4_1) {
    e_4 = {
      error: e_4_1
    };
  } finally {
    try {
      if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return)) _d.call(configuration_3);
    } finally {
      if (e_4) throw e_4.error;
    }
  }

  return configuration;
}

function getValueFromAdj(baseNode, adjList) {
  var childStateNodes = adjList.get(baseNode);

  if (!childStateNodes) {
    return {}; // todo: fix?
  }

  if (baseNode.type === 'compound') {
    var childStateNode = childStateNodes[0];

    if (childStateNode) {
      if (isLeafNode(childStateNode)) {
        return childStateNode.key;
      }
    } else {
      return {};
    }
  }

  var stateValue = {};
  childStateNodes.forEach(function (csn) {
    stateValue[csn.key] = getValueFromAdj(csn, adjList);
  });
  return stateValue;
}

function getAdjList(configuration) {
  var e_5, _a;

  var adjList = new Map();

  try {
    for (var configuration_4 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()) {
      var s = configuration_4_1.value;

      if (!adjList.has(s)) {
        adjList.set(s, []);
      }

      if (s.parent) {
        if (!adjList.has(s.parent)) {
          adjList.set(s.parent, []);
        }

        adjList.get(s.parent).push(s);
      }
    }
  } catch (e_5_1) {
    e_5 = {
      error: e_5_1
    };
  } finally {
    try {
      if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return)) _a.call(configuration_4);
    } finally {
      if (e_5) throw e_5.error;
    }
  }

  return adjList;
}
function getValue(rootNode, configuration) {
  var config = getConfiguration([rootNode], configuration);
  return getValueFromAdj(rootNode, getAdjList(config));
}
function has(iterable, item) {
  if (Array.isArray(iterable)) {
    return iterable.some(function (member) {
      return member === item;
    });
  }

  if (iterable instanceof Set) {
    return iterable.has(item);
  }

  return false; // TODO: fix
}
function nextEvents(configuration) {
  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(configuration.map(function (sn) {
    return sn.ownEvents;
  })), false)))), false);
}
function isInFinalState(configuration, stateNode) {
  if (stateNode.type === 'compound') {
    return getChildren(stateNode).some(function (s) {
      return s.type === 'final' && has(configuration, s);
    });
  }

  if (stateNode.type === 'parallel') {
    return getChildren(stateNode).every(function (sn) {
      return isInFinalState(configuration, sn);
    });
  }

  return false;
}
function getMeta(configuration) {
  if (configuration === void 0) {
    configuration = [];
  }

  return configuration.reduce(function (acc, stateNode) {
    if (stateNode.meta !== undefined) {
      acc[stateNode.id] = stateNode.meta;
    }

    return acc;
  }, {});
}
function getTagsFromConfiguration(configuration) {
  return new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(configuration.map(function (sn) {
    return sn.tags;
  })));
}




/***/ }),

/***/ "./node_modules/xstate/es/types.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/types.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ActionTypes: () => (/* binding */ ActionTypes),
/* harmony export */   SpecialTargets: () => (/* binding */ SpecialTargets)
/* harmony export */ });
var ActionTypes;

(function (ActionTypes) {
  ActionTypes["Start"] = "xstate.start";
  ActionTypes["Stop"] = "xstate.stop";
  ActionTypes["Raise"] = "xstate.raise";
  ActionTypes["Send"] = "xstate.send";
  ActionTypes["Cancel"] = "xstate.cancel";
  ActionTypes["NullEvent"] = "";
  ActionTypes["Assign"] = "xstate.assign";
  ActionTypes["After"] = "xstate.after";
  ActionTypes["DoneState"] = "done.state";
  ActionTypes["DoneInvoke"] = "done.invoke";
  ActionTypes["Log"] = "xstate.log";
  ActionTypes["Init"] = "xstate.init";
  ActionTypes["Invoke"] = "xstate.invoke";
  ActionTypes["ErrorExecution"] = "error.execution";
  ActionTypes["ErrorCommunication"] = "error.communication";
  ActionTypes["ErrorPlatform"] = "error.platform";
  ActionTypes["ErrorCustom"] = "xstate.error";
  ActionTypes["Update"] = "xstate.update";
  ActionTypes["Pure"] = "xstate.pure";
  ActionTypes["Choose"] = "xstate.choose";
})(ActionTypes || (ActionTypes = {}));

var SpecialTargets;

(function (SpecialTargets) {
  SpecialTargets["Parent"] = "#_parent";
  SpecialTargets["Internal"] = "#_internal";
})(SpecialTargets || (SpecialTargets = {}));




/***/ }),

/***/ "./node_modules/xstate/es/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/utils.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createInvokeId: () => (/* binding */ createInvokeId),
/* harmony export */   evaluateGuard: () => (/* binding */ evaluateGuard),
/* harmony export */   flatten: () => (/* binding */ flatten),
/* harmony export */   getActionType: () => (/* binding */ getActionType),
/* harmony export */   getEventType: () => (/* binding */ getEventType),
/* harmony export */   interopSymbols: () => (/* binding */ interopSymbols),
/* harmony export */   isActor: () => (/* binding */ isActor),
/* harmony export */   isArray: () => (/* binding */ isArray),
/* harmony export */   isBehavior: () => (/* binding */ isBehavior),
/* harmony export */   isBuiltInEvent: () => (/* binding */ isBuiltInEvent),
/* harmony export */   isFunction: () => (/* binding */ isFunction),
/* harmony export */   isMachine: () => (/* binding */ isMachine),
/* harmony export */   isObservable: () => (/* binding */ isObservable),
/* harmony export */   isPromiseLike: () => (/* binding */ isPromiseLike),
/* harmony export */   isRaisableAction: () => (/* binding */ isRaisableAction),
/* harmony export */   isStateLike: () => (/* binding */ isStateLike),
/* harmony export */   isString: () => (/* binding */ isString),
/* harmony export */   keys: () => (/* binding */ keys),
/* harmony export */   mapContext: () => (/* binding */ mapContext),
/* harmony export */   mapFilterValues: () => (/* binding */ mapFilterValues),
/* harmony export */   mapValues: () => (/* binding */ mapValues),
/* harmony export */   matchesState: () => (/* binding */ matchesState),
/* harmony export */   nestedPath: () => (/* binding */ nestedPath),
/* harmony export */   normalizeTarget: () => (/* binding */ normalizeTarget),
/* harmony export */   partition: () => (/* binding */ partition),
/* harmony export */   path: () => (/* binding */ path),
/* harmony export */   pathToStateValue: () => (/* binding */ pathToStateValue),
/* harmony export */   pathsToStateValue: () => (/* binding */ pathsToStateValue),
/* harmony export */   reportUnhandledExceptionOnInvocation: () => (/* binding */ reportUnhandledExceptionOnInvocation),
/* harmony export */   symbolObservable: () => (/* binding */ symbolObservable),
/* harmony export */   toArray: () => (/* binding */ toArray),
/* harmony export */   toArrayStrict: () => (/* binding */ toArrayStrict),
/* harmony export */   toEventObject: () => (/* binding */ toEventObject),
/* harmony export */   toGuard: () => (/* binding */ toGuard),
/* harmony export */   toInvokeSource: () => (/* binding */ toInvokeSource),
/* harmony export */   toObserver: () => (/* binding */ toObserver),
/* harmony export */   toSCXMLEvent: () => (/* binding */ toSCXMLEvent),
/* harmony export */   toStatePath: () => (/* binding */ toStatePath),
/* harmony export */   toStatePaths: () => (/* binding */ toStatePaths),
/* harmony export */   toStateValue: () => (/* binding */ toStateValue),
/* harmony export */   toTransitionConfigArray: () => (/* binding */ toTransitionConfigArray),
/* harmony export */   uniqueId: () => (/* binding */ uniqueId),
/* harmony export */   updateContext: () => (/* binding */ updateContext),
/* harmony export */   updateHistoryStates: () => (/* binding */ updateHistoryStates),
/* harmony export */   updateHistoryValue: () => (/* binding */ updateHistoryValue),
/* harmony export */   warn: () => (/* binding */ warn)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.js */ "./node_modules/xstate/es/types.js");
/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./actionTypes.js */ "./node_modules/xstate/es/actionTypes.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/xstate/es/constants.js");
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");






var _a;
function keys(value) {
  return Object.keys(value);
}
function matchesState(parentStateId, childStateId, delimiter) {
  if (delimiter === void 0) {
    delimiter = _constants_js__WEBPACK_IMPORTED_MODULE_0__.STATE_DELIMITER;
  }

  var parentStateValue = toStateValue(parentStateId, delimiter);
  var childStateValue = toStateValue(childStateId, delimiter);

  if (isString(childStateValue)) {
    if (isString(parentStateValue)) {
      return childStateValue === parentStateValue;
    } // Parent more specific than child


    return false;
  }

  if (isString(parentStateValue)) {
    return parentStateValue in childStateValue;
  }

  return Object.keys(parentStateValue).every(function (key) {
    if (!(key in childStateValue)) {
      return false;
    }

    return matchesState(parentStateValue[key], childStateValue[key]);
  });
}
function getEventType(event) {
  try {
    return isString(event) || typeof event === 'number' ? "".concat(event) : event.type;
  } catch (e) {
    throw new Error('Events must be strings or objects with a string event.type property.');
  }
}
function getActionType(action) {
  try {
    return isString(action) || typeof action === 'number' ? "".concat(action) : isFunction(action) ? action.name : action.type;
  } catch (e) {
    throw new Error('Actions must be strings or objects with a string action.type property.');
  }
}
function toStatePath(stateId, delimiter) {
  try {
    if (isArray(stateId)) {
      return stateId;
    }

    return stateId.toString().split(delimiter);
  } catch (e) {
    throw new Error("'".concat(stateId, "' is not a valid state path."));
  }
}
function isStateLike(state) {
  return typeof state === 'object' && 'value' in state && 'context' in state && 'event' in state && '_event' in state;
}
function toStateValue(stateValue, delimiter) {
  if (isStateLike(stateValue)) {
    return stateValue.value;
  }

  if (isArray(stateValue)) {
    return pathToStateValue(stateValue);
  }

  if (typeof stateValue !== 'string') {
    return stateValue;
  }

  var statePath = toStatePath(stateValue, delimiter);
  return pathToStateValue(statePath);
}
function pathToStateValue(statePath) {
  if (statePath.length === 1) {
    return statePath[0];
  }

  var value = {};
  var marker = value;

  for (var i = 0; i < statePath.length - 1; i++) {
    if (i === statePath.length - 2) {
      marker[statePath[i]] = statePath[i + 1];
    } else {
      marker[statePath[i]] = {};
      marker = marker[statePath[i]];
    }
  }

  return value;
}
function mapValues(collection, iteratee) {
  var result = {};
  var collectionKeys = Object.keys(collection);

  for (var i = 0; i < collectionKeys.length; i++) {
    var key = collectionKeys[i];
    result[key] = iteratee(collection[key], key, collection, i);
  }

  return result;
}
function mapFilterValues(collection, iteratee, predicate) {
  var e_1, _a;

  var result = {};

  try {
    for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(collection)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var item = collection[key];

      if (!predicate(item)) {
        continue;
      }

      result[key] = iteratee(item, key, collection);
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    } finally {
      if (e_1) throw e_1.error;
    }
  }

  return result;
}
/**
 * Retrieves a value at the given path.
 * @param props The deep path to the prop of the desired value
 */

var path = function (props) {
  return function (object) {
    var e_2, _a;

    var result = object;

    try {
      for (var props_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
        var prop = props_1_1.value;
        result = result[prop];
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
      } finally {
        if (e_2) throw e_2.error;
      }
    }

    return result;
  };
};
/**
 * Retrieves a value at the given path via the nested accessor prop.
 * @param props The deep path to the prop of the desired value
 */

function nestedPath(props, accessorProp) {
  return function (object) {
    var e_3, _a;

    var result = object;

    try {
      for (var props_2 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()) {
        var prop = props_2_1.value;
        result = result[accessorProp][prop];
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);
      } finally {
        if (e_3) throw e_3.error;
      }
    }

    return result;
  };
}
function toStatePaths(stateValue) {
  if (!stateValue) {
    return [[]];
  }

  if (isString(stateValue)) {
    return [[stateValue]];
  }

  var result = flatten(Object.keys(stateValue).map(function (key) {
    var subStateValue = stateValue[key];

    if (typeof subStateValue !== 'string' && (!subStateValue || !Object.keys(subStateValue).length)) {
      return [[key]];
    }

    return toStatePaths(stateValue[key]).map(function (subPath) {
      return [key].concat(subPath);
    });
  }));
  return result;
}
function pathsToStateValue(paths) {
  var e_4, _a;

  var result = {};

  if (paths && paths.length === 1 && paths[0].length === 1) {
    return paths[0][0];
  }

  try {
    for (var paths_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(paths), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()) {
      var currentPath = paths_1_1.value;
      var marker = result; // tslint:disable-next-line:prefer-for-of

      for (var i = 0; i < currentPath.length; i++) {
        var subPath = currentPath[i];

        if (i === currentPath.length - 2) {
          marker[subPath] = currentPath[i + 1];
          break;
        }

        marker[subPath] = marker[subPath] || {};
        marker = marker[subPath];
      }
    }
  } catch (e_4_1) {
    e_4 = {
      error: e_4_1
    };
  } finally {
    try {
      if (paths_1_1 && !paths_1_1.done && (_a = paths_1.return)) _a.call(paths_1);
    } finally {
      if (e_4) throw e_4.error;
    }
  }

  return result;
}
function flatten(array) {
  var _a;

  return (_a = []).concat.apply(_a, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(array), false));
}
function toArrayStrict(value) {
  if (isArray(value)) {
    return value;
  }

  return [value];
}
function toArray(value) {
  if (value === undefined) {
    return [];
  }

  return toArrayStrict(value);
}
function mapContext(mapper, context, _event) {
  var e_5, _a;

  if (isFunction(mapper)) {
    return mapper(context, _event.data);
  }

  var result = {};

  try {
    for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(mapper)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var subMapper = mapper[key];

      if (isFunction(subMapper)) {
        result[key] = subMapper(context, _event.data);
      } else {
        result[key] = subMapper;
      }
    }
  } catch (e_5_1) {
    e_5 = {
      error: e_5_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    } finally {
      if (e_5) throw e_5.error;
    }
  }

  return result;
}
function isBuiltInEvent(eventType) {
  return /^(done|error)\./.test(eventType);
}
function isPromiseLike(value) {
  if (value instanceof Promise) {
    return true;
  } // Check if shape matches the Promise/A+ specification for a "thenable".


  if (value !== null && (isFunction(value) || typeof value === 'object') && isFunction(value.then)) {
    return true;
  }

  return false;
}
function isBehavior(value) {
  return value !== null && typeof value === 'object' && 'transition' in value && typeof value.transition === 'function';
}
function partition(items, predicate) {
  var e_6, _a;

  var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)([[], []], 2),
      truthy = _b[0],
      falsy = _b[1];

  try {
    for (var items_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
      var item = items_1_1.value;

      if (predicate(item)) {
        truthy.push(item);
      } else {
        falsy.push(item);
      }
    }
  } catch (e_6_1) {
    e_6 = {
      error: e_6_1
    };
  } finally {
    try {
      if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
    } finally {
      if (e_6) throw e_6.error;
    }
  }

  return [truthy, falsy];
}
function updateHistoryStates(hist, stateValue) {
  return mapValues(hist.states, function (subHist, key) {
    if (!subHist) {
      return undefined;
    }

    var subStateValue = (isString(stateValue) ? undefined : stateValue[key]) || (subHist ? subHist.current : undefined);

    if (!subStateValue) {
      return undefined;
    }

    return {
      current: subStateValue,
      states: updateHistoryStates(subHist, subStateValue)
    };
  });
}
function updateHistoryValue(hist, stateValue) {
  return {
    current: stateValue,
    states: updateHistoryStates(hist, stateValue)
  };
}
function updateContext(context, _event, assignActions, state) {
  if (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {
    warn(!!context, 'Attempting to update undefined context');
  }

  var updatedContext = context ? assignActions.reduce(function (acc, assignAction) {
    var e_7, _a;

    var assignment = assignAction.assignment;
    var meta = {
      state: state,
      action: assignAction,
      _event: _event
    };
    var partialUpdate = {};

    if (isFunction(assignment)) {
      partialUpdate = assignment(acc, _event.data, meta);
    } else {
      try {
        for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(assignment)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var key = _c.value;
          var propAssignment = assignment[key];
          partialUpdate[key] = isFunction(propAssignment) ? propAssignment(acc, _event.data, meta) : propAssignment;
        }
      } catch (e_7_1) {
        e_7 = {
          error: e_7_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_7) throw e_7.error;
        }
      }
    }

    return Object.assign({}, acc, partialUpdate);
  }, context) : context;
  return updatedContext;
} // tslint:disable-next-line:no-empty

var warn = function () {};

if (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {
  warn = function (condition, message) {
    var error = condition instanceof Error ? condition : undefined;

    if (!error && condition) {
      return;
    }

    if (console !== undefined) {
      var args = ["Warning: ".concat(message)];

      if (error) {
        args.push(error);
      } // tslint:disable-next-line:no-console


      console.warn.apply(console, args);
    }
  };
}
function isArray(value) {
  return Array.isArray(value);
} // tslint:disable-next-line:ban-types

function isFunction(value) {
  return typeof value === 'function';
}
function isString(value) {
  return typeof value === 'string';
}
function toGuard(condition, guardMap) {
  if (!condition) {
    return undefined;
  }

  if (isString(condition)) {
    return {
      type: _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,
      name: condition,
      predicate: guardMap ? guardMap[condition] : undefined
    };
  }

  if (isFunction(condition)) {
    return {
      type: _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,
      name: condition.name,
      predicate: condition
    };
  }

  return condition;
}
function isObservable(value) {
  try {
    return 'subscribe' in value && isFunction(value.subscribe);
  } catch (e) {
    return false;
  }
}
var symbolObservable = /*#__PURE__*/function () {
  return typeof Symbol === 'function' && Symbol.observable || '@@observable';
}(); // TODO: to be removed in v5, left it out just to minimize the scope of the change and maintain compatibility with older versions of integration paackages

var interopSymbols = (_a = {}, _a[symbolObservable] = function () {
  return this;
}, _a[Symbol.observable] = function () {
  return this;
}, _a);
function isMachine(value) {
  return !!value && '__xstatenode' in value;
}
function isActor(value) {
  return !!value && typeof value.send === 'function';
}
var uniqueId = /*#__PURE__*/function () {
  var currentId = 0;
  return function () {
    currentId++;
    return currentId.toString(16);
  };
}();
function toEventObject(event, payload // id?: TEvent['type']
) {
  if (isString(event) || typeof event === 'number') {
    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({
      type: event
    }, payload);
  }

  return event;
}
function toSCXMLEvent(event, scxmlEvent) {
  if (!isString(event) && '$$type' in event && event.$$type === 'scxml') {
    return event;
  }

  var eventObject = toEventObject(event);
  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({
    name: eventObject.type,
    data: eventObject,
    $$type: 'scxml',
    type: 'external'
  }, scxmlEvent);
}
function toTransitionConfigArray(event, configLike) {
  var transitions = toArrayStrict(configLike).map(function (transitionLike) {
    if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string' || isMachine(transitionLike)) {
      return {
        target: transitionLike,
        event: event
      };
    }

    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, transitionLike), {
      event: event
    });
  });
  return transitions;
}
function normalizeTarget(target) {
  if (target === undefined || target === _constants_js__WEBPACK_IMPORTED_MODULE_0__.TARGETLESS_KEY) {
    return undefined;
  }

  return toArray(target);
}
function reportUnhandledExceptionOnInvocation(originalError, currentError, id) {
  if (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {
    var originalStackTrace = originalError.stack ? " Stacktrace was '".concat(originalError.stack, "'") : '';

    if (originalError === currentError) {
      // tslint:disable-next-line:no-console
      console.error("Missing onError handler for invocation '".concat(id, "', error was '").concat(originalError, "'.").concat(originalStackTrace));
    } else {
      var stackTrace = currentError.stack ? " Stacktrace was '".concat(currentError.stack, "'") : ''; // tslint:disable-next-line:no-console

      console.error("Missing onError handler and/or unhandled exception/promise rejection for invocation '".concat(id, "'. ") + "Original error: '".concat(originalError, "'. ").concat(originalStackTrace, " Current error is '").concat(currentError, "'.").concat(stackTrace));
    }
  }
}
function evaluateGuard(machine, guard, context, _event, state) {
  var guards = machine.options.guards;
  var guardMeta = {
    state: state,
    cond: guard,
    _event: _event
  }; // TODO: do not hardcode!

  if (guard.type === _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE) {
    return ((guards === null || guards === void 0 ? void 0 : guards[guard.name]) || guard.predicate)(context, _event.data, guardMeta);
  }

  var condFn = guards === null || guards === void 0 ? void 0 : guards[guard.type];

  if (!condFn) {
    throw new Error("Guard '".concat(guard.type, "' is not implemented on machine '").concat(machine.id, "'."));
  }

  return condFn(context, _event.data, guardMeta);
}
function toInvokeSource(src) {
  if (typeof src === 'string') {
    return {
      type: src
    };
  }

  return src;
}
function toObserver(nextHandler, errorHandler, completionHandler) {
  var noop = function () {};

  var isObserver = typeof nextHandler === 'object';
  var self = isObserver ? nextHandler : null;
  return {
    next: ((isObserver ? nextHandler.next : nextHandler) || noop).bind(self),
    error: ((isObserver ? nextHandler.error : errorHandler) || noop).bind(self),
    complete: ((isObserver ? nextHandler.complete : completionHandler) || noop).bind(self)
  };
}
function createInvokeId(stateNodeId, index) {
  return "".concat(stateNodeId, ":invocation[").concat(index, "]");
}
function isRaisableAction(action) {
  return (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.raise || action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.send && action.to === _types_js__WEBPACK_IMPORTED_MODULE_4__.SpecialTargets.Internal) && typeof action.delay !== 'number';
}




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!****************************!*\
  !*** ./src/saypi.index.js ***!
  \****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ButtonModule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ButtonModule.js */ "./src/ButtonModule.js");
/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventBus.js */ "./src/EventBus.js");
/* harmony import */ var _EventModule_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EventModule.js */ "./src/EventModule.js");
/* harmony import */ var _UserAgentModule_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./UserAgentModule.js */ "./src/UserAgentModule.js");
/* harmony import */ var _styles_common_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./styles/common.scss */ "./src/styles/common.scss");
/* harmony import */ var _styles_desktop_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./styles/desktop.scss */ "./src/styles/desktop.scss");
/* harmony import */ var _styles_mobile_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./styles/mobile.scss */ "./src/styles/mobile.scss");
/* harmony import */ var _styles_rectangles_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./styles/rectangles.css */ "./src/styles/rectangles.css");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }








(function () {
  "use strict";

  var pageScript = (__webpack_require__(/*! raw-loader!../public/audioModule.bundle.js */ "./node_modules/raw-loader/dist/cjs.js!./public/audioModule.bundle.js")["default"]);
  (0,_UserAgentModule_js__WEBPACK_IMPORTED_MODULE_3__.addUserAgentFlags)();
  _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].init();
  setupEventBus();

  // Create a MutationObserver to listen for changes to the DOM
  // textareas are added to the DOM after the page loads
  var callback = function callback(mutationsList, observer) {
    var _iterator = _createForOfIteratorHelper(mutationsList),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var mutation = _step.value;
        if (mutation.type === "childList") {
          // Iterate through added nodes
          mutation.addedNodes.forEach(function (node) {
            // Check if added node is a textarea with 'enterkeyhint' attribute
            if (node.nodeName === "TEXTAREA" && node.hasAttribute("enterkeyhint")) {
              // Stop observing to avoid any potential infinite loops
              observer.disconnect();

              // Do something with the textarea, like add an event listener
              annotateDOM(node);
              return;
            }

            // Check if added node contains a textarea with 'enterkeyhint' attribute
            if (node.querySelectorAll) {
              var textareas = node.querySelectorAll("textarea[enterkeyhint]");
              if (textareas.length > 0) {
                // Stop observing
                observer.disconnect();

                // Do something with the first textarea that has 'enterkeyhint'
                annotateDOM(textareas[0]);
                return;
              }
            }
          });
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };

  // Options for the observer (which mutations to observe)
  var config = {
    attributes: false,
    childList: true,
    subtree: true
  };

  // Create an observer instance linked to the callback function
  var observer = new MutationObserver(callback);

  // Start observing the target node for configured mutations
  observer.observe(document.body, config);
  function setupEventBus() {
    // Setting the correct context
    var context = window;
    if (GM_info.scriptHandler !== "Userscripts") {
      context = unsafeWindow;
    }
    context.EventBus = _EventBus_js__WEBPACK_IMPORTED_MODULE_1__["default"]; // Make the EventBus available to the page script
  }

  function annotateDOM(prompt) {
    // Add id attributes to important elements
    prompt.id = "saypi-prompt";
    var foundFooter = addIdFooter();
    var foundAudioControls = addIdAudioControls();
    var promptControlsContainer = prompt.parentElement.parentElement;
    addIdSubmitButton(promptControlsContainer);
    addTalkButton(promptControlsContainer);
    _ButtonModule_js__WEBPACK_IMPORTED_MODULE_0__.buttonModule.createEnterButton();
    _ButtonModule_js__WEBPACK_IMPORTED_MODULE_0__.buttonModule.createExitButton();
  }
  function addIdSubmitButton(container) {
    var submitButton = container.querySelector("button[type=button]");
    if (submitButton) {
      submitButton.id = "saypi-submitButton";
    }
  }
  function addIdFooter() {
    // Find all audio elements on the page
    var audioElements = document.querySelectorAll("audio");
    var found = false; // default to not found

    audioElements.forEach(function (audio) {
      var precedingDiv = audio.previousElementSibling;

      // If we've already found a div, we can skip further iterations
      if (found) return;

      // Check if the preceding element is a div
      if (precedingDiv && precedingDiv.tagName.toLowerCase() === "div") {
        // Assign an ID to the div
        precedingDiv.lastElementChild.id = "saypi-footer";
        found = true; // set to found
      }
    });

    return found;
  }
  function addIdAudioControls() {
    // Find all audio elements on the page
    var audioElements = document.querySelectorAll("audio");
    var found = false; // default to not found

    audioElements.forEach(function (audio) {
      var nextDiv = audio.nextElementSibling;

      // If we've already found a div, we can skip further iterations
      if (found) return;

      // Check if the preceding element is a div
      if (nextDiv && nextDiv.tagName.toLowerCase() === "div") {
        // Assign an ID to the div
        nextDiv.id = "saypi-audio-controls";
        found = true; // set to found
      }
    });

    return found;
  }
  function injectScript(callback) {
    var scriptElement = document.createElement("script");
    scriptElement.type = "text/javascript";
    scriptElement.id = "saypi-script";
    scriptElement.textContent = pageScript;
    document.body.appendChild(scriptElement);

    // Call the callback function after the script is added
    if (callback) {
      callback();
    }
  }
  function addTalkButton(container) {
    // Create a containing div
    var panel = document.createElement("div");
    panel.id = "saypi-panel";

    // Check if the container has any child elements
    if (container.childNodes.length > 0) {
      // Insert the panel as the second-to-last child
      container.insertBefore(panel, container.lastChild);
    } else {
      // If the container has no children, just append the panel
      container.appendChild(panel);
    }

    // Create the talk button using ButtonModule
    var label = "Talk (Hold Control + Space to use hotkey. Double click to toggle auto-submit on/off)";
    var button = _ButtonModule_js__WEBPACK_IMPORTED_MODULE_0__.buttonModule.createButton("", function () {}); // The callback is empty for now, but you can add functionalities if needed.

    button.id = "saypi-talkButton";
    button.type = "button";

    // Set ARIA label and tooltip
    button.setAttribute("aria-label", label);
    button.setAttribute("title", label);
    var classNames = "relative flex mt-1 mb-1 rounded-full px-2 py-3 text-center bg-cream-550 hover:bg-cream-650 hover:text-brand-green-700 text-muted";
    button.classList.add(classNames.split(" "));

    // Enable autosubmit by default
    button.dataset.autosubmit = "true";
    button.classList.add("autoSubmit");
    panel.appendChild(button);
    _ButtonModule_js__WEBPACK_IMPORTED_MODULE_0__.buttonModule.addTalkIcon(button);

    // Call the function to inject the script after the button has been added
    injectScript(registerAudioButtonEvents);
  }
  function registerAudioButtonEvents() {
    var button = document.getElementById("saypi-talkButton");

    // Attach the event listeners
    button.addEventListener("mousedown", _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].handleTalkMouseDown.bind(_EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"]));
    button.addEventListener("mouseup", _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].handleTalkMouseUp.bind(_EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"]));
    button.addEventListener("dblclick", function () {
      return _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].handleTalkDoubleClick(button);
    });
    button.addEventListener("touchstart", function (e) {
      return _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].handleTalkTouchStart(button, e);
    });
    button.addEventListener("touchend", function () {
      return _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].handleTalkTouchEnd(button);
    });
    _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].registerOtherAudioButtonEvents(button);
    _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].registerHotkey();
  }

  // Start observing the entire document for changes to child nodes and subtree
  observer.observe(document, {
    childList: true,
    subtree: true
  });
})();
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,