// ==UserScript==
// @name         Say, Pi
// @namespace    http://www.saypi.ai/
// @version      1.3.9
// @description  Speak to Pi with OpenAI's Whisper
// @author       Ross Cadogan
// @match        https://pi.ai/talk
// @inject-into  page
// @updateURL    https://app.saypi.ai/saypi.user.js
// @downloadURL  https://app.saypi.ai/saypi.user.js
// @license      MIT
// ==/UserScript==

/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/AnimationModule.js":
/*!********************************!*\
  !*** ./src/AnimationModule.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AnimationModule)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var AnimationModule = /*#__PURE__*/function () {
  function AnimationModule() {
    _classCallCheck(this, AnimationModule);
  }
  _createClass(AnimationModule, null, [{
    key: "startAnimation",
    value: function startAnimation(animation) {
      this.stopOtherAnimations(animation);
      var rectangles = document.querySelectorAll(this.rectanglesSelector);
      rectangles.forEach(function (rect) {
        return rect.classList.add(animation);
      });
    }
  }, {
    key: "stopAnimation",
    value: function stopAnimation(animation) {
      var rectangles = document.querySelectorAll(this.rectanglesSelector);
      rectangles.forEach(function (rect) {
        return rect.classList.remove(animation);
      });
    }
  }, {
    key: "stopAllAnimations",
    value: function stopAllAnimations() {
      var _this = this;
      this.talkButtonAnimations.forEach(function (animation) {
        return _this.stopAnimation(animation);
      });
    }
  }, {
    key: "stopOtherAnimations",
    value: function stopOtherAnimations(keepAnimation) {
      var _this2 = this;
      this.talkButtonAnimations.forEach(function (animation) {
        if (animation !== keepAnimation) {
          _this2.stopAnimation(animation);
        }
      });
    }
  }]);
  return AnimationModule;
}();
_defineProperty(AnimationModule, "rectanglesSelector", ".outermost, .second, .third, .fourth, .fifth, .innermost");
_defineProperty(AnimationModule, "talkButtonAnimations", ["loading", "piSpeaking", "userSpeaking", "transcribing", "paused"]);


/***/ }),

/***/ "./src/ButtonModule.js":
/*!*****************************!*\
  !*** ./src/ButtonModule.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buttonModule: () => (/* binding */ buttonModule),
/* harmony export */   "default": () => (/* binding */ ButtonModule)
/* harmony export */ });
/* harmony import */ var _UserAgentModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UserAgentModule */ "./src/UserAgentModule.js");
/* harmony import */ var _EventBus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventBus */ "./src/EventBus.js");
/* harmony import */ var _StateMachineService_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StateMachineService.js */ "./src/StateMachineService.js");
/* harmony import */ var _icons_exit_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./icons/exit.svg */ "./src/icons/exit.svg");
/* harmony import */ var _icons_maximize_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./icons/maximize.svg */ "./src/icons/maximize.svg");
/* harmony import */ var _icons_rectangles_svg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./icons/rectangles.svg */ "./src/icons/rectangles.svg");
/* harmony import */ var _icons_waveform_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./icons/waveform.svg */ "./src/icons/waveform.svg");
/* harmony import */ var _icons_muted_microphone_svg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./icons/muted_microphone.svg */ "./src/icons/muted_microphone.svg");
/* harmony import */ var _icons_play_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./icons/play.svg */ "./src/icons/play.svg");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }









var ButtonModule = /*#__PURE__*/function () {
  function ButtonModule() {
    _classCallCheck(this, ButtonModule);
    this.playButton = null;
    this.actor = _StateMachineService_js__WEBPACK_IMPORTED_MODULE_2__["default"].actor;
    // Binding methods to the current instance
    this.handlePlayButtonClick = this.handlePlayButtonClick.bind(this);
    this.registerOtherEvents();
  }
  _createClass(ButtonModule, [{
    key: "registerOtherEvents",
    value: function registerOtherEvents() {
      _EventBus__WEBPACK_IMPORTED_MODULE_1__["default"].on("saypi:autoSubmit", ButtonModule.handleAutoSubmit);
    }

    // Function to create a new button
  }, {
    key: "createButton",
    value: function createButton(label, callback) {
      var button = document.createElement("button");
      button.textContent = label;
      button.onclick = callback;
      return button;
    }

    // Function to style a given button
  }, {
    key: "styleButton",
    value: function styleButton(button, styles) {
      for (var key in styles) {
        if (styles.hasOwnProperty(key)) {
          button.style[key] = styles[key];
        }
      }
    }
  }, {
    key: "addTalkIcon",
    value: function addTalkIcon(button) {
      var _this = this;
      this.updateIconContent(button);
      window.matchMedia("(max-width: 768px)").addListener(function () {
        _this.updateIconContent(button);
      });
      this.setupClassObserver(button);
    }
  }, {
    key: "updateIconContent",
    value: function updateIconContent(iconContainer) {
      if ((0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_0__.isMobileView)()) {
        iconContainer.innerHTML = _icons_rectangles_svg__WEBPACK_IMPORTED_MODULE_5__["default"];
      } else {
        iconContainer.innerHTML = _icons_waveform_svg__WEBPACK_IMPORTED_MODULE_6__["default"];
      }
    }
  }, {
    key: "setupClassObserver",
    value: function setupClassObserver(button) {
      var _this2 = this;
      var targetNode = document.documentElement; // The <html> element

      var config = {
        attributes: true,
        attributeFilter: ["class"]
      };
      var callback = function callback(mutationsList, observer) {
        var _iterator = _createForOfIteratorHelper(mutationsList),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var mutation = _step.value;
            if (mutation.type === "attributes") {
              if (mutation.attributeName === "class") {
                if (document.documentElement.classList.contains("mobile-view")) {
                  // 'mobile-view' class was added
                  _this2.updateIconContent(button);
                } else {
                  // 'mobile-view' class was removed
                  _this2.updateIconContent(button);
                }
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      };
      var observer = new MutationObserver(callback);

      // Start observing the target node for configured mutations
      observer.observe(targetNode, config);

      // Later, you can stop observing by calling:
      // observer.disconnect();
    }

    // Simulate an "Enter" keypress event on a form
  }, {
    key: "createExitButton",
    value: function createExitButton() {
      var label = "Exit Voice-Controlled Mobile Mode";
      var button = this.createButton("", function () {
        (0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_0__.exitMobileMode)();
      });
      button.id = "saypi-exitButton";
      button.type = "button";
      button.className = "exit-button fixed rounded-full bg-cream-550 enabled:hover:bg-cream-650";
      button.setAttribute("aria-label", label);
      button.setAttribute("title", label);
      button.innerHTML = _icons_exit_svg__WEBPACK_IMPORTED_MODULE_3__["default"];
      document.body.appendChild(button);
      return button;
    }
  }, {
    key: "createEnterButton",
    value: function createEnterButton() {
      var label = "Enter Voice-Controlled Mobile Mode";
      var button = this.createButton("", function () {
        (0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_0__.enterMobileMode)();
      });
      button.id = "saypi-enterButton";
      button.type = "button";
      button.className = "enter-button fixed rounded-full bg-cream-550 enabled:hover:bg-cream-650";
      button.setAttribute("aria-label", label);
      button.setAttribute("title", label);
      button.innerHTML = _icons_maximize_svg__WEBPACK_IMPORTED_MODULE_4__["default"];
      document.body.appendChild(button);
      return button;
    }
  }, {
    key: "createPlayButton",
    value: function createPlayButton() {
      var label = "Hear Pi's response";
      this.playButton = this.createButton("", function () {});
      this.playButton.id = "saypi-playButton";
      this.playButton.type = "button";
      this.playButton.className = "hidden play-button";
      this.playButton.setAttribute("aria-label", label);
      this.playButton.setAttribute("title", label);
      this.playButton.addEventListener("click", this.handlePlayButtonClick);
      this.playButton.innerHTML = _icons_play_svg__WEBPACK_IMPORTED_MODULE_8__["default"];
      document.body.appendChild(this.playButton);
      console.log("Play button created, and added to the DOM.");
      return this.playButton;
    }
  }, {
    key: "showPlayButton",
    value: function showPlayButton() {
      if (!this.playButton) {
        this.createPlayButton();
      }
      this.playButton.classList.remove("hidden");
    }
  }, {
    key: "hidePlayButton",
    value: function hidePlayButton() {
      if (this.playButton) {
        this.playButton.classList.add("hidden");
      }
    }
  }, {
    key: "handlePlayButtonClick",
    value: function handlePlayButtonClick() {
      this.actor.send("saypi:unblock");
      _EventBus__WEBPACK_IMPORTED_MODULE_1__["default"].emit("audio:reload");
    }
  }, {
    key: "showNotification",
    value: function showNotification(details) {
      var icon = details.icon;
      var iconSVG;
      if (icon === "muted-microphone") {
        iconSVG = _icons_muted_microphone_svg__WEBPACK_IMPORTED_MODULE_7__["default"];
      }
      var notification = document.getElementById("saypi-notification");
      if (notification) {
        notification.classList.remove("hidden");
        notification.innerHTML = iconSVG;
      } else {
        var _notification = document.createElement("div");
        _notification.id = "saypi-notification";
        _notification.className = "notification";
        _notification.innerHTML = iconSVG;
        document.body.appendChild(_notification);
      }
    }
  }, {
    key: "dismissNotification",
    value: function dismissNotification() {
      var notification = document.getElementById("saypi-notification");
      if (notification) {
        notification.classList.add("hidden");
      }
    }
  }], [{
    key: "simulateFormSubmit",
    value: function simulateFormSubmit() {
      var submitButton = document.getElementById("saypi-submitButton");
      if (submitButton) {
        submitButton.click();
      } else {
        /* hit enter key in the prompt textarea, might not work as expected on "new ui layout" */
        var textarea = document.getElementById("saypi-prompt");
        var enterEvent = new KeyboardEvent("keydown", {
          bubbles: true,
          key: "Enter",
          keyCode: 13,
          which: 13
        });
        textarea.dispatchEvent(enterEvent);
      }
    }

    // Function to handle auto-submit based on the button's data attribute
  }, {
    key: "handleAutoSubmit",
    value: function handleAutoSubmit() {
      var talkButton = document.getElementById("saypi-talkButton");
      if (talkButton.dataset.autosubmit === "false") {
        console.log("Autosubmit is disabled");
      } else {
        ButtonModule.simulateFormSubmit();
      }
    }
  }]);
  return ButtonModule;
}(); // Singleton

var buttonModule = new ButtonModule();

/***/ }),

/***/ "./src/ConfigModule.js":
/*!*****************************!*\
  !*** ./src/ConfigModule.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   config: () => (/* binding */ config)
/* harmony export */ });
var config = {
  appServerUrl: "https://localhost:4443",
  apiServerUrl: "http://localhost:8080"
};

/***/ }),

/***/ "./src/EventBus.js":
/*!*************************!*\
  !*** ./src/EventBus.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new (events__WEBPACK_IMPORTED_MODULE_0___default())());

/***/ }),

/***/ "./src/EventModule.js":
/*!****************************!*\
  !*** ./src/EventModule.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EventModule)
/* harmony export */ });
/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventBus.js */ "./src/EventBus.js");
/* harmony import */ var _StateMachineService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StateMachineService.js */ "./src/StateMachineService.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var USER_SPEAKING = "saypi:userSpeaking";
var USER_STOPPED_SPEAKING = "saypi:userStoppedSpeaking";
var USER_FINISHED_SPEAKING = "saypi:userFinishedSpeaking";
var TRANSCRIBING = "saypi:transcribing";
var PI_SPEAKING = "saypi:piSpeaking";
var PI_STOPPED_SPEAKING = "saypi:piStoppedSpeaking";
var PI_FINISHED_SPEAKING = "saypi:piFinishedSpeaking";
var PAUSE = "saypi:safariBlocked";
var READY = "saypi:ready";
var PLAY = "saypi:play";
var EventModule = /*#__PURE__*/function () {
  function EventModule() {
    _classCallCheck(this, EventModule);
  }
  _createClass(EventModule, null, [{
    key: "init",
    value: function init() {
      // All the event listeners can be added here
      this.registerStateMachineEvents(_StateMachineService_js__WEBPACK_IMPORTED_MODULE_1__["default"].actor);
      // Any other initializations...
    }
  }, {
    key: "cleanup",
    value: function cleanup() {
      // Remove event listeners if needed, or any other cleanup operations
      window.removeEventListener("saypi:transcribed", this.handleTranscriptionResponse);
    }
  }, {
    key: "simulateTyping",
    value: function simulateTyping(element, text) {
      var words = text.split(" ");
      var i = 0;
      var typeWord = function typeWord() {
        if (i < words.length) {
          EventModule.setNativeValue(element, element.value + words[i++] + " ");
          requestAnimationFrame(typeWord);
        } else {
          _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("saypi:autoSubmit");
        }
      };
      typeWord();
    }
  }, {
    key: "setNativeValue",
    value: function setNativeValue(element, value) {
      var lastValue = element.value;
      element.value = value;
      var event = new Event("input", {
        target: element,
        bubbles: true
      });
      // React 15
      event.simulated = true;
      // React 16-17
      var tracker = element._valueTracker;
      if (tracker) {
        tracker.setValue(lastValue);
      }
      element.dispatchEvent(event);
    }
  }, {
    key: "handleTalkMouseDown",
    value: function handleTalkMouseDown() {
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:startRecording");
    }
  }, {
    key: "handleTalkMouseUp",
    value: function handleTalkMouseUp() {
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:stopRecording");
    }
  }, {
    key: "handleTalkDoubleClick",
    value: function handleTalkDoubleClick(button) {
      // Toggle the CSS classes to indicate the mode
      button.classList.toggle("autoSubmit");
      if (button.getAttribute("data-autosubmit") === "true") {
        button.setAttribute("data-autosubmit", "false");
        console.log("autosubmit disabled");
      } else {
        button.setAttribute("data-autosubmit", "true");
        console.log("autosubmit enabled");
      }
    }
  }, {
    key: "handleTalkTouchStart",
    value: function handleTalkTouchStart(button, e) {
      e.preventDefault();
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:startRecording");
    }
  }, {
    key: "handleTalkTouchEnd",
    value: function handleTalkTouchEnd(button) {
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:stopRecording");
    }
  }, {
    key: "registerOtherAudioButtonEvents",
    value: function registerOtherAudioButtonEvents(button) {
      // "warm up" the microphone by acquiring it before the user presses the button
      button.addEventListener("mouseenter", function () {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:setupRecording");
      });
      button.addEventListener("mouseleave", function () {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:tearDownRecording");
      });
      window.addEventListener("beforeunload", function () {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:tearDownRecording");
      });
      button.addEventListener("touchcancel", function () {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:tearDownRecording");
      });
    }
  }, {
    key: "registerStateMachineEvents",
    value: function registerStateMachineEvents(actor) {
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].on(USER_SPEAKING, function () {
        actor.send(USER_SPEAKING);
      });
      [USER_STOPPED_SPEAKING, USER_FINISHED_SPEAKING].forEach(function (eventName) {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].on(eventName, function (detail) {
          if (detail) {
            actor.send(_objectSpread({
              type: eventName
            }, detail));
          } else {
            console.warn("Received ".concat(eventName, " without details."));
          }
        });
      });
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].on(TRANSCRIBING, function () {
        actor.send(TRANSCRIBING);
      });
      [PI_SPEAKING, PI_STOPPED_SPEAKING, PI_FINISHED_SPEAKING].forEach(function (eventName) {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].on(eventName, function () {
          actor.send(eventName);
        });
      });
      [PAUSE, READY, PLAY].forEach(function (eventName) {
        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].on(eventName, function () {
          actor.send(eventName);
        });
      });
    }

    /* events to direct the audio module to start/stop recording */
  }, {
    key: "registerHotkey",
    value: function registerHotkey() {
      var ctrlDown = false;
      document.addEventListener("keydown", function (event) {
        if (event.ctrlKey && event.code === "Space" && !ctrlDown) {
          ctrlDown = true;
          _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:startRecording");
        }
      });
      document.addEventListener("keyup", function (event) {
        if (ctrlDown && event.code === "Space") {
          ctrlDown = false;
          _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit("audio:stopRecording");
        }
      });
    }
  }]);
  return EventModule;
}();


/***/ }),

/***/ "./src/LoggingModule.js":
/*!******************************!*\
  !*** ./src/LoggingModule.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   serializeStateValue: () => (/* binding */ serializeStateValue)
/* harmony export */ });
function serializeStateValue(stateValue) {
  if (typeof stateValue === "string") {
    return stateValue;
  }
  return Object.keys(stateValue).map(function (key) {
    return "".concat(key, ":").concat(serializeStateValue(stateValue[key]));
  }).join(",");
}

/***/ }),

/***/ "./src/StateMachineService.js":
/*!************************************!*\
  !*** ./src/StateMachineService.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xstate */ "./node_modules/xstate/es/interpreter.js");
/* harmony import */ var _state_machines_SayPiMachine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state-machines/SayPiMachine */ "./src/state-machines/SayPiMachine.js");
/* harmony import */ var _LoggingModule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LoggingModule */ "./src/LoggingModule.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




/**
 * A singleton service that manages the state machine.
 */
var StateMachineService = /*#__PURE__*/_createClass(function StateMachineService() {
  _classCallCheck(this, StateMachineService);
  this.actor = (0,xstate__WEBPACK_IMPORTED_MODULE_2__.interpret)(_state_machines_SayPiMachine__WEBPACK_IMPORTED_MODULE_0__.machine).onTransition(function (state) {
    if (state.changed) {
      var fromState = state.history ? (0,_LoggingModule__WEBPACK_IMPORTED_MODULE_1__.serializeStateValue)(state.history.value) : "N/A";
      var toState = (0,_LoggingModule__WEBPACK_IMPORTED_MODULE_1__.serializeStateValue)(state.value);
      console.log("Say, Pi Machine transitioned from ".concat(fromState, " to ").concat(toState, " with ").concat(state.event.type));
    }
  });
  this.actor.start();
}); // Singleton
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new StateMachineService());

/***/ }),

/***/ "./src/TranscriptionModule.js":
/*!************************************!*\
  !*** ./src/TranscriptionModule.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   handleTranscriptionResponse: () => (/* binding */ handleTranscriptionResponse),
/* harmony export */   uploadAudio: () => (/* binding */ uploadAudio)
/* harmony export */ });
/* harmony import */ var _ConfigModule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ConfigModule.js */ "./src/ConfigModule.js");
/* harmony import */ var _StateMachineService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StateMachineService.js */ "./src/StateMachineService.js");
/* harmony import */ var _UserAgentModule_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UserAgentModule.js */ "./src/UserAgentModule.js");
/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EventBus.js */ "./src/EventBus.js");
/* harmony import */ var _EventModule_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EventModule.js */ "./src/EventModule.js");





function uploadAudio(audioBlob, audioDurationMillis) {
  // Create a FormData object
  var formData = new FormData();
  var audioFilename = "audio.webm";
  if (audioBlob.type === "audio/mp4") {
    audioFilename = "audio.mp4";
  } else if (audioBlob.type === "audio/wav") {
    audioFilename = "audio.wav";
  }
  console.log("Transcribing audio Blob with MIME type: ".concat(audioBlob.type, ", size: ").concat((audioBlob.size / 1024).toFixed(2), "kb"), audioBlob);

  // Add the audio blob to the FormData object
  formData.append("audio", audioBlob, audioFilename);
  // Get the user's preferred language
  var language = navigator.language;
  var startTime = new Date().getTime();
  // Post the audio to the server for transcription
  fetch(_ConfigModule_js__WEBPACK_IMPORTED_MODULE_0__.config.apiServerUrl + "/transcribe?language=" + language, {
    method: "POST",
    body: formData
  }).then(function (response) {
    if (!response.ok) {
      throw Error(response.statusText);
    }
    return response.json();
  }).then(function (responseJson) {
    var endTime = new Date().getTime();
    var transcriptionDurationMillis = endTime - startTime;
    console.log("Transcribed " + Math.round(audioDurationMillis / 1000) + "s of audio in " + Math.round(transcriptionDurationMillis / 1000) + "s");
    if (responseJson.text.length === 0) {
      _StateMachineService_js__WEBPACK_IMPORTED_MODULE_1__["default"].actor.send("saypi:transcribedEmpty");
    } else {
      _StateMachineService_js__WEBPACK_IMPORTED_MODULE_1__["default"].actor.send("saypi:transcribed", {
        text: responseJson.text
      });
    }
  })["catch"](function (error) {
    console.error("Looks like there was a problem: ", error);
    _StateMachineService_js__WEBPACK_IMPORTED_MODULE_1__["default"].actor.send("saypi:transcribeFailed");
  });
}
function handleTranscriptionResponse(transcript) {
  console.log("Transcript: " + transcript);
  var textarea = document.getElementById("saypi-prompt");
  if ((0,_UserAgentModule_js__WEBPACK_IMPORTED_MODULE_2__.isMobileView)()) {
    // if transcript is > 1000 characters, truncate it to 999 characters plus an ellipsis
    if (transcript.length > 1000) {
      transcript = transcript.substring(0, 999) + "…";
      console.warn("Transcript was too long for Pi. Truncated to 999 characters, losing the following text: ... " + transcript.substring(999));
    }
    _EventModule_js__WEBPACK_IMPORTED_MODULE_4__["default"].setNativeValue(textarea, transcript);
    _EventBus_js__WEBPACK_IMPORTED_MODULE_3__["default"].emit("saypi:autoSubmit");
  } else {
    _EventModule_js__WEBPACK_IMPORTED_MODULE_4__["default"].simulateTyping(textarea, transcript + " ");
  }
}

/***/ }),

/***/ "./src/UserAgentModule.js":
/*!********************************!*\
  !*** ./src/UserAgentModule.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addDeviceFlags: () => (/* binding */ addDeviceFlags),
/* harmony export */   addUserAgentFlags: () => (/* binding */ addUserAgentFlags),
/* harmony export */   addViewFlags: () => (/* binding */ addViewFlags),
/* harmony export */   enterMobileMode: () => (/* binding */ enterMobileMode),
/* harmony export */   exitMobileMode: () => (/* binding */ exitMobileMode),
/* harmony export */   isMobileDevice: () => (/* binding */ isMobileDevice),
/* harmony export */   isMobileView: () => (/* binding */ isMobileView),
/* harmony export */   isSafari: () => (/* binding */ isSafari)
/* harmony export */ });
function isSafari() {
  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
}
function isMobileDevice() {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.matchMedia("(max-width: 768px)").matches;
}

// this function determines whether to show the mobile view or not
function isMobileView() {
  var userViewPreference = null;
  try {
    userViewPreference = localStorage.getItem("userViewPreference");
  } catch (e) {
    console.warn("Could not access localStorage: ", e);
  }
  var prefersMobile = false;
  if (userViewPreference) {
    prefersMobile = userViewPreference === "mobile";
  }

  // Make sure isMobileDevice is defined or imported
  return isMobileDevice() && prefersMobile;
}
function exitMobileMode() {
  localStorage.setItem("userViewPreference", "desktop"); // Save preference

  var element = document.documentElement;
  element.classList.remove("mobile-view");
  element.classList.add("desktop-view");
}
function enterMobileMode() {
  localStorage.setItem("userViewPreference", "mobile"); // Save preference

  var element = document.documentElement;
  element.classList.remove("desktop-view");
  element.classList.add("mobile-view");
}
function addUserAgentFlags() {
  var isFirefoxAndroid = /Firefox/.test(navigator.userAgent) && /Android/.test(navigator.userAgent);
  var element = document.documentElement;
  if (isFirefoxAndroid) {
    element.classList.add("firefox-android");
  }
  addDeviceFlags(element);
  addViewFlags(element);
}
function addDeviceFlags(element) {
  if (isMobileDevice()) {
    element.classList.add("mobile-device");
  }
}
function addViewFlags(element) {
  if (isMobileView()) {
    element.classList.remove("desktop-view");
    element.classList.add("mobile-view");
  } else {
    element.classList.remove("mobile-view");
    element.classList.add("desktop-view");
  }
}

/***/ }),

/***/ "./src/state-machines/SayPiMachine.js":
/*!********************************************!*\
  !*** ./src/state-machines/SayPiMachine.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   machine: () => (/* binding */ machine)
/* harmony export */ });
/* harmony import */ var _ButtonModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ButtonModule */ "./src/ButtonModule.js");
/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! xstate */ "./node_modules/xstate/es/Machine.js");
/* harmony import */ var _AnimationModule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../AnimationModule */ "./src/AnimationModule.js");
/* harmony import */ var _UserAgentModule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../UserAgentModule */ "./src/UserAgentModule.js");
/* harmony import */ var _TranscriptionModule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../TranscriptionModule */ "./src/TranscriptionModule.js");
/* harmony import */ var _EventBus__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../EventBus */ "./src/EventBus.js");
var _on;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }






var machine = (0,xstate__WEBPACK_IMPORTED_MODULE_5__.createMachine)({
  /** @xstate-layout N4IgpgJg5mDOIC5SwIYE8AKBLAdFgdigMYAuWAbmAMSpoAOWCArrGAE4DKdYKA1gVADaABgC6iUHQD2sLGSn4JIAB6IAzAA4AnABYcWgGwBGAEwa1AdgMndFgKwAaEGkRa1JnCZPWTRtWq07HS0AXxCnWmwcdjYpNlgqZVgSFBIwHBQAMzS2AAojYULhAEoadCiYuNgRcSQQaVl5RTrVBE0NPUNTcysbHXsnFwQNIxw7IsK7ApM1Ow07MIjy3AAbLGSwfAEy+kZUTJQ2LAAhFakiXkgapQa5LAUlVutBxAKp-Ss1IysLQO+1RYgSKrdZpLb4KA7BgIBhcHj8CHXOq3JqPRB2EwvBBGaY4frWAz2HFGDS-QHAnBrDbgqA4NhgIhxCACHAsdhwvjbWjQtmcEhSOjcCAchFCMQ3GR3B4tRAzUn6YQGHR2YwmHTKoJYixGLQ4eamFUYnQmOx2Czk5aU0GbFn0xlsZkQ1msTjcTkQqGMEhsFD4WBEI4AIwESMkktRMraOrsOAsFkslh0BjsgQMWIxHnxOksao0HSVFswIOptoZTJZ+CkJBFXPQPJdADECOsABaQGuI8XI8P3ZqgVoBYSdVU9ay2RzORAGDQGHBGbPCNTCONqQmFqJUsEs72+-1B2u7BA7v0BrCBq5dsONXtoqOBWPxx9JlMqrHuDT6LRfpeP8YmdfFluTrHnuZ4HtCIGnueDYoFgKwXrUV5Sn2KjqHmw7dJYY79BOQyzGoOBKl8ASEiYi7WABVolsBPonvuHrcl6tGgeeEAAKIALZ0CQaChvUPbSv2aEdPoI5YX0AyTgg2YxkRwgpsEQTBN8lH0rA0j4I6tKwm6oqejCWAcPygrtrpIaXvx16Cah2Kmh4SrzIqhRaGYphYoSFgfMmagahYXjmKpcAaVpOA6fC4GMLyHZiohlnIbeRh2YROiOQYzmuZiUnWJ5+I+SScY2DqgXqQoIVhe6kKMQZTZbLAbbCmZnaxSiN6RolGLJal6UjJlQx+R++JqolOiKv4xXBSyZwoFp+nlaKfEtdZrQuTGeYmL8bhaOhRjufK2hLou3yksmoThEClpqRNTqBmcFyQPp9LTbxFmLShrRGEqhEmsI62-OMpj+FiSY5SNH12doX7quNpUsjd5yXBA+lMPgcMXAtAlveiug4BM2oWPJZizLtnn7YUXwWMdKaUZuNpOna5ZOpW1aNZVdaRS60Xo1ZmMICa2NaD8eYqqY3zuZ9AsGLMcbzDopjmoClYQHASjAhK3O3joWIALSzhMq6KkNyYUWdFIEMQZCUGr8WRrLfk47oOIzkEwgdO5cY4AES6+FYBikTolGVPEVsRkJ0kmh4XTuJHaU7VJJJ6J7Q6rsquhePLSxFtEbCxPEOCQUGYAwXBkDB61ocLsIol+DYxj67HeEfR7bhDsq8Y+caAfZ1UOAcVgRBsV3bCl0tiAV1XUe1zHQMjHqbjDQp85y9T1o0sPPPfPzo0zPj2oE1iOI5V+uhfL4BiBFYy-UbS9MOiyUUs2vCXaJXWhb5Yy5vL16Lu1mcyy+YUMTaWhpjSOkZZb6MyrNFR+kYzCFDGLoIcJJDC+HWu5bMnhvCy1PkmEYBhL5AVpPnMCEIYGh1mF4WMxp1T+WzKmN87g9TCAFsENUf8frQ00gIMhNlNRSX8DGdUwgPpJmESmewnCyqGQft2dWbUcQeDNBob2xofyJXcjiPEVh1TzlXJYOYkjJpSGmtw2R1tQ72E8hTV+Z9tAdB1BYdyq45zGi2sqd87h-ZAMzpdGG11boIx4e9H67l4Gew+ltPM84LBeIzhuFepZ7RaSCa8DoEc3470-kDJMWilSBDMCMY0F8wghCAA */
  id: "sayPi",
  initial: "listening",
  states: {
    inactive: {
      description: "Idle state, not listening or speaking. Privacy mode.",
      on: {
        "saypi:userSpeaking": "listening"
      }
    },
    errors: {
      description: "Error parent state.",
      after: {
        10000: {
          target: "listening",
          actions: [],
          description: "Reset to the idle state and clear errors."
        }
      },
      initial: "transcribeFailed",
      states: {
        transcribeFailed: {
          description: "The /transcribe API responded with an error.",
          type: "final",
          entry: {
            type: "startAnimation",
            params: {
              animation: "error"
            }
          },
          exit: {
            type: "stopAnimation",
            params: {
              animation: "error"
            }
          }
        },
        micError: {
          type: "final",
          description: "No audio input detected",
          entry: {
            type: "showNotification",
            params: {
              icon: "muted-microphone"
            }
          },
          exit: {
            type: "dismissNotification",
            params: {}
          }
        }
      }
    },
    listening: {
      states: {
        transcribing: {
          description: "Transcribing audio to text.\nCard flip animation.",
          entry: [{
            type: "startAnimation",
            params: {
              animation: "transcribing"
            }
          }, {
            type: "transcribeAudio",
            params: {}
          }],
          exit: {
            type: "stopAnimation",
            params: {
              animation: "transcribing"
            }
          },
          on: {
            "saypi:transcribed": {
              target: "recording.notSpeaking",
              actions: {
                type: "handleTranscriptionResponse",
                params: {}
              },
              description: "Successfully transcribed user audio to text."
            },
            "saypi:transcribeFailed": {
              target: "#sayPi.errors.transcribeFailed",
              description: "Received an error response from the /transcribe API"
            },
            "saypi:transcribedEmpty": {
              target: "#sayPi.errors.micError",
              description: "Received an empty response from the /transcribe API (no speech detected)"
            }
          }
        },
        recording: {
          initial: "notSpeaking",
          states: {
            userSpeaking: {
              description: "User is speaking and being recorded by the microphone.\nWaveform animation.",
              entry: [{
                type: "startAnimation",
                params: {
                  animation: "userSpeaking"
                }
              }, "activateTalkButton"],
              exit: [{
                type: "stopAnimation",
                params: {
                  animation: "userSpeaking"
                }
              }, "deactivateTalkButton"],
              on: (_on = {
                "saypi:userStoppedSpeaking": {
                  target: "transcribing",
                  cond: "longEnoughForUpload"
                }
              }, _defineProperty(_on, "saypi:userStoppedSpeaking", {
                target: "notSpeaking",
                cond: "tooShortForUpload"
              }), _defineProperty(_on, "saypi:transcribing", {
                target: "#sayPi.listening.transcribing"
              }), _on)
            },
            notSpeaking: {
              description: "Microphone is recording but no speech is detected.",
              on: {
                "saypi:userFinishedSpeaking": "#sayPi.inactive",
                "saypi:userSpeaking": "userSpeaking"
              }
            }
          },
          description: "Microphone is on and VAD is actively listending for user speech."
        }
      },
      entry: ["stopAllAnimations", "acquireMicrophone"],
      on: {
        "saypi:safariBlocked": {
          target: "#sayPi.responding.blocked",
          cond: "isSafari"
        },
        "saypi:piSpeaking": {
          target: "#sayPi.responding.piSpeaking"
        }
      },
      description: "Actively listening for user input. Simultaneously recording and transcribing user speech. Gentle pulsing animation.",
      type: "parallel"
    },
    responding: {
      description: "Pi is responding. Synthesised speech is playing or waiting to play.",
      initial: "piSpeaking",
      states: {
        piSpeaking: {
          description: "Pi's synthesised speech audio is playing.\nPlayful animation.",
          entry: {
            type: "startAnimation",
            params: {
              animation: "piSpeaking"
            }
          },
          exit: {
            type: "stopAnimation",
            params: {
              animation: "piSpeaking"
            }
          },
          on: {
            "saypi:piStoppedSpeaking": {
              target: "#sayPi.listening"
            },
            "saypi:userSpeaking": {
              target: "#sayPi.listening.recording.userSpeaking"
            },
            "saypi:piFinishedSpeaking": {
              target: "#sayPi.listening"
            }
          }
        },
        loading: {
          description: "Pi's audio is loading.",
          entry: {
            type: "startAnimation",
            params: {
              animation: "loading"
            }
          },
          exit: {
            type: "stopAnimation",
            params: {
              animation: "loading"
            }
          },
          on: {
            "saypi:piSpeaking": {
              target: "piSpeaking"
            }
          }
        },
        blocked: {
          description: "Blocking action on Safari.\nUser must press play to hear Pi's response.\nBounce animation.",
          entry: [{
            type: "startAnimation",
            params: {
              animation: "paused"
            }
          }, "showPlayButton"],
          exit: [{
            type: "stopAnimation",
            params: {
              animation: "paused"
            }
          }, "hidePlayButton"],
          on: {
            "saypi:ready": {
              target: "blocked",
              internal: true,
              description: "Enough audio has been buffered to start playback.",
              actions: "showPlayButton"
            },
            "saypi:unblock": {
              target: "loading"
            }
          }
        }
      }
    }
  },
  predictableActionArguments: true,
  preserveActionOrder: true
}, {
  actions: {
    stopAllAnimations: function stopAllAnimations(context, event) {
      _AnimationModule__WEBPACK_IMPORTED_MODULE_1__["default"].stopAllAnimations();
    },
    startAnimation: function startAnimation(context, event, _ref) {
      var action = _ref.action;
      _AnimationModule__WEBPACK_IMPORTED_MODULE_1__["default"].startAnimation(action.params.animation);
    },
    stopAnimation: function stopAnimation(context, event, _ref2) {
      var action = _ref2.action;
      _AnimationModule__WEBPACK_IMPORTED_MODULE_1__["default"].stopAnimation(action.params.animation);
    },
    transcribeAudio: function transcribeAudio(context, event) {
      console.log("transcribeAudio", event);
      var audioBlob = event.blob;
      (0,_TranscriptionModule__WEBPACK_IMPORTED_MODULE_3__.uploadAudio)(audioBlob, event.duration);
    },
    handleTranscriptionResponse: function handleTranscriptionResponse(context, event) {
      console.log("handleTranscriptionResponse", event);
      var transcription = event.text;
      (0,_TranscriptionModule__WEBPACK_IMPORTED_MODULE_3__.handleTranscriptionResponse)(transcription);
    },
    showPlayButton: function showPlayButton(context, event) {
      _ButtonModule__WEBPACK_IMPORTED_MODULE_0__.buttonModule.showPlayButton();
    },
    hidePlayButton: function hidePlayButton(context, event) {
      _ButtonModule__WEBPACK_IMPORTED_MODULE_0__.buttonModule.hidePlayButton();
    },
    activateTalkButton: function activateTalkButton(context, event) {
      var talkButton = document.getElementById("saypi-talkButton");
      talkButton.classList.add("active"); // Add the active class (for Firefox on Android)
    },

    deactivateTalkButton: function deactivateTalkButton(context, event) {
      var talkButton = document.getElementById("saypi-talkButton");
      talkButton.classList.remove("active"); // Remove the active class (for Firefox on Android)
    },

    acquireMicrophone: function acquireMicrophone(context, event) {
      // warmup the microphone on idle in mobile view,
      // since there's no mouseover event to trigger it
      if ((0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_2__.isMobileView)()) {
        _EventBus__WEBPACK_IMPORTED_MODULE_4__["default"].emit("audio:setupRecording");
      }
    },
    showNotification: function showNotification(context, event, _ref3) {
      var action = _ref3.action;
      var icon = action.params.icon;
      var message = action.params.message;
      _ButtonModule__WEBPACK_IMPORTED_MODULE_0__.buttonModule.showNotification({
        icon: icon,
        message: message
      });
    },
    dismissNotification: function dismissNotification(context, event) {
      _ButtonModule__WEBPACK_IMPORTED_MODULE_0__.buttonModule.dismissNotification();
    }
  },
  services: {},
  guards: {
    tooShortForUpload: function tooShortForUpload(context, event) {
      return event.duration < 1000;
    },
    longEnoughForUpload: function longEnoughForUpload(context, event) {
      return event.duration >= 1000;
    },
    isSafari: function isSafari(context, event) {
      return (0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_2__.isSafari)();
    }
  },
  delays: {}
});

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles/rectangles.css":
/*!*************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles/rectangles.css ***!
  \*************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `@keyframes pulse_outermost {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.92);
  }
}
.outermost {
  animation: pulse_outermost 5s infinite;
  transform-origin: center;
}

@keyframes pulse_second {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.856);
  }
}
.second {
  animation: pulse_second 5s infinite;
  transform-origin: center;
}

@keyframes pulse_third {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.792);
  }
}
.third {
  animation: pulse_third 5s infinite;
  transform-origin: center;
}

@keyframes pulse_fourth {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.728);
  }
}
.fourth {
  animation: pulse_fourth 5s infinite;
  transform-origin: center;
}

@keyframes pulse_fifth {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.664);
  }
}
.fifth {
  animation: pulse_fifth 5s infinite;
  transform-origin: center;
}

@keyframes pulse_innermost {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.6);
  }
}
.innermost {
  animation: pulse_innermost 5s infinite;
  transform-origin: center;
}

/* bounce animation to indicate Pi is paused awaiting permission to speak */
@keyframes bounce_outermost {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-5%);
  }
  60% {
    transform: translateY(-3%);
  }
}
.outermost.paused {
  animation-name: bounce_outermost;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

@keyframes bounce_second {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-5.8%);
  }
  60% {
    transform: translateY(-3.48%);
  }
}
.second.paused {
  animation-name: bounce_second;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

@keyframes bounce_third {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-6.6%);
  }
  60% {
    transform: translateY(-3.96%);
  }
}
.third.paused {
  animation-name: bounce_third;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

@keyframes bounce_fourth {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-7.4%);
  }
  60% {
    transform: translateY(-4.44%);
  }
}
.fourth.paused {
  animation-name: bounce_fourth;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

@keyframes bounce_fifth {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-8.2%);
  }
  60% {
    transform: translateY(-4.92%);
  }
}
.fifth.paused {
  animation-name: bounce_fifth;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

@keyframes bounce_innermost {
  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-9%);
  }
  60% {
    transform: translateY(-5.4%);
  }
}
.innermost.paused {
  animation-name: bounce_innermost;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

/* playful animation to indicate Pi is speaking */
@keyframes speaking_outermost {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
  }
  25% {
    transform: scale(0.995);
  }
  50% {
    transform: scale(0.9);
  }
  75% {
    transform: scale(0.895);
  }
}
.outermost.piSpeaking {
  animation: speaking_outermost 2s infinite;
  transform-origin: center;
}

@keyframes speaking_second {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
  }
  25% {
    transform: scale(0.98) rotate(-1deg);
  }
  50% {
    transform: scale(0.87) rotate(0deg);
  }
  75% {
    transform: scale(0.865) rotate(1deg);
  }
}
.second.piSpeaking {
  animation: speaking_second 2s infinite;
  transform-origin: center;
}

@keyframes speaking_third {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
  }
  25% {
    transform: scale(0.965) rotate(-2deg);
  }
  50% {
    transform: scale(0.84) rotate(0deg);
  }
  75% {
    transform: scale(0.835) rotate(2deg);
  }
}
.third.piSpeaking {
  animation: speaking_third 2s infinite;
  transform-origin: center;
}

@keyframes speaking_fourth {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
  }
  25% {
    transform: scale(0.95) rotate(-3deg);
  }
  50% {
    transform: scale(0.81) rotate(0deg);
  }
  75% {
    transform: scale(0.805) rotate(3deg);
  }
}
.fourth.piSpeaking {
  animation: speaking_fourth 2s infinite;
  transform-origin: center;
}

@keyframes speaking_fifth {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
  }
  25% {
    transform: scale(0.935) rotate(-4deg);
  }
  50% {
    transform: scale(0.78) rotate(0deg);
  }
  75% {
    transform: scale(0.775) rotate(4deg);
  }
}
.fifth.piSpeaking {
  animation: speaking_fifth 2s infinite;
  transform-origin: center;
}

@keyframes speaking_innermost {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
  }
  25% {
    transform: scale(0.92) rotate(-5deg);
  }
  50% {
    transform: scale(0.75) rotate(0deg);
  }
  75% {
    transform: scale(0.745) rotate(5deg);
  }
}
.innermost.piSpeaking {
  animation: speaking_innermost 2s infinite;
  transform-origin: center;
}

/* wave animation to indicate user is speaking */
@keyframes userSpeakingAnimation {
  50% {
    transform: scaleY(0.05) scaleX(var(--width-factor))
      translateX(calc(-50% + var(--spread-amount)));
  }
  100% {
    transform: scaleY(1) scaleX(var(--width-factor))
      translateX(calc(-50% + var(--spread-amount)));
  }
}
/* user speaking oscillation animation */
@keyframes waveform_outermost {
  0%,
  100% {
    transform: scaleY(1) scaleX(1);
  }
  25%,
  75% {
    transform: scaleY(0.9) scaleX(0.9);
  }
}

@keyframes waveform_second {
  0%,
  100% {
    transform: scaleY(0.9) scaleX(0.9);
  }
  25%,
  75% {
    transform: scaleY(0.8) scaleX(0.8);
  }
}

@keyframes waveform_third {
  0%,
  100% {
    transform: scaleY(0.8) scaleX(0.8);
  }
  25%,
  75% {
    transform: scaleY(0.7) scaleX(0.7);
  }
}

@keyframes waveform_fourth {
  0%,
  100% {
    transform: scaleY(0.7) scaleX(0.7);
  }
  25%,
  75% {
    transform: scaleY(0.6) scaleX(0.6);
  }
}

@keyframes waveform_fifth {
  0%,
  100% {
    transform: scaleY(0.6) scaleX(0.6);
  }
  25%,
  75% {
    transform: scaleY(0.5) scaleX(0.5);
  }
}

@keyframes waveform_innermost {
  0%,
  100% {
    transform: scaleY(0.5) scaleX(0.5);
  }
  25%,
  75% {
    transform: scaleY(0.4) scaleX(0.4);
  }
}

.outermost.userSpeaking {
  animation: waveform_outermost 0.7s infinite alternate;
}

.second.userSpeaking {
  animation: waveform_second 0.65s infinite alternate;
}

.third.userSpeaking {
  animation: waveform_third 0.6s infinite alternate;
}

.fourth.userSpeaking {
  animation: waveform_fourth 0.55s infinite alternate;
}

.fifth.userSpeaking {
  animation: waveform_fifth 0.5s infinite alternate;
}

.innermost.userSpeaking {
  animation: waveform_innermost 0.45s infinite alternate;
}

/* flipcard animation to indicate Say, Pi is transcribing audio to text */
@keyframes transcribingFlip {
  0%,
  100% {
    transform: rotateY(0deg);
    fill: var(--original-color);
  }
  50% {
    transform: rotateY(180deg);
    fill: var(--transcribing-color);
  }
}

.outermost.transcribing {
  --original-color: #e4f2d1;
  --transcribing-color: #b3e0fe;
  animation: transcribingFlip 1.5s infinite;
}

.second.transcribing {
  --original-color: #cce8b5;
  --transcribing-color: #89c2ff;
  animation: transcribingFlip 1.6s infinite;
}

.third.transcribing {
  --original-color: #b3db95;
  --transcribing-color: #5fa4ff;
  animation: transcribingFlip 1.7s infinite;
}

.fourth.transcribing {
  --original-color: #9bd078;
  --transcribing-color: #3586ff;
  animation: transcribingFlip 1.8s infinite;
}

.fifth.transcribing {
  --original-color: #83c55c;
  --transcribing-color: #0b69e3;
  animation: transcribingFlip 1.9s infinite;
}

.innermost.transcribing {
  --original-color: #428a2f;
  --transcribing-color: #0053bf;
  animation: transcribingFlip 2s infinite;
}

/* heartbeat animation to indicate Pi is preparing to speak */
@keyframes heartbeat {
  0%,
  100% {
    opacity: 1;
    fill: var(--original-color);
  }
  50% {
    opacity: 0.5;
    fill: rgb(245 238 223); /* bg-cream-550 */
  }
}

.outermost.loading {
  --original-color: #e4f2d1;
  animation: heartbeat 2s infinite;
  animation-delay: 0s;
}

.second.loading {
  --original-color: #cce8b5;
  animation: heartbeat 2s infinite;
  animation-delay: 0.4s;
}

.third.loading {
  --original-color: #b3db95;
  animation: heartbeat 2s infinite;
  animation-delay: 0.8s;
}

.fourth.loading {
  --original-color: #9bd078;
  animation: heartbeat 2s infinite;
  animation-delay: 1.2s;
}

.fifth.loading {
  --original-color: #83c55c;
  animation: heartbeat 2s infinite;
  animation-delay: 1.6s;
}

.innermost.loading {
  --original-color: #428a2f;
  animation: heartbeat 2s infinite;
  animation-delay: 2s;
}

/* toned-down dissary animation to indicate an error */
/* toned-down error animation with reduced opacity */
@keyframes errorAnimation {
  0% {
    transform: rotate(0deg) translate(0%, 0%);
  }
  25% {
    transform: rotate(-5deg) translate(-5%, 5%);
  }
  50% {
    transform: rotate(5deg) translate(5%, -5%);
  }
  75% {
    transform: rotate(-5deg) translate(-5%, 5%);
  }
  100% {
    transform: rotate(0deg) translate(0%, 0%);
  }
}

.outermost.error {
  animation: errorAnimation 25s 1;
  fill: #ff0000;
  fill-opacity: 0.7;
}

.second.error {
  animation: errorAnimation 25s 1;
  fill: #ff3300;
  fill-opacity: 0.7;
}

.third.error {
  animation: errorAnimation 25s 1;
  fill: #ff6600;
  fill-opacity: 0.7;
}

.fourth.error {
  animation: errorAnimation 25s 1;
  fill: #ff9900;
  fill-opacity: 0.7;
}

.fifth.error {
  animation: errorAnimation 25s 1;
  fill: #ffcc00;
  fill-opacity: 0.7;
}

.innermost.error {
  animation: errorAnimation 25s 1;
  fill: #ffff00;
  fill-opacity: 0.7;
}
`, "",{"version":3,"sources":["webpack://./src/styles/rectangles.css"],"names":[],"mappings":"AAAA;EACE;;IAEE,mBAAmB;EACrB;EACA;IACE,sBAAsB;EACxB;AACF;AACA;EACE,sCAAsC;EACtC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,mBAAmB;EACrB;EACA;IACE,uBAAuB;EACzB;AACF;AACA;EACE,mCAAmC;EACnC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,mBAAmB;EACrB;EACA;IACE,uBAAuB;EACzB;AACF;AACA;EACE,kCAAkC;EAClC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,mBAAmB;EACrB;EACA;IACE,uBAAuB;EACzB;AACF;AACA;EACE,mCAAmC;EACnC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,mBAAmB;EACrB;EACA;IACE,uBAAuB;EACzB;AACF;AACA;EACE,kCAAkC;EAClC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,mBAAmB;EACrB;EACA;IACE,qBAAqB;EACvB;AACF;AACA;EACE,sCAAsC;EACtC,wBAAwB;AAC1B;;AAEA,2EAA2E;AAC3E;EACE;;;;;IAKE,wBAAwB;EAC1B;EACA;IACE,0BAA0B;EAC5B;EACA;IACE,0BAA0B;EAC5B;AACF;AACA;EACE,gCAAgC;EAChC,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE;;;;;IAKE,wBAAwB;EAC1B;EACA;IACE,4BAA4B;EAC9B;EACA;IACE,6BAA6B;EAC/B;AACF;AACA;EACE,6BAA6B;EAC7B,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE;;;;;IAKE,wBAAwB;EAC1B;EACA;IACE,4BAA4B;EAC9B;EACA;IACE,6BAA6B;EAC/B;AACF;AACA;EACE,4BAA4B;EAC5B,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE;;;;;IAKE,wBAAwB;EAC1B;EACA;IACE,4BAA4B;EAC9B;EACA;IACE,6BAA6B;EAC/B;AACF;AACA;EACE,6BAA6B;EAC7B,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE;;;;;IAKE,wBAAwB;EAC1B;EACA;IACE,4BAA4B;EAC9B;EACA;IACE,6BAA6B;EAC/B;AACF;AACA;EACE,4BAA4B;EAC5B,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA;EACE;;;;;IAKE,wBAAwB;EAC1B;EACA;IACE,0BAA0B;EAC5B;EACA;IACE,4BAA4B;EAC9B;AACF;AACA;EACE,gCAAgC;EAChC,sBAAsB;EACtB,mCAAmC;AACrC;;AAEA,iDAAiD;AACjD;EACE;;IAEE,gCAAgC;EAClC;EACA;IACE,uBAAuB;EACzB;EACA;IACE,qBAAqB;EACvB;EACA;IACE,uBAAuB;EACzB;AACF;AACA;EACE,yCAAyC;EACzC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,gCAAgC;EAClC;EACA;IACE,oCAAoC;EACtC;EACA;IACE,mCAAmC;EACrC;EACA;IACE,oCAAoC;EACtC;AACF;AACA;EACE,sCAAsC;EACtC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,gCAAgC;EAClC;EACA;IACE,qCAAqC;EACvC;EACA;IACE,mCAAmC;EACrC;EACA;IACE,oCAAoC;EACtC;AACF;AACA;EACE,qCAAqC;EACrC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,gCAAgC;EAClC;EACA;IACE,oCAAoC;EACtC;EACA;IACE,mCAAmC;EACrC;EACA;IACE,oCAAoC;EACtC;AACF;AACA;EACE,sCAAsC;EACtC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,gCAAgC;EAClC;EACA;IACE,qCAAqC;EACvC;EACA;IACE,mCAAmC;EACrC;EACA;IACE,oCAAoC;EACtC;AACF;AACA;EACE,qCAAqC;EACrC,wBAAwB;AAC1B;;AAEA;EACE;;IAEE,gCAAgC;EAClC;EACA;IACE,oCAAoC;EACtC;EACA;IACE,mCAAmC;EACrC;EACA;IACE,oCAAoC;EACtC;AACF;AACA;EACE,yCAAyC;EACzC,wBAAwB;AAC1B;;AAEA,gDAAgD;AAChD;EACE;IACE;mDAC+C;EACjD;EACA;IACE;mDAC+C;EACjD;AACF;AACA,wCAAwC;AACxC;EACE;;IAEE,8BAA8B;EAChC;EACA;;IAEE,kCAAkC;EACpC;AACF;;AAEA;EACE;;IAEE,kCAAkC;EACpC;EACA;;IAEE,kCAAkC;EACpC;AACF;;AAEA;EACE;;IAEE,kCAAkC;EACpC;EACA;;IAEE,kCAAkC;EACpC;AACF;;AAEA;EACE;;IAEE,kCAAkC;EACpC;EACA;;IAEE,kCAAkC;EACpC;AACF;;AAEA;EACE;;IAEE,kCAAkC;EACpC;EACA;;IAEE,kCAAkC;EACpC;AACF;;AAEA;EACE;;IAEE,kCAAkC;EACpC;EACA;;IAEE,kCAAkC;EACpC;AACF;;AAEA;EACE,qDAAqD;AACvD;;AAEA;EACE,mDAAmD;AACrD;;AAEA;EACE,iDAAiD;AACnD;;AAEA;EACE,mDAAmD;AACrD;;AAEA;EACE,iDAAiD;AACnD;;AAEA;EACE,sDAAsD;AACxD;;AAEA,yEAAyE;AACzE;EACE;;IAEE,wBAAwB;IACxB,2BAA2B;EAC7B;EACA;IACE,0BAA0B;IAC1B,+BAA+B;EACjC;AACF;;AAEA;EACE,yBAAyB;EACzB,6BAA6B;EAC7B,yCAAyC;AAC3C;;AAEA;EACE,yBAAyB;EACzB,6BAA6B;EAC7B,yCAAyC;AAC3C;;AAEA;EACE,yBAAyB;EACzB,6BAA6B;EAC7B,yCAAyC;AAC3C;;AAEA;EACE,yBAAyB;EACzB,6BAA6B;EAC7B,yCAAyC;AAC3C;;AAEA;EACE,yBAAyB;EACzB,6BAA6B;EAC7B,yCAAyC;AAC3C;;AAEA;EACE,yBAAyB;EACzB,6BAA6B;EAC7B,uCAAuC;AACzC;;AAEA,6DAA6D;AAC7D;EACE;;IAEE,UAAU;IACV,2BAA2B;EAC7B;EACA;IACE,YAAY;IACZ,sBAAsB,EAAE,iBAAiB;EAC3C;AACF;;AAEA;EACE,yBAAyB;EACzB,gCAAgC;EAChC,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;EACzB,gCAAgC;EAChC,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;EACzB,gCAAgC;EAChC,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;EACzB,gCAAgC;EAChC,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;EACzB,gCAAgC;EAChC,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;EACzB,gCAAgC;EAChC,mBAAmB;AACrB;;AAEA,sDAAsD;AACtD,oDAAoD;AACpD;EACE;IACE,yCAAyC;EAC3C;EACA;IACE,2CAA2C;EAC7C;EACA;IACE,0CAA0C;EAC5C;EACA;IACE,2CAA2C;EAC7C;EACA;IACE,yCAAyC;EAC3C;AACF;;AAEA;EACE,+BAA+B;EAC/B,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,+BAA+B;EAC/B,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,+BAA+B;EAC/B,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,+BAA+B;EAC/B,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,+BAA+B;EAC/B,aAAa;EACb,iBAAiB;AACnB;;AAEA;EACE,+BAA+B;EAC/B,aAAa;EACb,iBAAiB;AACnB","sourcesContent":["@keyframes pulse_outermost {\n  0%,\n  100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(0.92);\n  }\n}\n.outermost {\n  animation: pulse_outermost 5s infinite;\n  transform-origin: center;\n}\n\n@keyframes pulse_second {\n  0%,\n  100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(0.856);\n  }\n}\n.second {\n  animation: pulse_second 5s infinite;\n  transform-origin: center;\n}\n\n@keyframes pulse_third {\n  0%,\n  100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(0.792);\n  }\n}\n.third {\n  animation: pulse_third 5s infinite;\n  transform-origin: center;\n}\n\n@keyframes pulse_fourth {\n  0%,\n  100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(0.728);\n  }\n}\n.fourth {\n  animation: pulse_fourth 5s infinite;\n  transform-origin: center;\n}\n\n@keyframes pulse_fifth {\n  0%,\n  100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(0.664);\n  }\n}\n.fifth {\n  animation: pulse_fifth 5s infinite;\n  transform-origin: center;\n}\n\n@keyframes pulse_innermost {\n  0%,\n  100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(0.6);\n  }\n}\n.innermost {\n  animation: pulse_innermost 5s infinite;\n  transform-origin: center;\n}\n\n/* bounce animation to indicate Pi is paused awaiting permission to speak */\n@keyframes bounce_outermost {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-5%);\n  }\n  60% {\n    transform: translateY(-3%);\n  }\n}\n.outermost.paused {\n  animation-name: bounce_outermost;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n\n@keyframes bounce_second {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-5.8%);\n  }\n  60% {\n    transform: translateY(-3.48%);\n  }\n}\n.second.paused {\n  animation-name: bounce_second;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n\n@keyframes bounce_third {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-6.6%);\n  }\n  60% {\n    transform: translateY(-3.96%);\n  }\n}\n.third.paused {\n  animation-name: bounce_third;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n\n@keyframes bounce_fourth {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-7.4%);\n  }\n  60% {\n    transform: translateY(-4.44%);\n  }\n}\n.fourth.paused {\n  animation-name: bounce_fourth;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n\n@keyframes bounce_fifth {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-8.2%);\n  }\n  60% {\n    transform: translateY(-4.92%);\n  }\n}\n.fifth.paused {\n  animation-name: bounce_fifth;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n\n@keyframes bounce_innermost {\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-9%);\n  }\n  60% {\n    transform: translateY(-5.4%);\n  }\n}\n.innermost.paused {\n  animation-name: bounce_innermost;\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n}\n\n/* playful animation to indicate Pi is speaking */\n@keyframes speaking_outermost {\n  0%,\n  100% {\n    transform: scale(1) rotate(0deg);\n  }\n  25% {\n    transform: scale(0.995);\n  }\n  50% {\n    transform: scale(0.9);\n  }\n  75% {\n    transform: scale(0.895);\n  }\n}\n.outermost.piSpeaking {\n  animation: speaking_outermost 2s infinite;\n  transform-origin: center;\n}\n\n@keyframes speaking_second {\n  0%,\n  100% {\n    transform: scale(1) rotate(0deg);\n  }\n  25% {\n    transform: scale(0.98) rotate(-1deg);\n  }\n  50% {\n    transform: scale(0.87) rotate(0deg);\n  }\n  75% {\n    transform: scale(0.865) rotate(1deg);\n  }\n}\n.second.piSpeaking {\n  animation: speaking_second 2s infinite;\n  transform-origin: center;\n}\n\n@keyframes speaking_third {\n  0%,\n  100% {\n    transform: scale(1) rotate(0deg);\n  }\n  25% {\n    transform: scale(0.965) rotate(-2deg);\n  }\n  50% {\n    transform: scale(0.84) rotate(0deg);\n  }\n  75% {\n    transform: scale(0.835) rotate(2deg);\n  }\n}\n.third.piSpeaking {\n  animation: speaking_third 2s infinite;\n  transform-origin: center;\n}\n\n@keyframes speaking_fourth {\n  0%,\n  100% {\n    transform: scale(1) rotate(0deg);\n  }\n  25% {\n    transform: scale(0.95) rotate(-3deg);\n  }\n  50% {\n    transform: scale(0.81) rotate(0deg);\n  }\n  75% {\n    transform: scale(0.805) rotate(3deg);\n  }\n}\n.fourth.piSpeaking {\n  animation: speaking_fourth 2s infinite;\n  transform-origin: center;\n}\n\n@keyframes speaking_fifth {\n  0%,\n  100% {\n    transform: scale(1) rotate(0deg);\n  }\n  25% {\n    transform: scale(0.935) rotate(-4deg);\n  }\n  50% {\n    transform: scale(0.78) rotate(0deg);\n  }\n  75% {\n    transform: scale(0.775) rotate(4deg);\n  }\n}\n.fifth.piSpeaking {\n  animation: speaking_fifth 2s infinite;\n  transform-origin: center;\n}\n\n@keyframes speaking_innermost {\n  0%,\n  100% {\n    transform: scale(1) rotate(0deg);\n  }\n  25% {\n    transform: scale(0.92) rotate(-5deg);\n  }\n  50% {\n    transform: scale(0.75) rotate(0deg);\n  }\n  75% {\n    transform: scale(0.745) rotate(5deg);\n  }\n}\n.innermost.piSpeaking {\n  animation: speaking_innermost 2s infinite;\n  transform-origin: center;\n}\n\n/* wave animation to indicate user is speaking */\n@keyframes userSpeakingAnimation {\n  50% {\n    transform: scaleY(0.05) scaleX(var(--width-factor))\n      translateX(calc(-50% + var(--spread-amount)));\n  }\n  100% {\n    transform: scaleY(1) scaleX(var(--width-factor))\n      translateX(calc(-50% + var(--spread-amount)));\n  }\n}\n/* user speaking oscillation animation */\n@keyframes waveform_outermost {\n  0%,\n  100% {\n    transform: scaleY(1) scaleX(1);\n  }\n  25%,\n  75% {\n    transform: scaleY(0.9) scaleX(0.9);\n  }\n}\n\n@keyframes waveform_second {\n  0%,\n  100% {\n    transform: scaleY(0.9) scaleX(0.9);\n  }\n  25%,\n  75% {\n    transform: scaleY(0.8) scaleX(0.8);\n  }\n}\n\n@keyframes waveform_third {\n  0%,\n  100% {\n    transform: scaleY(0.8) scaleX(0.8);\n  }\n  25%,\n  75% {\n    transform: scaleY(0.7) scaleX(0.7);\n  }\n}\n\n@keyframes waveform_fourth {\n  0%,\n  100% {\n    transform: scaleY(0.7) scaleX(0.7);\n  }\n  25%,\n  75% {\n    transform: scaleY(0.6) scaleX(0.6);\n  }\n}\n\n@keyframes waveform_fifth {\n  0%,\n  100% {\n    transform: scaleY(0.6) scaleX(0.6);\n  }\n  25%,\n  75% {\n    transform: scaleY(0.5) scaleX(0.5);\n  }\n}\n\n@keyframes waveform_innermost {\n  0%,\n  100% {\n    transform: scaleY(0.5) scaleX(0.5);\n  }\n  25%,\n  75% {\n    transform: scaleY(0.4) scaleX(0.4);\n  }\n}\n\n.outermost.userSpeaking {\n  animation: waveform_outermost 0.7s infinite alternate;\n}\n\n.second.userSpeaking {\n  animation: waveform_second 0.65s infinite alternate;\n}\n\n.third.userSpeaking {\n  animation: waveform_third 0.6s infinite alternate;\n}\n\n.fourth.userSpeaking {\n  animation: waveform_fourth 0.55s infinite alternate;\n}\n\n.fifth.userSpeaking {\n  animation: waveform_fifth 0.5s infinite alternate;\n}\n\n.innermost.userSpeaking {\n  animation: waveform_innermost 0.45s infinite alternate;\n}\n\n/* flipcard animation to indicate Say, Pi is transcribing audio to text */\n@keyframes transcribingFlip {\n  0%,\n  100% {\n    transform: rotateY(0deg);\n    fill: var(--original-color);\n  }\n  50% {\n    transform: rotateY(180deg);\n    fill: var(--transcribing-color);\n  }\n}\n\n.outermost.transcribing {\n  --original-color: #e4f2d1;\n  --transcribing-color: #b3e0fe;\n  animation: transcribingFlip 1.5s infinite;\n}\n\n.second.transcribing {\n  --original-color: #cce8b5;\n  --transcribing-color: #89c2ff;\n  animation: transcribingFlip 1.6s infinite;\n}\n\n.third.transcribing {\n  --original-color: #b3db95;\n  --transcribing-color: #5fa4ff;\n  animation: transcribingFlip 1.7s infinite;\n}\n\n.fourth.transcribing {\n  --original-color: #9bd078;\n  --transcribing-color: #3586ff;\n  animation: transcribingFlip 1.8s infinite;\n}\n\n.fifth.transcribing {\n  --original-color: #83c55c;\n  --transcribing-color: #0b69e3;\n  animation: transcribingFlip 1.9s infinite;\n}\n\n.innermost.transcribing {\n  --original-color: #428a2f;\n  --transcribing-color: #0053bf;\n  animation: transcribingFlip 2s infinite;\n}\n\n/* heartbeat animation to indicate Pi is preparing to speak */\n@keyframes heartbeat {\n  0%,\n  100% {\n    opacity: 1;\n    fill: var(--original-color);\n  }\n  50% {\n    opacity: 0.5;\n    fill: rgb(245 238 223); /* bg-cream-550 */\n  }\n}\n\n.outermost.loading {\n  --original-color: #e4f2d1;\n  animation: heartbeat 2s infinite;\n  animation-delay: 0s;\n}\n\n.second.loading {\n  --original-color: #cce8b5;\n  animation: heartbeat 2s infinite;\n  animation-delay: 0.4s;\n}\n\n.third.loading {\n  --original-color: #b3db95;\n  animation: heartbeat 2s infinite;\n  animation-delay: 0.8s;\n}\n\n.fourth.loading {\n  --original-color: #9bd078;\n  animation: heartbeat 2s infinite;\n  animation-delay: 1.2s;\n}\n\n.fifth.loading {\n  --original-color: #83c55c;\n  animation: heartbeat 2s infinite;\n  animation-delay: 1.6s;\n}\n\n.innermost.loading {\n  --original-color: #428a2f;\n  animation: heartbeat 2s infinite;\n  animation-delay: 2s;\n}\n\n/* toned-down dissary animation to indicate an error */\n/* toned-down error animation with reduced opacity */\n@keyframes errorAnimation {\n  0% {\n    transform: rotate(0deg) translate(0%, 0%);\n  }\n  25% {\n    transform: rotate(-5deg) translate(-5%, 5%);\n  }\n  50% {\n    transform: rotate(5deg) translate(5%, -5%);\n  }\n  75% {\n    transform: rotate(-5deg) translate(-5%, 5%);\n  }\n  100% {\n    transform: rotate(0deg) translate(0%, 0%);\n  }\n}\n\n.outermost.error {\n  animation: errorAnimation 25s 1;\n  fill: #ff0000;\n  fill-opacity: 0.7;\n}\n\n.second.error {\n  animation: errorAnimation 25s 1;\n  fill: #ff3300;\n  fill-opacity: 0.7;\n}\n\n.third.error {\n  animation: errorAnimation 25s 1;\n  fill: #ff6600;\n  fill-opacity: 0.7;\n}\n\n.fourth.error {\n  animation: errorAnimation 25s 1;\n  fill: #ff9900;\n  fill-opacity: 0.7;\n}\n\n.fifth.error {\n  animation: errorAnimation 25s 1;\n  fill: #ffcc00;\n  fill-opacity: 0.7;\n}\n\n.innermost.error {\n  animation: errorAnimation 25s 1;\n  fill: #ffff00;\n  fill-opacity: 0.7;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/common.scss":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/common.scss ***!
  \*********************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.hidden {
  display: none !important;
}

#saypi-playButton.play-button {
  /* position over the talk button, but under any controls */
  z-index: 70; /* talk button z-index is 59 or 60 */
  background-color: rgba(0, 0, 0, 0); /* transparent without holes */
  border: none;
}

.mobile-device {
  /* maximize (mobile view) button is only displayed on compatible devices */
}
.mobile-device #saypi-enterButton,
.mobile-device #saypi-exitButton {
  position: fixed;
  top: 4rem;
  left: 1.25rem;
  width: 3rem;
  height: 3rem;
  padding: 6px;
  border: 0;
  z-index: 60;
}`, "",{"version":3,"sources":["webpack://./src/styles/common.scss"],"names":[],"mappings":"AAAA;EACE,wBAAA;AACF;;AACA;EACE,0DAAA;EACA,WAAA,EAAA,oCAAA;EACA,kCAAA,EAAA,8BAAA;EACA,YAAA;AAEF;;AACA;EACE,0EAAA;AAEF;AADE;;EAEE,eAAA;EACA,SAAA;EACA,aAAA;EACA,WAAA;EACA,YAAA;EACA,YAAA;EACA,SAAA;EACA,WAAA;AAGJ","sourcesContent":[".hidden {\n  display: none !important;\n}\n#saypi-playButton.play-button {\n  /* position over the talk button, but under any controls */\n  z-index: 70; /* talk button z-index is 59 or 60 */\n  background-color: rgba(0, 0, 0, 0); /* transparent without holes */\n  border: none;\n}\n\n.mobile-device {\n  /* maximize (mobile view) button is only displayed on compatible devices */\n  #saypi-enterButton,\n  #saypi-exitButton {\n    position: fixed;\n    top: 4rem;\n    left: 1.25rem;\n    width: 3rem;\n    height: 3rem;\n    padding: 6px;\n    border: 0;\n    z-index: 60;\n  }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/desktop.scss":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/desktop.scss ***!
  \**********************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(0.9);
  }
  100% {
    transform: scale(1);
  }
}
html.desktop-view #saypi-talkButton,
html.desktop-view .play-button {
  margin: 0.5rem;
  border-radius: 18px;
  height: 2.25rem;
  width: 5rem;
  display: block; /* For Safari */
}
html.desktop-view #saypi-playButton {
  position: fixed;
  top: 50%; /* Center vertically */
  left: 50%; /* Center horizontally */
  max-width: 500px; /* Maximum width */
  width: 100%;
  transform: translate(-50%, -50%); /* Necessary for perfect centering */
  text-align: center; /* To center the inner contents, if any */
}
html.desktop-view #saypi-playButton svg {
  padding: 2.5rem;
}
html.desktop-view html:not(.firefox-android) #saypi-talkButton:active .waveform,
html.desktop-view #saypi-talkButton.active .waveform {
  animation: pulse 1s infinite;
}
html.desktop-view #saypi-talkButton .waveform {
  fill: #776d6d;
}
html.desktop-view #saypi-talkButton.autoSubmit .waveform {
  fill: rgb(65, 138, 47); /* Pi's text-brand-green-600 */
}
html.desktop-view #saypi-notification > svg {
  width: 3rem;
  height: 3rem;
  bottom: 4rem;
  right: 12rem;
  position: fixed;
}
html.desktop-view #saypi-exitButton {
  display: none;
}`, "",{"version":3,"sources":["webpack://./src/styles/desktop.scss"],"names":[],"mappings":"AACE;EACE;IACE,mBAAA;EAAJ;EAEE;IACE,qBAAA;EAAJ;EAEE;IACE,mBAAA;EAAJ;AACF;AAEE;;EAEE,cAAA;EACA,mBAAA;EACA,eAAA;EACA,WAAA;EACA,cAAA,EAAA,eAAA;AAAJ;AAGE;EACE,eAAA;EACA,QAAA,EAAA,sBAAA;EACA,SAAA,EAAA,wBAAA;EACA,gBAAA,EAAA,kBAAA;EACA,WAAA;EACA,gCAAA,EAAA,oCAAA;EACA,kBAAA,EAAA,yCAAA;AADJ;AAGI;EACE,eAAA;AADN;AAKE;;EAEE,4BAAA;AAHJ;AAKE;EACE,aAAA;AAHJ;AAKE;EACE,sBAAA,EAAA,8BAAA;AAHJ;AAME;EACE,WAAA;EACA,YAAA;EACA,YAAA;EACA,YAAA;EACA,eAAA;AAJJ;AAOE;EACE,aAAA;AALJ","sourcesContent":["html.desktop-view {\n  @keyframes pulse {\n    0% {\n      transform: scale(1);\n    }\n    50% {\n      transform: scale(0.9);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n  #saypi-talkButton,\n  .play-button {\n    margin: 0.5rem;\n    border-radius: 18px;\n    height: 2.25rem;\n    width: 5rem;\n    display: block; /* For Safari */\n  }\n\n  #saypi-playButton {\n    position: fixed;\n    top: 50%; /* Center vertically */\n    left: 50%; /* Center horizontally */\n    max-width: 500px; /* Maximum width */\n    width: 100%;\n    transform: translate(-50%, -50%); /* Necessary for perfect centering */\n    text-align: center; /* To center the inner contents, if any */\n\n    svg {\n      padding: 2.5rem;\n    }\n  }\n\n  html:not(.firefox-android) #saypi-talkButton:active .waveform,\n  #saypi-talkButton.active .waveform {\n    animation: pulse 1s infinite;\n  }\n  #saypi-talkButton .waveform {\n    fill: #776d6d;\n  }\n  #saypi-talkButton.autoSubmit .waveform {\n    fill: rgb(65 138 47); /* Pi's text-brand-green-600 */\n  }\n\n  #saypi-notification > svg {\n    width: 3rem;\n    height: 3rem;\n    bottom: 4rem;\n    right: 12rem;\n    position: fixed;\n  }\n\n  #saypi-exitButton {\n    display: none;\n  }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/mobile.scss":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/mobile.scss ***!
  \*********************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `html.mobile-view {
  /* Pi controls: ellipsis, experiences */
  /* Pi controls: mute/unmute */
  /* fix an alignment issue with the "new ui layout" */
}
html.mobile-view #saypi-panel,
html.mobile-view .play-button,
html.mobile-view .notification {
  width: 100%;
  position: fixed;
  left: 0;
  background-color: rgba(245, 238, 223, 0.98);
  height: 100vh;
  top: 0;
}
html.mobile-view #saypi-playButton {
  background-color: rgba(245, 238, 223, 0.55);
}
html.mobile-view #saypi-playButton svg {
  padding: 2.5rem;
}
html.mobile-view #saypi-talkButton {
  width: 100%;
  height: 100%;
  background-color: transparent;
  border-radius: 0;
  margin: 0;
}
html.mobile-view #saypi-notification {
  z-index: 100;
  background-color: transparent;
}
html.mobile-view #saypi-notification svg {
  width: 75%;
  height: 100%;
  margin: auto;
}
html.mobile-view #__next > main > div > div > div.fixed.top-4.right-6 > button,
html.mobile-view #saypi-experiences-button {
  transform: scale(1.5);
}
html.mobile-view #saypi-audio-controls {
  /* hide the voice options */
  /* scale the mute button */
}
html.mobile-view #saypi-audio-controls div.p-1 {
  display: none;
}
html.mobile-view #saypi-audio-controls button.group {
  transform: scale(2) !important;
  z-index: 50;
  /* hide the voice selector twisty */
}
html.mobile-view #saypi-audio-controls button.group + button {
  display: none;
}
html.mobile-view .text-body-chat-m {
  padding-top: 0;
}
html.mobile-view #saypi-enterButton {
  display: none;
}
html.mobile-view #saypi-footer {
  display: none;
}
html.mobile-view #saypi-prompt {
  /* hides virtual keyboard on android */
  display: none;
}
html.mobile-view #saypi-submitButton {
  display: none;
}`, "",{"version":3,"sources":["webpack://./src/styles/mobile.scss"],"names":[],"mappings":"AAAA;EAsCE,uCAAA;EAMA,6BAAA;EAiBA,oDAAA;AAzDF;AAHE;;;EAGE,WAAA;EACA,eAAA;EACA,OAAA;EACA,2CAAA;EAEA,aAAA;EACA,MAAA;AAIJ;AADE;EACE,2CAAA;AAGJ;AAFI;EACE,eAAA;AAIN;AAAE;EACE,WAAA;EACA,YAAA;EACA,6BAAA;EACA,gBAAA;EACA,SAAA;AAEJ;AACE;EACE,YAAA;EACA,6BAAA;AACJ;AAAI;EACE,UAAA;EACA,YAAA;EACA,YAAA;AAEN;AAGE;;EAEE,qBAAA;AADJ;AAKE;EACE,2BAAA;EAIA,0BAAA;AANJ;AAGI;EACE,aAAA;AADN;AAII;EACE,8BAAA;EACA,WAAA;EACA,mCAAA;AAFN;AAGM;EACE,aAAA;AADR;AAOE;EACE,cAAA;AALJ;AAQE;EACE,aAAA;AANJ;AASE;EACE,aAAA;AAPJ;AAUE;EACE,sCAAA;EACA,aAAA;AARJ;AAWE;EACE,aAAA;AATJ","sourcesContent":["html.mobile-view {\n  #saypi-panel,\n  .play-button,\n  .notification {\n    width: 100%;\n    position: fixed;\n    left: 0;\n    background-color: rgba(245, 238, 223, 0.98);\n\n    height: 100vh;\n    top: 0;\n  }\n\n  #saypi-playButton {\n    background-color: rgba(245, 238, 223, 0.55);\n    svg {\n      padding: 2.5rem;\n    }\n  }\n\n  #saypi-talkButton {\n    width: 100%;\n    height: 100%;\n    background-color: transparent;\n    border-radius: 0;\n    margin: 0;\n  }\n\n  #saypi-notification {\n    z-index: 100;\n    background-color: transparent;\n    svg {\n      width: 75%;\n      height: 100%;\n      margin: auto;\n    }\n  }\n\n  /* Pi controls: ellipsis, experiences */\n  #__next > main > div > div > div.fixed.top-4.right-6 > button,\n  #saypi-experiences-button {\n    transform: scale(1.5);\n  }\n\n  /* Pi controls: mute/unmute */\n  #saypi-audio-controls {\n    /* hide the voice options */\n    div.p-1 {\n      display: none;\n    }\n    /* scale the mute button */\n    button.group {\n      transform: scale(2) !important;\n      z-index: 50;\n      /* hide the voice selector twisty */\n      + button {\n        display: none;\n      }\n    }\n  }\n\n  /* fix an alignment issue with the \"new ui layout\" */\n  .text-body-chat-m {\n    padding-top: 0;\n  }\n\n  #saypi-enterButton {\n    display: none;\n  }\n\n  #saypi-footer {\n    display: none;\n  }\n\n  #saypi-prompt {\n    /* hides virtual keyboard on android */\n    display: none;\n  }\n\n  #saypi-submitButton {\n    display: none;\n  }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {



module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./public/audioModule.bundle.js":
/*!****************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./public/audioModule.bundle.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("function _construct(Parent,args,Class){if(_isNativeReflectConstruct()){_construct=Reflect.construct.bind();}else{_construct=function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var Constructor=Function.bind.apply(Parent,a);var instance=new Constructor();if(Class)_setPrototypeOf(instance,Class.prototype);return instance;};}return _construct.apply(null,arguments);}function _typeof2(obj){\"@babel/helpers - typeof\";return _typeof2=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&\"function\"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;},_typeof2(obj);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});Object.defineProperty(subClass,\"prototype\",{writable:false});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _possibleConstructorReturn(self,call){if(call&&(_typeof2(call)===\"object\"||typeof call===\"function\")){return call;}else if(call!==void 0){throw new TypeError(\"Derived constructors may only return object or undefined\");}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableSpread();}function _nonIterableSpread(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _iterableToArray(iter){if(typeof Symbol!==\"undefined\"&&iter[Symbol.iterator]!=null||iter[\"@@iterator\"]!=null)return Array.from(iter);}function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr);}function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e147){throw _e147;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e148){didErr=true;err=_e148;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty2(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _defineProperty2(obj,key,value){key=_toPropertyKey2(key);if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest();}function _nonIterableRest(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2;}function _iterableToArrayLimit(arr,i){var _i=null==arr?null:\"undefined\"!=typeof Symbol&&arr[Symbol.iterator]||arr[\"@@iterator\"];if(null!=_i){var _s,_e,_x,_r,_arr=[],_n=!0,_d=!1;try{if(_x=(_i=_i.call(arr)).next,0===i){if(Object(_i)!==_i)return;_n=!1;}else for(;!(_n=(_s=_x.call(_i)).done)&&(_arr.push(_s.value),_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err;}finally{try{if(!_n&&null!=_i[\"return\"]&&(_r=_i[\"return\"](),Object(_r)!==_r))return;}finally{if(_d)throw _e;}}return _arr;}}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;}function _regeneratorRuntime2(){\"use strict\";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime2=function _regeneratorRuntime2(){return exports;};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value;},$Symbol=\"function\"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||\"@@iterator\",asyncIteratorSymbol=$Symbol.asyncIterator||\"@@asyncIterator\",toStringTagSymbol=$Symbol.toStringTag||\"@@toStringTag\";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key];}try{define({},\"\");}catch(err){define=function define(obj,key,value){return obj[key]=value;};}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,\"_invoke\",{value:makeInvokeMethod(innerFn,self,context)}),generator;}function tryCatch(fn,obj,arg){try{return{type:\"normal\",arg:fn.call(obj,arg)};}catch(err){return{type:\"throw\",arg:err};}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,function(){return this;});var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){[\"next\",\"throw\",\"return\"].forEach(function(method){define(prototype,method,function(arg){return this._invoke(method,arg);});});}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if(\"throw\"!==record.type){var result=record.arg,value=result.value;return value&&\"object\"==_typeof2(value)&&hasOwn.call(value,\"__await\")?PromiseImpl.resolve(value.__await).then(function(value){invoke(\"next\",value,resolve,reject);},function(err){invoke(\"throw\",err,resolve,reject);}):PromiseImpl.resolve(value).then(function(unwrapped){result.value=unwrapped,resolve(result);},function(error){return invoke(\"throw\",error,resolve,reject);});}reject(record.arg);}var previousPromise;defineProperty(this,\"_invoke\",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl(function(resolve,reject){invoke(method,arg,resolve,reject);});}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg();}});}function makeInvokeMethod(innerFn,self,context){var state=\"suspendedStart\";return function(method,arg){if(\"executing\"===state)throw new Error(\"Generator is already running\");if(\"completed\"===state){if(\"throw\"===method)throw arg;return{value:void 0,done:!0};}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult;}}if(\"next\"===context.method)context.sent=context._sent=context.arg;else if(\"throw\"===context.method){if(\"suspendedStart\"===state)throw state=\"completed\",context.arg;context.dispatchException(context.arg);}else\"return\"===context.method&&context.abrupt(\"return\",context.arg);state=\"executing\";var record=tryCatch(innerFn,self,context);if(\"normal\"===record.type){if(state=context.done?\"completed\":\"suspendedYield\",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done};}\"throw\"===record.type&&(state=\"completed\",context.method=\"throw\",context.arg=record.arg);}};}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(undefined===method)return context.delegate=null,\"throw\"===methodName&&delegate.iterator[\"return\"]&&(context.method=\"return\",context.arg=undefined,maybeInvokeDelegate(delegate,context),\"throw\"===context.method)||\"return\"!==methodName&&(context.method=\"throw\",context.arg=new TypeError(\"The iterator does not provide a '\"+methodName+\"' method\")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if(\"throw\"===record.type)return context.method=\"throw\",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,\"return\"!==context.method&&(context.method=\"next\",context.arg=undefined),context.delegate=null,ContinueSentinel):info:(context.method=\"throw\",context.arg=new TypeError(\"iterator result is not an object\"),context.delegate=null,ContinueSentinel);}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry);}function resetTryEntry(entry){var record=entry.completion||{};record.type=\"normal\",delete record.arg,entry.completion=record;}function Context(tryLocsList){this.tryEntries=[{tryLoc:\"root\"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0);}function values(iterable){if(iterable||\"\"===iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if(\"function\"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=undefined,next.done=!0,next;};return next.next=next;}}throw new TypeError(_typeof2(iterable)+\" is not iterable\");}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,\"constructor\",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,\"constructor\",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,\"GeneratorFunction\"),exports.isGeneratorFunction=function(genFun){var ctor=\"function\"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||\"GeneratorFunction\"===(ctor.displayName||ctor.name));},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,\"GeneratorFunction\")),genFun.prototype=Object.create(Gp),genFun;},exports.awrap=function(arg){return{__await:arg};},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,function(){return this;}),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next();});},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,\"Generator\"),define(Gp,iteratorSymbol,function(){return this;}),define(Gp,\"toString\",function(){return\"[object Generator]\";}),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next;}return next.done=!0,next;};},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=undefined,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)\"t\"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined);},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if(\"throw\"===rootRecord.type)throw rootRecord.arg;return this.rval;},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type=\"throw\",record.arg=exception,context.next=loc,caught&&(context.method=\"next\",context.arg=undefined),!!caught;}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if(\"root\"===entry.tryLoc)return handle(\"end\");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,\"catchLoc\"),hasFinally=hasOwn.call(entry,\"finallyLoc\");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);}else{if(!hasFinally)throw new Error(\"try statement without catch or finally\");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,\"finallyLoc\")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break;}}finallyEntry&&(\"break\"===type||\"continue\"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method=\"next\",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record);},complete:function complete(record,afterLoc){if(\"throw\"===record.type)throw record.arg;return\"break\"===record.type||\"continue\"===record.type?this.next=record.arg:\"return\"===record.type?(this.rval=this.arg=record.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel;},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel;}},\"catch\":function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if(\"throw\"===record.type){var thrown=record.arg;resetTryEntry(entry);}return thrown;}}throw new Error(\"illegal catch attempt\");},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},\"next\"===this.method&&(this.arg=undefined),ContinueSentinel;}},exports;}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator2(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,\"next\",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,\"throw\",err);}_next(undefined);});};}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,_toPropertyKey2(descriptor.key),descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);Object.defineProperty(Constructor,\"prototype\",{writable:false});return Constructor;}function _toPropertyKey2(arg){var key=_toPrimitive2(arg,\"string\");return _typeof2(key)===\"symbol\"?key:String(key);}function _toPrimitive2(input,hint){if(_typeof2(input)!==\"object\"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||\"default\");if(_typeof2(res)!==\"object\")return res;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(hint===\"string\"?String:Number)(input);}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _awaitAsyncGenerator(value){return new _OverloadYield(value,0);}function _wrapAsyncGenerator(fn){return function(){return new _AsyncGenerator(fn.apply(this,arguments));};}function _AsyncGenerator(gen){var front,back;function resume(key,arg){try{var result=gen[key](arg),value=result.value,overloaded=value instanceof _OverloadYield;Promise.resolve(overloaded?value.v:value).then(function(arg){if(overloaded){var nextKey=\"return\"===key?\"return\":\"next\";if(!value.k||arg.done)return resume(nextKey,arg);arg=gen[nextKey](arg).value;}settle(result.done?\"return\":\"normal\",arg);},function(err){resume(\"throw\",err);});}catch(err){settle(\"throw\",err);}}function settle(type,value){switch(type){case\"return\":front.resolve({value:value,done:!0});break;case\"throw\":front.reject(value);break;default:front.resolve({value:value,done:!1});}(front=front.next)?resume(front.key,front.arg):back=null;}this._invoke=function(key,arg){return new Promise(function(resolve,reject){var request={key:key,arg:arg,resolve:resolve,reject:reject,next:null};back?back=back.next=request:(front=back=request,resume(key,arg));});},\"function\"!=typeof gen[\"return\"]&&(this[\"return\"]=void 0);}_AsyncGenerator.prototype[\"function\"==typeof Symbol&&Symbol.asyncIterator||\"@@asyncIterator\"]=function(){return this;},_AsyncGenerator.prototype.next=function(arg){return this._invoke(\"next\",arg);},_AsyncGenerator.prototype[\"throw\"]=function(arg){return this._invoke(\"throw\",arg);},_AsyncGenerator.prototype[\"return\"]=function(arg){return this._invoke(\"return\",arg);};function _OverloadYield(value,kind){this.v=value,this.k=kind;}// ==UserScript==\n// @name         Say, Pi\n// @namespace    http://www.saypi.ai/\n// @version      1.3.9\n// @description  Speak to Pi with OpenAI's Whisper\n// @author       Ross Cadogan\n// @match        https://pi.ai/talk\n// @inject-into  page\n// @updateURL    https://app.saypi.ai/saypi.user.js\n// @downloadURL  https://app.saypi.ai/saypi.user.js\n// @license      MIT\n// ==/UserScript==\n/******/(function(){// webpackBootstrap\n/******/var __webpack_modules__={/***/\"./node_modules/@ricky0123/vad-web/dist/_common/frame-processor.js\":/*!*************************************************************************!*\\\n  !*** ./node_modules/@ricky0123/vad-web/dist/_common/frame-processor.js ***!\n  \\*************************************************************************/ /***/function node_modulesRicky0123VadWebDist_commonFrameProcessorJs(__unused_webpack_module,exports,__webpack_require__){\"use strict\";/*\nSome of this code, together with the default options found in index.ts,\nwere taken (or took inspiration) from https://github.com/snakers4/silero-vad\n*/Object.defineProperty(exports,\"__esModule\",{value:true});exports.FrameProcessor=exports.validateOptions=exports.defaultFrameProcessorOptions=void 0;var messages_1=__webpack_require__(/*! ./messages */\"./node_modules/@ricky0123/vad-web/dist/_common/messages.js\");var logging_1=__webpack_require__(/*! ./logging */\"./node_modules/@ricky0123/vad-web/dist/_common/logging.js\");var RECOMMENDED_FRAME_SAMPLES=[512,1024,1536];exports.defaultFrameProcessorOptions={positiveSpeechThreshold:0.5,negativeSpeechThreshold:0.5-0.15,preSpeechPadFrames:1,redemptionFrames:8,frameSamples:1536,minSpeechFrames:3};function validateOptions(options){if(!RECOMMENDED_FRAME_SAMPLES.includes(options.frameSamples)){logging_1.log.warn(\"You are using an unusual frame size\");}if(options.positiveSpeechThreshold<0||options.negativeSpeechThreshold>1){logging_1.log.error(\"postiveSpeechThreshold should be a number between 0 and 1\");}if(options.negativeSpeechThreshold<0||options.negativeSpeechThreshold>options.positiveSpeechThreshold){logging_1.log.error(\"negativeSpeechThreshold should be between 0 and postiveSpeechThreshold\");}if(options.preSpeechPadFrames<0){logging_1.log.error(\"preSpeechPadFrames should be positive\");}if(options.redemptionFrames<0){logging_1.log.error(\"preSpeechPadFrames should be positive\");}}exports.validateOptions=validateOptions;var concatArrays=function concatArrays(arrays){var sizes=arrays.reduce(function(out,next){out.push(out.at(-1)+next.length);return out;},[0]);var outArray=new Float32Array(sizes.at(-1));arrays.forEach(function(arr,index){var place=sizes[index];outArray.set(arr,place);});return outArray;};var FrameProcessor=/*#__PURE__*/_createClass(function FrameProcessor(modelProcessFunc,modelResetFunc,options){var _this2=this;_classCallCheck(this,FrameProcessor);this.modelProcessFunc=modelProcessFunc;this.modelResetFunc=modelResetFunc;this.options=options;this.speaking=false;this.redemptionCounter=0;this.active=false;this.reset=function(){_this2.speaking=false;_this2.audioBuffer=[];_this2.modelResetFunc();_this2.redemptionCounter=0;};this.pause=function(){_this2.active=false;_this2.reset();};this.resume=function(){_this2.active=true;};this.endSegment=function(){var audioBuffer=_this2.audioBuffer;_this2.audioBuffer=[];var speaking=_this2.speaking;_this2.reset();var speechFrameCount=audioBuffer.reduce(function(acc,item){return acc+ +item.isSpeech;},0);if(speaking){if(speechFrameCount>=_this2.options.minSpeechFrames){var audio=concatArrays(audioBuffer.map(function(item){return item.frame;}));return{msg:messages_1.Message.SpeechEnd,audio:audio};}else{return{msg:messages_1.Message.VADMisfire};}}return{};};this.process=/*#__PURE__*/function(){var _ref3=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee2(frame){var probs,audioBuffer,speechFrameCount,audio;return _regeneratorRuntime2().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:if(_this2.active){_context2.next=2;break;}return _context2.abrupt(\"return\",{});case 2:_context2.next=4;return _this2.modelProcessFunc(frame);case 4:probs=_context2.sent;_this2.audioBuffer.push({frame:frame,isSpeech:probs.isSpeech>=_this2.options.positiveSpeechThreshold});if(probs.isSpeech>=_this2.options.positiveSpeechThreshold&&_this2.redemptionCounter){_this2.redemptionCounter=0;}if(!(probs.isSpeech>=_this2.options.positiveSpeechThreshold&&!_this2.speaking)){_context2.next=10;break;}_this2.speaking=true;return _context2.abrupt(\"return\",{probs:probs,msg:messages_1.Message.SpeechStart});case 10:if(!(probs.isSpeech<_this2.options.negativeSpeechThreshold&&_this2.speaking&&++_this2.redemptionCounter>=_this2.options.redemptionFrames)){_context2.next=22;break;}_this2.redemptionCounter=0;_this2.speaking=false;audioBuffer=_this2.audioBuffer;_this2.audioBuffer=[];speechFrameCount=audioBuffer.reduce(function(acc,item){return acc+ +item.isSpeech;},0);if(!(speechFrameCount>=_this2.options.minSpeechFrames)){_context2.next=21;break;}audio=concatArrays(audioBuffer.map(function(item){return item.frame;}));return _context2.abrupt(\"return\",{probs:probs,msg:messages_1.Message.SpeechEnd,audio:audio});case 21:return _context2.abrupt(\"return\",{probs:probs,msg:messages_1.Message.VADMisfire});case 22:if(!_this2.speaking){while(_this2.audioBuffer.length>_this2.options.preSpeechPadFrames){_this2.audioBuffer.shift();}}return _context2.abrupt(\"return\",{probs:probs});case 24:case\"end\":return _context2.stop();}},_callee2);}));return function(_x4){return _ref3.apply(this,arguments);};}();this.audioBuffer=[];this.reset();});exports.FrameProcessor=FrameProcessor;//# sourceMappingURL=frame-processor.js.map\n/***/},/***/\"./node_modules/@ricky0123/vad-web/dist/_common/index.js\":/*!***************************************************************!*\\\n  !*** ./node_modules/@ricky0123/vad-web/dist/_common/index.js ***!\n  \\***************************************************************/ /***/function node_modulesRicky0123VadWebDist_commonIndexJs(__unused_webpack_module,exports,__webpack_require__){\"use strict\";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||(\"get\"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function get(){return m[k];}};}Object.defineProperty(o,k2,desc);}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!==\"default\"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result;};var __exportStar=this&&this.__exportStar||function(m,exports){for(var p in m)if(p!==\"default\"&&!Object.prototype.hasOwnProperty.call(exports,p))__createBinding(exports,m,p);};Object.defineProperty(exports,\"__esModule\",{value:true});exports.utils=void 0;var _utils=__importStar(__webpack_require__(/*! ./utils */\"./node_modules/@ricky0123/vad-web/dist/_common/utils.js\"));exports.utils={minFramesForTargetMS:_utils.minFramesForTargetMS,arrayBufferToBase64:_utils.arrayBufferToBase64,encodeWAV:_utils.encodeWAV};__exportStar(__webpack_require__(/*! ./non-real-time-vad */\"./node_modules/@ricky0123/vad-web/dist/_common/non-real-time-vad.js\"),exports);__exportStar(__webpack_require__(/*! ./frame-processor */\"./node_modules/@ricky0123/vad-web/dist/_common/frame-processor.js\"),exports);__exportStar(__webpack_require__(/*! ./messages */\"./node_modules/@ricky0123/vad-web/dist/_common/messages.js\"),exports);__exportStar(__webpack_require__(/*! ./logging */\"./node_modules/@ricky0123/vad-web/dist/_common/logging.js\"),exports);__exportStar(__webpack_require__(/*! ./models */\"./node_modules/@ricky0123/vad-web/dist/_common/models.js\"),exports);__exportStar(__webpack_require__(/*! ./resampler */\"./node_modules/@ricky0123/vad-web/dist/_common/resampler.js\"),exports);//# sourceMappingURL=index.js.map\n/***/},/***/\"./node_modules/@ricky0123/vad-web/dist/_common/logging.js\":/*!*****************************************************************!*\\\n  !*** ./node_modules/@ricky0123/vad-web/dist/_common/logging.js ***!\n  \\*****************************************************************/ /***/function node_modulesRicky0123VadWebDist_commonLoggingJs(__unused_webpack_module,exports){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.log=exports.LOG_PREFIX=void 0;exports.LOG_PREFIX=\"[VAD]\";var levels=[\"error\",\"debug\",\"warn\"];function getLog(level){return function(){var _console;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}(_console=console)[level].apply(_console,[exports.LOG_PREFIX].concat(args));};}var _log=levels.reduce(function(acc,level){acc[level]=getLog(level);return acc;},{});exports.log=_log;//# sourceMappingURL=logging.js.map\n/***/},/***/\"./node_modules/@ricky0123/vad-web/dist/_common/messages.js\":/*!******************************************************************!*\\\n  !*** ./node_modules/@ricky0123/vad-web/dist/_common/messages.js ***!\n  \\******************************************************************/ /***/function node_modulesRicky0123VadWebDist_commonMessagesJs(__unused_webpack_module,exports){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.Message=void 0;var Message;(function(Message){Message[\"AudioFrame\"]=\"AUDIO_FRAME\";Message[\"SpeechStart\"]=\"SPEECH_START\";Message[\"VADMisfire\"]=\"VAD_MISFIRE\";Message[\"SpeechEnd\"]=\"SPEECH_END\";})(Message=exports.Message||(exports.Message={}));//# sourceMappingURL=messages.js.map\n/***/},/***/\"./node_modules/@ricky0123/vad-web/dist/_common/models.js\":/*!****************************************************************!*\\\n  !*** ./node_modules/@ricky0123/vad-web/dist/_common/models.js ***!\n  \\****************************************************************/ /***/function node_modulesRicky0123VadWebDist_commonModelsJs(__unused_webpack_module,exports,__webpack_require__){\"use strict\";var _a;Object.defineProperty(exports,\"__esModule\",{value:true});exports.Silero=void 0;// @ts-ignore\nvar logging_1=__webpack_require__(/*! ./logging */\"./node_modules/@ricky0123/vad-web/dist/_common/logging.js\");var Silero=/*#__PURE__*/_createClass(function Silero(ort,modelFetcher){var _this3=this;_classCallCheck(this,Silero);this.ort=ort;this.modelFetcher=modelFetcher;this.init=/*#__PURE__*/_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee3(){var modelArrayBuffer;return _regeneratorRuntime2().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:logging_1.log.debug(\"initializing vad\");_context3.next=3;return _this3.modelFetcher();case 3:modelArrayBuffer=_context3.sent;_context3.next=6;return _this3.ort.InferenceSession.create(modelArrayBuffer);case 6:_this3._session=_context3.sent;_this3._sr=new _this3.ort.Tensor(\"int64\",[16000n]);_this3.reset_state();logging_1.log.debug(\"vad is initialized\");case 10:case\"end\":return _context3.stop();}},_callee3);}));this.reset_state=function(){var zeroes=Array(2*64).fill(0);_this3._h=new _this3.ort.Tensor(\"float32\",zeroes,[2,1,64]);_this3._c=new _this3.ort.Tensor(\"float32\",zeroes,[2,1,64]);};this.process=/*#__PURE__*/function(){var _ref5=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee4(audioFrame){var t,inputs,out,_out$output$data,isSpeech,notSpeech;return _regeneratorRuntime2().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:t=new _this3.ort.Tensor(\"float32\",audioFrame,[1,audioFrame.length]);inputs={input:t,h:_this3._h,c:_this3._c,sr:_this3._sr};_context4.next=4;return _this3._session.run(inputs);case 4:out=_context4.sent;_this3._h=out.hn;_this3._c=out.cn;_out$output$data=_slicedToArray(out.output.data,1),isSpeech=_out$output$data[0];notSpeech=1-isSpeech;return _context4.abrupt(\"return\",{notSpeech:notSpeech,isSpeech:isSpeech});case 10:case\"end\":return _context4.stop();}},_callee4);}));return function(_x5){return _ref5.apply(this,arguments);};}();});exports.Silero=Silero;_a=Silero;Silero[\"new\"]=/*#__PURE__*/function(){var _ref6=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee5(ort,modelFetcher){var model;return _regeneratorRuntime2().wrap(function _callee5$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:model=new Silero(ort,modelFetcher);_context5.next=3;return model.init();case 3:return _context5.abrupt(\"return\",model);case 4:case\"end\":return _context5.stop();}},_callee5);}));return function(_x6,_x7){return _ref6.apply(this,arguments);};}();//# sourceMappingURL=models.js.map\n/***/},/***/\"./node_modules/@ricky0123/vad-web/dist/_common/non-real-time-vad.js\":/*!***************************************************************************!*\\\n  !*** ./node_modules/@ricky0123/vad-web/dist/_common/non-real-time-vad.js ***!\n  \\***************************************************************************/ /***/function node_modulesRicky0123VadWebDist_commonNonRealTimeVadJs(__unused_webpack_module,exports,__webpack_require__){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.PlatformAgnosticNonRealTimeVAD=exports.defaultNonRealTimeVADOptions=void 0;var frame_processor_1=__webpack_require__(/*! ./frame-processor */\"./node_modules/@ricky0123/vad-web/dist/_common/frame-processor.js\");var messages_1=__webpack_require__(/*! ./messages */\"./node_modules/@ricky0123/vad-web/dist/_common/messages.js\");var models_1=__webpack_require__(/*! ./models */\"./node_modules/@ricky0123/vad-web/dist/_common/models.js\");var resampler_1=__webpack_require__(/*! ./resampler */\"./node_modules/@ricky0123/vad-web/dist/_common/resampler.js\");exports.defaultNonRealTimeVADOptions=_objectSpread2({},frame_processor_1.defaultFrameProcessorOptions);var PlatformAgnosticNonRealTimeVAD=/*#__PURE__*/function(){function PlatformAgnosticNonRealTimeVAD(modelFetcher,ort,options){var _this4=this;_classCallCheck(this,PlatformAgnosticNonRealTimeVAD);this.modelFetcher=modelFetcher;this.ort=ort;this.options=options;this.init=/*#__PURE__*/_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee6(){var model;return _regeneratorRuntime2().wrap(function _callee6$(_context6){while(1)switch(_context6.prev=_context6.next){case 0:_context6.next=2;return models_1.Silero[\"new\"](_this4.ort,_this4.modelFetcher);case 2:model=_context6.sent;_this4.frameProcessor=new frame_processor_1.FrameProcessor(model.process,model.reset_state,{frameSamples:_this4.options.frameSamples,positiveSpeechThreshold:_this4.options.positiveSpeechThreshold,negativeSpeechThreshold:_this4.options.negativeSpeechThreshold,redemptionFrames:_this4.options.redemptionFrames,preSpeechPadFrames:_this4.options.preSpeechPadFrames,minSpeechFrames:_this4.options.minSpeechFrames});_this4.frameProcessor.resume();case 5:case\"end\":return _context6.stop();}},_callee6);}));this.run=/*#__PURE__*/function(){var _ref2=_wrapAsyncGenerator(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee7(inputAudio,sampleRate){var resamplerOptions,resampler,frames,start,end,_iterator,_step,i,f,_yield$_awaitAsyncGen,_msg,_audio,_this$frameProcessor$,msg,audio;return _regeneratorRuntime2().wrap(function _callee7$(_context7){while(1)switch(_context7.prev=_context7.next){case 0:resamplerOptions={nativeSampleRate:sampleRate,targetSampleRate:16000,targetFrameSize:this.options.frameSamples};resampler=new resampler_1.Resampler(resamplerOptions);frames=resampler.process(inputAudio);_iterator=_createForOfIteratorHelper(_toConsumableArray(Array(frames.length)).keys());_context7.prev=4;_iterator.s();case 6:if((_step=_iterator.n()).done){_context7.next=26;break;}i=_step.value;f=frames[i];_context7.next=11;return _awaitAsyncGenerator(this.frameProcessor.process(f));case 11:_yield$_awaitAsyncGen=_context7.sent;_msg=_yield$_awaitAsyncGen.msg;_audio=_yield$_awaitAsyncGen.audio;_context7.t0=_msg;_context7.next=_context7.t0===messages_1.Message.SpeechStart?17:_context7.t0===messages_1.Message.SpeechEnd?19:23;break;case 17:start=i*this.options.frameSamples/16;return _context7.abrupt(\"break\",24);case 19:end=(i+1)*this.options.frameSamples/16;// @ts-ignore\n_context7.next=22;return{audio:_audio,start:start,end:end};case 22:return _context7.abrupt(\"break\",24);case 23:return _context7.abrupt(\"break\",24);case 24:_context7.next=6;break;case 26:_context7.next=31;break;case 28:_context7.prev=28;_context7.t1=_context7[\"catch\"](4);_iterator.e(_context7.t1);case 31:_context7.prev=31;_iterator.f();return _context7.finish(31);case 34:_this$frameProcessor$=this.frameProcessor.endSegment(),msg=_this$frameProcessor$.msg,audio=_this$frameProcessor$.audio;if(!(msg==messages_1.Message.SpeechEnd)){_context7.next=38;break;}_context7.next=38;return{audio:audio,// @ts-ignore\nstart:start,end:frames.length*this.options.frameSamples/16};case 38:case\"end\":return _context7.stop();}},_callee7,this,[[4,28,31,34]]);}));return function(_x2,_x3){return _ref2.apply(this,arguments);};}();(0,frame_processor_1.validateOptions)(options);}_createClass(PlatformAgnosticNonRealTimeVAD,null,[{key:\"_new\",value:function(){var _new2=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee8(modelFetcher,ort){var options,vad,_args7=arguments;return _regeneratorRuntime2().wrap(function _callee8$(_context8){while(1)switch(_context8.prev=_context8.next){case 0:options=_args7.length>2&&_args7[2]!==undefined?_args7[2]:{};vad=new this(modelFetcher,ort,_objectSpread2(_objectSpread2({},exports.defaultNonRealTimeVADOptions),options));_context8.next=4;return vad.init();case 4:return _context8.abrupt(\"return\",vad);case 5:case\"end\":return _context8.stop();}},_callee8,this);}));function _new(_x8,_x9){return _new2.apply(this,arguments);}return _new;}()}]);return PlatformAgnosticNonRealTimeVAD;}();exports.PlatformAgnosticNonRealTimeVAD=PlatformAgnosticNonRealTimeVAD;//# sourceMappingURL=non-real-time-vad.js.map\n/***/},/***/\"./node_modules/@ricky0123/vad-web/dist/_common/resampler.js\":/*!*******************************************************************!*\\\n  !*** ./node_modules/@ricky0123/vad-web/dist/_common/resampler.js ***!\n  \\*******************************************************************/ /***/function node_modulesRicky0123VadWebDist_commonResamplerJs(__unused_webpack_module,exports,__webpack_require__){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.Resampler=void 0;var logging_1=__webpack_require__(/*! ./logging */\"./node_modules/@ricky0123/vad-web/dist/_common/logging.js\");var Resampler=/*#__PURE__*/_createClass(function Resampler(options){var _this5=this;_classCallCheck(this,Resampler);this.options=options;this.process=function(audioFrame){var outputFrames=[];var _iterator2=_createForOfIteratorHelper(audioFrame),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var sample=_step2.value;_this5.inputBuffer.push(sample);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}while(_this5.inputBuffer.length*_this5.options.targetSampleRate/_this5.options.nativeSampleRate>_this5.options.targetFrameSize){var outputFrame=new Float32Array(_this5.options.targetFrameSize);var outputIndex=0;var inputIndex=0;while(outputIndex<_this5.options.targetFrameSize){var sum=0;var num=0;while(inputIndex<Math.min(_this5.inputBuffer.length,(outputIndex+1)*_this5.options.nativeSampleRate/_this5.options.targetSampleRate)){sum+=_this5.inputBuffer[inputIndex];num++;inputIndex++;}outputFrame[outputIndex]=sum/num;outputIndex++;}_this5.inputBuffer=_this5.inputBuffer.slice(inputIndex);outputFrames.push(outputFrame);}return outputFrames;};if(options.nativeSampleRate<16000){logging_1.log.error(\"nativeSampleRate is too low. Should have 16000 = targetSampleRate <= nativeSampleRate\");}this.inputBuffer=[];});exports.Resampler=Resampler;//# sourceMappingURL=resampler.js.map\n/***/},/***/\"./node_modules/@ricky0123/vad-web/dist/_common/utils.js\":/*!***************************************************************!*\\\n  !*** ./node_modules/@ricky0123/vad-web/dist/_common/utils.js ***!\n  \\***************************************************************/ /***/function node_modulesRicky0123VadWebDist_commonUtilsJs(__unused_webpack_module,exports){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.encodeWAV=exports.arrayBufferToBase64=exports.minFramesForTargetMS=void 0;function minFramesForTargetMS(targetDuration,frameSamples){var sr=arguments.length>2&&arguments[2]!==undefined?arguments[2]:16000;return Math.ceil(targetDuration*sr/1000/frameSamples);}exports.minFramesForTargetMS=minFramesForTargetMS;function arrayBufferToBase64(buffer){var binary=\"\";var bytes=new Uint8Array(buffer);var len=bytes.byteLength;for(var i=0;i<len;i++){binary+=String.fromCharCode(bytes[i]);}return btoa(binary);}exports.arrayBufferToBase64=arrayBufferToBase64;/*\nThis rest of this was mostly copied from https://github.com/linto-ai/WebVoiceSDK\n*/function encodeWAV(samples){var format=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;var sampleRate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:16000;var numChannels=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;var bitDepth=arguments.length>4&&arguments[4]!==undefined?arguments[4]:32;var bytesPerSample=bitDepth/8;var blockAlign=numChannels*bytesPerSample;var buffer=new ArrayBuffer(44+samples.length*bytesPerSample);var view=new DataView(buffer);/* RIFF identifier */writeString(view,0,\"RIFF\");/* RIFF chunk length */view.setUint32(4,36+samples.length*bytesPerSample,true);/* RIFF type */writeString(view,8,\"WAVE\");/* format chunk identifier */writeString(view,12,\"fmt \");/* format chunk length */view.setUint32(16,16,true);/* sample format (raw) */view.setUint16(20,format,true);/* channel count */view.setUint16(22,numChannels,true);/* sample rate */view.setUint32(24,sampleRate,true);/* byte rate (sample rate * block align) */view.setUint32(28,sampleRate*blockAlign,true);/* block align (channel count * bytes per sample) */view.setUint16(32,blockAlign,true);/* bits per sample */view.setUint16(34,bitDepth,true);/* data chunk identifier */writeString(view,36,\"data\");/* data chunk length */view.setUint32(40,samples.length*bytesPerSample,true);if(format===1){// Raw PCM\nfloatTo16BitPCM(view,44,samples);}else{writeFloat32(view,44,samples);}return buffer;}exports.encodeWAV=encodeWAV;function interleave(inputL,inputR){var length=inputL.length+inputR.length;var result=new Float32Array(length);var index=0;var inputIndex=0;while(index<length){result[index++]=inputL[inputIndex];result[index++]=inputR[inputIndex];inputIndex++;}return result;}function writeFloat32(output,offset,input){for(var i=0;i<input.length;i++,offset+=4){output.setFloat32(offset,input[i],true);}}function floatTo16BitPCM(output,offset,input){for(var i=0;i<input.length;i++,offset+=2){var s=Math.max(-1,Math.min(1,input[i]));output.setInt16(offset,s<0?s*0x8000:s*0x7fff,true);}}function writeString(view,offset,string){for(var i=0;i<string.length;i++){view.setUint8(offset+i,string.charCodeAt(i));}}//# sourceMappingURL=utils.js.map\n/***/},/***/\"./node_modules/@ricky0123/vad-web/dist/asset-path.js\":/*!************************************************************!*\\\n  !*** ./node_modules/@ricky0123/vad-web/dist/asset-path.js ***!\n  \\************************************************************/ /***/function node_modulesRicky0123VadWebDistAssetPathJs(__unused_webpack_module,exports){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.assetPath=void 0;var currentScript=window.document.currentScript;var basePath=\"\";if(currentScript){basePath=currentScript.src.replace(/#.*$/,\"\").replace(/\\?.*$/,\"\").replace(/\\/[^\\/]+$/,\"/\");}var assetPath=function assetPath(file){return basePath+file;};exports.assetPath=assetPath;//# sourceMappingURL=asset-path.js.map\n/***/},/***/\"./node_modules/@ricky0123/vad-web/dist/index.js\":/*!*******************************************************!*\\\n  !*** ./node_modules/@ricky0123/vad-web/dist/index.js ***!\n  \\*******************************************************/ /***/function node_modulesRicky0123VadWebDistIndexJs(__unused_webpack_module,exports,__webpack_require__){\"use strict\";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||(\"get\"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function get(){return m[k];}};}Object.defineProperty(o,k2,desc);}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!==\"default\"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.defaultRealTimeVADOptions=exports.AudioNodeVAD=exports.MicVAD=exports.NonRealTimeVAD=exports.Message=exports.FrameProcessor=exports.utils=void 0;var ort=__importStar(__webpack_require__(/*! onnxruntime-web */\"./node_modules/onnxruntime-web/dist/ort.min.js\"));var _common_1=__webpack_require__(/*! ./_common */\"./node_modules/@ricky0123/vad-web/dist/_common/index.js\");Object.defineProperty(exports,\"FrameProcessor\",{enumerable:true,get:function get(){return _common_1.FrameProcessor;}});Object.defineProperty(exports,\"Message\",{enumerable:true,get:function get(){return _common_1.Message;}});var model_fetcher_1=__webpack_require__(/*! ./model-fetcher */\"./node_modules/@ricky0123/vad-web/dist/model-fetcher.js\");var utils_1=__webpack_require__(/*! ./utils */\"./node_modules/@ricky0123/vad-web/dist/utils.js\");var NonRealTimeVAD=/*#__PURE__*/function(_common_1$PlatformAgn){_inherits(NonRealTimeVAD,_common_1$PlatformAgn);var _super=_createSuper(NonRealTimeVAD);function NonRealTimeVAD(){_classCallCheck(this,NonRealTimeVAD);return _super.apply(this,arguments);}_createClass(NonRealTimeVAD,null,[{key:\"new\",value:function(){var _new3=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee9(){var options,_args8=arguments;return _regeneratorRuntime2().wrap(function _callee9$(_context9){while(1)switch(_context9.prev=_context9.next){case 0:options=_args8.length>0&&_args8[0]!==undefined?_args8[0]:{};_context9.next=3;return this._new(model_fetcher_1.modelFetcher,ort,options);case 3:return _context9.abrupt(\"return\",_context9.sent);case 4:case\"end\":return _context9.stop();}},_callee9,this);}));function _new(){return _new3.apply(this,arguments);}return _new;}()}]);return NonRealTimeVAD;}(_common_1.PlatformAgnosticNonRealTimeVAD);exports.NonRealTimeVAD=NonRealTimeVAD;exports.utils=_objectSpread2({audioFileToArray:utils_1.audioFileToArray},_common_1.utils);var real_time_vad_1=__webpack_require__(/*! ./real-time-vad */\"./node_modules/@ricky0123/vad-web/dist/real-time-vad.js\");Object.defineProperty(exports,\"MicVAD\",{enumerable:true,get:function get(){return real_time_vad_1.MicVAD;}});Object.defineProperty(exports,\"AudioNodeVAD\",{enumerable:true,get:function get(){return real_time_vad_1.AudioNodeVAD;}});Object.defineProperty(exports,\"defaultRealTimeVADOptions\",{enumerable:true,get:function get(){return real_time_vad_1.defaultRealTimeVADOptions;}});//# sourceMappingURL=index.js.map\n/***/},/***/\"./node_modules/@ricky0123/vad-web/dist/model-fetcher.js\":/*!***************************************************************!*\\\n  !*** ./node_modules/@ricky0123/vad-web/dist/model-fetcher.js ***!\n  \\***************************************************************/ /***/function node_modulesRicky0123VadWebDistModelFetcherJs(__unused_webpack_module,exports,__webpack_require__){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.modelFetcher=void 0;var asset_path_1=__webpack_require__(/*! ./asset-path */\"./node_modules/@ricky0123/vad-web/dist/asset-path.js\");var modelFetcher=/*#__PURE__*/function(){var _ref8=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee10(){var modelURL;return _regeneratorRuntime2().wrap(function _callee10$(_context10){while(1)switch(_context10.prev=_context10.next){case 0:modelURL=(0,asset_path_1.assetPath)(\"silero_vad.onnx\");_context10.next=3;return fetch(modelURL).then(function(r){return r.arrayBuffer();});case 3:return _context10.abrupt(\"return\",_context10.sent);case 4:case\"end\":return _context10.stop();}},_callee10);}));return function modelFetcher(){return _ref8.apply(this,arguments);};}();exports.modelFetcher=modelFetcher;//# sourceMappingURL=model-fetcher.js.map\n/***/},/***/\"./node_modules/@ricky0123/vad-web/dist/real-time-vad.js\":/*!***************************************************************!*\\\n  !*** ./node_modules/@ricky0123/vad-web/dist/real-time-vad.js ***!\n  \\***************************************************************/ /***/function node_modulesRicky0123VadWebDistRealTimeVadJs(__unused_webpack_module,exports,__webpack_require__){\"use strict\";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||(\"get\"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function get(){return m[k];}};}Object.defineProperty(o,k2,desc);}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!==\"default\"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.AudioNodeVAD=exports.MicVAD=exports.defaultRealTimeVADOptions=void 0;var ort=__importStar(__webpack_require__(/*! onnxruntime-web */\"./node_modules/onnxruntime-web/dist/ort.min.js\"));var _common_1=__webpack_require__(/*! ./_common */\"./node_modules/@ricky0123/vad-web/dist/_common/index.js\");var model_fetcher_1=__webpack_require__(/*! ./model-fetcher */\"./node_modules/@ricky0123/vad-web/dist/model-fetcher.js\");var asset_path_1=__webpack_require__(/*! ./asset-path */\"./node_modules/@ricky0123/vad-web/dist/asset-path.js\");var _getWorkletURL=function _getWorkletURL(){return(0,asset_path_1.assetPath)(\"vad.worklet.bundle.min.js\");};exports.defaultRealTimeVADOptions=_objectSpread2(_objectSpread2({},_common_1.defaultFrameProcessorOptions),{},{onFrameProcessed:function onFrameProcessed(probabilities){},onVADMisfire:function onVADMisfire(){_common_1.log.debug(\"VAD misfire\");},onSpeechStart:function onSpeechStart(){_common_1.log.debug(\"Detected speech start\");},onSpeechEnd:function onSpeechEnd(){_common_1.log.debug(\"Detected speech end\");},workletURL:_getWorkletURL(),stream:undefined});var MicVAD=/*#__PURE__*/function(){function MicVAD(options){var _this6=this;_classCallCheck(this,MicVAD);this.options=options;this.listening=false;this.init=/*#__PURE__*/_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee11(){var source;return _regeneratorRuntime2().wrap(function _callee11$(_context11){while(1)switch(_context11.prev=_context11.next){case 0:if(!(_this6.options.stream===undefined)){_context11.next=6;break;}_context11.next=3;return navigator.mediaDevices.getUserMedia({audio:_objectSpread2(_objectSpread2({},_this6.options.additionalAudioConstraints),{},{channelCount:1,echoCancellation:true,autoGainControl:true,noiseSuppression:true})});case 3:_this6.stream=_context11.sent;_context11.next=7;break;case 6:_this6.stream=_this6.options.stream;case 7:_this6.audioContext=new AudioContext();source=new MediaStreamAudioSourceNode(_this6.audioContext,{mediaStream:_this6.stream});_context11.next=11;return AudioNodeVAD[\"new\"](_this6.audioContext,_this6.options);case 11:_this6.audioNodeVAD=_context11.sent;_this6.audioNodeVAD.receive(source);case 13:case\"end\":return _context11.stop();}},_callee11);}));this.pause=function(){_this6.audioNodeVAD.pause();_this6.listening=false;};this.start=function(){_this6.audioNodeVAD.start();_this6.listening=true;};(0,_common_1.validateOptions)(options);}_createClass(MicVAD,null,[{key:\"new\",value:function(){var _new4=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee12(){var options,vad,_args11=arguments;return _regeneratorRuntime2().wrap(function _callee12$(_context12){while(1)switch(_context12.prev=_context12.next){case 0:options=_args11.length>0&&_args11[0]!==undefined?_args11[0]:{};vad=new MicVAD(_objectSpread2(_objectSpread2({},exports.defaultRealTimeVADOptions),options));_context12.next=4;return vad.init();case 4:return _context12.abrupt(\"return\",vad);case 5:case\"end\":return _context12.stop();}},_callee12);}));function _new(){return _new4.apply(this,arguments);}return _new;}()}]);return MicVAD;}();exports.MicVAD=MicVAD;var AudioNodeVAD=/*#__PURE__*/function(){function AudioNodeVAD(ctx,options){var _this7=this;_classCallCheck(this,AudioNodeVAD);this.ctx=ctx;this.options=options;this.pause=function(){_this7.frameProcessor.pause();};this.start=function(){_this7.frameProcessor.resume();};this.receive=function(node){node.connect(_this7.entryNode);};this.processFrame=/*#__PURE__*/function(){var _ref10=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee13(frame){var _yield$_this7$framePr,probs,msg,audio;return _regeneratorRuntime2().wrap(function _callee13$(_context13){while(1)switch(_context13.prev=_context13.next){case 0:_context13.next=2;return _this7.frameProcessor.process(frame);case 2:_yield$_this7$framePr=_context13.sent;probs=_yield$_this7$framePr.probs;msg=_yield$_this7$framePr.msg;audio=_yield$_this7$framePr.audio;if(probs!==undefined){_this7.options.onFrameProcessed(probs);}_context13.t0=msg;_context13.next=_context13.t0===_common_1.Message.SpeechStart?10:_context13.t0===_common_1.Message.VADMisfire?12:_context13.t0===_common_1.Message.SpeechEnd?14:16;break;case 10:_this7.options.onSpeechStart();return _context13.abrupt(\"break\",17);case 12:_this7.options.onVADMisfire();return _context13.abrupt(\"break\",17);case 14:// @ts-ignore\n_this7.options.onSpeechEnd(audio);return _context13.abrupt(\"break\",17);case 16:return _context13.abrupt(\"break\",17);case 17:case\"end\":return _context13.stop();}},_callee13);}));return function(_x10){return _ref10.apply(this,arguments);};}();this.init=/*#__PURE__*/_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee15(){var vadNode,model;return _regeneratorRuntime2().wrap(function _callee15$(_context15){while(1)switch(_context15.prev=_context15.next){case 0:_context15.next=2;return _this7.ctx.audioWorklet.addModule(_this7.options.workletURL);case 2:vadNode=new AudioWorkletNode(_this7.ctx,\"vad-helper-worklet\",{processorOptions:{frameSamples:_this7.options.frameSamples}});_this7.entryNode=vadNode;_context15.next=6;return _common_1.Silero[\"new\"](ort,model_fetcher_1.modelFetcher);case 6:model=_context15.sent;_this7.frameProcessor=new _common_1.FrameProcessor(model.process,model.reset_state,{frameSamples:_this7.options.frameSamples,positiveSpeechThreshold:_this7.options.positiveSpeechThreshold,negativeSpeechThreshold:_this7.options.negativeSpeechThreshold,redemptionFrames:_this7.options.redemptionFrames,preSpeechPadFrames:_this7.options.preSpeechPadFrames,minSpeechFrames:_this7.options.minSpeechFrames});vadNode.port.onmessage=/*#__PURE__*/function(){var _ref12=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee14(ev){var _ev$data;var buffer,frame;return _regeneratorRuntime2().wrap(function _callee14$(_context14){while(1)switch(_context14.prev=_context14.next){case 0:_context14.t0=(_ev$data=ev.data)===null||_ev$data===void 0?void 0:_ev$data.message;_context14.next=_context14.t0===_common_1.Message.AudioFrame?3:8;break;case 3:buffer=ev.data.data;frame=new Float32Array(buffer);_context14.next=7;return _this7.processFrame(frame);case 7:return _context14.abrupt(\"break\",9);case 8:return _context14.abrupt(\"break\",9);case 9:case\"end\":return _context14.stop();}},_callee14);}));return function(_x11){return _ref12.apply(this,arguments);};}();case 9:case\"end\":return _context15.stop();}},_callee15);}));(0,_common_1.validateOptions)(options);}_createClass(AudioNodeVAD,null,[{key:\"new\",value:function(){var _new5=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee16(ctx){var options,vad,_args15=arguments;return _regeneratorRuntime2().wrap(function _callee16$(_context16){while(1)switch(_context16.prev=_context16.next){case 0:options=_args15.length>1&&_args15[1]!==undefined?_args15[1]:{};vad=new AudioNodeVAD(ctx,_objectSpread2(_objectSpread2({},exports.defaultRealTimeVADOptions),options));_context16.next=4;return vad.init();case 4:return _context16.abrupt(\"return\",vad);case 5:case\"end\":return _context16.stop();}},_callee16);}));function _new(_x12){return _new5.apply(this,arguments);}return _new;}()}]);return AudioNodeVAD;}();exports.AudioNodeVAD=AudioNodeVAD;//# sourceMappingURL=real-time-vad.js.map\n/***/},/***/\"./node_modules/@ricky0123/vad-web/dist/utils.js\":/*!*******************************************************!*\\\n  !*** ./node_modules/@ricky0123/vad-web/dist/utils.js ***!\n  \\*******************************************************/ /***/function node_modulesRicky0123VadWebDistUtilsJs(__unused_webpack_module,exports){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.audioFileToArray=void 0;function audioFileToArray(_x13){return _audioFileToArray.apply(this,arguments);}function _audioFileToArray(){_audioFileToArray=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee17(audioFileData){var ctx,reader,audioBuffer,_audioBuffer,out,i,j;return _regeneratorRuntime2().wrap(function _callee17$(_context17){while(1)switch(_context17.prev=_context17.next){case 0:ctx=new OfflineAudioContext(1,1,44100);reader=new FileReader();audioBuffer=null;_context17.next=5;return new Promise(function(res){reader.addEventListener(\"loadend\",function(ev){var audioData=reader.result;ctx.decodeAudioData(audioData,function(buffer){audioBuffer=buffer;ctx.startRendering().then(function(renderedBuffer){console.log(\"Rendering completed successfully\");res();})[\"catch\"](function(err){console.error(\"Rendering failed: \".concat(err));});},function(e){console.log(\"Error with decoding audio data: \".concat(e));});});reader.readAsArrayBuffer(audioFileData);});case 5:if(!(audioBuffer===null)){_context17.next=7;break;}throw Error(\"some shit\");case 7:_audioBuffer=audioBuffer;out=new Float32Array(_audioBuffer.length);for(i=0;i<_audioBuffer.length;i++){for(j=0;j<_audioBuffer.numberOfChannels;j++){// @ts-ignore\nout[i]+=_audioBuffer.getChannelData(j)[i];}}return _context17.abrupt(\"return\",{audio:out,sampleRate:_audioBuffer.sampleRate});case 11:case\"end\":return _context17.stop();}},_callee17);}));return _audioFileToArray.apply(this,arguments);}exports.audioFileToArray=audioFileToArray;//# sourceMappingURL=utils.js.map\n/***/},/***/\"./src/AudioEncoder.js\":/*!*****************************!*\\\n  !*** ./src/AudioEncoder.js ***!\n  \\*****************************/ /***/function srcAudioEncoderJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */convertToWavBlob:function convertToWavBlob(){return(/* binding */_convertToWavBlob);},/* harmony export */convertToWavBuffer:function convertToWavBuffer(){return(/* binding */_convertToWavBuffer);},/* harmony export */convertToWebMBlob:function convertToWebMBlob(){return(/* binding */_convertToWebMBlob);}/* harmony export */});/* harmony import */var _WavEncoder__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./WavEncoder */\"./src/WavEncoder.ts\");/**\n * Convert a Float32Array of audio samples to a WAV array buffer\n * @param {Float32Array} audioData - The audio samples\n * @returns {ArrayBuffer} - The audio in WAV format as an ArrayBuffer\n */function _convertToWavBuffer(audioData){var arrayBuffer=(0,_WavEncoder__WEBPACK_IMPORTED_MODULE_0__.encodeWAV)(audioData);return arrayBuffer;}/**\n * Convert a Float32Array of audio samples to a WAV Blob\n * @param {Float32Array} audioData - The audio samples\n * @returns {Blob} - The audio in WAV format\n */function _convertToWavBlob(audioData){var arrayBuffer=_convertToWavBuffer(audioData);return new Blob([arrayBuffer],{type:\"audio/wav\"});}/**\n * Convert a Float32Array of audio samples to a WAV Blob using WebM Opus encoding\n * This function is hella slow, so it's not recommended for real-time encoding\n * @param {Float32Array} audioData - The audio samples\n * @returns {Blob} - The audio in WebM format\n */function _convertToWebMBlob(audioFloat32Array,callback){// Create an offline audio context\nvar audioContext=new(window.AudioContext||window.webkitAudioContext)();// Create an empty stereo buffer at the sample rate of the audio you are working with\nvar audioBuffer=audioContext.createBuffer(1,audioFloat32Array.length,16000);// Copy the samples to the buffer\naudioBuffer.copyToChannel(audioFloat32Array,0);// Create a buffer source for our AudioContext\nvar source=audioContext.createBufferSource();source.buffer=audioBuffer;// Create a MediaStreamAudioDestinationNode\nvar dest=audioContext.createMediaStreamDestination();// Connect the source to the destination\nsource.connect(dest);// Create a new MediaRecorder\nvar mediaRecorder=new MediaRecorder(dest.stream,{mimeType:\"audio/webm;codecs=opus\"});// Collect the recorded chunks\nvar audioChunks=[];mediaRecorder.addEventListener(\"dataavailable\",function(event){audioChunks.push(event.data);});// Start and stop the recording to get the blob\nmediaRecorder.addEventListener(\"stop\",function(){var audioBlob=new Blob(audioChunks,{type:\"audio/webm;codecs=opus\"});// Invoke the callback with the audioBlob\ncallback(audioBlob);});// Start the source buffer and MediaRecorder\nmediaRecorder.start();source.start(0);// When the buffer source ends, stop the MediaRecorder\nsource.addEventListener(\"ended\",function(){mediaRecorder.stop();});}/***/},/***/\"./src/ConfigModule.js\":/*!*****************************!*\\\n  !*** ./src/ConfigModule.js ***!\n  \\*****************************/ /***/function srcConfigModuleJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */config:function config(){return(/* binding */_config);}/* harmony export */});var _config={appServerUrl:\"https://localhost:4443\",apiServerUrl:\"http://localhost:8080\"};/***/},/***/\"./src/LoggingModule.js\":/*!******************************!*\\\n  !*** ./src/LoggingModule.js ***!\n  \\******************************/ /***/function srcLoggingModuleJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */serializeStateValue:function serializeStateValue(){return(/* binding */_serializeStateValue);}/* harmony export */});function _serializeStateValue(stateValue){if(typeof stateValue===\"string\"){return stateValue;}return Object.keys(stateValue).map(function(key){return\"\".concat(key,\":\").concat(_serializeStateValue(stateValue[key]));}).join(\",\");}/***/},/***/\"./src/RequestInterceptor.js\":/*!***********************************!*\\\n  !*** ./src/RequestInterceptor.js ***!\n  \\***********************************/ /***/function srcRequestInterceptorJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */setupInterceptors:function setupInterceptors(){return(/* binding */_setupInterceptors);}/* harmony export */});/* harmony import */var _ConfigModule__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./ConfigModule */\"./src/ConfigModule.js\");var filesToRedirect=[\"silero_vad.onnx\",\"ort-wasm-simd.wasm\",\"ort.min.js.map\"];// Function to redirect specific XMLHttpRequests\nfunction redirectXMLHttpRequest(open){XMLHttpRequest.prototype.open=function(method,url,async,user,password){var filename=url.split(\"/\").pop();if(filename&&filesToRedirect.includes(filename)){arguments[1]=\"\".concat(_ConfigModule__WEBPACK_IMPORTED_MODULE_0__.config.appServerUrl,\"/\").concat(filename);}open.apply(this,arguments);};}// Function to redirect specific fetch requests\nfunction redirectFetch(_fetch){window.fetch=function(url,opts){var filename=url.split(\"/\").pop();if(filename&&filesToRedirect.includes(filename)){arguments[0]=\"\".concat(_ConfigModule__WEBPACK_IMPORTED_MODULE_0__.config.appServerUrl,\"/\").concat(filename);}return _fetch.apply(this,arguments);};}// Function to set up the interceptors\nfunction _setupInterceptors(){redirectXMLHttpRequest(XMLHttpRequest.prototype.open);redirectFetch(window.fetch);}/***/},/***/\"./src/UserAgentModule.js\":/*!********************************!*\\\n  !*** ./src/UserAgentModule.js ***!\n  \\********************************/ /***/function srcUserAgentModuleJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */addDeviceFlags:function addDeviceFlags(){return(/* binding */_addDeviceFlags);},/* harmony export */addUserAgentFlags:function addUserAgentFlags(){return(/* binding */_addUserAgentFlags);},/* harmony export */addViewFlags:function addViewFlags(){return(/* binding */_addViewFlags);},/* harmony export */enterMobileMode:function enterMobileMode(){return(/* binding */_enterMobileMode);},/* harmony export */exitMobileMode:function exitMobileMode(){return(/* binding */_exitMobileMode);},/* harmony export */isMobileDevice:function isMobileDevice(){return(/* binding */_isMobileDevice);},/* harmony export */isMobileView:function isMobileView(){return(/* binding */_isMobileView);},/* harmony export */isSafari:function isSafari(){return(/* binding */_isSafari);}/* harmony export */});function _isSafari(){return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);}function _isMobileDevice(){return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||window.matchMedia(\"(max-width: 768px)\").matches;}// this function determines whether to show the mobile view or not\nfunction _isMobileView(){var userViewPreference=null;try{userViewPreference=localStorage.getItem(\"userViewPreference\");}catch(e){console.warn(\"Could not access localStorage: \",e);}var prefersMobile=false;if(userViewPreference){prefersMobile=userViewPreference===\"mobile\";}// Make sure isMobileDevice is defined or imported\nreturn _isMobileDevice()&&prefersMobile;}function _exitMobileMode(){localStorage.setItem(\"userViewPreference\",\"desktop\");// Save preference\nvar element=document.documentElement;element.classList.remove(\"mobile-view\");element.classList.add(\"desktop-view\");}function _enterMobileMode(){localStorage.setItem(\"userViewPreference\",\"mobile\");// Save preference\nvar element=document.documentElement;element.classList.remove(\"desktop-view\");element.classList.add(\"mobile-view\");}function _addUserAgentFlags(){var isFirefoxAndroid=/Firefox/.test(navigator.userAgent)&&/Android/.test(navigator.userAgent);var element=document.documentElement;if(isFirefoxAndroid){element.classList.add(\"firefox-android\");}_addDeviceFlags(element);_addViewFlags(element);}function _addDeviceFlags(element){if(_isMobileDevice()){element.classList.add(\"mobile-device\");}}function _addViewFlags(element){if(_isMobileView()){element.classList.remove(\"desktop-view\");element.classList.add(\"mobile-view\");}else{element.classList.remove(\"mobile-view\");element.classList.add(\"desktop-view\");}}/***/},/***/\"./src/state-machines/AudioInputMachine.js\":/*!*************************************************!*\\\n  !*** ./src/state-machines/AudioInputMachine.js ***!\n  \\*************************************************/ /***/function srcStateMachinesAudioInputMachineJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */audioInputMachine:function audioInputMachine(){return(/* binding */_audioInputMachine);}/* harmony export */});/* harmony import */var xstate__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! xstate */\"./node_modules/xstate/es/actions.js\");/* harmony import */var xstate__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(/*! xstate */\"./node_modules/xstate/es/Machine.js\");/* harmony import */var _ricky0123_vad_web__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! @ricky0123/vad-web */\"./node_modules/@ricky0123/vad-web/dist/index.js\");/* harmony import */var _ricky0123_vad_web__WEBPACK_IMPORTED_MODULE_1___default=/*#__PURE__*/__webpack_require__.n(_ricky0123_vad_web__WEBPACK_IMPORTED_MODULE_1__);/* harmony import */var _ConfigModule__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ../ConfigModule */\"./src/ConfigModule.js\");/* harmony import */var _RequestInterceptor__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(/*! ../RequestInterceptor */\"./src/RequestInterceptor.js\");/* harmony import */var _AudioEncoder__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(/*! ../AudioEncoder */\"./src/AudioEncoder.js\");function _typeof(obj){\"@babel/helpers - typeof\";return _typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&\"function\"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;},_typeof(obj);}function _regeneratorRuntime(){\"use strict\";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function _regeneratorRuntime(){return exports;};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value;},$Symbol=\"function\"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||\"@@iterator\",asyncIteratorSymbol=$Symbol.asyncIterator||\"@@asyncIterator\",toStringTagSymbol=$Symbol.toStringTag||\"@@toStringTag\";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key];}try{define({},\"\");}catch(err){define=function define(obj,key,value){return obj[key]=value;};}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,\"_invoke\",{value:makeInvokeMethod(innerFn,self,context)}),generator;}function tryCatch(fn,obj,arg){try{return{type:\"normal\",arg:fn.call(obj,arg)};}catch(err){return{type:\"throw\",arg:err};}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,function(){return this;});var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){[\"next\",\"throw\",\"return\"].forEach(function(method){define(prototype,method,function(arg){return this._invoke(method,arg);});});}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if(\"throw\"!==record.type){var result=record.arg,value=result.value;return value&&\"object\"==_typeof(value)&&hasOwn.call(value,\"__await\")?PromiseImpl.resolve(value.__await).then(function(value){invoke(\"next\",value,resolve,reject);},function(err){invoke(\"throw\",err,resolve,reject);}):PromiseImpl.resolve(value).then(function(unwrapped){result.value=unwrapped,resolve(result);},function(error){return invoke(\"throw\",error,resolve,reject);});}reject(record.arg);}var previousPromise;defineProperty(this,\"_invoke\",{value:function value(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl(function(resolve,reject){invoke(method,arg,resolve,reject);});}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg();}});}function makeInvokeMethod(innerFn,self,context){var state=\"suspendedStart\";return function(method,arg){if(\"executing\"===state)throw new Error(\"Generator is already running\");if(\"completed\"===state){if(\"throw\"===method)throw arg;return{value:void 0,done:!0};}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult;}}if(\"next\"===context.method)context.sent=context._sent=context.arg;else if(\"throw\"===context.method){if(\"suspendedStart\"===state)throw state=\"completed\",context.arg;context.dispatchException(context.arg);}else\"return\"===context.method&&context.abrupt(\"return\",context.arg);state=\"executing\";var record=tryCatch(innerFn,self,context);if(\"normal\"===record.type){if(state=context.done?\"completed\":\"suspendedYield\",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done};}\"throw\"===record.type&&(state=\"completed\",context.method=\"throw\",context.arg=record.arg);}};}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(undefined===method)return context.delegate=null,\"throw\"===methodName&&delegate.iterator[\"return\"]&&(context.method=\"return\",context.arg=undefined,maybeInvokeDelegate(delegate,context),\"throw\"===context.method)||\"return\"!==methodName&&(context.method=\"throw\",context.arg=new TypeError(\"The iterator does not provide a '\"+methodName+\"' method\")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if(\"throw\"===record.type)return context.method=\"throw\",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,\"return\"!==context.method&&(context.method=\"next\",context.arg=undefined),context.delegate=null,ContinueSentinel):info:(context.method=\"throw\",context.arg=new TypeError(\"iterator result is not an object\"),context.delegate=null,ContinueSentinel);}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry);}function resetTryEntry(entry){var record=entry.completion||{};record.type=\"normal\",delete record.arg,entry.completion=record;}function Context(tryLocsList){this.tryEntries=[{tryLoc:\"root\"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0);}function values(iterable){if(iterable||\"\"===iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if(\"function\"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=undefined,next.done=!0,next;};return next.next=next;}}throw new TypeError(_typeof(iterable)+\" is not iterable\");}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,\"constructor\",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,\"constructor\",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,\"GeneratorFunction\"),exports.isGeneratorFunction=function(genFun){var ctor=\"function\"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||\"GeneratorFunction\"===(ctor.displayName||ctor.name));},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,\"GeneratorFunction\")),genFun.prototype=Object.create(Gp),genFun;},exports.awrap=function(arg){return{__await:arg};},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,function(){return this;}),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next();});},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,\"Generator\"),define(Gp,iteratorSymbol,function(){return this;}),define(Gp,\"toString\",function(){return\"[object Generator]\";}),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next;}return next.done=!0,next;};},exports.values=values,Context.prototype={constructor:Context,reset:function reset(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=undefined,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)\"t\"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined);},stop:function stop(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if(\"throw\"===rootRecord.type)throw rootRecord.arg;return this.rval;},dispatchException:function dispatchException(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type=\"throw\",record.arg=exception,context.next=loc,caught&&(context.method=\"next\",context.arg=undefined),!!caught;}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if(\"root\"===entry.tryLoc)return handle(\"end\");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,\"catchLoc\"),hasFinally=hasOwn.call(entry,\"finallyLoc\");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);}else{if(!hasFinally)throw new Error(\"try statement without catch or finally\");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc);}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,\"finallyLoc\")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break;}}finallyEntry&&(\"break\"===type||\"continue\"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method=\"next\",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record);},complete:function complete(record,afterLoc){if(\"throw\"===record.type)throw record.arg;return\"break\"===record.type||\"continue\"===record.type?this.next=record.arg:\"return\"===record.type?(this.rval=this.arg=record.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel;},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel;}},\"catch\":function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if(\"throw\"===record.type){var thrown=record.arg;resetTryEntry(entry);}return thrown;}}throw new Error(\"illegal catch attempt\");},delegateYield:function delegateYield(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},\"next\"===this.method&&(this.arg=undefined),ContinueSentinel;}},exports;}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,\"next\",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,\"throw\",err);}_next(undefined);});};}var log=xstate__WEBPACK_IMPORTED_MODULE_0__.log;/* set URLs for VAD resources */(0,_RequestInterceptor__WEBPACK_IMPORTED_MODULE_3__.setupInterceptors)();var fullWorkletURL=\"\".concat(_ConfigModule__WEBPACK_IMPORTED_MODULE_2__.config.appServerUrl,\"/vad.worklet.bundle.min.js\");var EventBus=window.EventBus;var audioMimeType=\"audio/wav\";var speechStartTime=0;var threshold=1000;// 1000 ms = 1 second, about the length of \"Hey, Pi\"\nvar microphone;function setupRecording(_x){return _setupRecording.apply(this,arguments);}function _setupRecording(){_setupRecording=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(callback){var stream;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:if(!microphone){_context.next=2;break;}return _context.abrupt(\"return\");case 2:_context.prev=2;_context.next=5;return navigator.mediaDevices.getUserMedia({audio:{channelCount:1,echoCancellation:true,autoGainControl:true,noiseSuppression:true}});case 5:stream=_context.sent;_context.next=8;return _ricky0123_vad_web__WEBPACK_IMPORTED_MODULE_1__.MicVAD[\"new\"]({workletURL:fullWorkletURL,stream:stream,positiveSpeechThreshold:0.8,minSpeechFrames:5,preSpeechPadFrames:10,onSpeechStart:function onSpeechStart(){console.log(\"Speech started\");speechStartTime=Date.now();},onSpeechEnd:function onSpeechEnd(rawAudioData){console.log(\"Speech ended\");var audioBlob=(0,_AudioEncoder__WEBPACK_IMPORTED_MODULE_4__.convertToWavBlob)(rawAudioData);EventBus.emit(\"audio:dataavailable\",{blob:audioBlob});},onVADMisfire:function onVADMisfire(){console.log(\"VAD misfire. Audio was not speech.\");}});case 8:microphone=_context.sent;if(typeof callback===\"function\"){callback();}_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](2);console.error(\"VAD failed to load\",_context.t0);case 15:case\"end\":return _context.stop();}},_callee,null,[[2,12]]);}));return _setupRecording.apply(this,arguments);}function tearDownRecording(){if(microphone){microphone.pause();}microphone=null;}var _audioInputMachine=(0,xstate__WEBPACK_IMPORTED_MODULE_5__.createMachine)({/** @xstate-layout N4IgpgJg5mDOIC5QEMCuECWB7AkgOwAdUAXAOgCcwAbMZWSAYmQGMBHVDSgbQAYBdRKAJZYGYtjyCQAD0QBGAGwBmUgFYANCACeiJXIAcpBQHYAnAtP6l+gCw2lAJgU2Avi81pMuQiVIt2nBh4UAwQWHhgpEEAblgA1pGe2PhEZP4c5EFQCDFYzMji4bx8xVLCooWSSDKIqg6aOgj6xnJqCqo8qtbKpjwODm4e6Mk+aWwZWQxg5ORY5KQEVAUAZnMAtn7D3ql+44HBOXix+ZXFpdXlYhJSsghyxioa2oj9qqT97Q-Wdo4KgyBJba+dKcRiUGh0MDnIQiK7hG7yB5qBqIfStDo8HhyHj6Wz2Jxyf6AlLAvaUCBRCA0BiwYjIcjEaEgS6VBEIGxyFSWezGJ6NfTmUhyVQKRSmbFKZQtIlbEljALkihgZhzTDBGnELAEABKYHYcGIkCZLOu1VuJgUaiUvQUDj5iHFrRsAo6DnsFmMnRlXjluwVkCVKvIapCEAKyAAgtFkBglgAjGjG2Gss21Bw8NT6VSmJS8lFNO2kGwOcw8BQKHiS3OE9wA2WjP0ZAMEMB4EMAZU1BA1WqTFVNoFucjkOaMdvzphspiFjgeikrUprQx9DZBipbbayna1oXDUZj8cT-DKyYHNQQk5UVnTenHzwLb1MJYr5YX1e9Ix2a4DtK1LYgDB9nCVSDvII4qLa9oIJ6bz3OYSjOjYXTGKKbi1ngWAQHAUjEqMJ79vCqYIAAtAo+bEY+phUbyPDFs4T6obWuE7OCtD0BA+HAWyxb5sONhGFiqhfHivxLnWK5fmSWScSmoHsumRiIbmUH9NOw6WH0qiqNiVFKB+QLyk2HEXKehFyQ4+gOEWtjKfmQkqHBr6CdpSiqPpvrfhSGBUmAMlnrcShKBmSl5ve4rTsoDhzhWVbSkx9aSf6FKUEGIZ+WZ55dJaJgGKFjQMaQuJRXoMWLu5q5ks2rYdl26UgeetjTlRDi5VBT7GKQ1jFfOsVicxpJJaQv4EP+dVsnIJatBZE2epOWZOG1E2kC0Fb6AoVi5mWaEuEAA */context:{waitingToStop:false},id:\"audioInput\",initial:\"released\",states:{released:{on:{acquire:{target:\"acquiring\"}}},acquiring:{description:\"Acquiring the microphone. Waits until asynchronous call has completed.\",invoke:{src:\"acquireMicrophone\",onDone:{target:\"acquired\"},onError:{target:\"released\",actions:\"logError\"}}},acquired:{description:\"Microphone acquired and ready to start recording.\",initial:\"idle\",states:{idle:{on:{start:{target:\"recording\",actions:{type:\"startRecording\",cond:\"microphoneAcquired\"}}}},recording:{on:{stopRequested:{target:\"pendingStop\"},dataAvailable:{actions:{type:\"sendData\",params:{}},internal:true}}},pendingStop:{description:\"Waiting for the media recording device to stop recording.\",on:{stop:{target:\"stopped\"},dataAvailable:{target:\"stopped\",actions:{type:\"sendData\",params:{}}}},entry:\"prepareStop\"},stopped:{entry:\"notifyStopped\",always:\"idle\"}},on:{release:{target:\"released\",actions:{type:\"releaseMicrophone\"}}}}},predictableActionArguments:true,preserveActionOrder:true},{actions:{startRecording:function startRecording(context,event){context.recordingStartTime=Date.now();// Start recording\nif(microphone&&microphone.listening===false){microphone.start();}EventBus.emit(\"saypi:userSpeaking\");},prepareStop:function prepareStop(context,event){if(microphone&&microphone.listening===true){context.waitingToStop=true;}},notifyStopped:function notifyStopped(context,event){var recordingStopTime=Date.now();var recordingDuration=recordingStopTime-context.recordingStartTime;EventBus.emit(\"saypi:userFinishedSpeaking\",{durationRecording:recordingDuration});},sendData:function sendData(context,event){var audioBlob=event.blob;var sizeInKb=(audioBlob.byteLength/1024).toFixed(2);// Convert to kilobytes and keep 2 decimal places\nconsole.log(\"Sending \".concat(sizeInKb,\"kb of audio data to server\"));if(context.waitingToStop===true){microphone.pause();context.waitingToStop=false;}// Get the stop time and calculate the duration\nvar speechStopTime=Date.now();var speechDuration=speechStopTime-speechStartTime;// If the duration is greater than the threshold, upload the audio for transcription\nif(sizeInKb>0){// Upload the audio to the server for transcription\nEventBus.emit(\"saypi:userStoppedSpeaking\",{duration:speechDuration,blob:audioBlob});}},releaseMicrophone:function releaseMicrophone(context,event){tearDownRecording();},logError:function logError(context,event){console.error(\"Error acquiring microphone: \",event.data);}},services:{acquireMicrophone:function acquireMicrophone(context,event,_ref){var send=_ref.send;return new Promise(function(resolve,reject){setupRecording(function(){if(microphone){resolve();}else{reject(new Error(\"Failed to acquire microphone resource.\"));}});});}},guards:{microphoneAcquired:function microphoneAcquired(context,event){return microphone!==null;},hasData:function hasData(context,event){return context.audioDataChunks.length>0;}},delays:{}});/***/},/***/\"./src/state-machines/AudioOutputMachine.js\":/*!**************************************************!*\\\n  !*** ./src/state-machines/AudioOutputMachine.js ***!\n  \\**************************************************/ /***/function srcStateMachinesAudioOutputMachineJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */audioOutputMachine:function audioOutputMachine(){return(/* binding */_audioOutputMachine);}/* harmony export */});/* harmony import */var xstate__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! xstate */\"./node_modules/xstate/es/Machine.js\");/* harmony import */var xstate__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! xstate */\"./node_modules/xstate/es/index.js\");/* harmony import */var _UserAgentModule__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ../UserAgentModule */\"./src/UserAgentModule.js\");var EventBus=window.EventBus;var audioElement=document.querySelector(\"audio\");if(!audioElement){console.error(\"Audio element not found in output machine!\");}var _audioOutputMachine=(0,xstate__WEBPACK_IMPORTED_MODULE_1__.createMachine)({/** @xstate-layout N4IgpgJg5mDOIC5QEMCuECWB7A8qgLgA4EDEYAtofhpANoAMAuoqIVrBtVgHYsgCeiALQBGAOwBWADQgAHohEBOACzKAdMrEA2LQA4ATPq0iJW-QF9zMtJlwFi+NRggAbMCRdZkEWPmQAnfAZmJBA2Di5eUPkEQwk1aQFERX1FNXoM+hMAZnoJXRFsrUtrdGw8IgI1T28MbigPLwhIcjA-CGQ-YL5wzmwo0BiJfRlBBAKEzPpFDPFdbP1lEpAbcvsqmuaINX8wb34SQhdkfm7Q3si+GJEsrQTsmbNEsdTsybEDD7yCouXVu0qjk2kDURxOdQahDQsDAZ1Y7D6PCuySM90UIn0GKMym+o0Qqn0ai0C0+um+hWKVhWZQBDmqTRBYP4ELI3C2cLCCMu0RRdwkDwxWK0OPyeIQ4noan0Eg++i++UK+T+NIqdOB2yZLIAxshuEz8AALfxYVBQA0ci79ZEIRQytRibTTehaPLZbLzMXDMT23QzB1khW-Kn-VUbBka47M+okC1cq08m2o-nozGGYW4pIIB53Yn6UnkoOlWyhoHh0HQyCHSOxiLxwYKLLqIpiRZmbEZsbZZS6NSFPNygM-SlFtaA+neRkViAkXabGuIgZyBR5ntiG6KRRt9OizPKW32iSzfkFiTK4vrUsT7ZgNmVmFgADWdCYPTjSITpj5Yno2Qxz0QRSEn2-r0GIyjiOIlhUtwWDNPAoQhher61u+9YIEIWhikIRiEqewYqheTiuGAyELtaygjJm2hvKkIh6EoLbdj+Z6jmqTQQqR3JoXRvr2iINwykYJhmGKvGHkeHyHroujKHhI60mGV6cXWS6xBIaTJs60qiYSkhfHu+hFO6igsQpl5bDsewQGM8IoYuMQUeomlPGK+hZESCwgWBEFiKZJbjhZmr1MpqGqVoiirqoMnOq67rZGKCzqH2+aBsO1LnmO6rlqgMIQCF9kKAJRLiK2aYiroCXge8KVDn5hFZTeWz5dauTes52mZhIdq5jVFJQeYQA */id:\"audioOutput\",context:{autoplay:false,audioElement:audioElement},initial:\"idle\",states:{idle:{on:{loadstart:\"loading\"}},loading:{on:{loadedmetadata:\"loaded\"}},loaded:{initial:\"ready\",on:{emptied:\"idle\"},states:{ready:{description:\"Audio has loaded and is ready to start playing (further buffering may be required to reach the end).\",on:{play:\"playing\"},entry:{type:\"emitEvent\",params:{eventName:\"saypi:ready\"}}},playing:{on:{pause:\"paused\",ended:\"ended\",canplaythrough:{target:\"playing\",internal:true}},always:{target:\"paused\",cond:\"isSafariAutoPlay\",actions:[\"requestPause\",{type:\"emitEvent\",params:{eventName:\"saypi:safariBlocked\"}}]},entry:[{type:\"emitEvent\",params:{eventName:\"saypi:piSpeaking\"}}],exit:[{type:\"emitEvent\",params:{eventName:\"saypi:piStoppedSpeaking\"}},(0,xstate__WEBPACK_IMPORTED_MODULE_2__.assign)({autoplay:true,audioElement:function audioElement(context){return context.audioElement;}})]},paused:{on:{play:\"playing\",reload:{target:\"#audioOutput.loading\",description:\"Reload the audio stream for Safari. This is the only command that external modules can send the machine.\",actions:[(0,xstate__WEBPACK_IMPORTED_MODULE_2__.assign)(function(context){return{autoplay:false,audioElement:context.audioElement};}),\"requestReload\"],cond:\"isSafari\"}}},ended:{on:{seeked:{target:\"#audioOutput.loaded.ready\",description:\"An ended track is seeked back to earlier in the track.\"}},entry:[{type:\"emitEvent\",params:{eventName:\"saypi:piFinishedSpeaking\"}}]}}}},predictableActionArguments:true,preserveActionOrder:true},{actions:{emitEvent:function emitEvent(context,event,_ref){var action=_ref.action;EventBus.emit(action.params.eventName);},requestPause:function requestPause(context,event){context.audioElement.pause();},seekToEnd:function seekToEnd(context,event){var audio=context.audioElement;if(audio.duration&&!audio.ended&&audio.currentTime<audio.duration){audio.currentTime=audio.duration;// seek the audio to the end\naudio.play();// trigger the ended event\n}EventBus.emit(\"saypi:piFinishedSpeaking\");},requestReload:function requestReload(context){var audio=context.audioElement;audio.load();audio.play();}},guards:{isSafari:function isSafari(context,event){return(0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_0__.isSafari)();},isSafariAutoPlay:function isSafariAutoPlay(context,event){return(0,_UserAgentModule__WEBPACK_IMPORTED_MODULE_0__.isSafari)()&&context.autoplay;}}});/***/},/***/\"./node_modules/onnxruntime-web/dist/ort.min.js\":/*!******************************************************!*\\\n  !*** ./node_modules/onnxruntime-web/dist/ort.min.js ***!\n  \\******************************************************/ /***/function node_modulesOnnxruntimeWebDistOrtMinJs(module){/*!\n* ONNX Runtime Web v1.15.1\n* Copyright (c) Microsoft Corporation. All rights reserved.\n* Licensed under the MIT License.\n*/!function(e,t){true?module.exports=t():0;}(self,function(){return function(){var __webpack_modules__={8453:function _(e,t,n){\"use strict\";n.r(t),n.d(t,{InferenceSession:function InferenceSession(){return f;},Tensor:function Tensor(){return p;},env:function env(){return a;},registerBackend:function registerBackend(){return i;}});var r={},o=[],i=function i(e,t,n){if(!t||\"function\"!=typeof t.init||\"function\"!=typeof t.createSessionHandler)throw new TypeError(\"not a valid backend\");{var _i2=r[e];if(void 0===_i2)r[e]={backend:t,priority:n};else{if(_i2.priority>n)return;if(_i2.priority===n&&_i2.backend!==t)throw new Error(\"cannot register backend \\\"\".concat(e,\"\\\" using priority \").concat(n));}if(n>=0){var _t=o.indexOf(e);-1!==_t&&o.splice(_t,1);for(var _t2=0;_t2<o.length;_t2++)if(r[o[_t2]].priority<=n)return void o.splice(_t2,0,e);o.push(e);}}},a=new(/*#__PURE__*/function(){function _class(){_classCallCheck(this,_class);this.wasm={},this.webgl={},this.webgpu={},this.logLevelInternal=\"warning\";}_createClass(_class,[{key:\"logLevel\",get:function get(){return this.logLevelInternal;},set:function set(e){if(void 0!==e){if(\"string\"!=typeof e||-1===[\"verbose\",\"info\",\"warning\",\"error\",\"fatal\"].indexOf(e))throw new Error(\"Unsupported logging level: \".concat(e));this.logLevelInternal=e;}}}]);return _class;}())(),s=new Map([[\"float32\",Float32Array],[\"uint8\",Uint8Array],[\"int8\",Int8Array],[\"uint16\",Uint16Array],[\"int16\",Int16Array],[\"int32\",Int32Array],[\"bool\",Uint8Array],[\"float64\",Float64Array],[\"uint32\",Uint32Array]]),u=new Map([[Float32Array,\"float32\"],[Uint8Array,\"uint8\"],[Int8Array,\"int8\"],[Uint16Array,\"uint16\"],[Int16Array,\"int16\"],[Int32Array,\"int32\"],[Float64Array,\"float64\"],[Uint32Array,\"uint32\"]]);var l=!1;var c=/*#__PURE__*/function(){function c(e,t,n){_classCallCheck(this,c);var r,o,i;if(function(){if(!l){l=!0;var _e2=\"undefined\"!=typeof BigInt64Array&&\"function\"==typeof BigInt64Array.from,_t3=\"undefined\"!=typeof BigUint64Array&&\"function\"==typeof BigUint64Array.from;_e2&&(s.set(\"int64\",BigInt64Array),u.set(BigInt64Array,\"int64\")),_t3&&(s.set(\"uint64\",BigUint64Array),u.set(BigUint64Array,\"uint64\"));}}(),\"string\"==typeof e){if(r=e,i=n,\"string\"===e){if(!Array.isArray(t))throw new TypeError(\"A string tensor's data must be a string array.\");o=t;}else{var _n2=s.get(e);if(void 0===_n2)throw new TypeError(\"Unsupported tensor type: \".concat(e,\".\"));if(Array.isArray(t))o=_n2.from(t);else{if(!(t instanceof _n2))throw new TypeError(\"A \".concat(r,\" tensor's data must be type of \").concat(_n2));o=t;}}}else if(i=t,Array.isArray(e)){if(0===e.length)throw new TypeError(\"Tensor type cannot be inferred from an empty array.\");var _t4=_typeof2(e[0]);if(\"string\"===_t4)r=\"string\",o=e;else{if(\"boolean\"!==_t4)throw new TypeError(\"Invalid element type of data array: \".concat(_t4,\".\"));r=\"bool\",o=Uint8Array.from(e);}}else{var _t5=u.get(e.constructor);if(void 0===_t5)throw new TypeError(\"Unsupported type for tensor data: \".concat(e.constructor,\".\"));r=_t5,o=e;}if(void 0===i)i=[o.length];else if(!Array.isArray(i))throw new TypeError(\"A tensor's dims must be a number array\");var a=function(e){var t=1;for(var _n3=0;_n3<e.length;_n3++){var _r2=e[_n3];if(\"number\"!=typeof _r2||!Number.isSafeInteger(_r2))throw new TypeError(\"dims[\".concat(_n3,\"] must be an integer, got: \").concat(_r2));if(_r2<0)throw new RangeError(\"dims[\".concat(_n3,\"] must be a non-negative integer, got: \").concat(_r2));t*=_r2;}return t;}(i);if(a!==o.length)throw new Error(\"Tensor's size(\".concat(a,\") does not match data length(\").concat(o.length,\").\"));this.dims=i,this.type=r,this.data=o,this.size=a;}_createClass(c,[{key:\"toDataURL\",value:function toDataURL(e){var t=document.createElement(\"canvas\");t.width=this.dims[3],t.height=this.dims[2];var n=t.getContext(\"2d\");if(null!=n){var _r3,_o2;void 0!==(e===null||e===void 0?void 0:e.tensorLayout)&&\"NHWC\"===e.tensorLayout?(_r3=this.dims[2],_o2=this.dims[3]):(_r3=this.dims[3],_o2=this.dims[2]);var _i3=void 0!==(e===null||e===void 0?void 0:e.format)?e.format:\"RGB\",_a2=e===null||e===void 0?void 0:e.norm;var _s2,_u;void 0===_a2||void 0===_a2.mean?_s2=[255,255,255,255]:\"number\"==typeof _a2.mean?_s2=[_a2.mean,_a2.mean,_a2.mean,_a2.mean]:(_s2=[_a2.mean[0],_a2.mean[1],_a2.mean[2],0],void 0!==_a2.mean[3]&&(_s2[3]=_a2.mean[3])),void 0===_a2||void 0===_a2.bias?_u=[0,0,0,0]:\"number\"==typeof _a2.bias?_u=[_a2.bias,_a2.bias,_a2.bias,_a2.bias]:(_u=[_a2.bias[0],_a2.bias[1],_a2.bias[2],0],void 0!==_a2.bias[3]&&(_u[3]=_a2.bias[3]));var _l2=_o2*_r3;var _c2=0,_p2=_l2,_d2=2*_l2,_f2=-1;\"RGBA\"===_i3?(_c2=0,_p2=_l2,_d2=2*_l2,_f2=3*_l2):\"RGB\"===_i3?(_c2=0,_p2=_l2,_d2=2*_l2):\"RBG\"===_i3&&(_c2=0,_d2=_l2,_p2=2*_l2);for(var _e3=0;_e3<_o2;_e3++)for(var _t6=0;_t6<_r3;_t6++){var _r4=(this.data[_c2++]-_u[0])*_s2[0],_o3=(this.data[_p2++]-_u[1])*_s2[1],_i4=(this.data[_d2++]-_u[2])*_s2[2],_a3=-1===_f2?255:(this.data[_f2++]-_u[3])*_s2[3];n.fillStyle=\"rgba(\"+_r4+\",\"+_o3+\",\"+_i4+\",\"+_a3+\")\",n.fillRect(_t6,_e3,1,1);}return t.toDataURL();}throw new Error(\"Can not access image data\");}},{key:\"toImageData\",value:function toImageData(e){var t=document.createElement(\"canvas\").getContext(\"2d\");var n;if(null==t)throw new Error(\"Can not access image data\");{var _r5,_o4,_i5;void 0!==(e===null||e===void 0?void 0:e.tensorLayout)&&\"NHWC\"===e.tensorLayout?(_r5=this.dims[2],_o4=this.dims[1],_i5=this.dims[3]):(_r5=this.dims[3],_o4=this.dims[2],_i5=this.dims[1]);var _a4=void 0!==e&&void 0!==e.format?e.format:\"RGB\",_s3=e===null||e===void 0?void 0:e.norm;var _u2,_l3;void 0===_s3||void 0===_s3.mean?_u2=[255,255,255,255]:\"number\"==typeof _s3.mean?_u2=[_s3.mean,_s3.mean,_s3.mean,_s3.mean]:(_u2=[_s3.mean[0],_s3.mean[1],_s3.mean[2],255],void 0!==_s3.mean[3]&&(_u2[3]=_s3.mean[3])),void 0===_s3||void 0===_s3.bias?_l3=[0,0,0,0]:\"number\"==typeof _s3.bias?_l3=[_s3.bias,_s3.bias,_s3.bias,_s3.bias]:(_l3=[_s3.bias[0],_s3.bias[1],_s3.bias[2],0],void 0!==_s3.bias[3]&&(_l3[3]=_s3.bias[3]));var _c3=_o4*_r5;if(void 0!==e){if(void 0!==e.height&&e.height!==_o4)throw new Error(\"Image output config height doesn't match tensor height\");if(void 0!==e.width&&e.width!==_r5)throw new Error(\"Image output config width doesn't match tensor width\");if(void 0!==e.format&&4===_i5&&\"RGBA\"!==e.format||3===_i5&&\"RGB\"!==e.format&&\"BGR\"!==e.format)throw new Error(\"Tensor format doesn't match input tensor dims\");}var _p3=4;var _d3=0,_f3=1,h=2,g=3,m=0,b=_c3,y=2*_c3,w=-1;\"RGBA\"===_a4?(m=0,b=_c3,y=2*_c3,w=3*_c3):\"RGB\"===_a4?(m=0,b=_c3,y=2*_c3):\"RBG\"===_a4&&(m=0,y=_c3,b=2*_c3),n=t.createImageData(_r5,_o4);for(var _e4=0;_e4<_o4*_r5;_d3+=_p3,_f3+=_p3,h+=_p3,g+=_p3,_e4++)n.data[_d3]=(this.data[m++]-_l3[0])*_u2[0],n.data[_f3]=(this.data[b++]-_l3[1])*_u2[1],n.data[h]=(this.data[y++]-_l3[2])*_u2[2],n.data[g]=-1===w?255:(this.data[w++]-_l3[3])*_u2[3];}return n;}},{key:\"reshape\",value:function reshape(e){return new c(this.type,this.data,e);}}],[{key:\"bufferToTensor\",value:function bufferToTensor(e,t){var _t$norm,_o$mean$,_o$bias$;if(void 0===e)throw new Error(\"Image buffer must be defined\");if(void 0===t.height||void 0===t.width)throw new Error(\"Image height and width must be defined\");if(\"NHWC\"===t.tensorLayout)throw new Error(\"NHWC Tensor layout is not supported yet\");var n=t.height,r=t.width,o=(_t$norm=t.norm)!==null&&_t$norm!==void 0?_t$norm:{mean:255,bias:0};var i,a;i=\"number\"==typeof o.mean?[o.mean,o.mean,o.mean,o.mean]:[o.mean[0],o.mean[1],o.mean[2],(_o$mean$=o.mean[3])!==null&&_o$mean$!==void 0?_o$mean$:255],a=\"number\"==typeof o.bias?[o.bias,o.bias,o.bias,o.bias]:[o.bias[0],o.bias[1],o.bias[2],(_o$bias$=o.bias[3])!==null&&_o$bias$!==void 0?_o$bias$:0];var s=void 0!==t.bitmapFormat?t.bitmapFormat:\"RGBA\",u=void 0!==t.tensorFormat&&void 0!==t.tensorFormat?t.tensorFormat:\"RGB\",l=n*r,p=\"RGBA\"===u?new Float32Array(4*l):new Float32Array(3*l);var d=4,f=0,h=1,g=2,m=3,b=0,y=l,w=2*l,_=-1;\"RGB\"===s&&(d=3,f=0,h=1,g=2,m=-1),\"RGBA\"===u?_=3*l:\"RBG\"===u?(b=0,w=l,y=2*l):\"BGR\"===u&&(w=0,y=l,b=2*l);for(var _t7=0;_t7<l;_t7++,f+=d,g+=d,h+=d,m+=d)p[b++]=(e[f]+a[0])/i[0],p[y++]=(e[h]+a[1])/i[1],p[w++]=(e[g]+a[2])/i[2],-1!==_&&-1!==m&&(p[_++]=(e[m]+a[3])/i[3]);return new c(\"float32\",p,\"RGBA\"===u?[1,4,n,r]:[1,3,n,r]);}},{key:\"fromImage\",value:function(){var _fromImage=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee18(e,t){var n,r,o,i,a,s,_n4,_r6,_n5,_o5,_n6,_r7,_o6,_n7,_r8,_o7,_t8,_n8;return _regeneratorRuntime2().wrap(function _callee18$(_context18){while(1)switch(_context18.prev=_context18.next){case 0:n=\"undefined\"!=typeof HTMLImageElement&&e instanceof HTMLImageElement,r=\"undefined\"!=typeof ImageData&&e instanceof ImageData,o=\"undefined\"!=typeof ImageBitmap&&e instanceof ImageBitmap,i=\"string\"==typeof e;s=t!==null&&t!==void 0?t:{};if(!n){_context18.next=23;break;}_n4=document.createElement(\"canvas\");_n4.width=e.width,_n4.height=e.height;_r6=_n4.getContext(\"2d\");if(!(null==_r6)){_context18.next=8;break;}throw new Error(\"Can not access image data\");case 8:_n5=e.height,_o5=e.width;if(!(void 0!==t&&void 0!==t.resizedHeight&&void 0!==t.resizedWidth&&(_n5=t.resizedHeight,_o5=t.resizedWidth),void 0!==t)){_context18.next=19;break;}if(!(s=t,void 0!==t.tensorFormat)){_context18.next=12;break;}throw new Error(\"Image input config format must be RGBA for HTMLImageElement\");case 12:if(!(s.tensorFormat=\"RGBA\",void 0!==t.height&&t.height!==_n5)){_context18.next=14;break;}throw new Error(\"Image input config height doesn't match HTMLImageElement height\");case 14:if(!(s.height=_n5,void 0!==t.width&&t.width!==_o5)){_context18.next=16;break;}throw new Error(\"Image input config width doesn't match HTMLImageElement width\");case 16:s.width=_o5;_context18.next=20;break;case 19:s.tensorFormat=\"RGBA\",s.height=_n5,s.width=_o5;case 20:_r6.drawImage(e,0,0),a=_r6.getImageData(0,0,_o5,_n5).data;_context18.next=64;break;case 23:if(r){_context18.next=46;break;}if(!o){_context18.next=43;break;}if(!(void 0===t)){_context18.next=27;break;}throw new Error(\"Please provide image config with format for Imagebitmap\");case 27:if(!(void 0!==t.bitmapFormat)){_context18.next=29;break;}throw new Error(\"Image input config format must be defined for ImageBitmap\");case 29:_n6=document.createElement(\"canvas\").getContext(\"2d\");if(!(null!=_n6)){_context18.next=42;break;}_r7=e.height,_o6=e.width;if(!(_n6.drawImage(e,0,0,_o6,_r7),a=_n6.getImageData(0,0,_o6,_r7).data,void 0!==t)){_context18.next=40;break;}if(!(void 0!==t.height&&t.height!==_r7)){_context18.next=35;break;}throw new Error(\"Image input config height doesn't match ImageBitmap height\");case 35:if(!(s.height=_r7,void 0!==t.width&&t.width!==_o6)){_context18.next=37;break;}throw new Error(\"Image input config width doesn't match ImageBitmap width\");case 37:s.width=_o6;_context18.next=41;break;case 40:s.height=_r7,s.width=_o6;case 41:return _context18.abrupt(\"return\",c.bufferToTensor(a,s));case 42:throw new Error(\"Can not access image data\");case 43:if(!i){_context18.next=45;break;}return _context18.abrupt(\"return\",new Promise(function(n,r){var o=document.createElement(\"canvas\"),i=o.getContext(\"2d\");if(!e||!i)return r();var a=new Image();a.crossOrigin=\"Anonymous\",a.src=e,a.onload=function(){o.width=a.width,o.height=a.height,i.drawImage(a,0,0,o.width,o.height);var e=i.getImageData(0,0,o.width,o.height);if(void 0!==t){if(void 0!==t.height&&t.height!==o.height)throw new Error(\"Image input config height doesn't match height\");if(s.height=o.height,void 0!==t.width&&t.width!==o.width)throw new Error(\"Image input config width doesn't match width\");s.width=o.width;}else s.height=o.height,s.width=o.width;n(c.bufferToTensor(e.data,s));};}));case 45:throw new Error(\"Input data provided is not supported - aborted tensor creation\");case 46:_n7=\"RGBA\";if(!(void 0!==t&&void 0!==t.resizedWidth&&void 0!==t.resizedHeight?(_r8=t.resizedHeight,_o7=t.resizedWidth):(_r8=e.height,_o7=e.width),void 0!==t)){_context18.next=53;break;}if(!(s=t,void 0!==t.bitmapFormat&&t.bitmapFormat!==_n7)){_context18.next=50;break;}throw new Error(\"Image input config format must be RGBA for ImageData\");case 50:s.bitmapFormat=\"RGBA\";_context18.next=54;break;case 53:s.bitmapFormat=\"RGBA\";case 54:if(!(s.height=_r8,s.width=_o7,void 0!==t)){_context18.next=63;break;}_t8=document.createElement(\"canvas\");_t8.width=_o7,_t8.height=_r8;_n8=_t8.getContext(\"2d\");if(!(null==_n8)){_context18.next=60;break;}throw new Error(\"Can not access image data\");case 60:_n8.putImageData(e,0,0),a=_n8.getImageData(0,0,_o7,_r8).data;_context18.next=64;break;case 63:a=e.data;case 64:if(!(void 0!==a)){_context18.next=66;break;}return _context18.abrupt(\"return\",c.bufferToTensor(a,s));case 66:throw new Error(\"Input data provided is not supported - aborted tensor creation\");case 67:case\"end\":return _context18.stop();}},_callee18);}));function fromImage(_x14,_x15){return _fromImage.apply(this,arguments);}return fromImage;}()}]);return c;}();var p=c;var d=/*#__PURE__*/function(){function d(e){_classCallCheck(this,d);this.handler=e;}_createClass(d,[{key:\"run\",value:function(){var _run=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee19(e,t,n){var r,o,i,_iterator3,_step3,_e5,_e6,_a5,_iterator4,_step4,_n9,_o8,_iterator5,_step5,_t9,_iterator6,_step6,_e7,a,s,_e8;return _regeneratorRuntime2().wrap(function _callee19$(_context19){while(1)switch(_context19.prev=_context19.next){case 0:r={};o={};if(!(\"object\"!=_typeof2(e)||null===e||e instanceof p||Array.isArray(e))){_context19.next=4;break;}throw new TypeError(\"'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.\");case 4:i=!0;if(!(\"object\"==_typeof2(t))){_context19.next=58;break;}if(!(null===t)){_context19.next=8;break;}throw new TypeError(\"Unexpected argument[1]: cannot be null.\");case 8:if(!(t instanceof p)){_context19.next=10;break;}throw new TypeError(\"'fetches' cannot be a Tensor\");case 10:if(!Array.isArray(t)){_context19.next=42;break;}if(!(0===t.length)){_context19.next=13;break;}throw new TypeError(\"'fetches' cannot be an empty array.\");case 13:i=!1;_iterator3=_createForOfIteratorHelper(t);_context19.prev=15;_iterator3.s();case 17:if((_step3=_iterator3.n()).done){_context19.next=26;break;}_e5=_step3.value;if(!(\"string\"!=typeof _e5)){_context19.next=21;break;}throw new TypeError(\"'fetches' must be a string array or an object.\");case 21:if(!(-1===this.outputNames.indexOf(_e5))){_context19.next=23;break;}throw new RangeError(\"'fetches' contains invalid output name: \".concat(_e5,\".\"));case 23:r[_e5]=null;case 24:_context19.next=17;break;case 26:_context19.next=31;break;case 28:_context19.prev=28;_context19.t0=_context19[\"catch\"](15);_iterator3.e(_context19.t0);case 31:_context19.prev=31;_iterator3.f();return _context19.finish(31);case 34:if(!(\"object\"==_typeof2(n)&&null!==n)){_context19.next=38;break;}o=n;_context19.next=40;break;case 38:if(!(void 0!==n)){_context19.next=40;break;}throw new TypeError(\"'options' must be an object.\");case 40:_context19.next=56;break;case 42:_e6=!1;_a5=Object.getOwnPropertyNames(t);_iterator4=_createForOfIteratorHelper(this.outputNames);try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){_n9=_step4.value;if(-1!==_a5.indexOf(_n9)){_o8=t[_n9];(null===_o8||_o8 instanceof p)&&(_e6=!0,i=!1,r[_n9]=_o8);}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}if(!_e6){_context19.next=55;break;}if(!(\"object\"==_typeof2(n)&&null!==n)){_context19.next=51;break;}o=n;_context19.next=53;break;case 51:if(!(void 0!==n)){_context19.next=53;break;}throw new TypeError(\"'options' must be an object.\");case 53:_context19.next=56;break;case 55:o=t;case 56:_context19.next=60;break;case 58:if(!(void 0!==t)){_context19.next=60;break;}throw new TypeError(\"Unexpected argument[1]: must be 'fetches' or 'options'.\");case 60:_iterator5=_createForOfIteratorHelper(this.inputNames);_context19.prev=61;_iterator5.s();case 63:if((_step5=_iterator5.n()).done){_context19.next=69;break;}_t9=_step5.value;if(!(void 0===e[_t9])){_context19.next=67;break;}throw new Error(\"input '\".concat(_t9,\"' is missing in 'feeds'.\"));case 67:_context19.next=63;break;case 69:_context19.next=74;break;case 71:_context19.prev=71;_context19.t1=_context19[\"catch\"](61);_iterator5.e(_context19.t1);case 74:_context19.prev=74;_iterator5.f();return _context19.finish(74);case 77:if(i){_iterator6=_createForOfIteratorHelper(this.outputNames);try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){_e7=_step6.value;r[_e7]=null;}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}}_context19.next=80;return this.handler.run(e,r,o);case 80:a=_context19.sent;s={};for(_e8 in a)Object.hasOwnProperty.call(a,_e8)&&(s[_e8]=new p(a[_e8].type,a[_e8].data,a[_e8].dims));return _context19.abrupt(\"return\",s);case 84:case\"end\":return _context19.stop();}},_callee19,this,[[15,28,31,34],[61,71,74,77]]);}));function run(_x16,_x17,_x18){return _run.apply(this,arguments);}return run;}()},{key:\"startProfiling\",value:function startProfiling(){this.handler.startProfiling();}},{key:\"endProfiling\",value:function endProfiling(){this.handler.endProfiling();}},{key:\"inputNames\",get:function get(){return this.handler.inputNames;}},{key:\"outputNames\",get:function get(){return this.handler.outputNames;}}],[{key:\"create\",value:function(){var _create=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee21(e,t,n,i){var a,s,_r9,_o9,_u3,u,l,c;return _regeneratorRuntime2().wrap(function _callee21$(_context21){while(1)switch(_context21.prev=_context21.next){case 0:s={};if(!(\"string\"==typeof e)){_context21.next=10;break;}if(!(a=e,\"object\"==_typeof2(t)&&null!==t)){_context21.next=6;break;}s=t;_context21.next=8;break;case 6:if(!(void 0!==t)){_context21.next=8;break;}throw new TypeError(\"'options' must be an object.\");case 8:_context21.next=52;break;case 10:if(!(e instanceof Uint8Array)){_context21.next=19;break;}if(!(a=e,\"object\"==_typeof2(t)&&null!==t)){_context21.next=15;break;}s=t;_context21.next=17;break;case 15:if(!(void 0!==t)){_context21.next=17;break;}throw new TypeError(\"'options' must be an object.\");case 17:_context21.next=52;break;case 19:if(e instanceof ArrayBuffer||\"undefined\"!=typeof SharedArrayBuffer&&e instanceof SharedArrayBuffer){_context21.next=21;break;}throw new TypeError(\"Unexpected argument[0]: must be 'path' or 'buffer'.\");case 21:_r9=e;_o9=0,_u3=e.byteLength;if(!(\"object\"==_typeof2(t)&&null!==t)){_context21.next=27;break;}s=t;_context21.next=51;break;case 27:if(!(\"number\"==typeof t)){_context21.next=49;break;}if(!(_o9=t,!Number.isSafeInteger(_o9))){_context21.next=30;break;}throw new RangeError(\"'byteOffset' must be an integer.\");case 30:if(!(_o9<0||_o9>=_r9.byteLength)){_context21.next=32;break;}throw new RangeError(\"'byteOffset' is out of range [0, \".concat(_r9.byteLength,\").\"));case 32:if(!(_u3=e.byteLength-_o9,\"number\"==typeof n)){_context21.next=45;break;}if(!(_u3=n,!Number.isSafeInteger(_u3))){_context21.next=35;break;}throw new RangeError(\"'byteLength' must be an integer.\");case 35:if(!(_u3<=0||_o9+_u3>_r9.byteLength)){_context21.next=37;break;}throw new RangeError(\"'byteLength' is out of range (0, \".concat(_r9.byteLength-_o9,\"].\"));case 37:if(!(\"object\"==_typeof2(i)&&null!==i)){_context21.next=41;break;}s=i;_context21.next=43;break;case 41:if(!(void 0!==i)){_context21.next=43;break;}throw new TypeError(\"'options' must be an object.\");case 43:_context21.next=47;break;case 45:if(!(void 0!==n)){_context21.next=47;break;}throw new TypeError(\"'byteLength' must be a number.\");case 47:_context21.next=51;break;case 49:if(!(void 0!==t)){_context21.next=51;break;}throw new TypeError(\"'options' must be an object.\");case 51:a=new Uint8Array(_r9,_o9,_u3);case 52:u=(s.executionProviders||[]).map(function(e){return\"string\"==typeof e?e:e.name;});_context21.next=55;return function(){var _ref13=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee20(e){var t,n,_iterator7,_step7,_e9,_t10,_r10;return _regeneratorRuntime2().wrap(function _callee20$(_context20){while(1)switch(_context20.prev=_context20.next){case 0:t=0===e.length?o:e,n=[];_iterator7=_createForOfIteratorHelper(t);_context20.prev=2;_iterator7.s();case 4:if((_step7=_iterator7.n()).done){_context20.next=29;break;}_e9=_step7.value;_t10=r[_e9];if(!_t10){_context20.next=27;break;}if(!_t10.initialized){_context20.next=10;break;}return _context20.abrupt(\"return\",_t10.backend);case 10:if(!_t10.aborted){_context20.next=12;break;}return _context20.abrupt(\"continue\",27);case 12:_r10=!!_t10.initPromise;_context20.prev=13;_r10||(_t10.initPromise=_t10.backend.init());_context20.next=17;return _t10.initPromise;case 17:_t10.initialized=!0;return _context20.abrupt(\"return\",_t10.backend);case 21:_context20.prev=21;_context20.t0=_context20[\"catch\"](13);_r10||n.push({name:_e9,err:_context20.t0}),_t10.aborted=!0;case 24:_context20.prev=24;delete _t10.initPromise;return _context20.finish(24);case 27:_context20.next=4;break;case 29:_context20.next=34;break;case 31:_context20.prev=31;_context20.t1=_context20[\"catch\"](2);_iterator7.e(_context20.t1);case 34:_context20.prev=34;_iterator7.f();return _context20.finish(34);case 37:throw new Error(\"no available backend found. ERR: \".concat(n.map(function(e){return\"[\".concat(e.name,\"] \").concat(e.err);}).join(\", \")));case 38:case\"end\":return _context20.stop();}},_callee20,null,[[2,31,34,37],[13,21,24,27]]);}));return function(_x23){return _ref13.apply(this,arguments);};}()(u);case 55:l=_context21.sent;_context21.next=58;return l.createSessionHandler(a,s);case 58:c=_context21.sent;return _context21.abrupt(\"return\",new d(c));case 60:case\"end\":return _context21.stop();}},_callee21);}));function create(_x19,_x20,_x21,_x22){return _create.apply(this,arguments);}return create;}()}]);return d;}();var f=d;},5716:function _(e,t,n){\"use strict\";t.R=void 0;var r=n(6027),o=n(1723);t.R=new(/*#__PURE__*/function(){function _class2(){_classCallCheck(this,_class2);}_createClass(_class2,[{key:\"init\",value:function(){var _init=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee22(){return _regeneratorRuntime2().wrap(function _callee22$(_context22){while(1)switch(_context22.prev=_context22.next){case 0:case\"end\":return _context22.stop();}},_callee22);}));function init(){return _init.apply(this,arguments);}return init;}()},{key:\"createSessionHandler\",value:function(){var _createSessionHandler=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee23(e,t){var n;return _regeneratorRuntime2().wrap(function _callee23$(_context23){while(1)switch(_context23.prev=_context23.next){case 0:n=new r.Session(t);_context23.next=3;return n.loadModel(e);case 3:return _context23.abrupt(\"return\",new o.OnnxjsSessionHandler(n));case 4:case\"end\":return _context23.stop();}},_callee23);}));function createSessionHandler(_x24,_x25){return _createSessionHandler.apply(this,arguments);}return createSessionHandler;}()}]);return _class2;}())();},2818:function _(e,t,n){\"use strict\";t.c8=t.rX=void 0;var r=n(8453),o=n(5381),i=n(9544),a=n(6640);t.rX=function(){if((\"number\"!=typeof r.env.wasm.initTimeout||r.env.wasm.initTimeout<0)&&(r.env.wasm.initTimeout=0),\"boolean\"!=typeof r.env.wasm.simd&&(r.env.wasm.simd=!0),\"boolean\"!=typeof r.env.wasm.proxy&&(r.env.wasm.proxy=!1),\"number\"!=typeof r.env.wasm.numThreads||!Number.isInteger(r.env.wasm.numThreads)||r.env.wasm.numThreads<=0){var _e10=\"undefined\"==typeof navigator?(0,o.cpus)().length:navigator.hardwareConcurrency;r.env.wasm.numThreads=Math.min(4,Math.ceil((_e10||1)/2));}},t.c8=new(/*#__PURE__*/function(){function _class3(){_classCallCheck(this,_class3);}_createClass(_class3,[{key:\"init\",value:function(){var _init2=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee24(){return _regeneratorRuntime2().wrap(function _callee24$(_context24){while(1)switch(_context24.prev=_context24.next){case 0:(0,t.rX)();_context24.next=3;return(0,i.initWasm)();case 3:case\"end\":return _context24.stop();}},_callee24);}));function init(){return _init2.apply(this,arguments);}return init;}()},{key:\"createSessionHandler\",value:function(){var _createSessionHandler2=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee25(e,t){var n;return _regeneratorRuntime2().wrap(function _callee25$(_context25){while(1)switch(_context25.prev=_context25.next){case 0:n=new a.OnnxruntimeWebAssemblySessionHandler();_context25.next=3;return n.loadModel(e,t);case 3:return _context25.abrupt(\"return\",Promise.resolve(n));case 4:case\"end\":return _context25.stop();}},_callee25);}));function createSessionHandler(_x26,_x27){return _createSessionHandler2.apply(this,arguments);}return createSessionHandler;}()}]);return _class3;}())();},1057:function _(e,t,n){\"use strict\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!(\"get\"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function get(){return t[n];}}),Object.defineProperty(e,r,o);}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n];}),o=this&&this.__exportStar||function(e,t){for(var n in e)\"default\"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n);};Object.defineProperty(t,\"__esModule\",{value:!0}),o(n(8453),t);var i=n(8453);{var _e11=n(5716).R;(0,i.registerBackend)(\"webgl\",_e11,-10);}{var _e12=n(2818).c8;(0,i.registerBackend)(\"cpu\",_e12,10),(0,i.registerBackend)(\"wasm\",_e12,10),(0,i.registerBackend)(\"xnnpack\",_e12,9);}},4910:function _(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createAttributeWithCacheKey=void 0;var n=/*#__PURE__*/function(){function n(e){_classCallCheck(this,n);Object.assign(this,e);}_createClass(n,[{key:\"cacheKey\",get:function get(){var _this8=this;return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map(function(e){return\"\".concat(_this8[e]);}).join(\";\")),this._cacheKey;}}]);return n;}();t.createAttributeWithCacheKey=function(e){return new n(e);};},6874:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Attribute=void 0;var r=n(1446),o=n(1287),i=n(9240),a=n(7273);var s=o.onnxruntime.experimental.fbs;var u=/*#__PURE__*/function(){function u(e){_classCallCheck(this,u);if(this._attributes=new Map(),null!=e){var _iterator8=_createForOfIteratorHelper(e),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var _t11=_step8.value;_t11 instanceof r.onnx.AttributeProto?this._attributes.set(_t11.name,[u.getValue(_t11),u.getType(_t11)]):_t11 instanceof s.Attribute&&this._attributes.set(_t11.name(),[u.getValue(_t11),u.getType(_t11)]);}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}if(this._attributes.size<e.length)throw new Error(\"duplicated attribute names\");}}_createClass(u,[{key:\"set\",value:function set(e,t,n){this._attributes.set(e,[n,t]);}},{key:\"delete\",value:function _delete(e){this._attributes[\"delete\"](e);}},{key:\"getFloat\",value:function getFloat(e,t){return this.get(e,\"float\",t);}},{key:\"getInt\",value:function getInt(e,t){return this.get(e,\"int\",t);}},{key:\"getString\",value:function getString(e,t){return this.get(e,\"string\",t);}},{key:\"getTensor\",value:function getTensor(e,t){return this.get(e,\"tensor\",t);}},{key:\"getFloats\",value:function getFloats(e,t){return this.get(e,\"floats\",t);}},{key:\"getInts\",value:function getInts(e,t){return this.get(e,\"ints\",t);}},{key:\"getStrings\",value:function getStrings(e,t){return this.get(e,\"strings\",t);}},{key:\"getTensors\",value:function getTensors(e,t){return this.get(e,\"tensors\",t);}},{key:\"get\",value:function get(e,t,n){var r=this._attributes.get(e);if(void 0===r){if(void 0!==n)return n;throw new Error(\"required attribute not found: \".concat(e));}if(r[1]!==t)throw new Error(\"type mismatch: expected \".concat(t,\" but got \").concat(r[1]));return r[0];}}],[{key:\"getType\",value:function getType(e){var t=e instanceof r.onnx.AttributeProto?e.type:e.type();switch(t){case r.onnx.AttributeProto.AttributeType.FLOAT:return\"float\";case r.onnx.AttributeProto.AttributeType.INT:return\"int\";case r.onnx.AttributeProto.AttributeType.STRING:return\"string\";case r.onnx.AttributeProto.AttributeType.TENSOR:return\"tensor\";case r.onnx.AttributeProto.AttributeType.FLOATS:return\"floats\";case r.onnx.AttributeProto.AttributeType.INTS:return\"ints\";case r.onnx.AttributeProto.AttributeType.STRINGS:return\"strings\";case r.onnx.AttributeProto.AttributeType.TENSORS:return\"tensors\";default:throw new Error(\"attribute type is not supported yet: \".concat(r.onnx.AttributeProto.AttributeType[t]));}}},{key:\"getValue\",value:function getValue(e){var t=e instanceof r.onnx.AttributeProto?e.type:e.type();if(t===r.onnx.AttributeProto.AttributeType.GRAPH||t===r.onnx.AttributeProto.AttributeType.GRAPHS)throw new Error(\"graph attribute is not supported yet\");var n=this.getValueNoCheck(e);if(t===r.onnx.AttributeProto.AttributeType.INT&&a.LongUtil.isLong(n))return a.LongUtil.longToNumber(n);if(t===r.onnx.AttributeProto.AttributeType.INTS){var _e13=n,_t12=new Array(_e13.length);for(var _n10=0;_n10<_e13.length;_n10++){var _r11=_e13[_n10];_t12[_n10]=a.LongUtil.longToNumber(_r11);}return _t12;}if(t===r.onnx.AttributeProto.AttributeType.TENSOR)return e instanceof r.onnx.AttributeProto?i.Tensor.fromProto(n):i.Tensor.fromOrtTensor(n);if(t===r.onnx.AttributeProto.AttributeType.TENSORS){if(e instanceof r.onnx.AttributeProto)return n.map(function(e){return i.Tensor.fromProto(e);});if(e instanceof s.Attribute)return n.map(function(e){return i.Tensor.fromOrtTensor(e);});}if(t===r.onnx.AttributeProto.AttributeType.STRING&&e instanceof r.onnx.AttributeProto){var _e14=n;return(0,a.decodeUtf8String)(_e14);}return t===r.onnx.AttributeProto.AttributeType.STRINGS&&e instanceof r.onnx.AttributeProto?n.map(a.decodeUtf8String):n;}},{key:\"getValueNoCheck\",value:function getValueNoCheck(e){return e instanceof r.onnx.AttributeProto?this.getValueNoCheckFromOnnxFormat(e):this.getValueNoCheckFromOrtFormat(e);}},{key:\"getValueNoCheckFromOnnxFormat\",value:function getValueNoCheckFromOnnxFormat(e){switch(e.type){case r.onnx.AttributeProto.AttributeType.FLOAT:return e.f;case r.onnx.AttributeProto.AttributeType.INT:return e.i;case r.onnx.AttributeProto.AttributeType.STRING:return e.s;case r.onnx.AttributeProto.AttributeType.TENSOR:return e.t;case r.onnx.AttributeProto.AttributeType.GRAPH:return e.g;case r.onnx.AttributeProto.AttributeType.FLOATS:return e.floats;case r.onnx.AttributeProto.AttributeType.INTS:return e.ints;case r.onnx.AttributeProto.AttributeType.STRINGS:return e.strings;case r.onnx.AttributeProto.AttributeType.TENSORS:return e.tensors;case r.onnx.AttributeProto.AttributeType.GRAPHS:return e.graphs;default:throw new Error(\"unsupported attribute type: \".concat(r.onnx.AttributeProto.AttributeType[e.type]));}}},{key:\"getValueNoCheckFromOrtFormat\",value:function getValueNoCheckFromOrtFormat(e){switch(e.type()){case s.AttributeType.FLOAT:return e.f();case s.AttributeType.INT:return e.i();case s.AttributeType.STRING:return e.s();case s.AttributeType.TENSOR:return e.t();case s.AttributeType.GRAPH:return e.g();case s.AttributeType.FLOATS:return e.floatsArray();case s.AttributeType.INTS:{var _t13=[];for(var _n11=0;_n11<e.intsLength();_n11++)_t13.push(e.ints(_n11));return _t13;}case s.AttributeType.STRINGS:{var _t14=[];for(var _n12=0;_n12<e.stringsLength();_n12++)_t14.push(e.strings(_n12));return _t14;}case s.AttributeType.TENSORS:{var _t15=[];for(var _n13=0;_n13<e.tensorsLength();_n13++)_t15.push(e.tensors(_n13));return _t15;}default:throw new Error(\"unsupported attribute type: \".concat(s.AttributeType[e.type()]));}}}]);return u;}();t.Attribute=u;},1975:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.resolveBackend=t.backend=void 0;var r=n(4418),o=new Map();function i(_x28){return _i6.apply(this,arguments);}function _i6(){_i6=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee27(e){var n,_t17,_r12;return _regeneratorRuntime2().wrap(function _callee27$(_context27){while(1)switch(_context27.prev=_context27.next){case 0:n=t.backend;if(!(void 0!==n[e]&&function(e){var t=e;return\"initialize\"in t&&\"function\"==typeof t.initialize&&\"createSessionHandler\"in t&&\"function\"==typeof t.createSessionHandler&&\"dispose\"in t&&\"function\"==typeof t.dispose;}(n[e]))){_context27.next=11;break;}_t17=n[e];_r12=_t17.initialize();_context27.t0=\"object\"==_typeof2(_r12)&&\"then\"in _r12;if(!_context27.t0){_context27.next=9;break;}_context27.next=8;return _r12;case 8:_r12=_context27.sent;case 9:if(!_r12){_context27.next=11;break;}return _context27.abrupt(\"return\",(o.set(e,_t17),_t17));case 11:case\"end\":return _context27.stop();}},_callee27);}));return _i6.apply(this,arguments);}t.backend={webgl:new r.WebGLBackend()},t.resolveBackend=/*#__PURE__*/function(){var _e15=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee26(t){var _e16,_iterator9,_step9,_t16,_e17,_n14;return _regeneratorRuntime2().wrap(function _callee26$(_context26){while(1)switch(_context26.prev=_context26.next){case 0:if(t){_context26.next=2;break;}return _context26.abrupt(\"return\",e([\"webgl\"]));case 2:_e16=\"string\"==typeof t?[t]:t;_iterator9=_createForOfIteratorHelper(_e16);_context26.prev=4;_iterator9.s();case 6:if((_step9=_iterator9.n()).done){_context26.next=18;break;}_t16=_step9.value;_e17=o.get(_t16);if(!_e17){_context26.next=11;break;}return _context26.abrupt(\"return\",_e17);case 11:_context26.next=13;return i(_t16);case 13:_n14=_context26.sent;if(!_n14){_context26.next=16;break;}return _context26.abrupt(\"return\",_n14);case 16:_context26.next=6;break;case 18:_context26.next=23;break;case 20:_context26.prev=20;_context26.t0=_context26[\"catch\"](4);_iterator9.e(_context26.t0);case 23:_context26.prev=23;_iterator9.f();return _context26.finish(23);case 26:throw new Error(\"no available backend to use\");case 27:case\"end\":return _context26.stop();}},_callee26,null,[[4,20,23,26]]);}));function e(_x29){return _e15.apply(this,arguments);}return e;}();},4418:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.WebGLBackend=void 0;var r=n(8453),o=n(1315),i=n(2171),a=n(3389);t.WebGLBackend=/*#__PURE__*/function(){function _class4(){_classCallCheck(this,_class4);}_createClass(_class4,[{key:\"contextId\",get:function get(){return r.env.webgl.contextId;},set:function set(e){r.env.webgl.contextId=e;}},{key:\"matmulMaxBatchSize\",get:function get(){return r.env.webgl.matmulMaxBatchSize;},set:function set(e){r.env.webgl.matmulMaxBatchSize=e;}},{key:\"textureCacheMode\",get:function get(){return r.env.webgl.textureCacheMode;},set:function set(e){r.env.webgl.textureCacheMode=e;}},{key:\"pack\",get:function get(){return r.env.webgl.pack;},set:function set(e){r.env.webgl.pack=e;}},{key:\"async\",get:function get(){return r.env.webgl.async;},set:function set(e){r.env.webgl.async=e;}},{key:\"initialize\",value:function initialize(){try{return this.glContext=(0,a.createWebGLContext)(this.contextId),\"number\"!=typeof this.matmulMaxBatchSize&&(this.matmulMaxBatchSize=16),\"string\"!=typeof this.textureCacheMode&&(this.textureCacheMode=\"full\"),\"boolean\"!=typeof this.pack&&(this.pack=!1),\"boolean\"!=typeof this.async&&(this.async=!1),o.Logger.setWithEnv(r.env),o.Logger.verbose(\"WebGLBackend\",\"Created WebGLContext: \".concat(_typeof2(this.glContext),\" with matmulMaxBatchSize: \").concat(this.matmulMaxBatchSize,\"; textureCacheMode: \").concat(this.textureCacheMode,\"; pack: \").concat(this.pack,\"; async: \").concat(this.async,\".\")),!0;}catch(e){return o.Logger.warning(\"WebGLBackend\",\"Unable to initialize WebGLBackend. \".concat(e)),!1;}}},{key:\"createSessionHandler\",value:function createSessionHandler(e){return new i.WebGLSessionHandler(this,e);}},{key:\"dispose\",value:function dispose(){this.glContext.dispose();}}]);return _class4;}();},6859:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.CoordsGlslLib=void 0;var r=n(7273),o=n(1997),i=n(6757),a=n(7618),s=n(432);var u=/*#__PURE__*/function(_o$GlslLib){_inherits(u,_o$GlslLib);var _super2=_createSuper(u);function u(e){_classCallCheck(this,u);return _super2.call(this,e);}_createClass(u,[{key:\"getFunctions\",value:function getFunctions(){return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},this.offsetToCoords()),this.coordsToOffset()),this.toVec()),this.valueFrom()),this.getCommonUtilFuncs()),this.getInputsSamplingSnippets()),this.getOutputSamplingSnippet());}},{key:\"getCustomTypes\",value:function getCustomTypes(){return{};}},{key:\"offsetToCoords\",value:function offsetToCoords(){return{offsetToCoords:new o.GlslLibRoutine(\"\\n      vec2 offsetToCoords(int offset, int width, int height) {\\n        int t = offset / width;\\n        int s = offset - t*width;\\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\\n        return coords;\\n      }\\n      \")};}},{key:\"coordsToOffset\",value:function coordsToOffset(){return{coordsToOffset:new o.GlslLibRoutine(\"\\n      int coordsToOffset(vec2 coords, int width, int height) {\\n        float s = coords.s * float(width);\\n        float t = coords.t * float(height);\\n        int offset = int(t) * width + int(s);\\n        return offset;\\n      }\\n      \")};}},{key:\"getOutputSamplingSnippet\",value:function getOutputSamplingSnippet(){var e=this.context.outputTextureLayout;return e.isPacked?this.getPackedOutputSamplingSnippet(e):this.getUnpackedOutputSamplingSnippet(e);}},{key:\"getPackedOutputSamplingSnippet\",value:function getPackedOutputSamplingSnippet(e){var t=e.unpackedShape,n=[e.width,e.height],r={},a=\"getOutputCoords\";switch(t.length){case 0:r[a]=this.getOutputScalarCoords();break;case 1:r[a]=this.getOutputPacked1DCoords(t,n);break;case 2:r[a]=this.getOutputPacked2DCoords(t,n);break;case 3:r[a]=this.getOutputPacked3DCoords(t,n);break;default:r[a]=this.getOutputPackedNDCoords(t,n);}var s=\"\\n      void setOutput(vec4 val) {\\n        \".concat((0,i.getGlsl)(this.context.glContext.version).output,\" = val;\\n      }\\n    \");return r.floatTextureSetRGBA=new o.GlslLibRoutine(s),r;}},{key:\"getUnpackedOutputSamplingSnippet\",value:function getUnpackedOutputSamplingSnippet(e){var t=e.unpackedShape,n=[e.width,e.height],r={},a=\"getOutputCoords\";switch(t.length){case 0:r[a]=this.getOutputScalarCoords();break;case 1:r[a]=this.getOutputUnpacked1DCoords(t,n);break;case 2:r[a]=this.getOutputUnpacked2DCoords(t,n);break;case 3:r[a]=this.getOutputUnpacked3DCoords(t,n);break;case 4:r[a]=this.getOutputUnpacked4DCoords(t,n);break;case 5:r[a]=this.getOutputUnpacked5DCoords(t,n);break;case 6:r[a]=this.getOutputUnpacked6DCoords(t,n);break;default:throw new Error(\"Unsupported output dimensionality: \".concat(t.length));}var s=\"\\n        void setOutput(float val) {\\n          \".concat((0,i.getGlsl)(this.context.glContext.version).output,\" = vec4(val, 0, 0, 0);\\n        }\\n    \");return r.floatTextureSetR=new o.GlslLibRoutine(s),r;}},{key:\"getOutputScalarCoords\",value:function getOutputScalarCoords(){return new o.GlslLibRoutine(\"\\n      int getOutputCoords() {\\n        return 0;\\n      }\\n    \");}},{key:\"getOutputPacked1DCoords\",value:function getOutputPacked1DCoords(e,t){var n=t;var r=\"\";return 1===n[0]?(r=\"\\n          int getOutputCoords() {\\n            return 2 * int(TexCoords.y * \".concat(n[1],\".0);\\n          }\\n        \"),new o.GlslLibRoutine(r)):1===n[1]?(r=\"\\n          int getOutputCoords() {\\n            return 2 * int(TexCoords.x * \".concat(n[0],\".0);\\n          }\\n        \"),new o.GlslLibRoutine(r)):(r=\"\\n        int getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                 vec2(\".concat(n[0],\", \").concat(n[1],\"));\\n          return 2 * (resTexRC.y * \").concat(n[0],\" + resTexRC.x);\\n        }\\n      \"),new o.GlslLibRoutine(r));}},{key:\"getOutputPacked2DCoords\",value:function getOutputPacked2DCoords(e,t){var n=\"\";if(r.ArrayUtil.arraysEqual(e,t))return n=\"\\n        ivec2 getOutputCoords() {\\n          return 2 * ivec2(TexCoords.xy * vec2(\".concat(t[0],\", \").concat(t[1],\"));\\n        }\\n      \"),new o.GlslLibRoutine(n);var i=t,a=Math.ceil(e[1]/2);return n=\"\\n        ivec2 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(\".concat(i[0],\", \").concat(i[1],\"));\\n\\n          int index = resTexRC.y * \").concat(i[0],\" + resTexRC.x;\\n\\n          // reverse r and c order for packed texture\\n          int r = imod(index, \").concat(a,\") * 2;\\n          int c = 2 * (index / \").concat(a,\");\\n\\n          return ivec2(r, c);\\n        }\\n      \"),new o.GlslLibRoutine(n);}},{key:\"getOutputPacked3DCoords\",value:function getOutputPacked3DCoords(e,t){var n=[t[0],t[1]],r=Math.ceil(e[2]/2),i=r*Math.ceil(e[1]/2),a=\"\\n        ivec3 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(\".concat(n[0],\", \").concat(n[1],\"));\\n          int index = resTexRC.y * \").concat(n[0],\" + resTexRC.x;\\n\\n          int b = index / \").concat(i,\";\\n          index -= b * \").concat(i,\";\\n\\n          // reverse r and c order for packed texture\\n          int r = imod(index, \").concat(r,\") * 2;\\n          int c = 2 * (index / \").concat(r,\");\\n\\n          return ivec3(b, r, c);\\n        }\\n      \");return new o.GlslLibRoutine(a);}},{key:\"getOutputPackedNDCoords\",value:function getOutputPackedNDCoords(e,t){var n=[t[0],t[1]],r=Math.ceil(e[e.length-1]/2),i=r*Math.ceil(e[e.length-2]/2);var a=i,s=\"\",_u4=\"b, r, c\";for(var _t18=2;_t18<e.length-1;_t18++)a*=e[e.length-_t18-1],s=\"\\n      int b\".concat(_t18,\" = index / \").concat(a,\";\\n      index -= b\").concat(_t18,\" * \").concat(a,\";\\n    \")+s,_u4=\"b\".concat(_t18,\", \")+_u4;var l=\"\\n      ivec\".concat(e.length,\" getOutputCoords() {\\n        ivec2 resTexRC = ivec2(TexCoords.xy *\\n                              vec2(\").concat(n[0],\", \").concat(n[1],\"));\\n        int index = resTexRC.y * \").concat(n[0],\" + resTexRC.x;\\n\\n        \").concat(s,\"\\n\\n        int b = index / \").concat(i,\";\\n        index -= b * \").concat(i,\";\\n\\n        // reverse r and c order for packed texture\\n        int r = imod(index, \").concat(r,\") * 2;\\n        int c = 2 * (index / \").concat(r,\");\\n\\n        return ivec\").concat(e.length,\"(\").concat(_u4,\");\\n      }\\n    \");return new o.GlslLibRoutine(l);}},{key:\"getOutputUnpacked1DCoords\",value:function getOutputUnpacked1DCoords(e,t){var n=\"\\n        int getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(\".concat(t[0],\", \").concat(t[1],\"));\\n          return resTexRC.y * \").concat(t[0],\" + resTexRC.x;\\n        }\\n      \");return new o.GlslLibRoutine(n);}},{key:\"getOutputUnpacked2DCoords\",value:function getOutputUnpacked2DCoords(e,t){var n=\"\\n        ivec2 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(\".concat(t[0],\", \").concat(t[1],\"));\\n          int index = resTexRC.y * \").concat(t[0],\" + resTexRC.x;\\n          int r = index / \").concat(e[1],\";\\n          int c = index - r * \").concat(e[1],\";\\n          return ivec2(r, c);\\n        }\\n      \");return new o.GlslLibRoutine(n);}},{key:\"getOutputUnpacked3DCoords\",value:function getOutputUnpacked3DCoords(e,t){var n=\"\";var r=e.length;var i=null;r<2&&(i=[]),i=new Array(r-1),i[r-2]=e[r-1];for(var _t19=r-3;_t19>=0;--_t19)i[_t19]=i[_t19+1]*e[_t19+1];var a=[\"r\",\"c\",\"d\"],s=i.map(function(e,t){return\"int \".concat(a[t],\" = index / \").concat(e,\"; \").concat(t===i.length-1?\"int \".concat(a[t+1],\" = index - \").concat(a[t],\" * \").concat(e):\"index -= \".concat(a[t],\" * \").concat(e),\";\");}).join(\"\");return n=\"\\n        ivec3 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(\".concat(t[0],\", \").concat(t[1],\"));\\n          int index = resTexRC.y * \").concat(t[0],\" + resTexRC.x;\\n          \").concat(s,\"\\n          return ivec3(r, c, d);\\n        }\\n      \"),new o.GlslLibRoutine(n);}},{key:\"getOutputUnpacked4DCoords\",value:function getOutputUnpacked4DCoords(e,t){var n=\"\";var r=e.length;var i=null;r<2&&(i=[]),i=new Array(r-1),i[r-2]=e[r-1];for(var _t20=r-3;_t20>=0;--_t20)i[_t20]=i[_t20+1]*e[_t20+1];var a=[\"r\",\"c\",\"d\",\"d2\"],s=i.map(function(e,t){return\"int \".concat(a[t],\" = index / \").concat(e,\"; \").concat(t===i.length-1?\"int \".concat(a[t+1],\" = index - \").concat(a[t],\" * \").concat(e):\"index -= \".concat(a[t],\" * \").concat(e),\";\");}).join(\"\");return n=\"\\n      ivec4 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(\".concat(t[0],\", \").concat(t[1],\"));\\n          int index = resTexRC.y * \").concat(t[0],\" + resTexRC.x;\\n          \").concat(s,\"\\n          return ivec4(r, c, d, d2);\\n        }\\n      \"),new o.GlslLibRoutine(n);}},{key:\"getOutputUnpacked5DCoords\",value:function getOutputUnpacked5DCoords(e,t){var n=\"\";var r=e.length;var i=null;r<2&&(i=[]),i=new Array(r-1),i[r-2]=e[r-1];for(var _t21=r-3;_t21>=0;--_t21)i[_t21]=i[_t21+1]*e[_t21+1];var a=[\"r\",\"c\",\"d\",\"d2\",\"d3\"],s=i.map(function(e,t){return\"int \".concat(a[t],\" = index / \").concat(e,\"; \").concat(t===i.length-1?\"int \".concat(a[t+1],\" = index - \").concat(a[t],\" * \").concat(e):\"index -= \".concat(a[t],\" * \").concat(e),\";\");}).join(\"\");return n=\"\\n      ivec5 getOutputCoords() {\\n          ivec2 resTexRC = ivec2(TexCoords.xy *\\n                                vec2(\".concat(t[0],\", \").concat(t[1],\"));\\n          int index = resTexRC.y * \").concat(t[0],\" + resTexRC.x;\\n          \").concat(s,\"\\n          return ivec5(r, c, d, d2, d3);\\n        }\\n      \"),new o.GlslLibRoutine(n);}},{key:\"getOutputUnpacked6DCoords\",value:function getOutputUnpacked6DCoords(e,t){var n=\"\";var r=e.length;var i=null;r<2&&(i=[]),i=new Array(r-1),i[r-2]=e[r-1];for(var _t22=r-3;_t22>=0;--_t22)i[_t22]=i[_t22+1]*e[_t22+1];var a=[\"r\",\"c\",\"d\",\"d2\",\"d3\",\"d4\"],s=i.map(function(e,t){return\"int \".concat(a[t],\" = index / \").concat(e,\"; \").concat(t===i.length-1?\"int \".concat(a[t+1],\" = index - \").concat(a[t],\" * \").concat(e):\"index -= \".concat(a[t],\" * \").concat(e),\";\");}).join(\"\");return n=\"\\n     ivec6 getOutputCoords() {\\n         ivec2 resTexRC = ivec2(TexCoords.xy *\\n                               vec2(\".concat(t[0],\", \").concat(t[1],\"));\\n         int index = resTexRC.y * \").concat(t[0],\" + resTexRC.x;\\n         \").concat(s,\"\\n         return ivec6(r, c, d, d2, d3, d4);\\n       }\\n     \"),new o.GlslLibRoutine(n);}},{key:\"getCommonUtilFuncs\",value:function getCommonUtilFuncs(){var e={};var t=\"uvFromFlat\";e[t]=new o.GlslLibRoutine(\"\\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n      int texC = index / texNumR;\\n      int texR = index - texC * texNumR;\\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\\n      //       v.\\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\\n    }\\n    \"),t=\"packedUVfrom1D\",e[t]=new o.GlslLibRoutine(\"\\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n        int texelIndex = index / 2;\\n        int texR = texelIndex / texNumC;\\n        int texC = texelIndex - texR * texNumC;\\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n      }\\n      \"),t=\"packedUVfrom2D\",e[t]=new o.GlslLibRoutine(\"\\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n        int texR = texelIndex / texNumC;\\n        int texC = texelIndex - texR * texNumC;\\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n      }\\n      \"),t=\"packedUVfrom3D\",e[t]=new o.GlslLibRoutine(\"\\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\\n          int texelsInBatch, int texelsInLogicalRow, int b,\\n          int row, int col) {\\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n        int texR = index / texNumC;\\n        int texC = index - texR * texNumC;\\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n      }\\n      \"),t=\"sampleTexture\";var n=(0,i.getGlsl)(this.context.glContext.version);return e[t]=new o.GlslLibRoutine(\"\\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n            return \".concat(n.texture2D,\"(textureSampler, uv).r;\\n        }\")),e;}},{key:\"getInputsSamplingSnippets\",value:function getInputsSamplingSnippets(){var _this9=this;var e={},t=this.context.outputTextureLayout;return this.context.programInfo.inputNames.forEach(function(n,r){var o=_this9.context.inputTextureLayouts[r],i=(0,s.generateShaderFuncNameFromInputSamplerName)(n);o.isPacked?e[i]=_this9.getPackedSamplerFromInput(i,n,o):e[i]=_this9.getUnpackedSamplerFromInput(i,n,o);var a=(0,s.generateShaderFuncNameFromInputSamplerNameAtOutCoords)(n);o.unpackedShape.length<=t.unpackedShape.length&&(o.isPacked?e[a]=_this9.getPackedSamplerAtOutputCoords(a,o,t,n):e[a]=_this9.getUnpackedSamplerAtOutputCoords(a,o,t,n));}),e;}},{key:\"getPackedSamplerAtOutputCoords\",value:function getPackedSamplerAtOutputCoords(e,t,n,i){var a=t.unpackedShape,_u5=n.unpackedShape,l=i,c=(0,s.generateShaderFuncNameFromInputSamplerName)(l),p=a.length,d=_u5.length,f=r.BroadcastUtil.getBroadcastDims(a,_u5),h=(0,s.getCoordsDataType)(d),g=d-p;var m;var b=(0,s.getGlChannels)();m=0===p?\"\":d<2&&f.length>=1?\"coords = 0;\":f.map(function(e){return\"coords.\".concat(b[e+g],\" = 0;\");}).join(\"\\n\");var y=\"\";y=d<2&&p>0?\"coords\":a.map(function(e,t){return\"coords.\".concat(b[t+g]);}).join(\", \");var w=\"return outputValue;\";var _=1===r.ShapeUtil.size(a),v=1===r.ShapeUtil.size(_u5);if(1!==p||_||v){if(_&&!v)w=1===d?\"\\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\\n        \":\"\\n          return vec4(outputValue.x);\\n        \";else if(f.length){var _e18=p-2,_t23=p-1;f.indexOf(_e18)>-1&&f.indexOf(_t23)>-1?w=\"return vec4(outputValue.x);\":f.indexOf(_e18)>-1?w=\"return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);\":f.indexOf(_t23)>-1&&(w=\"return vec4(outputValue.xx, outputValue.zz);\");}}else w=\"\\n        return vec4(outputValue.xy, outputValue.xy);\\n      \";var x=\"\\n      vec4 \".concat(e,\"() {\\n        \").concat(h,\" coords = getOutputCoords();\\n        \\n        int lastDim = coords.\").concat(b[d-1],\";\\n        coords.\").concat(b[d-1],\" = coords.\").concat(b[d-2],\";\\n        coords.\").concat(b[d-2],\" = lastDim;\\n      \\n        \").concat(m,\"\\n        vec4 outputValue = \").concat(c,\"(\").concat(y,\");\\n        \").concat(w,\"\\n      }\\n    \");return new o.GlslLibRoutine(x,[\"coordinates.getOutputCoords\"]);}},{key:\"getUnpackedSamplerAtOutputCoords\",value:function getUnpackedSamplerAtOutputCoords(e,t,n,i){var a=[n.width,n.height],_u6=[t.width,t.height],l=t.unpackedShape.length,c=n.unpackedShape.length,p=t.unpackedShape,d=n.unpackedShape,f=(0,s.generateShaderFuncNameFromInputSamplerName)(i);if(l===c&&r.ArrayUtil.arraysEqual(_u6,a)){var _t24=\"\\n          float \".concat(e,\"() {\\n            return sampleTexture(\").concat(i,\", TexCoords);\\n          }\\n        \");return new o.GlslLibRoutine(_t24,[\"coordinates.sampleTexture\"]);}var h=(0,s.getCoordsDataType)(c),g=r.BroadcastUtil.getBroadcastDims(p,d),m=c-l;var b;var y=(0,s.getGlChannels)();b=0===l?\"\":c<2&&g.length>=1?\"coords = 0;\":g.map(function(e){return\"coords.\".concat(y[e+m],\" = 0;\");}).join(\"\\n\");var w=\"\";w=c<2&&l>0?\"coords\":t.unpackedShape.map(function(e,t){return\"coords.\".concat(y[t+m]);}).join(\", \");var _=\"\\n        float \".concat(e,\"() {\\n          \").concat(h,\" coords = getOutputCoords();\\n          \").concat(b,\"\\n          return \").concat(f,\"(\").concat(w,\");\\n        }\\n      \");return new o.GlslLibRoutine(_,[\"coordinates.getOutputCoords\"]);}},{key:\"getPackedSamplerFromInput\",value:function getPackedSamplerFromInput(e,t,n){switch(n.unpackedShape.length){case 0:return this.getPackedSamplerScalar(e,t);case 1:return this.getPackedSampler1D(e,t,n);case 2:return this.getPackedSampler2D(e,t,n);case 3:return this.getPackedSampler3D(e,t,n);default:return this.getPackedSamplerND(e,t,n);}}},{key:\"getUnpackedSamplerFromInput\",value:function getUnpackedSamplerFromInput(e,t,n){var r=n.unpackedShape;switch(r.length){case 0:return this.getUnpackedSamplerScalar(e,t,n);case 1:return this.getUnpackedSampler1D(e,t,n);case 2:return this.getUnpackedSampler2D(e,t,n);case 3:return this.getUnpackedSampler3D(e,t,n);case 4:return this.getUnpackedSampler4D(e,t,n);case 5:return this.getUnpackedSampler5D(e,t,n);case 6:return this.getUnpackedSampler6D(e,t,n);default:throw new Error(\"Unsupported dimension \".concat(r.length,\"-D\"));}}},{key:\"getPackedSamplerScalar\",value:function getPackedSamplerScalar(e,t){var n=\"\\n          vec4 \".concat(e,\"() {\\n            return \").concat((0,i.getGlsl)(this.context.glContext.version).texture2D,\"(\").concat(t,\", halfCR);\\n          }\\n        \");return new o.GlslLibRoutine(n);}},{key:\"getPackedSampler1D\",value:function getPackedSampler1D(e,t,n){var r=[n.width,n.height],a=[r[1],r[0]],s=(0,i.getGlsl)(this.context.glContext.version),_u7=\"vec4 \".concat(e,\"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n      \").concat(a[0],\", \").concat(a[1],\", index);\\n      return \").concat(s.texture2D,\"(\").concat(t,\", uv);\\n    }\");return new o.GlslLibRoutine(_u7,[\"coordinates.packedUVfrom1D\"]);}},{key:\"getPackedSampler2D\",value:function getPackedSampler2D(e,t,n){var a=n.unpackedShape,s=[n.width,n.height],_u8=(0,i.getGlsl)(this.context.glContext.version),l=s[0],c=s[1];if(null!=s&&r.ArrayUtil.arraysEqual(a,s)){var _n15=\"vec4 \".concat(e,\"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(c,\".0, \").concat(l,\".0);\\n        return \").concat(_u8.texture2D,\"(\").concat(t,\", uv);\\n      }\");return new o.GlslLibRoutine(_n15);}var p=s,d=Math.ceil(a[1]/2),f=\"vec4 \".concat(e,\"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\").concat(p[1],\", \").concat(p[0],\", \").concat(d,\", row, col);\\n      return \").concat(_u8.texture2D,\"(\").concat(t,\", uv);\\n    }\");return new o.GlslLibRoutine(f,[\"coordinates.packedUVfrom2D\"]);}},{key:\"getPackedSampler3D\",value:function getPackedSampler3D(e,t,n){var r=n.unpackedShape,a=[n.width,n.height],_u9=[a[0],a[1]],l=(0,i.getGlsl)(this.context.glContext.version);if(1===r[0]){var _i7=r.slice(1),_a6=[1,2],_u10=(0,s.squeezeInputShape)(r,_i7),_l4=[\"b\",\"row\",\"col\"],_c4=JSON.parse(JSON.stringify(n));_c4.unpackedShape=_u10;var _p4=this.getPackedSamplerFromInput(e,t,_c4),_d4=\"\".concat(_p4.routineBody,\"\\n      vec4 \").concat(e,\"(int b, int row, int col) {\\n        return \").concat(e,\"(\").concat((0,s.getSqueezedParams)(_l4,_a6),\");\\n      } \");return new o.GlslLibRoutine(_d4,_p4.dependencies);}var c=_u9[0],p=_u9[1],d=Math.ceil(r[2]/2),f=\"vec4 \".concat(e,\"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \").concat(p,\", \").concat(c,\", \").concat(d*Math.ceil(r[1]/2),\", \").concat(d,\", b, row, col);\\n      return \").concat(l.texture2D,\"(\").concat(t,\", uv);}\");return new o.GlslLibRoutine(f,[\"coordinates.packedUVfrom3D\"]);}},{key:\"getPackedSamplerND\",value:function getPackedSamplerND(e,t,n){var r=n.unpackedShape,a=r.length,s=[n.width,n.height],_u11=(0,i.getGlsl)(this.context.glContext.version),l=[s[0],s[1]],c=l[1],p=l[0],d=Math.ceil(r[a-1]/2);var f=d*Math.ceil(r[a-2]/2),h=\"int b, int row, int col\",g=\"b * \".concat(f,\" + (row / 2) * \").concat(d,\" + (col / 2)\");for(var _e19=2;_e19<a-1;_e19++)h=\"int b\".concat(_e19,\", \")+h,f*=r[a-_e19-1],g=\"b\".concat(_e19,\" * \").concat(f,\" + \")+g;var m=\"vec4 \".concat(e,\"(\").concat(h,\") {\\n      int index = \").concat(g,\";\\n      int texR = index / \").concat(p,\";\\n      int texC = index - texR * \").concat(p,\";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(p,\", \").concat(c,\");\\n      return \").concat(_u11.texture2D,\"(\").concat(t,\", uv);\\n    }\");return new o.GlslLibRoutine(m);}},{key:\"getUnpackedSamplerScalar\",value:function getUnpackedSamplerScalar(e,t,n){var _ref14=[n.width,n.height],r=_ref14[0],i=_ref14[1];if(1===r&&1===i){var _n16=\"\\n          float \".concat(e,\"() {\\n            return sampleTexture(\").concat(t,\", halfCR);\\n          }\\n        \");return new o.GlslLibRoutine(_n16,[\"coordinates.sampleTexture\"]);}var a=\"\\n        float \".concat(e,\"() {\\n          int offset_\").concat(t,\" = coordsToOffset(TexCoords, \").concat(r,\", \").concat(i,\");\\n          vec2 uv = uvFromFlat(\").concat(r,\", \").concat(i,\", offset_\").concat(t,\");\\n          return sampleTexture(\").concat(t,\", uv);\\n        }\\n      \");return new o.GlslLibRoutine(a,[\"coordinates.uvFromFlat\",\"coordinates.sampleTexture\",\"coordinates.coordsToOffset\"]);}},{key:\"getUnpackedSampler1D\",value:function getUnpackedSampler1D(e,t,n){var r=n.width,i=n.height;if(1===i&&1===r){var _n17=\"\\n        float \".concat(e,\"(int index) {\\n          return sampleTexture(\").concat(t,\", halfCR);\\n        }\\n      \");return new o.GlslLibRoutine(_n17,[\"coordinates.sampleTexture\"]);}if(1===i){var _n18=\"\\n          float \".concat(e,\"(int index) {\\n            vec2 uv = vec2((float(index) + 0.5) / \").concat(r,\".0, 0.5);\\n            return sampleTexture(\").concat(t,\", uv);\\n          }\\n        \");return new o.GlslLibRoutine(_n18,[\"coordinates.sampleTexture\"]);}if(1===r){var _n19=\"\\n          float \".concat(e,\"(int index) {\\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / \").concat(i,\".0);\\n            return sampleTexture(\").concat(t,\", uv);\\n          }\\n        \");return new o.GlslLibRoutine(_n19,[\"coordinates.sampleTexture\"]);}var a=\"\\n        float \".concat(e,\"(int index) {\\n          vec2 uv = uvFromFlat(\").concat(r,\", \").concat(i,\", index);\\n          return sampleTexture(\").concat(t,\", uv);\\n        }\\n      \");return new o.GlslLibRoutine(a,[\"coordinates.uvFromFlat\",\"coordinates.sampleTexture\"]);}},{key:\"getUnpackedSampler2D\",value:function getUnpackedSampler2D(e,t,n){var i=n.unpackedShape,_u12=[n.height,n.width];if(null!=_u12&&r.ArrayUtil.arraysEqual(i,_u12)){var _n20=\"\\n          float \".concat(e,\"(int row, int col) {\\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(\").concat(_u12[1],\".0, \").concat(_u12[0],\".0);\\n            return sampleTexture(\").concat(t,\", uv);\\n          }\\n        \");return new o.GlslLibRoutine(_n20,[\"coordinates.sampleTexture\"]);}var _ref15=(0,a.squeezeShape)(i),l=_ref15.newShape,c=_ref15.keptDims,p=l;if(p.length<i.length){var _r13=(0,s.squeezeInputShape)(i,p),_a7=JSON.parse(JSON.stringify(n));_a7.unpackedShape=_r13;var _u13=[\"col\",\"row\"],_l5=\"\\n          \".concat(this.getUnpackedSamplerFromInput(e,t,_a7).routineBody,\"\\n          float \").concat(e,\"(int row, int col) {\\n            return \").concat(e,\"(\").concat((0,s.getSqueezedParams)(_u13,c),\");\\n          }\\n        \");return new o.GlslLibRoutine(_l5,[\"coordinates.sampleTexture\"]);}var d=_u12[1],f=_u12[0];if(1===f){var _n21=\"\\n          float \".concat(e,\"(int row, int col) {\\n            int offset_\").concat(t,\" = coordsToOffset(TexCoords, \").concat(d,\", \").concat(f,\");\\n            float index = dot(vec3(row, col, offset_\").concat(t,\"), vec3(\").concat(i[1],\", 1, 1));\\n            vec2 uv = vec2(0.5, (index + 0.5) / \").concat(d,\".0);\\n            return sampleTexture(\").concat(t,\", uv);\\n          }\\n        \");return new o.GlslLibRoutine(_n21,[\"coordinates.sampleTexture\",\"coordinates.coordsToOffset\"]);}if(1===d){var _n22=\"\\n          float \".concat(e,\"(int row, int col) {\\n            int offset_\").concat(t,\" = coordsToOffset(TexCoords, \").concat(d,\", \").concat(f,\");\\n            float index = dot(vec3(row, col, offset_\").concat(t,\"), vec3(\").concat(i[1],\", 1, 1));\\n            vec2 uv = vec2((index + 0.5) / \").concat(f,\".0, 0.5);\\n            return sampleTexture(\").concat(t,\", uv);\\n          }\\n        \");return new o.GlslLibRoutine(_n22,[\"coordinates.sampleTexture\",\"coordinates.coordsToOffset\"]);}var h=\"\\n        float \".concat(e,\"(int row, int col) {\\n          int index = col * \").concat(i[1],\" + row;\\n          vec2 uv = uvFromFlat(\").concat(d,\", \").concat(f,\", index);\\n          return sampleTexture(\").concat(t,\", uv);\\n        }\\n      \");return new o.GlslLibRoutine(h,[\"coordinates.uvFromFlat\",\"coordinates.sampleTexture\",\"coordinates.coordsToOffset\"]);}},{key:\"getUnpackedSampler3D\",value:function getUnpackedSampler3D(e,t,n){var r=n.unpackedShape,i=r[1]*r[2],_u14=r[2],_ref16=(0,a.squeezeShape)(r),l=_ref16.newShape,c=_ref16.keptDims,p=l;if(p.length<r.length){var _i8=(0,s.squeezeInputShape)(r,p),_a8=[\"batch\",\"col\",\"row\"],_u15=JSON.parse(JSON.stringify(n));_u15.unpackedShape=_i8;var _l6=this.getUnpackedSamplerFromInput(e,t,_u15),_d5=c.reverse(),f=\"\\n          \".concat(_l6.routineBody,\"\\n          float \").concat(e,\"(int batch, int row, int col) {\\n            return \").concat(e,\"(\").concat((0,s.getSqueezedParams)(_a8,_d5),\");\\n          }\\n        \");return new o.GlslLibRoutine(f,_l6.dependencies);}var d=\"\\n          float \".concat(e,\"(int depth, int row, int col) {\\n            // Explicitly use integer operations as dot() only works on floats.\\n            int index = depth * \").concat(i,\" + col * \").concat(_u14,\" + row;\\n            vec2 uv = uvFromFlat(\").concat(n.width,\", \").concat(n.height,\", index);\\n            return sampleTexture(\").concat(t,\", uv);\\n          }\\n      \");return new o.GlslLibRoutine(d,[\"coordinates.uvFromFlat\",\"coordinates.sampleTexture\",\"coordinates.coordsToOffset\"]);}},{key:\"getUnpackedSampler4D\",value:function getUnpackedSampler4D(e,t,n){var r=n.unpackedShape,i=r[3],a=r[2]*i,s=\"\\n        float \".concat(e,\"(int row, int col, int depth, int depth2) {\\n          int index = row * \").concat(r[1]*a,\" + col * \").concat(a,\" +\\n              depth2 * \").concat(i,\" + depth;\\n          vec2 uv = uvFromFlat(\").concat(n.width,\", \").concat(n.height,\", index);\\n          return sampleTexture(\").concat(t,\", uv);\\n        }\\n      \");return new o.GlslLibRoutine(s,[\"coordinates.uvFromFlat\",\"coordinates.sampleTexture\"]);}},{key:\"getUnpackedSampler5D\",value:function getUnpackedSampler5D(e,t,n){var r=n.unpackedShape,i=r[4],_u16=r[3]*i,l=r[2]*_u16,c=r[1]*l,_ref17=(0,a.squeezeShape)(r),p=_ref17.newShape,d=_ref17.keptDims;if(p.length<r.length){var _i9=(0,s.squeezeInputShape)(r,p),_a9=[\"row\",\"col\",\"depth\",\"depth2\",\"depth3\"],_u17=JSON.parse(JSON.stringify(n));_u17.unpackedShape=_i9;var _l7=\"\\n          \".concat(this.getUnpackedSamplerFromInput(e,t,_u17).routineBody,\"\\n          float \").concat(e,\"(int row, int col, int depth, int depth2, int depth3) {\\n            return \").concat(e,\"(\").concat((0,s.getSqueezedParams)(_a9,d),\");\\n          }\\n        \");return new o.GlslLibRoutine(_l7,[\"coordinates.sampleTexture\",\"coordinates.uvFromFlat\"]);}var f=\"\\n        float \".concat(e,\"(int row, int col, int depth, int depth2, int depth3) {\\n          int index = row * \").concat(c,\" + col * \").concat(l,\" + depth * \").concat(_u16,\" +\\n          depth3 * \").concat(i,\" + depth2;\\n          vec2 uv = uvFromFlat(\").concat(n.width,\", \").concat(n.height,\", index);\\n          return sampleTexture(\").concat(t,\", uv);\\n        }\\n      \");return new o.GlslLibRoutine(f,[\"coordinates.sampleTexture\",\"coordinates.uvFromFlat\"]);}},{key:\"getUnpackedSampler6D\",value:function getUnpackedSampler6D(e,t,n){var r=n.unpackedShape,i=r[5],_u18=r[4]*i,l=r[3]*_u18,c=r[2]*l,p=r[1]*c,_ref18=(0,a.squeezeShape)(r),d=_ref18.newShape,f=_ref18.keptDims;if(d.length<r.length){var _i10=(0,s.squeezeInputShape)(r,d),_a10=[\"row\",\"col\",\"depth\",\"depth2\",\"depth3\",\"depth4\"],_u19=JSON.parse(JSON.stringify(n));_u19.unpackedShape=_i10;var _l8=\"\\n            \".concat(this.getUnpackedSamplerFromInput(e,t,_u19).routineBody,\"\\n            float \").concat(e,\"(int row, int col, int depth,\\n              int depth2, int depth3, int depth4) {\\n              return \").concat(e,\"(\").concat((0,s.getSqueezedParams)(_a10,f),\");\\n            }\\n          \");return new o.GlslLibRoutine(_l8,[\"coordinates.sampleTexture\",\"coordinates.uvFromFlat\"]);}var h=\"\\n          float \".concat(e,\"(int row, int col, int depth,\\n            int depth2, int depth3, int depth4) {\\n            int index = row * \").concat(p,\" + col * \").concat(c,\" + depth * \").concat(l,\" +\\n            depth2 * \").concat(_u18,\" + depth3 * \").concat(i,\" + depth4;\\n            vec2 uv = uvFromFlat(\").concat(n.width,\", \").concat(n.height,\", index);\\n            return sampleTexture(\").concat(t,\", uv);\\n          }\\n        \");return new o.GlslLibRoutine(h,[\"coordinates.uvFromFlat\",\"coordinates.sampleTexture\",\"coordinates.coordsToOffset\"]);}},{key:\"toVec\",value:function toVec(){var e=this.context.outputTextureLayout,t=e.shape.length,n=e.strides,r=e.width,i=e.height,a=[];for(var _e20=0;_e20<t-1;++_e20)a.push(\"\\n        c[\".concat(_e20,\"] = offset / \").concat(n[_e20],\";\")),a.push(\"\\n        offset -= c[\".concat(_e20,\"] * \").concat(n[_e20],\";\"));a.push(\"\\n        c[\".concat(t-1,\"] = offset;\"));var s=\"\\n      void toVec(vec2 texCoords, out int c[\".concat(t,\"]) {\\n        int offset = coordsToOffset(texCoords, \").concat(r,\", \").concat(i,\");\\n        \").concat(a.join(\"\"),\"\\n      }\\n      void toVec(int offset, out int c[\").concat(t,\"]) {\\n        \").concat(a.join(\"\"),\"\\n      }\\n    \");return{toVec:new o.GlslLibRoutine(s,[\"coordinates.coordsToOffset\"])};}},{key:\"valueFrom\",value:function valueFrom(){var _this10=this;var e={};return this.context.programInfo.inputNames.forEach(function(t,n){var r=_this10.context.inputTextureLayouts[n],i=(r.unpackedShape.length>0?r.unpackedShape:r.shape).length;var a=\"_\".concat(t);e[a]=new o.GlslLibRoutine(_this10.getValueFromSingle(t,i,r.width,r.height,!1),[\"shapeUtils.indicesToOffset\".concat(a),\"coordinates.offsetToCoords\",\"fragcolor.getColorAsFloat\"]),a+=\"_T\",e[a]=new o.GlslLibRoutine(_this10.getValueFromSingle(t,i,r.width,r.height,!0),[\"shapeUtils.indicesToOffset\".concat(a),\"coordinates.offsetToCoords\",\"fragcolor.getColorAsFloat\"]);}),e;}},{key:\"getValueFromSingle\",value:function getValueFromSingle(e,t,n,r,o){var a=\"_\".concat(e);return o&&(a+=\"_T\"),\"\\n        float \".concat(a,\"(int m[\").concat(t,\"]) {\\n          int offset = indicesToOffset\").concat(a,\"(m);\\n          vec2 coords = offsetToCoords(offset, \").concat(n,\", \").concat(r,\");\\n          float value = getColorAsFloat(\").concat((0,i.getGlsl)(this.context.glContext.version).texture2D,\"(\").concat(e,\", coords));\\n          return value;\\n        }\\n        \");}},{key:\"getPackedValueFrom\",value:function getPackedValueFrom(e,t,n,r,o){var a=\"_\".concat(e,\"_Pack\");return o&&(a+=\"_T\"),\"\\n        vec4 \".concat(a,\"(int m[\").concat(t,\"]) {\\n          int offset = indicesToOffset_\").concat(e,\"(m);\\n          vec2 coords = offsetToCoords(offset, \").concat(n,\", \").concat(r,\");\\n          return \").concat((0,i.getGlsl)(this.context.glContext.version).texture2D,\"(\").concat(e,\", coords);\\n        }\\n        \");}}]);return u;}(o.GlslLib);t.CoordsGlslLib=u;},1997:function _(e,t){\"use strict\";var n;Object.defineProperty(t,\"__esModule\",{value:!0}),t.TopologicalSortGlslRoutines=t.GlslLibRoutineNode=t.GlslLibRoutine=t.GlslLib=t.GlslContext=t.FunctionType=void 0,(n=t.FunctionType||(t.FunctionType={}))[n.ValueBased=0]=\"ValueBased\",n[n.Positional=1]=\"Positional\",t.GlslContext=/*#__PURE__*/function(){function _class5(e,t,n,r){_classCallCheck(this,_class5);this.glContext=e,this.programInfo=t,this.inputTextureLayouts=n,this.outputTextureLayout=r;}return _createClass(_class5);}(),t.GlslLib=/*#__PURE__*/function(){function _class6(e){_classCallCheck(this,_class6);this.context=e;}return _createClass(_class6);}(),t.GlslLibRoutine=/*#__PURE__*/function(){function _class7(e,t){_classCallCheck(this,_class7);this.routineBody=e,this.dependencies=t;}return _createClass(_class7);}(),t.GlslLibRoutineNode=/*#__PURE__*/function(){function _class8(e,t,n){_classCallCheck(this,_class8);this.name=e,this.dependencies=n||[],t&&(this.routineBody=t);}_createClass(_class8,[{key:\"addDependency\",value:function addDependency(e){e&&this.dependencies.push(e);}}]);return _class8;}(),t.TopologicalSortGlslRoutines=/*#__PURE__*/function(){function _class9(){_classCallCheck(this,_class9);}_createClass(_class9,null,[{key:\"returnOrderedNodes\",value:function returnOrderedNodes(e){if(!e||0===e.length)return[];if(1===e.length)return e;var t=new Set(),n=new Set(),r=new Array();return this.createOrderedNodes(e,t,n,r),r;}},{key:\"createOrderedNodes\",value:function createOrderedNodes(e,t,n,r){for(var o=0;o<e.length;++o)this.dfsTraverse(e[o],t,n,r);}},{key:\"dfsTraverse\",value:function dfsTraverse(e,t,n,r){if(!e||n.has(e.name))return;if(t.has(e.name))throw new Error(\"Cyclic dependency detected. Can't topologically sort routines needed for shader.\");t.add(e.name);var o=e.dependencies;if(o&&o.length>0)for(var _e21=0;_e21<o.length;++_e21)this.dfsTraverse(o[_e21],t,n,r);r.push(e),n.add(e.name),t[\"delete\"](e.name);}}]);return _class9;}();},1371:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.EncodingGlslLib=void 0;var r=n(1997);var o=/*#__PURE__*/function(_r$GlslLib){_inherits(o,_r$GlslLib);var _super3=_createSuper(o);function o(e){_classCallCheck(this,o);return _super3.call(this,e);}_createClass(o,[{key:\"getFunctions\",value:function getFunctions(){return Object.assign(Object.assign({},this.encodeFloat32()),this.decodeFloat32());}},{key:\"getCustomTypes\",value:function getCustomTypes(){return{};}},{key:\"encodeFloat32\",value:function encodeFloat32(){return{encode:new r.GlslLibRoutine(\"highp vec4 encode(highp float f) {\\n        return vec4(f, 0.0, 0.0, 0.0);\\n      }\\n        \")};}},{key:\"decodeFloat32\",value:function decodeFloat32(){return{decode:new r.GlslLibRoutine(\"highp float decode(highp vec4 rgba) {\\n        return rgba.r;\\n      }\\n        \")};}},{key:\"encodeUint8\",value:function encodeUint8(){var e=o.isLittleEndian()?\"rgba.rgba=rgba.abgr;\":\"\";return{encode:new r.GlslLibRoutine(\"\\n      highp vec4 encode(highp float f) {\\n        highp float F = abs(f);\\n        highp float Sign = step(0.0,-f);\\n        highp float Exponent = floor(log2(F));\\n        highp float Mantissa = (exp2(- Exponent) * F);\\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\\n        highp vec4 rgba;\\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\\n        \".concat(e,\"\\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\\n        return rgba;\\n    }\\n        \"))};}},{key:\"decodeUint8\",value:function decodeUint8(){var e=o.isLittleEndian()?\"rgba.rgba=rgba.abgr;\":\"\";return{decode:new r.GlslLibRoutine(\"\\n        highp float decode(highp vec4 rgba) {\\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\\n          \".concat(e,\"\\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\\n          return Result;\\n      }\\n        \"))};}}],[{key:\"isLittleEndian\",value:function isLittleEndian(){var e=new ArrayBuffer(4),t=new Uint32Array(e),n=new Uint8Array(e);if(t[0]=3735928559,239===n[0])return!0;if(222===n[0])return!1;throw new Error(\"unknown endianness\");}}]);return o;}(r.GlslLib);t.EncodingGlslLib=o;},2691:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.FragColorGlslLib=void 0;var r=n(1997),o=n(6757);var i=/*#__PURE__*/function(_r$GlslLib2){_inherits(i,_r$GlslLib2);var _super4=_createSuper(i);function i(e){_classCallCheck(this,i);return _super4.call(this,e);}_createClass(i,[{key:\"getFunctions\",value:function getFunctions(){return Object.assign(Object.assign({},this.setFragColor()),this.getColorAsFloat());}},{key:\"getCustomTypes\",value:function getCustomTypes(){return{};}},{key:\"setFragColor\",value:function setFragColor(){var e=(0,o.getGlsl)(this.context.glContext.version);return{setFragColor:new r.GlslLibRoutine(\"\\n        void setFragColor(float value) {\\n            \".concat(e.output,\" = encode(value);\\n        }\\n        \"),[\"encoding.encode\"])};}},{key:\"getColorAsFloat\",value:function getColorAsFloat(){return{getColorAsFloat:new r.GlslLibRoutine(\"\\n        float getColorAsFloat(vec4 color) {\\n            return decode(color);\\n        }\\n        \",[\"encoding.decode\"])};}}]);return i;}(r.GlslLib);t.FragColorGlslLib=i;},3878:function _(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.replaceInlines=void 0;var n=/@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;t.replaceInlines=function(e){var t={};var r;for(;null!==(r=n.exec(e));){var _e22=r[3].split(\",\").map(function(e){var t=e.trim().split(\" \");return t&&2===t.length?{type:t[0],name:t[1]}:null;}).filter(function(e){return null!==e;});t[r[2]]={params:_e22,body:r[4]};}for(var _n23 in t){var o=\"(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;\".replace(\"__FUNC__\",_n23),i=new RegExp(o,\"gm\");var _loop=function _loop(){var o=r[1],i=r[2],a=r[3].split(\",\"),s=o?\"\".concat(o,\" \").concat(i,\";\"):\"\";var u=t[_n23].body,l=\"\";t[_n23].params.forEach(function(e,t){e&&(l+=\"\".concat(e.type,\" \").concat(e.name,\" = \").concat(a[t],\";\\n\"));}),u=\"\".concat(l,\"\\n \").concat(u),u=u.replace(\"return\",\"\".concat(i,\" = \"));var c=\"\\n      \".concat(s,\"\\n      {\\n        \").concat(u,\"\\n      }\\n      \");e=e.replace(r[0],c);};for(;null!==(r=i.exec(e));){_loop();}}return e.replace(n,\"\");};},8897:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.GlslPreprocessor=void 0;var r=n(1997),o=n(3878),i=n(1248),a=n(6757);t.GlslPreprocessor=/*#__PURE__*/function(){function _class10(e,t,n,o){var _this11=this;_classCallCheck(this,_class10);this.libs={},this.glslLibRoutineDependencyGraph={},this.context=new r.GlslContext(e,t,n,o),Object.keys(i.glslRegistry).forEach(function(e){var t=new i.glslRegistry[e](_this11.context);_this11.libs[e]=t;});var a=this.glslLibRoutineDependencyGraph;for(var _e23 in this.libs){var _t25=this.libs[_e23].getFunctions();for(var _n24 in _t25){var _o10=_e23+\".\"+_n24;var _i11=void 0;a[_o10]?(_i11=a[_o10],_i11.routineBody=_t25[_n24].routineBody):(_i11=new r.GlslLibRoutineNode(_o10,_t25[_n24].routineBody),a[_o10]=_i11);var s=_t25[_n24].dependencies;if(s)for(var _e24=0;_e24<s.length;++_e24)if(a[s[_e24]])_i11.addDependency(a[s[_e24]]);else{var _t26=new r.GlslLibRoutineNode(s[_e24]);a[s[_e24]]=_t26,_i11.addDependency(_t26);}}}}_createClass(_class10,[{key:\"preprocess\",value:function preprocess(){var e=this.context.programInfo;var t=e.shaderSource;return this.context.programInfo.hasMain||(t=\"\".concat(t,\"\\n      \").concat((0,a.getDefaultFragShaderMain)(this.context.glContext.version,this.context.outputTextureLayout.shape.length))),t=(0,o.replaceInlines)(t),\"\".concat((0,a.getFragShaderPreamble)(this.context.glContext.version),\"\\n    \").concat(this.getUniforms(e.inputNames,e.variables),\"\\n    \").concat(this.getImports(t),\"\\n    \").concat(t);}},{key:\"getImports\",value:function getImports(e){var t=this.selectGlslLibRoutinesToBeIncluded(e);if(0===t.length)return\"\";var n=\"\";for(var _e25=0;_e25<t.length;++_e25){if(!t[_e25].routineBody)throw new Error(\"Missing body for the Glsl Library routine: \".concat(t[_e25].name));n+=t[_e25].routineBody+\"\\n\";}return n;}},{key:\"selectGlslLibRoutinesToBeIncluded\",value:function selectGlslLibRoutinesToBeIncluded(e){var _this12=this;var t=[];return Object.keys(this.glslLibRoutineDependencyGraph).forEach(function(n){var r=n.split(\".\")[1];-1!==e.indexOf(r)&&t.push(_this12.glslLibRoutineDependencyGraph[n]);}),r.TopologicalSortGlslRoutines.returnOrderedNodes(t);}},{key:\"getUniforms\",value:function getUniforms(e,t){var n=[];if(e){var _iterator10=_createForOfIteratorHelper(e),_step10;try{for(_iterator10.s();!(_step10=_iterator10.n()).done;){var _t27=_step10.value;n.push(\"uniform sampler2D \".concat(_t27,\";\"));}}catch(err){_iterator10.e(err);}finally{_iterator10.f();}}if(t){var _iterator11=_createForOfIteratorHelper(t),_step11;try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){var _e26=_step11.value;n.push(\"uniform \".concat(_e26.type,\" \").concat(_e26.name).concat(_e26.arrayLength?\"[\".concat(_e26.arrayLength,\"]\"):\"\",\";\"));}}catch(err){_iterator11.e(err);}finally{_iterator11.f();}}return n.join(\"\\n\");}}]);return _class10;}();},1248:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.glslRegistry=void 0;var r=n(6859),o=n(1371),i=n(2691),a=n(9183),s=n(9314);t.glslRegistry={encoding:o.EncodingGlslLib,fragcolor:i.FragColorGlslLib,vec:s.VecGlslLib,shapeUtils:a.ShapeUtilsGlslLib,coordinates:r.CoordsGlslLib};},9183:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.ShapeUtilsGlslLib=void 0;var r=n(1997);var o=/*#__PURE__*/function(_r$GlslLib3){_inherits(o,_r$GlslLib3);var _super5=_createSuper(o);function o(e){_classCallCheck(this,o);return _super5.call(this,e);}_createClass(o,[{key:\"getFunctions\",value:function getFunctions(){return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},this.bcastIndex()),this.bcastMatmulIndex()),this.offsetToIndices()),this.indicesToOffset()),this.incrementIndices());}},{key:\"getCustomTypes\",value:function getCustomTypes(){return{};}},{key:\"bcastIndex\",value:function bcastIndex(){var _this13=this;var e=this.context.outputTextureLayout.shape.length,t={};return this.context.programInfo.inputNames.forEach(function(n,_o11){var i=_this13.context.inputTextureLayouts[_o11].unpackedShape;if(i.length<=e){var _o12=i.length,a=e-_o12,s=\"bcastIndices_\".concat(n);var u=\"\";for(var _e27=0;_e27<_o12;++_e27)u+=\"\\n          realIndices[\".concat(_e27,\"] = int( mod(float(bcastedIndices[\").concat(a+_e27,\"]), \").concat(i[_e27],\".0) );\\n          \");var l=\"\\n        void \".concat(s,\" (int bcastedIndices[\").concat(e,\"], out int realIndices[\").concat(_o12,\"]) {\\n          \").concat(u,\"\\n        }\\n        \");t[s]=new r.GlslLibRoutine(l);}}),t;}},{key:\"bcastMatmulIndex\",value:function bcastMatmulIndex(){var _this14=this;var e=this.context.outputTextureLayout.shape.length,t={};return this.context.programInfo.inputNames.forEach(function(n,_o13){var i=_this14.context.inputTextureLayouts[_o13].shape;if(!(i.length<2||i.length>e)){var _o14=i.length,a=e-_o14,s=\"bcastMatmulIndices_\".concat(n);var u=\"\";for(var _e28=0;_e28<_o14-2;++_e28)u+=\"\\n          realIndices[\".concat(_e28,\"] = int( mod(float(bcastedIndices[\").concat(a+_e28,\"]), \").concat(i[_e28],\".0) );\\n          \");var l=\"\\n        void \".concat(s,\"(int bcastedIndices[\").concat(e,\"], out int realIndices[\").concat(_o14,\"]) {\\n          \").concat(u,\"\\n          realIndices[\").concat(_o14-1,\"] = bcastedIndices[\").concat(e-1,\"];\\n          realIndices[\").concat(_o14-2,\"] = bcastedIndices[\").concat(e-2,\"];\\n        }\\n        \");t[s]=new r.GlslLibRoutine(l);}}),t;}},{key:\"indicesToOffset\",value:function indicesToOffset(){var _this15=this;var e={};return this.context.programInfo.inputNames.forEach(function(t,n){var i=_this15.context.inputTextureLayouts[n].shape,a=_this15.context.inputTextureLayouts[n].strides,s=i.length;var u=\"indicesToOffset_\".concat(t);e[u]=new r.GlslLibRoutine(o.indexToOffsetSingle(u,s,a)),u=\"indicesToOffset_\".concat(t,\"_T\"),e[u]=new r.GlslLibRoutine(o.indexToOffsetSingle(u,s,a.slice().reverse()));}),e;}},{key:\"offsetToIndices\",value:function offsetToIndices(){var _this16=this;var e={};return this.context.programInfo.inputNames.forEach(function(t,n){var i=_this16.context.inputTextureLayouts[n].shape,a=_this16.context.inputTextureLayouts[n].strides,s=i.length;var u=\"offsetToIndices_\".concat(t);e[u]=new r.GlslLibRoutine(o.offsetToIndicesSingle(u,s,a)),u=\"offsetToIndices_\".concat(t,\"_T\"),e[u]=new r.GlslLibRoutine(o.offsetToIndicesSingle(u,s,a.slice().reverse()));}),e;}},{key:\"incrementIndices\",value:function incrementIndices(){var _this17=this;var e={};return this.context.programInfo.inputNames.forEach(function(t,n){var _o15=_this17.context.inputTextureLayouts[n].shape,i=_o15.length,a=\"incrementIndices_\".concat(t);var s=\"\";for(var _e29=0;_e29<i;++_e29)s+=\"\\n        shape[\".concat(_e29,\"] = \").concat(_o15[_e29],\";\");var u=\"\\n        void \".concat(a,\"(int axis, out int indices[\").concat(i,\"]) {\\n          int shape[\").concat(i,\"];\\n          \").concat(s,\";\\n          for(int i = \").concat(i,\" -1 ; i >= 0; --i) {\\n            if(i > axis) continue;\\n            indices[i] += 1;\\n            if(indices[i] < shape[i]) {\\n              break;\\n            }\\n            indices[i] = 0;\\n          }\\n        }\\n        \");e[a]=new r.GlslLibRoutine(u);}),e;}}],[{key:\"indexToOffsetSingle\",value:function indexToOffsetSingle(e,t,n){var r=\"\";for(var _e30=t-1;_e30>=0;--_e30)r+=\"\\n        offset += indices[\".concat(_e30,\"] * \").concat(n[_e30],\";\\n        \");return\"\\n      int \".concat(e,\"(int indices[\").concat(t,\"]) {\\n        int offset = 0;\\n        \").concat(r,\"\\n        return offset;\\n      }\\n      \");}},{key:\"offsetToIndicesSingle\",value:function offsetToIndicesSingle(e,t,n){var r=[];for(var _e31=0;_e31<t-1;++_e31)r.push(\"\\n      indices[\".concat(_e31,\"] = offset / \").concat(n[_e31],\";\")),r.push(\"\\n        offset -= indices[\".concat(_e31,\"] * \").concat(n[_e31],\";\"));return r.push(\"\\n      indices[\".concat(t-1,\"] = offset;\")),\"\\n      void \".concat(e,\"(int offset, out int indices[\").concat(t,\"]) {\\n        \").concat(r.join(\"\"),\"\\n      }\\n      \");}}]);return o;}(r.GlslLib);t.ShapeUtilsGlslLib=o;},6757:function _(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.getDefaultFragShaderMain=t.getFragShaderPreamble=t.getVertexShaderSource=t.getGlsl=void 0;var n={version:\"\",attribute:\"attribute\",varyingVertex:\"varying\",varyingFrag:\"varying\",texture2D:\"texture2D\",output:\"gl_FragColor\",outputDeclaration:\"\"},r={version:\"#version 300 es\",attribute:\"in\",varyingVertex:\"out\",varyingFrag:\"in\",texture2D:\"texture\",output:\"outputColor\",outputDeclaration:\"out vec4 outputColor;\"};function o(e){return 1===e?n:r;}t.getGlsl=o,t.getVertexShaderSource=function(e){var t=o(e);return\"\".concat(t.version,\"\\n      precision highp float;\\n      \").concat(t.attribute,\" vec3 position;\\n      \").concat(t.attribute,\" vec2 textureCoord;\\n\\n      \").concat(t.varyingVertex,\" vec2 TexCoords;\\n\\n      void main()\\n      {\\n          gl_Position = vec4(position, 1.0);\\n          TexCoords = textureCoord;\\n      }\");},t.getFragShaderPreamble=function(e){var t=o(e);return\"\".concat(t.version,\"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \").concat(t.varyingFrag,\" vec2 TexCoords;\\n    \").concat(t.outputDeclaration,\"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    // Custom vector types to handle higher dimenalities.\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    \");},t.getDefaultFragShaderMain=function(e,t){return\"\\n  void main() {\\n    int indices[\".concat(t,\"];\\n    toVec(TexCoords, indices);\\n    vec4 result = vec4(process(indices));\\n    \").concat(o(e).output,\" = result;\\n  }\\n  \");};},9314:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.VecGlslLib=void 0;var r=n(1997);var o=/*#__PURE__*/function(_r$GlslLib4){_inherits(o,_r$GlslLib4);var _super6=_createSuper(o);function o(e){_classCallCheck(this,o);return _super6.call(this,e);}_createClass(o,[{key:\"getCustomTypes\",value:function getCustomTypes(){return{};}},{key:\"getFunctions\",value:function getFunctions(){return Object.assign(Object.assign(Object.assign(Object.assign({},this.binaryVecFunctions()),this.copyVec()),this.setVecItem()),this.getVecItem());}},{key:\"binaryVecFunctions\",value:function binaryVecFunctions(){var e=this.context.outputTextureLayout.shape.length,t={add:\"+=\",sub:\"-=\",mul:\"*=\",div:\"/=\"},n={};for(var _o17 in t){var i=\"\".concat(_o17,\"Vec\");var a=\"\";for(var _n25=0;_n25<e;++_n25)a+=\"\\n          dest[\".concat(_n25,\"] \").concat(t[_o17],\" src[\").concat(_n25,\"];\\n          \");var s=\"\\n        void \".concat(i,\"(int src[\").concat(e,\"], out int dest[\").concat(e,\"]) {\\n          \").concat(a,\"\\n        }\\n        \");n[i]=new r.GlslLibRoutine(s);}return n;}},{key:\"copyVec\",value:function copyVec(){var e=this.context.outputTextureLayout.shape.length;var t=\"\";for(var _n26=0;_n26<e;++_n26)t+=\"\\n        dest[\".concat(_n26,\"] = src[\").concat(_n26,\"];\\n        \");var n=\"\\n      void copyVec(int src[\".concat(e,\"], out int dest[\").concat(e,\"]) {\\n        \").concat(t,\"\\n      }\\n      \");return{copyVec:new r.GlslLibRoutine(n)};}},{key:\"setVecItem\",value:function setVecItem(){var e=this.context.outputTextureLayout.shape.length;var t=\"\\n        if(index < 0)\\n            index =\".concat(e,\" + index;\\n        if (index == 0)\\n            m[0] = value;\\n        \");for(var _n27=1;_n27<e-1;++_n27)t+=\"\\n        else if (index == \".concat(_n27,\")\\n            m[\").concat(_n27,\"] = value;\\n            \");t+=\"\\n        else\\n            m[\".concat(e-1,\"] = value;\\n        \");var n=\"\\n      void setVecItem(out int m[\".concat(e,\"], int index, int value) {\\n        \").concat(t,\"\\n      }\\n        \");return{setVecItem:new r.GlslLibRoutine(n)};}},{key:\"getVecItem\",value:function getVecItem(){var e=this.context.outputTextureLayout.shape.length;var t=\"\\n        if(index < 0)\\n            index = \".concat(e,\" + index;\\n        if (index == 0)\\n            return m[0];\\n      \");for(var _n28=1;_n28<e-1;++_n28)t+=\"\\n        else if (index == \".concat(_n28,\")\\n            return m[\").concat(_n28,\"];\\n      \");t+=\"\\n        else\\n            return m[\".concat(e-1,\"];\\n        \");var n=\"\\n      int getVecItem(int m[\".concat(e,\"], int index) {\\n        \").concat(t,\"\\n      }\\n    \");return{getVecItem:new r.GlslLibRoutine(n)};}}]);return o;}(r.GlslLib);t.VecGlslLib=o;},7860:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.WebGLInferenceHandler=void 0;var r=n(1315),o=n(9240),i=n(7273),a=n(9),s=n(7379),u=n(2488),l=n(540),c=n(3314),p=n(5639);t.WebGLInferenceHandler=/*#__PURE__*/function(){function _class11(e){_classCallCheck(this,_class11);this.session=e,this.packedTextureDataCache=new Map(),this.unpackedTextureDataCache=new Map();}_createClass(_class11,[{key:\"calculateTextureWidthAndHeight\",value:function calculateTextureWidthAndHeight(e,t){return(0,c.calculateTextureWidthAndHeight)(this.session.layoutStrategy,e,t);}},{key:\"executeProgram\",value:function executeProgram(e,t){if(t.length<e.inputNames.length)throw new Error(\"Input size mustn't be less than \".concat(e.inputNames.length,\".\"));if(e.inputNames.length!==e.inputTypes.length)throw new Error(\"input names size does not match input types\");var n=[];for(var _r14=0;_r14<e.inputNames.length;++_r14)n[_r14]=this.getOrCreateTextureData(t[_r14],e.inputTypes[_r14]);var r=function(e,t){var n=t.map(function(e){return\"\".concat(e.unpackedShape.join(\",\"),\";\").concat(e.width,\"x\").concat(e.height);}).join(\"_\");var r=e.name;return e.cacheHint&&(r+=\"[\"+e.cacheHint+\"]\"),r+=\":\"+n,r;}(e,n);var o=this.session.programManager.getArtifact(r);var i=o?o.programInfo:\"function\"==typeof e.get?e.get():e,a=(0,c.createTextureLayoutFromTextureType)(this.session.layoutStrategy,i.output.dims,i.output.textureType),s=this.createTextureData(a,i.output.type);return o||(o=this.session.programManager.build(i,n,s),this.session.programManager.setArtifact(r,o)),this.runProgram(o,n,s),s;}},{key:\"run\",value:function run(e,t){return this.executeProgram(e,t).tensor;}},{key:\"runProgram\",value:function runProgram(e,t,n){for(var _n29=0;_n29<t.length;++_n29)if(!!t[_n29].isPacked!=(e.programInfo.inputTypes[_n29]===p.TextureType.packed))throw new Error(\"input[\".concat(_n29,\"] property packed inconsistent\"));if(!!n.isPacked!=(e.programInfo.output.textureType===p.TextureType.packed))throw new Error(\"output property packed inconsistent\");this.session.programManager.run(e,t,n);}},{key:\"getOrCreateTextureData\",value:function getOrCreateTextureData(e,t){var n=this.getTextureData(e.dataId,t===p.TextureType.packed);if(!n&&(n=this.getTextureData(e.dataId,t!==p.TextureType.packed),n))return t===p.TextureType.packed?this.pack(n):this.unpack(n);if(!n){var _r15=(0,c.createTextureLayoutFromTextureType)(this.session.layoutStrategy,e.dims,t);if(t===p.TextureType.packedLastDimension){var _n30=1,_r16=4,_o18=e.dims;if(4===_o18.length){var _i12=[_o18[0],Math.ceil(_o18[1]*_o18[2]*_o18[3]/_r16)],_a11=(0,c.createTextureLayoutFromTextureType)(this.session.layoutStrategy,_i12,t);var _s4=e.numberData;if(_o18[1]*_o18[2]*_o18[3]%_r16!=0){var _t28=_o18[0],_i13=_o18[1]*_o18[2]*_o18[3],_a12=Math.ceil(_i13*_n30/_r16)*_r16;_s4=new Float32Array(_t28*_a12);for(var _r17=0;_r17<_t28;++_r17){var _t29=_r17*_i13,_o19=_r17*_a12+_r17%_n30*_i13;_s4.set(e.numberData.subarray(_t29,_t29+_i13),_o19);}}return this.createTextureData(_a11,e.type,_s4,e,1);}}if(t===p.TextureType.packed){var _t30=(0,c.createTextureLayoutFromShape)(this.session.layoutStrategy,e.dims,1,[],{reverseWH:!0}),_r18=this.createTextureData(_t30,e.type,e.numberData,e,1);n=this.pack(_r18);}else n=this.createTextureData(_r15,e.type,e.numberData,e,1);}return n;}},{key:\"createTextureDataFromLayoutBindTensor\",value:function createTextureDataFromLayoutBindTensor(e,t,n,r){return this.createTextureData(e,t,n,r,1);}},{key:\"createTextureData\",value:function createTextureData(e,t,n,o,i){r.Logger.verbose(\"InferenceHandler\",\"Creating TextureData: layout:[\".concat(JSON.stringify(e),\"]\"));var a=this.session.textureManager.createTextureFromLayout(t,e,n,i);return this.createTextureDataFromTexture(e,t,a,o);}},{key:\"reshapeUnpacked\",value:function reshapeUnpacked(e,t){var n=this.getOrCreateTextureData(e,p.TextureType.unpacked),r={channels:n.channels,height:n.height,width:n.width,shape:0!==t.length?t:[1],strides:i.ShapeUtil.computeStrides(t),unpackedShape:t};return this.createTextureDataFromTexture(r,e.type,n.texture).tensor;}},{key:\"reshapePacked\",value:function reshapePacked(e,t){var n=this.getOrCreateTextureData(e,p.TextureType.packed);if((0,s.isReshapeCheap)(e.dims,t)){var _r19={channels:n.channels,height:n.height,width:n.width,shape:0!==t.length?t:[1],strides:i.ShapeUtil.computeStrides(t),unpackedShape:t,isPacked:!0};return this.createTextureDataFromTexture(_r19,e.type,n.texture).tensor;}var r=(0,s.processDims3D)(e.dims),o=(0,s.processDims3D)(t),a=this.reshapePacked(e,r),u=this.run((0,s.createPackedReshape3DProgramInfoLoader)(this,a,o),[a]);return this.reshapePacked(u,t);}},{key:\"cast\",value:function cast(e,t){var n=this.getOrCreateTextureData(e,p.TextureType.unpacked);return this.createTextureDataFromTexture(n,t,n.texture).tensor;}},{key:\"createTextureDataFromTexture\",value:function createTextureDataFromTexture(e,t,n,r,i){var _this18=this;var a=Object.assign(Object.assign({},e),{tensor:r||new o.Tensor(e.unpackedShape,t,function(e){return _this18.readTexture(a);},/*#__PURE__*/function(){var _ref19=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee28(e){return _regeneratorRuntime2().wrap(function _callee28$(_context28){while(1)switch(_context28.prev=_context28.next){case 0:return _context28.abrupt(\"return\",_this18.readTextureAsync(a));case 1:case\"end\":return _context28.stop();}},_callee28);}));return function(_x30){return _ref19.apply(this,arguments);};}(),void 0,i),texture:n});return this.setTextureData(a.tensor.dataId,a,e.isPacked),a;}},{key:\"getTextureData\",value:function getTextureData(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:!1;return this.session.isInitializer(e)?this.session.getTextureData(e,t):t?this.packedTextureDataCache.get(e):this.unpackedTextureDataCache.get(e);}},{key:\"setTextureData\",value:function setTextureData(e,t){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:!1;this.session.isInitializer(e)?this.session.setTextureData(e,t,n):(n?this.packedTextureDataCache:this.unpackedTextureDataCache).set(e,t);}},{key:\"isTextureLayoutCached\",value:function isTextureLayoutCached(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:!1;return!!this.getTextureData(e.dataId,t);}},{key:\"dispose\",value:function dispose(){var _this19=this;this.session.textureManager.clearActiveTextures(),this.packedTextureDataCache.forEach(function(e){return _this19.session.textureManager.releaseTexture(e);}),this.packedTextureDataCache=new Map(),this.unpackedTextureDataCache.forEach(function(e){return _this19.session.textureManager.releaseTexture(e);}),this.unpackedTextureDataCache=new Map();}},{key:\"readTexture\",value:function readTexture(e){return e.isPacked?this.readTexture(this.unpack(e)):this.session.backend.glContext.isFloat32DownloadSupported?this.session.textureManager.readTexture(e,e.tensor.type,e.channels):this.session.textureManager.readUint8TextureAsFloat((0,u.encodeAsUint8)(this,e));}},{key:\"readTextureAsync\",value:function(){var _readTextureAsync=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee29(e){return _regeneratorRuntime2().wrap(function _callee29$(_context29){while(1)switch(_context29.prev=_context29.next){case 0:return _context29.abrupt(\"return\",e.isPacked?this.readTextureAsync(this.unpack(e)):this.session.backend.glContext.isFloat32DownloadSupported?this.session.textureManager.readTextureAsync(e,e.tensor.type,e.channels):this.session.textureManager.readUint8TextureAsFloat((0,u.encodeAsUint8)(this,e)));case 1:case\"end\":return _context29.stop();}},_callee29,this);}));function readTextureAsync(_x31){return _readTextureAsync.apply(this,arguments);}return readTextureAsync;}()},{key:\"pack\",value:function pack(e){return this.executeProgram((0,a.createPackProgramInfoLoader)(this,e.tensor),[e.tensor]);}},{key:\"unpack\",value:function unpack(e){return this.executeProgram((0,l.createUnpackProgramInfoLoader)(this,e.tensor),[e.tensor]);}}]);return _class11;}();},4110:function _(e,t,n){\"use strict\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!(\"get\"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function get(){return t[n];}}),Object.defineProperty(e,r,o);}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n];}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\"default\",{enumerable:!0,value:t});}:function(e,t){e[\"default\"]=t;}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\"default\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t;};Object.defineProperty(t,\"__esModule\",{value:!0}),t.WEBGL_OP_RESOLVE_RULES=void 0;var a=n(8817),s=i(n(5194)),u=n(4752),l=n(6668),c=n(9754),p=n(5042),d=n(6742),f=n(4125),h=n(6149),g=n(5378),m=n(6981),b=n(7413),y=n(7006),w=n(8276),_=n(5565),v=n(2834),x=n(1010),T=n(8126),S=n(2801),O=n(565),A=n(2444),E=n(815),I=n(564),$=n(5416),P=n(1240),D=n(5944),k=n(5707),C=i(n(9087)),R=n(7862),M=n(3980);t.WEBGL_OP_RESOLVE_RULES=[[\"Abs\",\"\",\"6+\",C.abs],[\"Acos\",\"\",\"7+\",C.acos],[\"Add\",\"\",\"7+\",s.add],[\"And\",\"\",\"7+\",s.and],[\"Asin\",\"\",\"7+\",C.asin],[\"Atan\",\"\",\"7+\",C.atan],[\"AveragePool\",\"\",\"7+\",v.averagePool,v.parseAveragePoolAttributes],[\"BatchNormalization\",\"\",\"7+\",a.batchNormalization,a.parseBatchNormalizationAttributes],[\"Cast\",\"\",\"6+\",u.cast,u.parseCastAttributes],[\"Ceil\",\"\",\"6+\",C.ceil],[\"Clip\",\"\",\"6-10\",C.clip,C.parseClipAttributes],[\"Clip\",\"\",\"11+\",C.clipV11],[\"Concat\",\"\",\"4+\",l.concat,l.parseConcatAttributes],[\"Conv\",\"\",\"1+\",c.conv,c.parseConvAttributes],[\"ConvTranspose\",\"\",\"1+\",p.convTranspose,p.parseConvTransposeAttributes],[\"Cos\",\"\",\"7+\",C.cos],[\"Div\",\"\",\"7+\",s.div],[\"Dropout\",\"\",\"7+\",C.identity],[\"DepthToSpace\",\"\",\"1+\",d.depthToSpace,d.parseDepthToSpaceAttributes],[\"Equal\",\"\",\"7+\",s.equal],[\"Elu\",\"\",\"6+\",C.elu,C.parseEluAttributes],[\"Exp\",\"\",\"6+\",C.exp],[\"Flatten\",\"\",\"1+\",f.flatten,f.parseFlattenAttributes],[\"Floor\",\"\",\"6+\",C.floor],[\"FusedConv\",\"com.microsoft\",\"1+\",c.conv,c.parseConvAttributes],[\"Gather\",\"\",\"1+\",h.gather,h.parseGatherAttributes],[\"Gemm\",\"\",\"7-10\",g.gemm,g.parseGemmAttributesV7],[\"Gemm\",\"\",\"11+\",g.gemm,g.parseGemmAttributesV11],[\"GlobalAveragePool\",\"\",\"1+\",v.globalAveragePool,v.parseGlobalAveragePoolAttributes],[\"GlobalMaxPool\",\"\",\"1+\",v.globalMaxPool],[\"Greater\",\"\",\"7+\",s.greater],[\"Identity\",\"\",\"1+\",C.identity],[\"ImageScaler\",\"\",\"1+\",m.imageScaler,m.parseImageScalerAttributes],[\"InstanceNormalization\",\"\",\"6+\",b.instanceNormalization,b.parseInstanceNormalizationAttributes],[\"LeakyRelu\",\"\",\"6+\",C.leakyRelu,C.parseLeakyReluAttributes],[\"Less\",\"\",\"7+\",s.less],[\"LRN\",\"\",\"1+\",y.lrn,y.parseLrnAttributes],[\"Log\",\"\",\"6+\",C.log],[\"MatMul\",\"\",\"1+\",w.matMul,w.parseMatMulAttributes],[\"MaxPool\",\"\",\"1+\",v.maxPool,v.parseMaxPoolAttributes],[\"Mul\",\"\",\"7+\",s.mul],[\"Neg\",\"\",\"6+\",C.neg],[\"Not\",\"\",\"1+\",C.not],[\"Or\",\"\",\"7+\",s.or],[\"Pad\",\"\",\"2-10\",_.padV2,_.parsePadAttributesV2],[\"Pad\",\"\",\"11+\",_.padV11,_.parsePadAttributesV11],[\"Pow\",\"\",\"7+\",s.pow],[\"PRelu\",\"\",\"7+\",s.pRelu],[\"ReduceLogSum\",\"\",\"1+\",x.reduceLogSum,x.parseReduceAttributes],[\"ReduceMax\",\"\",\"1+\",x.reduceMax,x.parseReduceAttributes],[\"ReduceMean\",\"\",\"1+\",x.reduceMean,x.parseReduceAttributes],[\"ReduceMin\",\"\",\"1+\",x.reduceMin,x.parseReduceAttributes],[\"ReduceProd\",\"\",\"1+\",x.reduceProd,x.parseReduceAttributes],[\"ReduceSum\",\"\",\"1-12\",x.reduceSum,x.parseReduceAttributes],[\"ReduceSumSquare\",\"\",\"1+\",x.reduceLogSumSquare,x.parseReduceAttributes],[\"Relu\",\"\",\"6+\",C.relu],[\"Reshape\",\"\",\"5+\",T.reshape],[\"Resize\",\"\",\"10\",S.resize,S.parseResizeAttributesV10],[\"Resize\",\"\",\"11+\",S.resize,S.parseResizeAttributesV11],[\"Shape\",\"\",\"1+\",O.shape],[\"Sigmoid\",\"\",\"6+\",C.sigmoid],[\"Sin\",\"\",\"7+\",C.sin],[\"Slice\",\"\",\"10+\",A.sliceV10],[\"Slice\",\"\",\"1-9\",A.slice,A.parseSliceAttributes],[\"Softmax\",\"\",\"1-12\",E.softmax,E.parseSoftmaxAttributes],[\"Softmax\",\"\",\"13+\",E.softmaxV13,E.parseSoftmaxAttributesV13],[\"Split\",\"\",\"2-12\",I.split,I.parseSplitAttributes],[\"Sqrt\",\"\",\"6+\",C.sqrt],[\"Squeeze\",\"\",\"1-12\",$.squeeze,$.parseSqueezeAttributes],[\"Squeeze\",\"\",\"13+\",$.squeezeV13],[\"Sub\",\"\",\"7+\",s.sub],[\"Sum\",\"\",\"6+\",P.sum],[\"Tan\",\"\",\"7+\",C.tan],[\"Tanh\",\"\",\"6+\",C.tanh],[\"Tile\",\"\",\"6+\",D.tile],[\"Transpose\",\"\",\"1+\",k.transpose,k.parseTransposeAttributes],[\"Upsample\",\"\",\"7-8\",M.upsample,M.parseUpsampleAttributesV7],[\"Upsample\",\"\",\"9\",M.upsample,M.parseUpsampleAttributesV9],[\"Unsqueeze\",\"\",\"1-12\",R.unsqueeze,R.parseUnsqueezeAttributes],[\"Unsqueeze\",\"\",\"13+\",R.unsqueezeV13],[\"Xor\",\"\",\"7+\",s.xor]];},8817:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseBatchNormalizationAttributes=t.batchNormalization=void 0;var r=n(4910),o=n(6757),i=n(5639),a={name:\"BatchNormalization\",inputNames:[\"A\",\"Scale\",\"B\",\"Mean\",\"Variance\"],inputTypes:[i.TextureType.unpacked,i.TextureType.unpacked,i.TextureType.unpacked,i.TextureType.unpacked,i.TextureType.unpacked]};t.batchNormalization=function(e,t,n){return u(t),[e.run(Object.assign(Object.assign({},a),{cacheHint:n.cacheKey,get:function get(){return s(e,t,n);}}),t)];},t.parseBatchNormalizationAttributes=function(e){var t=e.attributes.getFloat(\"epsilon\",1e-5),n=e.attributes.getFloat(\"momentum\",.9),o=e.attributes.getInt(\"spatial\",1);return(0,r.createAttributeWithCacheKey)({epsilon:t,momentum:n,spatial:o});};var s=function s(e,t,n){var r=(0,o.getGlsl)(e.session.backend.glContext.version),s=t[0].dims.length,_e$calculateTextureWi=e.calculateTextureWidthAndHeight(t[1].dims,i.TextureType.unpacked),_e$calculateTextureWi2=_slicedToArray(_e$calculateTextureWi,2),u=_e$calculateTextureWi2[0],l=_e$calculateTextureWi2[1],c=\"\\n  float process(int[\".concat(s,\"] indices) {\\n    vec2 position = offsetToCoords(indices[1], \").concat(u,\", \").concat(l,\");\\n    float scale = getColorAsFloat(\").concat(r.texture2D,\"(Scale, position));\\n    float mean = getColorAsFloat(\").concat(r.texture2D,\"(Mean, position));\\n    float variance = getColorAsFloat(\").concat(r.texture2D,\"(Variance, position));\\n    float b = getColorAsFloat(\").concat(r.texture2D,\"(B, position));\\n\\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(\").concat(n.epsilon,\")) ) + b;\\n  }\");return Object.assign(Object.assign({},a),{output:{dims:t[0].dims,type:t[0].type,textureType:i.TextureType.unpacked},shaderSource:c});},u=function u(e){if(!e||5!==e.length)throw new Error(\"BatchNormalization requires 5 inputs.\");var t=e[0],n=e[1],r=e[2],o=e[3],i=e[4];if(t.dims.length<3||1!==n.dims.length||1!==r.dims.length||1!==o.dims.length||1!==i.dims.length)throw new Error(\"invalid input shape.\");if(n.dims[0]!==t.dims[1]||r.dims[0]!==t.dims[1]||o.dims[0]!==t.dims[1]||i.dims[0]!==t.dims[1])throw new Error(\"invalid input shape.\");if(\"float32\"!==t.type&&\"float64\"!==t.type||\"float32\"!==n.type&&\"float64\"!==n.type||\"float32\"!==r.type&&\"float64\"!==r.type||\"float32\"!==o.type&&\"float64\"!==o.type||\"float32\"!==i.type&&\"float64\"!==i.type)throw new Error(\"invalid input tensor types.\");};},5194:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.xor=t.sub=t.pRelu=t.pow=t.or=t.mul=t.less=t.greater=t.equal=t.div=t.and=t.add=t.glslPRelu=t.glslPow=t.glslXor=t.glslOr=t.glslAnd=t.glslLess=t.glslGreater=t.glslEqual=t.glslSub=t.glslMul=t.glslDiv=t.glslAdd=void 0;var r=n(7273),o=n(1997),i=n(6757),a=n(5639);function s(){var e=\"add_\";return{body:\"\\n  float \".concat(e,\"(float a, float b) {\\n    return a + b;\\n  }\\n  vec4 \").concat(e,\"(vec4 v1, vec4 v2) {\\n    return v1 + v2;\\n  }\\n  \"),name:e,type:o.FunctionType.ValueBased};}function u(){var e=\"div_\";return{body:\"\\n  float \".concat(e,\"(float a, float b) {\\n    return a / b;\\n  }\\n  vec4 \").concat(e,\"(vec4 v1, vec4 v2) {\\n    return v1 / v2;\\n  }\\n  \"),name:e,type:o.FunctionType.ValueBased};}function l(){var e=\"mul_\";return{body:\"\\n  float \".concat(e,\"(float a, float b) {\\n    return a * b;\\n  }\\n  vec4 \").concat(e,\"(vec4 v1, vec4 v2) {\\n    return v1 * v2;\\n  }\\n  \"),name:e,type:o.FunctionType.ValueBased};}function c(){var e=\"sub_\";return{body:\"\\n  float \".concat(e,\"(float a, float b) {\\n    return a - b;\\n  }\\n  vec4 \").concat(e,\"(vec4 v1, vec4 v2) {\\n    return v1 - v2;\\n  }\\n  \"),name:e,type:o.FunctionType.ValueBased};}function p(){var e=\"equal_\";return{body:\"\\n  float \".concat(e,\"(float a, float b) {\\n    return float(a == b);\\n  }\\n  vec4 \").concat(e,\"(vec4 v1, vec4 v2) {\\n    return vec4(equal(v1, v2));\\n  }\\n  \"),name:e,type:o.FunctionType.ValueBased};}function d(){var e=\"greater_\";return{body:\"\\n  float \".concat(e,\"(float a, float b) {\\n    return float(a > b);\\n  }\\n  vec4 \").concat(e,\"(vec4 v1, vec4 v2) {\\n    return vec4( v1.r > v2.r ,\\n      v1.g > v2.g,\\n      v1.b > v2.b,\\n      v1.a > v2.a );\\n  }\\n  \"),name:e,type:o.FunctionType.ValueBased};}function f(){var e=\"less_\";return{body:\"\\n  float \".concat(e,\"(float a, float b) {\\n    return float(a < b);\\n  }\\n  vec4 \").concat(e,\"(vec4 v1, vec4 v2) {\\n    return vec4( v1.r < v2.r ,\\n                v1.g < v2.g,\\n                v1.b < v2.b,\\n                v1.a < v2.a );\\n  }\\n  \"),name:e,type:o.FunctionType.ValueBased};}function h(){var e=\"and_\";return{body:\"\\n  float \".concat(e,\"(float a, float b) {\\n    return float( bool(a) && bool(b) );\\n  }\\n  vec4 \").concat(e,\"(vec4 v1, vec4 v2) {\\n    bvec4 b1 = bvec4(v1);\\n    bvec4 b2 = bvec4(v2);\\n    return vec4( b1.r && b2.r ,\\n                b1.g && b2.g,\\n                b1.b && b2.b,\\n                b1.a && b2.a );\\n  }\\n  \"),name:e,type:o.FunctionType.ValueBased};}function g(){var e=\"or_\";return{body:\"\\n  float \".concat(e,\"(float a, float b) {\\n    return float( bool(a) || bool(b) );\\n  }\\n  vec4 \").concat(e,\"(vec4 v1, vec4 v2) {\\n    bvec4 b1 = bvec4(v1);\\n    bvec4 b2 = bvec4(v2);\\n    return vec4( b1.r || b2.r ,\\n                b1.g || b2.g,\\n                b1.b || b2.b,\\n                b1.a || b2.a );\\n  }\\n  \"),name:e,type:o.FunctionType.ValueBased};}function m(){var e=\"xor_\";return{body:\"\\n  float \".concat(e,\"(float a, float b) {\\n    return float( bool(a) ^^ bool(b) );\\n  }\\n  vec4 \").concat(e,\"(vec4 v1, vec4 v2) {\\n    bvec4 b1 = bvec4(v1);\\n    bvec4 b2 = bvec4(v2);\\n    return vec4( b1.r ^^ b2.r ,\\n                b1.g ^^ b2.g,\\n                b1.b ^^ b2.b,\\n                b1.a ^^ b2.a );\\n  }\\n  \"),name:e,type:o.FunctionType.ValueBased};}function b(){return function(e){var t=\"\".concat(e,\"_\");return{body:\"\\n  float \".concat(t,\"(float a, float b) {\\n    return \").concat(e,\"(a, b);\\n  }\\n  vec4 \").concat(t,\"(vec4 v1, vec4 v2) {\\n    return \").concat(e,\"(v1, v2);\\n  }\\n  \"),name:t,type:o.FunctionType.ValueBased};}(\"pow\");}function y(){var e=\"prelu_\";return{body:\"\\n  float \".concat(e,\"(float a, float b) {\\n    return a < 0.0 ? a * b: a;\\n  }\\n  vec4 \").concat(e,\"(vec4 v1, vec4 v2) {\\n    return vec4(\\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\\n      );\\n  }\\n  \"),name:e,type:o.FunctionType.ValueBased};}t.glslAdd=s,t.glslDiv=u,t.glslMul=l,t.glslSub=c,t.glslEqual=p,t.glslGreater=d,t.glslLess=f,t.glslAnd=h,t.glslOr=g,t.glslXor=m,t.glslPow=b,t.glslPRelu=y;var w=function w(e,t,n){var r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:t[0].type;var o=arguments.length>4?arguments[4]:undefined;var i=e.session.pack?a.TextureType.packed:a.TextureType.unpacked;return{name:n.name,inputNames:[\"A\",\"B\"],inputTypes:[i,i],cacheHint:o,get:function get(){return _(e,t,n,r);}};},_=function _(e,t,n){var o=arguments.length>3&&arguments[3]!==undefined?arguments[3]:t[0].type;var s=e.session.pack?a.TextureType.packed:a.TextureType.unpacked,u=!r.ShapeUtil.areEqual(t[0].dims,t[1].dims);var l=t[0].dims;var c=e.session.pack;if(u){var _a13=r.BroadcastUtil.calcShape(t[0].dims,t[1].dims,!1);if(!_a13)throw new Error(\"Can't perform binary op on the given tensors\");l=_a13;var _u20=l.length,_p5=0!==t[0].dims.length?t[0].dims.length:1,_d6=0!==t[1].dims.length?t[1].dims.length:1,_f4=0!==t[0].dims.length?\"bcastIndices_A(indices, aindices);\":\"aindices[0] = 0;\",_h2=0!==t[1].dims.length?\"bcastIndices_B(indices, bindices);\":\"bindices[0] = 0;\",_g2=(0,i.getGlsl)(e.session.backend.glContext.version),_m2=c?\"\\n      \".concat(n.body,\"\\n      void main() {\\n        vec4 a = getAAtOutCoords();\\n        vec4 b = getBAtOutCoords();\\n        vec4 result = \").concat(n.name,\"(a, b);\\n        \").concat(_g2.output,\" = result;\\n      }\"):\"\\n      \".concat(n.body,\"\\n      float process(int indices[\").concat(_u20,\"]) {\\n        int aindices[\").concat(_p5,\"];\\n        int bindices[\").concat(_d6,\"];\\n        \").concat(_f4,\"\\n        \").concat(_h2,\"\\n        return \").concat(n.name,\"(_A(aindices), _B(bindices));\\n      }\");return{name:n.name,inputNames:[\"A\",\"B\"],inputTypes:[s,s],output:{dims:l,type:o,textureType:s},shaderSource:_m2,hasMain:c};}var p=(0,i.getGlsl)(e.session.backend.glContext.version),d=\"\\n    \".concat(n.body,\"\\n    void main() {\\n      vec4 v1 = \").concat(p.texture2D,\"(A, TexCoords);\\n      vec4 v2 = \").concat(p.texture2D,\"(B, TexCoords);\\n      vec4 result = \").concat(n.name,\"(v1, v2);\\n      \").concat(p.output,\" = result;\\n    }\\n    \");return{name:n.name,inputNames:[\"A\",\"B\"],inputTypes:[s,s],output:{dims:t[0].dims,type:o,textureType:s},shaderSource:d,hasMain:!0};};t.add=function(e,t){return[e.run(w(e,t,s()),t)];},t.and=function(e,t){return[e.run(w(e,t,h(),\"bool\"),t)];},t.div=function(e,t){return[e.run(w(e,t,u()),t)];},t.equal=function(e,t){return[e.run(w(e,t,p(),\"bool\"),t)];},t.greater=function(e,t){return[e.run(w(e,t,d(),\"bool\"),t)];},t.less=function(e,t){return[e.run(w(e,t,f(),\"bool\"),t)];},t.mul=function(e,t){return[e.run(w(e,t,l()),t)];},t.or=function(e,t){return[e.run(w(e,t,g(),\"bool\"),t)];},t.pow=function(e,t){return[e.run(w(e,t,b()),t)];},t.pRelu=function(e,t){return[e.run(w(e,t,y()),t)];},t.sub=function(e,t){return[e.run(w(e,t,c()),t)];},t.xor=function(e,t){return[e.run(w(e,t,m(),\"bool\"),t)];};},4752:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseCastAttributes=t.cast=void 0;var r=n(7273);t.cast=function(e,t,n){return o(t),[e.cast(t[0],n)];},t.parseCastAttributes=function(e){return r.ProtoUtil.tensorDataTypeFromProto(e.attributes.getInt(\"to\"));};var o=function o(e){if(!e||1!==e.length)throw new Error(\"Cast requires 1 input.\");if(\"string\"===e[0].type)throw new Error(\"Invalid input type.\");};},4595:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createPackedConcatProgramInfoLoader=void 0;var r=n(6757),o=n(5639),i=n(432),a=n(5614);t.createPackedConcatProgramInfoLoader=function(e,t,n){var u=(l=t.length,c=n.cacheKey,{name:\"Concat (packed)\",inputNames:Array.from({length:l},function(e,t){return\"X\".concat(t);}),inputTypes:Array(l).fill(o.TextureType.packed),cacheHint:c});var l,c;return Object.assign(Object.assign({},u),{get:function get(){return function(e,t,n,u){var l=n[0].dims.slice();if(u>=l.length||u<-1*l.length)throw new Error(\"axis specified for concat doesn't match input dimensionality\");u<0&&(u=l.length+u);var c=l.slice(0);for(var _e32=1;_e32<n.length;_e32++){var _t31=n[_e32].dims.slice();for(var _e33=0;_e33<l.length;_e33++)if(_e33===u)c[u]+=_t31[_e33];else if(l[_e33]!==_t31[_e33])throw new Error(\"non concat dimensions must match\");}var p=c.length,d=(0,a.getChannels)(\"coords\",p),f=(0,i.getCoordsDataType)(p),h=(0,a.unpackFromChannel)(),g=n.map(function(e){return e.dims;}),m=(0,i.getGlChannels)(p),b=new Array(g.length-1);b[0]=g[0][u];for(var _e34=1;_e34<b.length;_e34++)b[_e34]=b[_e34-1]+g[_e34][u];var y=m[u],w=m.slice(-2),_=m.join();var v=\"if (\".concat(y,\" < \").concat(b[0],\") {\\n        return getChannel(\\n            getX0(\").concat(_,\"), vec2(\").concat(w.join(),\"));\\n        }\");for(var _e35=1;_e35<b.length;_e35++){var _t32=b[_e35-1];v+=\"\\n            if (\".concat(y,\" < \").concat(b[_e35],\"  && \").concat(y,\" >= \").concat(b[_e35-1],\") {\\n              return getChannel(\\n                getX\").concat(_e35,\"(\").concat(s(m,y,_t32),\"),\\n                vec2(\").concat(s(w,y,_t32),\"));\\n            }\");}var x=b.length,T=b[b.length-1];v+=\"\\n            return getChannel(\\n              getX\".concat(x,\"(\").concat(s(m,y,T),\"),\\n              vec2(\").concat(s(w,y,T),\"));\");var S=(0,r.getGlsl)(e.session.backend.glContext.version),O=\"\\n          \".concat(h,\"\\n          float getValue(\").concat(m.map(function(e){return\"int \"+e;}),\") {\\n            \").concat(v,\"\\n          }\\n\\n          void main() {\\n            \").concat(f,\" coords = getOutputCoords();\\n            int lastDim = coords.\").concat(m[p-1],\";\\n            coords.\").concat(m[p-1],\" = coords.\").concat(m[p-2],\";\\n            coords.\").concat(m[p-2],\" = lastDim;\\n\\n            vec4 result = vec4(getValue(\").concat(d,\"), 0., 0., 0.);\\n\\n            \").concat(d[p-1],\" = \").concat(d[p-1],\" + 1;\\n            if (\").concat(d[p-1],\" < \").concat(c[p-1],\") {\\n              result.g = getValue(\").concat(d,\");\\n            }\\n\\n            \").concat(d[p-2],\" = \").concat(d[p-2],\" + 1;\\n            if (\").concat(d[p-2],\" < \").concat(c[p-2],\") {\\n              result.a = getValue(\").concat(d,\");\\n            }\\n\\n            \").concat(d[p-1],\" = \").concat(d[p-1],\" - 1;\\n            if (\").concat(d[p-2],\" < \").concat(c[p-2],\" &&\\n                \").concat(d[p-1],\" < \").concat(c[p-1],\") {\\n              result.b = getValue(\").concat(d,\");\\n            }\\n            \").concat(S.output,\" = result;\\n          }\\n        \");return Object.assign(Object.assign({},t),{output:{dims:c,type:n[0].type,textureType:o.TextureType.packed},shaderSource:O,hasMain:!0});}(e,u,t,n.axis);}});};var s=function s(e,t,n){var r=e.indexOf(t);return e.map(function(e,t){return t===r?\"\".concat(e,\" - \").concat(n):e;}).join();};},6668:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseConcatAttributes=t.concat=void 0;var r=n(4910),o=n(5639),i=n(4595);t.concat=function(e,t,n){return p(t),e.session.pack&&t[0].dims.length>1?[e.run((0,i.createPackedConcatProgramInfoLoader)(e,t,n),t)]:[e.run(a(e,t,n),t)];};var a=function a(e,t,n){var r=(i=t.length,a=n.cacheKey,{name:\"Concat\",inputNames:Array.from({length:i},function(e,t){return\"X\".concat(t);}),inputTypes:Array(i).fill(o.TextureType.unpacked),cacheHint:a});var i,a;return Object.assign(Object.assign({},r),{get:function get(){return function(e,t,n,r){var i=n[0].dims.slice();if(r>=i.length||r<-1*i.length)throw new Error(\"axis specified for concat doesn't match input dimensionality\");r<0&&(r=i.length+r);var a=i.slice(0);for(var _e36=1;_e36<n.length;_e36++){var _t33=n[_e36].dims.slice();for(var _e37=0;_e37<i.length;_e37++)if(_e37===r)a[r]+=_t33[_e37];else if(i[_e37]!==_t33[_e37])throw new Error(\"non concat dimensions must match\");}var p=a.length,d=new Array(n.length);var f=0;for(var _e38=0;_e38<d.length;++_e38)f+=n[_e38].dims[r],d[_e38]=f;var h=\"\";h=n.length<5?s(d):u(d);var g=\"\\n        \".concat(l(n.length,p),\"\\n        \").concat(c(d),\"\\n        \").concat(h,\"\\n        float process(int indices[\").concat(p,\"]) {\\n          int textureIndex = getTextureWhereDataResides (indices[\").concat(r,\"]);\\n\\n          if(textureIndex != 0) {\\n            indices[\").concat(r,\"] = indices[\").concat(r,\"] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\\n          }\\n\\n          return fetchDataFromCorrectTexture(textureIndex, indices);\\n        }\");return Object.assign(Object.assign({},t),{output:{dims:a,type:n[0].type,textureType:o.TextureType.unpacked},shaderSource:g});}(0,r,t,n.axis);}});},s=function s(e){return\"int getTextureWhereDataResides(int index) {\\n      \".concat(e.map(function(e,t){return\"if(index<\".concat(e,\") {return \").concat(t,\";}\\n\");}).join(\"\"),\"\\n    }\");},u=function u(e){return s(e);},l=function l(e,t){var n=[\"float fetchDataFromCorrectTexture(int textureIndex, int indices[\".concat(t,\"]) {\")];for(var _t34=0;_t34<e;++_t34)0===_t34?n.push(\"\\tif (textureIndex == \".concat(_t34,\") { return _X\").concat(_t34,\"(indices); }\")):_t34===e-1?n.push(\"\\telse { return _X\".concat(_t34,\"(indices); }\")):n.push(\"\\telse if (textureIndex == \".concat(_t34,\") { return _X\").concat(_t34,\"(indices); }\"));return n.push(\"\\t}\"),n.join(\"\\n\");},c=function c(e){var t=[\"int getSizeInConcatAxisValueFromIndex(int index) {\"];for(var _n31=0;_n31<e.length;++_n31)0===_n31?t.push(\"\\tif (index == \".concat(_n31,\") { return \").concat(e[_n31],\"; }\")):_n31===e.length-1?t.push(\"\\telse { return \".concat(e[_n31],\"; }\")):t.push(\"\\telse if (index == \".concat(_n31,\") { return \").concat(e[_n31],\"; }\"));return t.push(\"\\t}\"),t.join(\"\\n\");};t.parseConcatAttributes=function(e){return(0,r.createAttributeWithCacheKey)({axis:e.attributes.getInt(\"axis\")});};var p=function p(e){if(!e||e.length<1)throw new Error(\"too few inputs\");var t=e[0].type,n=e[0].dims.length;if(\"string\"===t)throw new Error(\"string tensor is not supported yet\");var _iterator12=_createForOfIteratorHelper(e),_step12;try{for(_iterator12.s();!(_step12=_iterator12.n()).done;){var _r20=_step12.value;if(_r20.type!==t)throw new Error(\"input tensors should be one type\");if(_r20.dims.length!==n)throw new Error(\"input tensors should have the same shape\");}}catch(err){_iterator12.e(err);}finally{_iterator12.f();}};},7825:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createUnpackedGroupedConvProgramInfoLoader=void 0;var r=n(1315),o=n(6757),i=n(5639),a=n(9754),s=n(2150);t.createUnpackedGroupedConvProgramInfoLoader=function(e,t,n){var u=(l=t.length>2,c=n.cacheKey,{name:\"GroupedConv\",inputNames:l?[\"X\",\"W\",\"Bias\"]:[\"X\",\"W\"],inputTypes:l?[i.TextureType.unpacked,i.TextureType.unpacked,i.TextureType.unpacked]:[i.TextureType.unpacked,i.TextureType.unpacked],cacheHint:c});var l,c;return Object.assign(Object.assign({},u),{get:function get(){return function(e,t,n,u){var l=t.length>2?\"value += getBias(output_channel);\":\"\",c=t[0].dims.slice(),p=t[1].dims.slice(),d=p[0]/u.group;r.Logger.verbose(\"GroupedConv\",\"autpPad:\".concat(u.autoPad,\", dilations:\").concat(u.dilations,\", group:\").concat(u.group,\", kernelShape:\").concat(u.kernelShape,\", pads:\").concat(u.pads,\", strides:\").concat(u.strides));var f=(0,a.calculateOutputShape)(c,p,u.dilations,u.pads,u.strides),h=(0,o.getGlsl)(e.session.backend.glContext.version),_ref20=(0,s.getActivationSnippet)(u),g=_ref20.activationFunction,m=_ref20.applyActivation,b=\"\\n  const ivec2 strides = ivec2(\".concat(u.strides[0],\", \").concat(u.strides[1],\");\\n  const ivec2 pads = ivec2(\").concat(u.pads[0],\", \").concat(u.pads[1],\");\\n  \").concat(g,\"\\n  void main() {\\n    ivec4 coords = getOutputCoords();\\n    int batch = coords.x;\\n    int output_channel = coords.y;\\n    ivec2 xRCCorner = coords.zw * strides - pads;\\n    int group_id = output_channel / \").concat(d,\";\\n\\n    float value = 0.0;\\n    for (int wInChannel = 0; wInChannel < \").concat(p[1],\"; wInChannel++) {\\n      int input_channel = group_id * \").concat(p[1],\" + wInChannel;\\n      for (int wHeight = 0; wHeight < \").concat(p[2],\"; wHeight++) {\\n        int xHeight = xRCCorner.x + wHeight * \").concat(u.dilations[0],\";\\n\\n        if (xHeight < 0 || xHeight >= \").concat(c[2],\") {\\n          continue;\\n        }\\n\\n        for (int wWidth = 0; wWidth < \").concat(p[3],\"; wWidth++) {\\n          int xWidth = xRCCorner.y + wWidth * \").concat(u.dilations[1],\";\\n          if (xWidth < 0 || xWidth >= \").concat(c[3],\") {\\n            continue;\\n          }\\n\\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\\n          value += xVal*wVal;\\n        }\\n      }\\n    }\\n    \").concat(l,\"\\n    \").concat(m,\"\\n    \").concat(h.output,\" = vec4(value, .0, .0, .0);\\n  }\\n\");return Object.assign(Object.assign({},n),{output:{dims:f,type:t[0].type,textureType:i.TextureType.unpacked},shaderSource:b,hasMain:!0});}(e,t,u,n);}});};},7708:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.conv2DPacked=t.conv2DPackedPointwise=void 0;var r=n(9754),o=n(5950),i=n(5632);t.conv2DPackedPointwise=function(e,t,n){var o=t[0].dims,a=t[1].dims,s=(0,r.calculateOutputShape)(o,a,n.dilations,n.pads,n.strides),u=e.reshapePacked(t[0],[o[1],o[2]*o[3]]),l=e.reshapePacked(t[1],[a[0],a[1]]),c=t.length>2?[l,u,t[2]]:[l,u],p=e.run((0,i.createPackedMatmulProgramInfoLoader)(e,c,n),c);return e.reshapePacked(p,s);},t.conv2DPacked=function(e,t,n){var a=t[0].dims,s=t[1].dims,u=(0,r.calculateOutputShape)(a,s,n.dilations,n.pads,n.strides),l=e.run((0,o.createPackedIm2ColProgramInfoLoader)(e,t[0],t[1],u,n),[t[0]]),c=e.reshapePacked(t[1],[s[0],s[1]*s[2]*s[3]]),p=3===t.length?[c,l,t[2]]:[c,l],d=e.run((0,i.createPackedMatmulProgramInfoLoader)(e,p,n),p);return e.reshapePacked(d,u);};},5042:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseConvTransposeAttributes=t.convTranspose=void 0;var r=n(4910),o=n(6757),i=n(5639),a=n(2150),s=function s(e,t,n,r,o,i){return(e-1)*t+n+(r-1)*o+1-i;},u=function u(e,t,n,r,o){var i=Math.floor(e/2);\"SAME_UPPER\"===t?(n[r]=i,n[o]=e-i):\"SAME_LOWER\"===t&&(n[r]=e-i,n[o]=i);};t.convTranspose=function(e,t,n){return d(t,n),l(e,t,n);};var l=function l(e,t,n){var r=p(n,t);return[c(e,t,r)];},c=function c(e,t,n){return e.run(function(e,t,n){var r=(s=t.length>2,u=n.cacheKey,{name:\"ConvTranspose\",inputNames:s?[\"X\",\"W\",\"B\"]:[\"X\",\"W\"],inputTypes:s?[i.TextureType.unpacked,i.TextureType.unpacked,i.TextureType.unpacked]:[i.TextureType.unpacked,i.TextureType.unpacked],cacheHint:u});var s,u;return Object.assign(Object.assign({},r),{get:function get(){return function(e,t,n,r){var s=t.length>2?\"getB(output_channel)\":\"0.0\",u=t[0].dims,l=t[1].dims,c=l[1],p=l[0]/r.group,d=[t[0].dims[0],t[1].dims[1]*r.group].concat(_toConsumableArray(r.outputShape)),f=(0,o.getGlsl)(e.session.backend.glContext.version),_ref21=(0,a.getActivationSnippet)(r),h=_ref21.activationFunction,g=_ref21.applyActivation,m=\"\\n  const ivec2 strides = ivec2(\".concat(r.strides[0],\", \").concat(r.strides[1],\");\\n  const ivec2 pads = ivec2(\").concat(r.pads[0],\", \").concat(r.pads[1],\");\\n  \").concat(h,\"\\n  void main() {\\n    ivec4 coords = getOutputCoords();\\n    int batch = coords.x;\\n    int output_channel = coords.y;\\n\\n    ivec2 loc = coords.zw + pads;\\n\\n    int group_id = output_channel / \").concat(c,\";\\n    int wOutChannel = output_channel - group_id * \").concat(c,\";\\n\\n    float value = \").concat(s,\";\\n    for (int inChannelOffset = 0; inChannelOffset < \").concat(p,\"; inChannelOffset++) {\\n      int input_channel = group_id * \").concat(p,\" + inChannelOffset;\\n      for (int wWOff = 0; wWOff < \").concat(l[2],\"; wWOff++) {\\n        for (int wHOff = 0; wHOff < \").concat(l[3],\"; wHOff++) {\\n          ivec2 wOff = ivec2(wWOff * \").concat(r.dilations[0],\", wHOff * \").concat(r.dilations[1],\");\\n          ivec2 wLoc = loc - wOff;\\n          ivec2 wLocIn = wLoc / strides;\\n          if (\\n            wLocIn * strides == wLoc &&\\n            wLocIn.x >= 0 && wLocIn.x < \").concat(u[2],\" &&\\n            wLocIn.y >= 0 && wLocIn.y < \").concat(u[3],\"\\n          ) {\\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\\n            value += xVal * wVal;\\n          }\\n        }\\n      }\\n    }\\n    \").concat(g,\"\\n    \").concat(f.output,\" = vec4(value, .0, .0, .0);\\n  }\\n\");return Object.assign(Object.assign({},n),{output:{dims:d,type:t[0].type,textureType:i.TextureType.unpacked},shaderSource:m,hasMain:!0});}(e,t,r,n);}});}(e,t,n),t);},p=function p(e,t){var n=e.kernelShape.slice();if(0===e.kernelShape.length)for(var _e39=2;_e39<t[1].dims.length;++_e39)n.push(t[1].dims[_e39]);var r=e.pads.slice(),o=e.outputShape.slice();(function(e,t,n,r,o,i,a,l){var c=e.length-2,p=0===l.length;for(var _d7=0;_d7<c;++_d7){var f=p?e[_d7+2]*i[_d7]:l[_d7],h=s(e[_d7+2],i[_d7],o[_d7],t[_d7],n[_d7],f);u(h,r,o,_d7,_d7+c),p&&l.push(i[_d7]*(e[_d7+2]-1)+a[_d7]+(t[_d7]-1)*n[_d7]+1-o[_d7]-o[_d7+c]);}})(t[0].dims,n,e.dilations,e.autoPad,r,e.strides,e.outputPadding,o);var i=Object.assign({},e);return Object.assign(i,{kernelShape:n,pads:r,outputShape:o,cacheKey:e.cacheKey}),i;};t.parseConvTransposeAttributes=function(e){var t=e.attributes,n=(0,a.parseInternalActivationAttributes)(t),o=t.getString(\"auto_pad\",\"NOTSET\"),i=t.getInts(\"dilations\",[1,1]),s=t.getInt(\"group\",1),u=t.getInts(\"kernel_shape\",[]),l=t.getInts(\"output_padding\",[0,0]),c=t.getInts(\"output_shape\",[]),p=t.getInts(\"pads\",[0,0,0,0]),d=t.getInts(\"strides\",[1,1]);return(0,r.createAttributeWithCacheKey)(Object.assign({autoPad:o,dilations:i,group:s,kernelShape:u,outputPadding:l,outputShape:c,pads:p,strides:d},n));};var d=function d(e,t){if(!e||2!==e.length&&3!==e.length)throw new Error(\"Conv requires 2 or 3 inputs\");if(4!==e[0].dims.length||4!==e[1].dims.length)throw new Error(\"currently only support 2-dimensional conv\");if(e[0].dims[1]!==e[1].dims[0])throw new Error(\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\");var n=e[1].dims[1]*t.group;if(3===e.length&&(1!==e[2].dims.length||e[2].dims[0]!==n))throw new Error(\"invalid bias\");var r=e[0].dims.length-2;if(t.dilations.length!==r)throw new Error(\"dilations should be \".concat(r,\"D\"));if(t.strides.length!==r)throw new Error(\"strides should be \".concat(r,\"D\"));if(t.pads.length!==2*r)throw new Error(\"pads should be \".concat(2*r,\"D\"));if(t.outputPadding.length!==r)throw new Error(\"output_padding should be \".concat(r,\"D\"));if(0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\"invalid kernel shape\");if(0!==t.outputShape.length&&t.outputShape.length!==e[0].dims.length-2)throw new Error(\"invalid output shape\");if(\"float32\"!==e[0].type||\"float32\"!==e[1].type)throw new Error(\"ConvTranspose input(X,W) should be float tensor\");if(3===e.length&&\"float32\"!==e[2].type)throw new Error(\"ConvTranspose input(bias) should be float tensor\");};},9754:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseConvAttributes=t.conv=t.calculateOutputShape=void 0;var r=n(4910),o=n(7273),i=n(7825),a=n(7708),s=n(3281),u=n(2150),l=n(1625),c=n(8276);t.calculateOutputShape=function(e,t,n,r,o){var _ref22;var i=e[0],a=e.slice(2),s=a.length,u=t[0],l=t.slice(2).map(function(e,t){return e+(e-1)*(n[t]-1);}),c=a.map(function(e,t){return e+r[t]+r[t+s];}).map(function(e,t){return Math.floor((e-l[t]+o[t])/o[t]);});return(_ref22=[i,u]).concat.apply(_ref22,_toConsumableArray(c));},t.conv=function(e,t,n){return g(t,n),p(e,t,n);};var p=function p(e,t,n){var r=h(n,t),o=e.session.pack,s=1===r.kernelShape[0]&&1===r.kernelShape[1];return r.group>1?[e.run((0,i.createUnpackedGroupedConvProgramInfoLoader)(e,t,r),t)]:s&&o?[d(e,t,r)]:o&&4===t[0].dims.length&&1===t[0].dims[0]&&!s?[(0,a.conv2DPacked)(e,t,r)]:[f(e,t,r)];},d=function d(e,n,r){var o=n[0].dims,i=n[1].dims,a=(0,t.calculateOutputShape)(o,i,r.dilations,r.pads,r.strides),s=e.reshapeUnpacked(n[0],[o[1],o[2]*o[3]]),u=e.reshapeUnpacked(n[1],[i[0],i[1]]),l=n.length>2?[u,s,n[2]]:[u,s],p=e.run((0,c.createMatmulProgramInfoLoader)(l,r),l);return e.reshapeUnpacked(p,a);},f=function f(e,n,r){var o=n[0].dims,i=n[1].dims,a=(0,t.calculateOutputShape)(o,i,r.dilations,r.pads,r.strides),u=e.run((0,l.createIm2ColProgramInfoLoader)(e,n[0],n[1],a,r),[n[0]]),c=3===n.length?[u,n[1],n[2]]:[u,n[1]];return e.run((0,s.createDotProductProgramInfoLoader)(e,n,a,r),c);},h=function h(e,t){var n=e.kernelShape.slice();if(0===e.kernelShape.length)for(var _e40=2;_e40<t[1].dims.length;++_e40)n.push(t[1].dims[_e40]);var r=e.pads.slice();o.PoolConvUtil.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,n,r,e.autoPad);var i=Object.assign({},e);return Object.assign(i,{kernelShape:n,pads:r,cacheKey:e.cacheKey}),i;};t.parseConvAttributes=function(e){var t=e.attributes,n=(0,u.parseInternalActivationAttributes)(t),o=t.getString(\"auto_pad\",\"NOTSET\"),i=t.getInts(\"dilations\",[1,1]),a=t.getInt(\"group\",1),s=t.getInts(\"kernel_shape\",[]),l=t.getInts(\"pads\",[0,0,0,0]),c=t.getInts(\"strides\",[1,1]);return(0,r.createAttributeWithCacheKey)(Object.assign({autoPad:o,dilations:i,group:a,kernelShape:s,pads:l,strides:c},n));};var g=function g(e,t){if(!e||2!==e.length&&3!==e.length)throw new Error(\"Conv requires 2 or 3 inputs\");if(4!==e[0].dims.length||4!==e[1].dims.length)throw new Error(\"currently only support 2-dimensional conv\");if(e[0].dims[1]!==e[1].dims[1]*t.group)throw new Error(\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error(\"invalid bias\");var n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(\"dilations should be \".concat(n,\"D\"));if(t.strides.length!==n)throw new Error(\"strides should be \".concat(n,\"D\"));if(t.pads.length!==2*n)throw new Error(\"pads should be \".concat(2*n,\"D\"));if(0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\"invalid kernel shape\");if(\"float32\"!==e[0].type||\"float32\"!==e[1].type)throw new Error(\"Conv input(X,W) should be float tensor\");if(3===e.length&&\"float32\"!==e[2].type)throw new Error(\"Conv input(bias) should be float tensor\");};},6742:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseDepthToSpaceAttributes=t.depthToSpace=void 0;var r=n(5707);t.depthToSpace=function(e,t,n){o(t);var i=n.blocksize,a=i*i,s=\"DCR\"===n.mode?[0,3,4,1,5,2]:[0,1,4,2,5,3],u=\"DCR\"===n.mode?[t[0].dims[0],i,i,t[0].dims[1]/a,t[0].dims[2],t[0].dims[3]]:[t[0].dims[0],t[0].dims[1]/a,i,i,t[0].dims[2],t[0].dims[3]],l=e.reshapeUnpacked(t[0],u),c={perm:s,cacheKey:\"\".concat(s)},_ref23=(0,r.transpose)(e,[l],c),_ref24=_slicedToArray(_ref23,1),p=_ref24[0],d=[t[0].dims[0],t[0].dims[1]/a,t[0].dims[2]*i,t[0].dims[3]*i];return[e.reshapeUnpacked(p,d)];},t.parseDepthToSpaceAttributes=function(e){var t=e.attributes.getInt(\"blocksize\");if(t<1)throw new Error(\"blocksize must be >= 1, but got : \".concat(t,\" for DepthToSpace\"));var n=e.attributes.getString(\"mode\",\"DCR\");if(\"DCR\"!==n&&\"CRD\"!==n)throw new Error(\"unrecognized mode: \".concat(n,\" for DepthToSpace\"));return{mode:n,blocksize:t};};var o=function o(e){if(1!==e.length)throw new Error(\"DepthToSpace expect 1 inputs, but got \".concat(e.length));if(\"string\"===e[0].type||4!==e[0].dims.length)throw new TypeError(\"DepthToSpace input should be a 4-D numeric tensor\");};},3281:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createDotProductProgramInfoLoader=void 0;var r=n(7273),o=n(6757),i=n(5639),a=n(2150),s=n(1625);t.createDotProductProgramInfoLoader=function(e,t,n,u){var l=function(e,t){return{name:\"ConvDotProduct\",inputNames:e?[\"Im2Col\",\"K\",\"B\"]:[\"Im2Col\",\"K\"],inputTypes:e?[i.TextureType.unpacked,i.TextureType.packedLastDimension,i.TextureType.unpacked]:[i.TextureType.unpacked,i.TextureType.packedLastDimension],cacheKey:t.activationCacheKey};}(t.length>2,u);return Object.assign(Object.assign({},l),{get:function get(){return function(e,t,n,u,l){var c=n[0].dims,p=n[1].dims,d=[p[0],Math.ceil(c[1]*p[2]*p[3]/4)],f=(0,s.calculateIm2ColDims)(c,p,u),_e$calculateTextureWi3=e.calculateTextureWidthAndHeight(d,i.TextureType.packedLastDimension),_e$calculateTextureWi4=_slicedToArray(_e$calculateTextureWi3,2),h=_e$calculateTextureWi4[0],g=_e$calculateTextureWi4[1],m=r.ShapeUtil.computeStrides(f),_e$calculateTextureWi5=e.calculateTextureWidthAndHeight(f,i.TextureType.packedLastDimension),_e$calculateTextureWi6=_slicedToArray(_e$calculateTextureWi5,2),b=_e$calculateTextureWi6[0],y=_e$calculateTextureWi6[1],w=u.length,_=n.length<3?\"0.0\":\"_B(b)\",v=Math.ceil(c[1]*p[2]*p[3]/4),_ref25=(0,a.getActivationSnippet)(l),x=_ref25.activationFunction,T=_ref25.applyActivation,S=(0,o.getGlsl)(e.session.backend.glContext.version),O=\"\\n\".concat(x,\"\\nfloat process(int indices[\").concat(w,\"]) {\\n  int b[1];\\n  b[0] = indices[1];\\n  int im2col[4];\\n  im2col[0] = indices[0];\\n  im2col[1] = indices[2];\\n  im2col[2] = indices[3];\\n  int im2colOffset = im2col[0] * \").concat(m[0],\" + im2col[1] * \").concat(m[1],\" + im2col[2] * \").concat(m[2],\";\\n  int kernelOffset = indices[1] * \").concat(d[1],\";\\n  float value = \").concat(_,\";\\n  for (int i = 0; i < \").concat(v,\"; ++i) {\\n    vec2 im2colCoords = offsetToCoords(im2colOffset, \").concat(b,\", \").concat(y,\");\\n    vec2 kernelCoords = offsetToCoords(kernelOffset, \").concat(h,\", \").concat(g,\");\\n    value += dot(\").concat(S.texture2D,\"(Im2Col, im2colCoords), \").concat(S.texture2D,\"(K, kernelCoords));\\n    ++im2colOffset;\\n    ++kernelOffset;\\n  }\\n  \").concat(T,\"\\n  return value;\\n}\");return Object.assign(Object.assign({},t),{output:{dims:u,type:n[0].type,textureType:i.TextureType.unpacked},shaderSource:O});}(e,l,t,n,u);}});};},4125:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseFlattenAttributes=t.flatten=void 0;var r=n(7273);t.flatten=function(e,t,n){o(t,n);var i=r.ShapeUtil.flattenShape(t[0].dims,n);return[e.reshapeUnpacked(t[0],i)];},t.parseFlattenAttributes=function(e){return e.attributes.getInt(\"axis\",1);};var o=function o(e,t){if(!e||1!==e.length)throw new Error(\"Flatten requires 1 input.\");var n=e[0].dims.length;if(0===n)throw new Error(\"scalar tensor is not supported.\");if(t<-n||t>n)throw new Error(\"Invalid axis\");if(\"string\"===e[0].type)throw new Error(\"string tensor is not supported.\");};},2150:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseInternalActivationAttributes=t.getActivationSnippet=void 0;var r=n(7273),o=n(9087);t.getActivationSnippet=function(e){var t;switch(e.activation){case\"Relu\":t=(0,o.glslRelu)();break;case\"Sigmoid\":t=(0,o.glslSigmoid)();break;case\"Clip\":t=(0,o.glslClip)(e.clipMin,e.clipMax);break;default:return{activationFunction:\"\",applyActivation:\"\"};}var n=t.name;return{activationFunction:t.body,applyActivation:\"value = \".concat(n,\"_(value);\")};},t.parseInternalActivationAttributes=function(e){var t=e.getString(\"activation\",\"\");if(\"Clip\"===t){var _e$getFloats=e.getFloats(\"activation_params\",[r.MIN_CLIP,r.MAX_CLIP]),_e$getFloats2=_slicedToArray(_e$getFloats,2),_n32=_e$getFloats2[0],_o20=_e$getFloats2[1];return{activation:t,clipMax:_o20,clipMin:_n32,activationCacheKey:\"\".concat(t,\":\").concat(_n32,\",\").concat(_o20)};}return{activation:t,activationCacheKey:t};};},6149:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseGatherAttributes=t.gather=void 0;var r=n(4910),o=n(6145),i=n(7273),a=n(5639);t.gather=function(e,t,n){return l(t,n.axis),[e.run(u(e,t,n),t)];},t.parseGatherAttributes=function(e){return(0,r.createAttributeWithCacheKey)({axis:e.attributes.getInt(\"axis\",0)});};var s={name:\"Gather\",inputNames:[\"A\",\"B\"],inputTypes:[a.TextureType.unpacked,a.TextureType.unpacked]},u=function u(e,t,n){var r=Object.assign(Object.assign({},s),{cacheHint:n.cacheKey});return Object.assign(Object.assign({},r),{get:function get(){return function(e,t,n,r){var o=n[0].dims.slice(),s=n[1].dims.slice(),u=new Array(o.length+s.length-1);r=i.ShapeUtil.normalizeAxis(r,o.length);var l=[];for(var _e41=0;_e41<u.length;_e41++)_e41<r?(u[_e41]=o[_e41],l.push(\"inputIdx[\".concat(_e41,\"] = outputIdx[\").concat(_e41,\"];\"))):_e41<r+s.length?(u[_e41]=s[_e41-r],l.push(\"indexDataIdx[\".concat(_e41-r,\"] = outputIdx[\").concat(_e41,\"];\"))):(u[_e41]=o[_e41-s.length+1],l.push(\"inputIdx[\".concat(_e41-s.length+1,\"] = outputIdx[\").concat(_e41,\"];\")));var c=\"\\n      float process(int outputIdx[\".concat(u.length||1,\"]) {\\n        int inputIdx[\").concat(o.length,\"];\\n        int indexDataIdx[\").concat(s.length||1,\"];\\n        indexDataIdx[0] = 0;\\n        \").concat(l.join(\"\\n        \"),\"\\n        int idx = int(_B(indexDataIdx));\\n        inputIdx[\").concat(r,\"] = idx < 0 ? idx + \").concat(o[r],\" : idx;\\n        return _A(inputIdx);\\n      }\");return Object.assign(Object.assign({},t),{output:{dims:u,type:n[0].type,textureType:a.TextureType.unpacked},shaderSource:c});}(0,r,t,n.axis);}});},l=function l(e,t){if(!e||2!==e.length)throw new Error(\"Gather requires 2 inputs.\");var n=e[0].dims.length;if(n<1)throw new Error(\"Invalid input shape.\");if(t<-n||t>n-1)throw new Error(\"Invalid axis.\");if(-1===o.NUMBER_TYPES.indexOf(e[0].type))throw new Error(\"Invaid input type.\");if(\"int32\"!==e[1].type&&\"int16\"!==e[1].type)throw new Error(\"Invaid input type.\");};},5378:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseGemmAttributesV11=t.parseGemmAttributesV7=t.gemm=void 0;var r=n(4910),o=n(7273),i=n(5639);t.gemm=function(e,t,n){return l(t,n),[e.run(s(t,n),t)];};var a=function a(e,t){var n=0!==e.attributes.getInt(\"transA\",0),o=0!==e.attributes.getInt(\"transB\",0),i=e.attributes.getFloat(\"alpha\",1),a=e.attributes.getFloat(\"beta\",1);return(0,r.createAttributeWithCacheKey)({transA:n,transB:o,alpha:i,beta:a,isOptionalC:t});};t.parseGemmAttributesV7=function(e){return a(e,!1);},t.parseGemmAttributesV11=function(e){return a(e,!0);};var s=function s(e,t){var n={name:\"Gemm\",inputNames:3===e.length?[\"A\",\"B\",\"C\"]:[\"A\",\"B\"],inputTypes:3===e.length?[i.TextureType.unpacked,i.TextureType.unpacked,i.TextureType.unpacked]:[i.TextureType.unpacked,i.TextureType.unpacked],key:t.cacheKey};return Object.assign(Object.assign({},n),{get:function get(){return u(n,e,t);}});},u=function u(e,t,n){var r=t[0].dims.slice(),a=t[1].dims.slice(),_o$GemmUtil$getShapeO=o.GemmUtil.getShapeOfGemmResult(r,n.transA,a,n.transB,3===t.length?t[2].dims:void 0),_o$GemmUtil$getShapeO2=_slicedToArray(_o$GemmUtil$getShapeO,2),s=_o$GemmUtil$getShapeO2[0],u=_o$GemmUtil$getShapeO2[1],l=[s,u];if(!l)throw new Error(\"Can't use gemm on the given tensors\");var c=r[r.length-1],p=\"\";n.transA&&(c=r[0]),n.transA&&n.transB?p=\"value += _A_T(a) * _B_T(b);\":n.transA&&!n.transB?p=\"value += _A_T(a) * _B(b);\":!n.transA&&n.transB?p=\"value += _A(a) * _B_T(b);\":n.transA||n.transB||(p=\"value += _A(a) * _B(b);\");var d=l.length,f=\"\\n      float process(int indices[\".concat(d,\"]) {\\n          int a[\").concat(d,\"];\\n          int b[\").concat(d,\"];\\n          \").concat(3===t.length?\"int c[\".concat(t[2].dims.length,\"];\"):\"\",\"\\n\\n          copyVec(indices, a);\\n          copyVec(indices, b);\\n          \").concat(3===t.length?\"bcastIndices_C(indices, c);\":\"\",\"\\n\\n          float value = 0.0;\\n          for (int k=0; k<\").concat(c,\"; ++k) {\\n              a[\").concat(d-1,\"] = k;\\n              b[\").concat(d-2,\"] = k;\\n              \").concat(p,\"\\n          }\\n\\n          value = value * alpha;\\n          \").concat(3===t.length?\"value += beta * _C(c);\":\"\",\"\\n          return value;\\n      }\");return Object.assign(Object.assign({},e),{output:{dims:l,type:t[0].type,textureType:i.TextureType.unpacked},variables:[{name:\"alpha\",type:\"float\",data:n.alpha},{name:\"beta\",type:\"float\",data:n.beta}],shaderSource:f});},l=function l(e,t){if(!e)throw new Error(\"Input is missing\");if(t.isOptionalC&&(e.length<2||e.length>3))throw new Error(\"Invaid input shape.\");if(!t.isOptionalC&&3!==e.length)throw new Error(\"Gemm requires 3 inputs\");if(3===e.length&&1!==e[2].dims.length&&2!==e[2].dims.length)throw new Error(\"Invalid input shape of C\");if(\"float32\"!==e[0].type&&\"float64\"!==e[0].type||\"float32\"!==e[1].type&&\"float64\"!==e[1].type||3===e.length&&\"float32\"!==e[2].type&&\"float64\"!==e[2].type)throw new Error(\"Invalid input type.\");if(e[0].type!==e[1].type||3===e.length&&e[0].type!==e[2].type)throw new Error(\"Input types are mismatched\");};},5950:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createPackedIm2ColProgramInfoLoader=void 0;var r=n(6757),o=n(5639),i=n(5614);t.createPackedIm2ColProgramInfoLoader=function(e,t,n,a,s){var u=(l=s.cacheKey,{name:\"Im2Col (packed)\",inputNames:[\"A\"],inputTypes:[o.TextureType.packed],cacheHint:l});var l;return Object.assign(Object.assign({},u),{get:function get(){return function(e,t,n,a,s,u){var l=n.dims,c=a.dims,p=s.length,d=[c[1]*c[2]*c[3],s[2]*s[3]],f=c[2]*c[3],h=(0,i.unpackFromChannel)(),g=(0,r.getGlsl)(e.session.backend.glContext.version);var m=\"\";for(var _e42=0;_e42<=1;_e42++)for(var _t35=0;_t35<=1;_t35++)m+=\"\\n            blockIndex = rc.x + \".concat(_t35,\";\\n            pos = rc.y + \").concat(_e42,\";\\n\\n            if(blockIndex < \").concat(d[1],\" && pos < \").concat(d[0],\") {\\n              offsetY = int(blockIndex / (\").concat(s[p-1],\")) * \").concat(u.strides[0],\" -\\n                \").concat(u.pads[0],\";\\n              d0 = offsetY + \").concat(u.dilations[0],\" * (imod(pos, \").concat(f,\") / \").concat(c[2],\");\\n\\n              if(d0 < \").concat(l[2],\" && d0 >= 0) {\\n                offsetX = imod(blockIndex, \").concat(s[p-1],\") * \").concat(u.strides[1],\" -\\n                  \").concat(u.pads[1],\";\\n                d1 = offsetX + \").concat(u.dilations[1],\" * imod(imod(pos, \").concat(f,\"), \").concat(c[2],\");\\n\\n                if(d1 < \").concat(l[3],\" && d1 >= 0) {\\n\\n                  ch = int(float(pos)/ \").concat(f,\".);\\n                    innerDims = vec2(d0, d1);\\n                    result[\").concat(2*_e42+_t35,\"] = getChannel(\\n                      getA(0, ch, int(innerDims.x),\\n                      int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n\\n          \");var b=\"\\n      \".concat(h,\"\\n\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n          vec4 result = vec4(0.0);\\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n          vec2 innerDims;\\n          \").concat(m,\"\\n          \").concat(g.output,\" = result;\\n      }\\n            \");return Object.assign(Object.assign({},t),{output:{dims:d,type:n.type,textureType:o.TextureType.packed},shaderSource:b,hasMain:!0});}(e,u,t,n,a,s);}});};},1625:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.calculateIm2ColDims=t.createIm2ColProgramInfoLoader=void 0;var r=n(5639);t.createIm2ColProgramInfoLoader=function(e,n,o,i,a){var s=(u=a.cacheKey,{name:\"Im2Col\",inputNames:[\"X\"],inputTypes:[r.TextureType.unpacked],cacheHint:u});var u;return Object.assign(Object.assign({},s),{get:function get(){return function(e,n,o,i,a,s){var u=o.dims,l=i.dims,c=a.length,p=(0,t.calculateIm2ColDims)(u,l,a,4),d=\"\\n        const int XC = \".concat(u[1],\";\\n        const int XH = \").concat(u[2],\";\\n        const int XW = \").concat(u[3],\";\\n        const int KH = \").concat(s.kernelShape[0],\";\\n        const int KW = \").concat(s.kernelShape[1],\";\\n        const int dilationH = \").concat(s.dilations[0],\";\\n        const int dilationW = \").concat(s.dilations[1],\";\\n        const int strideH = \").concat(s.strides[0],\";\\n        const int strideW = \").concat(s.strides[1],\";\\n        const int padH = \").concat(s.pads[0],\";\\n        const int padW = \").concat(s.pads[1],\";\\n        const int KHKW = KH*KW;\\n        const int XCKHKW = XC * KHKW;\\n        const int outputChannels = 4;\\n        vec4 process(int indices[\").concat(c,\"]) {\\n          int b  = indices[0]; // batch size\\n          int oh = indices[1] * strideH - padH; //output height\\n          int ow = indices[2] * strideW - padW; //output width\\n          int p = indices[3] * outputChannels; //patch\\n          vec4 value = vec4(0.0);\\n          for(int i=0; i < outputChannels; ++i) {\\n            if(p < XCKHKW) {\\n              int patchC = p / KHKW;\\n              int patchH = (p - patchC*KHKW) / KW;\\n              int patchW = (p - patchC*KHKW) - patchH * KW;\\n              int xh2 = oh + patchH * dilationH;\\n              int xw2 = ow + patchW * dilationW;\\n              int x[\").concat(u.length,\"];\\n              x[0] = b;\\n              x[1] = patchC;\\n              x[2] = xh2;\\n              x[3] = xw2;\\n              if(xh2 >= 0 &&\\n                  xh2 < XH &&\\n                  xw2 >= 0 &&\\n                  xw2 < XW) {\\n                value[i] = _X(x);\\n              }\\n            }\\n            ++p;\\n          }\\n          return value;\\n        }\\n        \");return Object.assign(Object.assign({},n),{output:{dims:p,type:o.type,textureType:r.TextureType.packedLastDimension},shaderSource:d});}(0,s,n,o,i,a);}});},t.calculateIm2ColDims=function(e,t,n){var r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:4;return[n[0],n[2],n[3],Math.ceil(e[1]*t[2]*t[3]/r)];};},6981:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseImageScalerAttributes=t.imageScaler=void 0;var r=n(4910),o=n(5639);t.imageScaler=function(e,t,n){return u(t),[e.run(a(e,t,n),t)];},t.parseImageScalerAttributes=function(e){var t=e.attributes.getFloat(\"scale\"),n=e.attributes.getFloats(\"bias\");return(0,r.createAttributeWithCacheKey)({scale:t,bias:n});};var i={name:\"ImageScaler\",inputNames:[\"X\"],inputTypes:[o.TextureType.unpacked]},a=function a(e,t,n){var r=Object.assign(Object.assign({},i),{cacheHint:n.cacheKey});return Object.assign(Object.assign({},r),{get:function get(){return function(e,t,n,r){var i=n[0].dims.slice(),a=i.length,u=\"\\n      \".concat(s(r.bias.length),\"\\n      float process(int indices[\").concat(a,\"]) {\\n        return _X(indices) * scale + getBias(bias, indices[1]);\\n      }\");return Object.assign(Object.assign({},t),{output:{dims:i,type:n[0].type,textureType:o.TextureType.unpacked},variables:[{name:\"bias\",type:\"float\",arrayLength:r.bias.length,data:r.bias},{name:\"scale\",type:\"float\",data:r.scale}],shaderSource:u});}(0,r,t,n);}});},s=function s(e){var t=[\"float getBias(float bias[\".concat(e,\"], int channel) {\")];for(var _n33=0;_n33<e;++_n33)0===_n33?t.push(\"\\tif (channel == \".concat(_n33,\") { return bias[\").concat(_n33,\"]; }\")):_n33===e-1?t.push(\"\\telse { return bias[\".concat(_n33,\"]; }\")):t.push(\"\\telse if (channel == \".concat(_n33,\") { return bias[\").concat(_n33,\"]; }\"));return t.push(\"\\t}\"),t.join(\"\\n\");},u=function u(e){if(!e||1!==e.length)throw new Error(\"ImageScaler requires 1 input.\");if(4!==e[0].dims.length)throw new Error(\"Invalid input shape.\");if(\"float32\"!==e[0].type&&\"float64\"!==e[0].type)throw new Error(\"Invalid input type.\");};},7413:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseInstanceNormalizationAttributes=t.instanceNormalization=void 0;var r=n(6757),o=n(5639);t.instanceNormalization=function(e,t,n){l(t);var r=e.run(a(t[0]),t);return[e.run(u(e,t[0],n,r.dims),[t[0],r,t[1],t[2]])];},t.parseInstanceNormalizationAttributes=function(e){return e.attributes.getFloat(\"epsilon\",1e-5);};var i={name:\"InstanceNormalization_MeanAndVariance\",inputNames:[\"X\"],inputTypes:[o.TextureType.unpacked]},a=function a(e){return Object.assign(Object.assign({},i),{get:function get(){return function(e,t){var n=t.dims.slice(),r=n[1],i=n[2]*n[3],a=[n[0],r],s=\"\\n      vec4 process(int[2] indices) {\\n        vec4 v = vec4(0.0);\\n        int a[4];\\n        a[0] = indices[0];\\n        a[1] = indices[1];\\n        float temp = 0.0;\\n        for(int a2=0; a2<\".concat(n[2],\"; a2++) {\\n          a[2] = a2;\\n          for(int a3=0; a3<\").concat(n[3],\"; a3++) {\\n            a[3] = a3;\\n            float x = _X(a);\\n            temp += x;\\n          }\\n        }\\n        float mean = temp / float(\").concat(i,\");\\n        temp = 0.0;\\n        for(int a2=0; a2<\").concat(n[2],\"; a2++) {\\n          a[2] = a2;\\n          for(int a3=0; a3<\").concat(n[3],\"; a3++) {\\n            a[3] = a3;\\n            float x = _X(a);\\n            temp += (x - mean) * (x - mean);\\n          }\\n        }\\n        v.r = mean;\\n        v.g = temp / float(\").concat(i,\");\\n\\n        return v;\\n      }\");return Object.assign(Object.assign({},e),{output:{dims:a,type:t.type,textureType:o.TextureType.packedLastDimension},shaderSource:s});}(i,e);}});},s={name:\"InstanceNormalization_ComputeOutput\",inputNames:[\"X\",\"MeanAndVariance\",\"Scale\",\"B\"],inputTypes:[o.TextureType.unpacked,o.TextureType.packedLastDimension,o.TextureType.unpacked,o.TextureType.unpacked]},u=function u(e,t,n,i){var a=Object.assign(Object.assign({},s),{cacheHint:\"\".concat(n)});return Object.assign(Object.assign({},a),{get:function get(){return function(e,t,n,i,a){var s=(0,r.getGlsl)(e.session.backend.glContext.version),_e$calculateTextureWi7=e.calculateTextureWidthAndHeight(a,o.TextureType.packedLastDimension),_e$calculateTextureWi8=_slicedToArray(_e$calculateTextureWi7,2),u=_e$calculateTextureWi8[0],l=_e$calculateTextureWi8[1],c=u/4,p=l,d=\"\\n      vec4 get_MeanAndVariance(int[2] mv) {\\n        int offset = indicesToOffset_MeanAndVariance(mv);\\n        vec2 coords = offsetToCoords(offset, \".concat(c,\", \").concat(p,\");\\n        return \").concat(s.texture2D,\"(MeanAndVariance, coords);\\n      }\\n\\n      float process(int[4] indices) {\\n        int mv[2];\\n        mv[0] = indices[0];\\n        mv[1] = indices[1];\\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\\n        float mean = mean_and_variance.r;\\n        float variance = mean_and_variance.g;\\n\\n        int sb[1];\\n        sb[0] = indices[1];\\n        float scale = _Scale(sb);\\n        float b = _B(sb);\\n\\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\\n      }\");return Object.assign(Object.assign({},t),{output:{dims:n.dims,type:n.type,textureType:o.TextureType.unpacked},variables:[{name:\"epsilon\",type:\"float\",data:i}],shaderSource:d});}(e,a,t,n,i);}});},l=function l(e){if(!e||3!==e.length)throw new Error(\"InstanceNormalization requires 3 inputs.\");var t=e[0],n=e[1],r=e[2];if(t.dims.length<3||1!==n.dims.length||1!==r.dims.length)throw new Error(\"Invalid input shape.\");if(n.dims[0]!==t.dims[1]||r.dims[0]!==t.dims[1])throw new Error(\"Input shapes are mismatched.\");if(\"float32\"!==t.type&&\"float64\"!==t.type||\"float32\"!==n.type&&\"float64\"!==n.type||\"float32\"!==r.type&&\"float64\"!==r.type)throw new Error(\"Invalid input type.\");if(4!==e[0].dims.length)throw new Error(\"Only support 4-D input shape.\");};},7006:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createLrnProgramInfoLoader=t.parseLrnAttributes=t.lrn=void 0;var r=n(4910),o=n(5639);t.lrn=function(e,t,n){return s(t),[e.run(a(t,n),t)];},t.parseLrnAttributes=function(e){var t=e.attributes.getFloat(\"alpha\",1e-4),n=e.attributes.getFloat(\"beta\",.75),o=e.attributes.getFloat(\"bias\",1),i=e.attributes.getInt(\"size\");return(0,r.createAttributeWithCacheKey)({alpha:t,beta:n,bias:o,size:i});};var i={name:\"LRN\",inputNames:[\"X\"],inputTypes:[o.TextureType.unpacked]};function a(e,t){return Object.assign(Object.assign({},i),{cacheHint:t.cacheKey,get:function get(){return function(e,t){var n=e[0].dims[1],r=e[0].dims.length,a=-Math.floor((t.size-1)/2),s=Math.ceil((t.size-1)/2),u=\"float(\".concat(t.alpha,\") / float(\").concat(t.size,\")\"),l=\"\\n    float process(int indices[\".concat(r,\"]) {\\n        int c = indices[1];\\n        float x = _X(indices);\\n        float square_sum = 0.0;\\n\\n        for (int i = \").concat(a,\"; i <= \").concat(s,\"; i++) {\\n          int idx = c + i;\\n          if (c >= 0 && c < \").concat(n,\") {\\n            indices[1] = idx;\\n            float j = _X(indices);\\n            square_sum += j * j;\\n          }\\n        }\\n        return x / pow(float(\").concat(t.bias,\") + \").concat(u,\" * square_sum, float(\").concat(t.beta,\"));\\n    }\");return Object.assign(Object.assign({},i),{cacheHint:t.cacheKey,output:{dims:e[0].dims,type:e[0].type,textureType:o.TextureType.unpacked},shaderSource:l});}(e,t);}});}t.createLrnProgramInfoLoader=a;var s=function s(e){if(!e||1!==e.length)throw new Error(\"LRN requires 1 input.\");if(4!==e[0].dims.length)throw new Error('currently only support LRN for input with \"NCHW\" format');if(\"float32\"!==e[0].type)throw new Error(\"input should be float type\");};},5632:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createPackedMatmulProgramInfoLoader=void 0;var r=n(7273),o=n(6757),i=n(5639),a=n(432),s=n(2150),u=n(8276);t.createPackedMatmulProgramInfoLoader=function(e,t,n){var l=(c=t.length>2,p=n.activationCacheKey,{name:\"MatMul (packed)\",inputNames:c?[\"A\",\"B\",\"Bias\"]:[\"A\",\"B\"],inputTypes:c?[i.TextureType.packed,i.TextureType.packed,i.TextureType.packed]:[i.TextureType.packed,i.TextureType.packed],cacheHint:p});var c,p;return Object.assign(Object.assign({},l),{get:function get(){return function(e,t,n,l){var c=n.length>2,p=c?\"value += getBiasForMatmul();\":\"\",d=n[0].dims,f=n[1].dims,h=r.BroadcastUtil.calcShape(d,f,!0),g=!r.ShapeUtil.areEqual(n[0].dims,n[1].dims);if(!h)throw new Error(\"Can't use matmul on the given tensors\");var m=d[d.length-1],b=Math.ceil(m/2),y=d.length,w=f.length,_=(0,o.getGlsl)(e.session.backend.glContext.version),v=(0,a.getCoordsDataType)(h.length),x=h.length,T=(0,a.getGlChannels)(),_ref26=(0,s.getActivationSnippet)(l),S=_ref26.activationFunction,O=_ref26.applyActivation,A=c?\"\".concat((0,u.getBiasForMatmul)(v,T,n[2].dims,h,!0)):\"\",E=g?\"\".concat(function(e,t,n,o){var i=[],a=[];var s=n[0].dims,u=n[1].dims,l=s.length,c=u.length,p=o.length,d=p-l,f=p-c;i=s.map(function(e,n){return\"coords.\".concat(t[n+d]);}),i[l-1]=\"i*2\",i.join(\", \"),a=u.map(function(e,n){return\"coords.\".concat(t[n+f]);}),a[c-2]=\"i*2\",a.join(\", \");var h=r.BroadcastUtil.getBroadcastDims(s,o),g=r.BroadcastUtil.getBroadcastDims(u,o),m=h.map(function(e){return\"coords.\".concat(t[e+d],\" = 0;\");}).join(\"\\n\"),b=g.map(function(e){return\"coords.\".concat(t[e+f],\" = 0;\");}).join(\"\\n\"),y=\"int lastDim = coords.\".concat(t[p-1],\";\\n  coords.\").concat(t[p-1],\" = coords.\").concat(t[p-2],\";\\n  coords.\").concat(t[p-2],\" = lastDim;\");return\"\\nvec4 getAAtOutCoordsMatmul(int i) {\\n  \".concat(e,\" coords = getOutputCoords();\\n  \").concat(y,\"\\n  \").concat(m,\"\\n  vec4 outputValue = getA(\").concat(i,\");\\n  return outputValue;\\n}\\n\\nvec4 getBAtOutCoordsMatmul(int i) {\\n  \").concat(e,\" coords = getOutputCoords();\\n  \").concat(y,\"\\n  \").concat(b,\"\\n  vec4 outputValue = getB(\").concat(a,\");\\n  return outputValue;\\n}\");}(v,T,n,h)):\"\",I=g?\"getAAtOutCoordsMatmul(i)\":\"getA(\".concat(function(e,t){var n=\"\";for(var _r21=0;_r21<t-2;_r21++)n+=\"rc.\".concat(e[_r21],\", \");return n+=\"rc.\".concat(e[t-2],\", i*2\"),n;}(T,y),\")\"),$=g?\"getBAtOutCoordsMatmul(i)\":\"getB(\".concat(function(e,t){var n=\"\";for(var _r22=0;_r22<t-2;_r22++)n+=\"rc.\".concat(e[_r22],\", \");return n+=\"i*2, rc.\".concat(e[t-1]),n;}(T,w),\")\"),P=\"\\n            \".concat(E,\"\\n            \").concat(A,\"\\n            \").concat(S,\"\\n            void main() {\\n              \").concat(g?\"\":\"\".concat(v,\" rc =\\n          getOutputCoords(); int lastDim = rc.\").concat(T[x-1],\"; rc.\").concat(T[x-1],\" =\\n          rc.\").concat(T[x-2],\"; rc.\").concat(T[x-2],\" = lastDim;\\n      \"),\"\\n\\n              vec4 value = vec4(0);\\n              for (int i = 0; i < \").concat(b,\"; i++) {\\n                vec4 a = \").concat(I,\";\\n                vec4 b = \").concat($,\";\\n\\n                value += (a.rrbb * b.rgrg);\\n                value += (a.ggaa * b.baba);\\n              }\\n              \").concat(p,\"\\n              \").concat(O,\"\\n              \").concat(_.output,\" = value;\\n            }\");return Object.assign(Object.assign({},t),{output:{dims:h,type:n[0].type,textureType:i.TextureType.packed},shaderSource:P,hasMain:!0});}(e,l,t,n);}});};},8276:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.getBiasForMatmul=t.createMatmulProgramInfoLoader=t.parseMatMulAttributes=t.matMul=void 0;var r=n(7273),o=n(5639),i=n(432),a=n(2150),s=n(5632);t.matMul=function(e,t,n){return c(t),e.session.pack?[e.run((0,s.createPackedMatmulProgramInfoLoader)(e,t,n),t)]:[e.run(l(t,n),t)];},t.parseMatMulAttributes=function(e){return(0,a.parseInternalActivationAttributes)(e.attributes);};var u=function u(e,t){return{name:\"MatMul\",inputNames:e?[\"A\",\"B\",\"Bias\"]:[\"A\",\"B\"],inputTypes:e?[o.TextureType.unpacked,o.TextureType.unpacked,o.TextureType.unpacked]:[o.TextureType.unpacked,o.TextureType.unpacked],cacheHint:t};};function l(e,t){var n=u(e.length>2,t.activationCacheKey);return Object.assign(Object.assign({},n),{get:function get(){return function(e,t,n){var s=t[0].dims,u=t[1].dims,l=r.BroadcastUtil.calcShape(s,u,!0);if(!l)throw new Error(\"Can't use matmul on the given tensors\");var c=(0,i.getCoordsDataType)(l.length),d=(0,i.getGlChannels)(),_ref27=(0,a.getActivationSnippet)(n),f=_ref27.activationFunction,h=_ref27.applyActivation,g=t.length>2,m=g?\"value += getBiasForMatmul();\":\"\",b=g?\"\".concat(p(c,d,t[2].dims,l,!1)):\"\",y=l.length,w=s.length,_=u.length,v=\"\\n    \".concat(f,\"\\n    \").concat(b,\"\\n    float process(int indices[\").concat(y,\"]) {\\n        int a[\").concat(w,\"];\\n        int b[\").concat(_,\"];\\n        bcastMatmulIndices_A(indices, a);\\n        bcastMatmulIndices_B(indices, b);\\n\\n        float value;\\n        for (int k=0; k<\").concat(s[s.length-1],\"; ++k) {\\n            a[\").concat(w-1,\"] = k;\\n            b[\").concat(_-2,\"] = k;\\n            value += _A(a) * _B(b);\\n        }\\n        \").concat(m,\"\\n        \").concat(h,\"\\n        return value;\\n    }\");return Object.assign(Object.assign({},e),{output:{dims:l,type:t[0].type,textureType:o.TextureType.unpacked},shaderSource:v});}(n,e,t);}});}t.createMatmulProgramInfoLoader=l;var c=function c(e){if(!e||2!==e.length)throw new Error(\"MatMul requires 2 inputs.\");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error(\"shared dimension does not match.\");if(\"float32\"!==e[0].type&&\"float64\"!==e[0].type||\"float32\"!==e[1].type&&\"float64\"!==e[1].type)throw new Error(\"inputs should be float type\");if(e[0].type!==e[1].type)throw new Error(\"inputs types should match\");};function p(e,t,n,o,i){var a=\"\";var s=n.length,u=o.length,l=u-s;a=u<2&&s>0?\"coords\":n.map(function(e,n){return\"coords.\".concat(t[n+l]);}).join(\", \");var c=r.BroadcastUtil.getBroadcastDims(n,o).map(function(e){return\"coords.\".concat(t[e+l],\" = 0;\");}).join(\"\\n\");var p=\"vec4(outputValue.xx, outputValue.yy)\";return 1===r.ShapeUtil.size(n)&&(p=\"vec4(outputValue.x)\"),i?\"\\nvec4 getBiasForMatmul() {\\n  \".concat(e,\" coords = getOutputCoords();\\n  \").concat(c,\"\\n  vec4 outputValue = getBias(\").concat(a,\");\\n  return \").concat(p,\";\\n}\"):\"\\nfloat getBiasForMatmul() {\\n  \".concat(e,\" coords = getOutputCoords();\\n  \").concat(c,\"\\n  return getBias(coords.x);\\n}\");}t.getBiasForMatmul=p;},9:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createPackProgramInfoLoader=void 0;var r=n(6757),o=n(5639),i=n(432),a=n(5614),s={name:\"pack\",inputNames:[\"A\"],inputTypes:[o.TextureType.unpackedReversed]};t.createPackProgramInfoLoader=function(e,t){return Object.assign(Object.assign({},s),{get:function get(){return function(e,t){var n=(0,r.getGlsl)(e.session.backend.glContext.version),u=t.dims,l=u.length,c=t.dims.length,p=(0,i.getCoordsDataType)(c),d=(0,a.getChannels)(\"rc\",c),f=(h=c,g=d,m=u[u.length-2],b=u[u.length-1],0===h||1===h?\"\":\"\\n    int r = \".concat(g[h-2],\";\\n    int c = \").concat(g[h-1],\";\\n    int rp1 = \").concat(g[h-2],\" + 1;\\n    int cp1 = \").concat(g[h-1],\" + 1;\\n    bool rEdge = rp1 >= \").concat(b,\";\\n    bool cEdge = cp1 >= \").concat(m,\";\\n    \"));var h,g,m,b;var y;y=0===l?[1,1]:1===l?[u[0],1]:[u[c-1],u[c-2]];var w=function(e,t,n){if(0===e)return\"false\";if(1===e)return\"rc > \".concat(t[0]);var r=\"\";for(var _o21=e-2;_o21<e;_o21++)r+=\"\".concat(n[_o21],\" >= \").concat(t[_o21-e+2]),_o21<e-1&&(r+=\"||\");return r;}(c,y,d),_=function(e,t){var n=e.length;if(0===n)return\"getA(), 0, 0, 0\";if(1===n)return\"getA(rc),\\n            rc + 1 >= \".concat(e[0],\" ? 0. : getA(rc + 1),\\n            0, 0\");var r=\"\";if(n>2)for(var _e43=0;_e43<n-2;++_e43)r+=\"\".concat(t[_e43],\",\");return\"getA(\".concat(r,\"r, c),\\n          rEdge ? 0. : getA(\").concat(r,\"rp1, c),\\n          cEdge ? 0. : getA(\").concat(r,\"r, cp1),\\n          rEdge || cEdge ? 0. : getA(\").concat(r,\"rp1, cp1)\");}(u,d),v=\"\\n        void main() {\\n          \".concat(p,\" rc = getOutputCoords();\\n\\n          if(\").concat(w,\") {\\n            \").concat(n.output,\" = vec4(0);\\n          } else {\\n            \").concat(f,\"\\n\\n            \").concat(n.output,\" = vec4(\").concat(_,\");\\n          }\\n        }\\n      \");return Object.assign(Object.assign({},s),{hasMain:!0,output:{dims:t.dims,type:t.type,textureType:o.TextureType.packed},shaderSource:v});}(e,t);}});};},5614:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.unpackFromChannel=t.getChannels=t.getVecChannels=void 0;var r=n(432);function o(e,t){return(0,r.getGlChannels)(t).map(function(t){return\"\".concat(e,\".\").concat(t);});}t.getVecChannels=o,t.getChannels=function(e,t){return 1===t?[e]:o(e,t);},t.unpackFromChannel=function(){return\"\\n    float getChannel(vec4 frag, int dim) {\\n      int modCoord = imod(dim, 2);\\n      return modCoord == 0 ? frag.r : frag.g;\\n    }\\n\\n    float getChannel(vec4 frag, vec2 innerDims) {\\n      vec2 modCoord = mod(innerDims, 2.);\\n      return modCoord.x == 0. ?\\n        (modCoord.y == 0. ? frag.r : frag.g) :\\n        (modCoord.y == 0. ? frag.b : frag.a);\\n    }\\n  \";};},5565:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parsePadAttributesV11=t.padV11=t.parsePadAttributesV2=t.padV2=void 0;var r=n(4910),o=n(7273),i=n(6757),a=n(5639),s={name:\"Pad\",inputNames:[\"A\"],inputTypes:[a.TextureType.unpacked]};t.padV2=function(e,t,n){return c(t),[e.run(Object.assign(Object.assign({},s),{cacheHint:n.cacheKey,get:function get(){return l(e,t[0],n);}}),t)];},t.parsePadAttributesV2=function(e){var t=e.attributes.getString(\"mode\",\"constant\"),n=e.attributes.getFloat(\"value\",0),o=e.attributes.getInts(\"pads\");return(0,r.createAttributeWithCacheKey)({mode:t,value:n,pads:o});},t.padV11=function(e,n,r){p(n);var o=u(e,n,r);return(0,t.padV2)(e,[n[0]],o);},t.parsePadAttributesV11=function(e){return e.attributes.getString(\"mode\",\"constant\");};var u=function u(e,t,n){if(!e.session.isInitializer(t[1].dataId)||t.length>=3&&!e.session.isInitializer(t[2].dataId))throw new Error(\"dynamic pad attributes are not allowed\");var o=Array.from(t[1].integerData),i=t.length>=3?t[2].floatData[0]:0;return(0,r.createAttributeWithCacheKey)({mode:n,pads:o,value:i});},l=function l(e,t,n){var r=o.ShapeUtil.padShape(t.dims.slice(),n.pads),i=r.length,s=\"\\n      \".concat(d(e,t,n),\"\\n      float process(int[\").concat(i,\"] indices) {\\n          return padA(indices);\\n      }\");return{name:\"Pad\",inputNames:[\"A\"],inputTypes:[a.TextureType.unpacked],output:{dims:r,type:t.type,textureType:a.TextureType.unpacked},shaderSource:s};},c=function c(e){if(!e||1!==e.length)throw new Error(\"Pad requires 1 input\");if(\"float32\"!==e[0].type&&\"float64\"!==e[0].type)throw new Error(\"Invalid input type.\");},p=function p(e){if(!e||2!==e.length&&3!==e.length)throw new Error(\"Pad requires 2 or 3 inputs\");if(\"int32\"!==e[1].type)throw new Error(\"Invalid input type.\");if(e.length>=3&&\"string\"===e[2].type)throw new Error(\"Invalid input type.\");},d=function d(e,t,n){var r=(0,i.getGlsl)(e.session.backend.glContext.version),_e$calculateTextureWi9=e.calculateTextureWidthAndHeight(t.dims,a.TextureType.unpacked),_e$calculateTextureWi10=_slicedToArray(_e$calculateTextureWi9,2),s=_e$calculateTextureWi10[0],u=_e$calculateTextureWi10[1],l=o.ShapeUtil.computeStrides(t.dims);switch(n.mode){case\"constant\":return f(r,t.dims,l,s,u,n.pads,n.value);case\"reflect\":return h(r,t.dims,l,s,u,n.pads);case\"edge\":return g(r,t.dims,l,s,u,n.pads);default:throw new Error(\"Invalid mode\");}},f=function f(e,t,n,r,o,i,a){var s=t.length;var u=\"\";for(var _e44=s-1;_e44>=0;--_e44)u+=\"\\n        k = m[\".concat(_e44,\"] - \").concat(i[_e44],\";\\n        if (k < 0)  return constant;\\n        if (k >= \").concat(t[_e44],\") return constant;\\n        offset += k * \").concat(n[_e44],\";\\n        \");return\"\\n      float padA(int m[\".concat(s,\"]) {\\n        const float constant = float(\").concat(a,\");\\n        int offset = 0;\\n        int k = 0;\\n        \").concat(u,\"\\n        vec2 coords = offsetToCoords(offset, \").concat(r,\", \").concat(o,\");\\n        float value = getColorAsFloat(\").concat(e.texture2D,\"(A, coords));\\n        return value;\\n      }\\n      \");},h=function h(e,t,n,r,o,i){var a=t.length;var s=\"\";for(var _e45=a-1;_e45>=0;--_e45)s+=\"\\n        k = m[\".concat(_e45,\"] - \").concat(i[_e45],\";\\n        if (k < 0) { k = -k; }\\n        {\\n          const int _2n_1 = \").concat(2*(t[_e45]-1),\";\\n          k = int( mod( float(k), float(_2n_1) ) ) ;\\n          if(k >= \").concat(t[_e45],\") { k = _2n_1 - k; }\\n        }\\n        offset += k * \").concat(n[_e45],\";\\n        \");return\"\\n      float padA(int m[\".concat(a,\"]) {\\n        int offset = 0;\\n        int k = 0;\\n        \").concat(s,\"\\n        vec2 coords = offsetToCoords(offset, \").concat(r,\", \").concat(o,\");\\n        float value = getColorAsFloat(\").concat(e.texture2D,\"(A, coords));\\n        return value;\\n      }\\n      \");},g=function g(e,t,n,r,o,i){var a=t.length;var s=\"\";for(var _e46=a-1;_e46>=0;--_e46)s+=\"\\n        k = m[\".concat(_e46,\"] - \").concat(i[_e46],\";\\n        if (k < 0)  k = 0;\\n        if (k >= \").concat(t[_e46],\") k = \").concat(t[_e46]-1,\";\\n        offset += k * \").concat(n[_e46],\";\\n      \");return\"\\n      float padA(int m[\".concat(a,\"]) {\\n        int offset = 0;\\n        int k = 0;\\n        \").concat(s,\"\\n        vec2 coords = offsetToCoords(offset, \").concat(r,\", \").concat(o,\");\\n        float value = getColorAsFloat(\").concat(e.texture2D,\"(A, coords));\\n        return value;\\n      }\\n      \");};},2834:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.globalMaxPool=t.parseMaxPoolAttributes=t.maxPool=t.parseGlobalAveragePoolAttributes=t.globalAveragePool=t.parseAveragePoolAttributes=t.averagePool=void 0;var r=n(4910),o=n(7273),i=n(5639);t.averagePool=function(e,t,n){p(t);var r={name:\"AveragePool\",inputNames:[\"X\"],inputTypes:[i.TextureType.unpacked],cacheHint:n.cacheKey};return[e.run(Object.assign(Object.assign({},r),{get:function get(){return a(t,r,!1,n);}}),t)];},t.parseAveragePoolAttributes=function(e){var t=e.attributes.getString(\"auto_pad\",\"NOTSET\"),n=e.attributes.getInt(\"ceil_mode\",0),o=0!==e.attributes.getInt(\"count_include_pad\",0),i=e.attributes.getInts(\"kernel_shape\"),a=e.attributes.getInts(\"strides\",[]),s=e.attributes.getInts(\"pads\",[]);if(0!==n)throw new Error(\"using ceil() in shape computation is not yet supported for AveragePool\");return(0,r.createAttributeWithCacheKey)({autoPad:t,ceilMode:n,countIncludePad:o,kernelShape:i,strides:a,pads:s});};var a=function a(e,t,n,r){var _u21=u(e,r,n),_u22=_slicedToArray(_u21,2),a=_u22[0],s=_u22[1],l=o.ShapeUtil.size(a.kernelShape);var c=\"\";a.countIncludePad?c+=\"value /= float(\".concat(l,\");\"):c+=\"value /= float(\".concat(l,\" - pad);\");var p=\"\\n        \".concat(d(e[0].dims,a,\"value += _X(x);\",c,\"0.0\"),\"\\n      \");return Object.assign(Object.assign({},t),{output:{dims:s,type:e[0].type,textureType:i.TextureType.unpacked},shaderSource:p});};t.globalAveragePool=function(e,t,n){p(t);var r={name:\"GlobalAveragePool\",inputNames:[\"X\"],inputTypes:[i.TextureType.unpacked],cacheHint:\"\".concat(n.countIncludePad)};return[e.run(Object.assign(Object.assign({},r),{get:function get(){return a(t,r,!0,n);}}),t)];},t.parseGlobalAveragePoolAttributes=function(e){var t=0!==e.attributes.getInt(\"count_include_pad\",0);return(0,r.createAttributeWithCacheKey)({autoPad:\"\",ceilMode:0,countIncludePad:t,kernelShape:[],strides:[],pads:[]});},t.maxPool=function(e,t,n){p(t);var r={name:\"MaxPool\",inputNames:[\"X\"],inputTypes:[i.TextureType.unpacked],cacheHint:n.cacheKey};return[e.run(Object.assign(Object.assign({},r),{get:function get(){return s(t,r,!1,n);}}),t)];},t.parseMaxPoolAttributes=function(e){var t=e.attributes.getString(\"auto_pad\",\"NOTSET\"),n=e.attributes.getInt(\"ceil_mode\",0),o=e.attributes.getInts(\"kernel_shape\"),i=e.attributes.getInts(\"strides\",[]),a=e.attributes.getInts(\"pads\",[]),s=e.attributes.getInt(\"storage_order\",0),u=e.attributes.getInts(\"dilations\",[]);if(0!==s)throw new Error(\"column major storage order is not yet supported for MaxPool\");if(0!==n)throw new Error(\"using ceil() in shape computation is not yet supported for MaxPool\");return(0,r.createAttributeWithCacheKey)({autoPad:t,ceilMode:n,countIncludePad:!1,kernelShape:o,strides:i,pads:a,storageOrder:s,dilations:u});};var s=function s(e,t,n,r){var _u23=u(e,r,n),_u24=_slicedToArray(_u23,2),o=_u24[0],a=_u24[1],s=\"\\n      \".concat(d(e[0].dims,o,\"\\n      value = max(_X(x), value);\\n    \",\"\",\"-1e5\"),\"\\n    \");return Object.assign(Object.assign({},t),{output:{dims:a,type:e[0].type,textureType:i.TextureType.unpacked},shaderSource:s});},u=function u(e,t,n){var r=e[0].dims.slice(),i=Object.hasOwnProperty.call(t,\"dilations\"),a=t.kernelShape.slice(),s=t.strides.slice(),u=i?t.dilations.slice():[],l=t.pads.slice();o.PoolConvUtil.adjustPoolAttributes(n,r,a,s,u,l);var c=o.PoolConvUtil.computePoolOutputShape(n,r,s,u,a,l,t.autoPad),p=Object.assign({},t);return i?Object.assign(p,{kernelShape:a,strides:s,pads:l,dilations:u,cacheKey:t.cacheKey}):Object.assign(p,{kernelShape:a,strides:s,pads:l,cacheKey:t.cacheKey}),[p,c];},l={autoPad:\"\",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:\"\"},c={name:\"GlobalMaxPool\",inputNames:[\"X\"],inputTypes:[i.TextureType.unpacked]};t.globalMaxPool=function(e,t){return p(t),[e.run(Object.assign(Object.assign({},c),{get:function get(){return s(t,c,!0,l);}}),t)];};var p=function p(e){if(!e||1!==e.length)throw new Error(\"Pool ops requires 1 input.\");if(\"float32\"!==e[0].type&&\"float64\"!==e[0].type)throw new Error(\"Invalid input type.\");},d=function d(e,t,n,r,i){var a=e.length;if(t.kernelShape.length<=2){var _o22=t.kernelShape[t.kernelShape.length-1],_s5=t.strides[t.strides.length-1],_u25=t.pads[t.pads.length/2-1],_l9=t.pads[t.pads.length-1],_c5=e[a-1];var _p6=\"\",_d8=\"\",_f5=\"\";if(_p6=_u25+_l9!==0?\"\\n          for (int i = 0; i < \".concat(_o22,\"; i++) {\\n            x[\").concat(a,\" - 1] = indices[\").concat(a,\" - 1] * \").concat(_s5,\" - \").concat(_u25,\" + i;\\n            if (x[\").concat(a,\" - 1] < 0 || x[\").concat(a,\" - 1] >= \").concat(_c5,\") {\\n              pad++;\\n              continue;\\n            }\\n            \").concat(n,\"\\n          }\"):\"\\n          for (int i = 0; i < \".concat(_o22,\"; i++) {\\n            x[\").concat(a,\" - 1] = indices[\").concat(a,\" - 1] * \").concat(_s5,\" - \").concat(_u25,\" + i;\\n            \").concat(n,\"\\n          }\"),2===t.kernelShape.length){var _n34=t.kernelShape[t.kernelShape.length-2],_r23=t.strides[t.strides.length-2],_i14=t.pads[t.pads.length/2-2],_s6=t.pads[t.pads.length-2],_u26=e[a-2];_d8=_i14+_s6!==0?\"\\n            for (int j = 0; j < \".concat(_n34,\"; j++) {\\n              x[\").concat(a,\" - 2] = indices[\").concat(a,\" - 2] * \").concat(_r23,\" - \").concat(_i14,\" + j;\\n              if (x[\").concat(a,\" - 2] < 0 || x[\").concat(a,\" - 2] >= \").concat(_u26,\") {\\n                pad+= \").concat(_o22,\";\\n                continue;\\n              }\\n          \"):\"\\n            for (int j = 0; j < \".concat(_n34,\"; j++) {\\n              x[\").concat(a,\" - 2] = indices[\").concat(a,\" - 2] * \").concat(_r23,\" - \").concat(_i14,\" + j;\\n            \"),_f5=\"\\n          }\\n        \";}return\"\\n        float process(int indices[\".concat(a,\"]) {\\n          int x[\").concat(a,\"];\\n          copyVec(indices, x);\\n\\n          float value = \").concat(i,\";\\n          int pad = 0;\\n          \").concat(_d8,\"\\n          \").concat(_p6,\"\\n          \").concat(_f5,\"\\n          \").concat(r,\"\\n          return value;\\n        }\\n      \");}{var _s7=o.ShapeUtil.size(t.kernelShape),_u27=o.ShapeUtil.computeStrides(t.kernelShape),_l10=_u27.length,_c6=t.pads.length,_p7=h(_l10),_d9=f(e,\"inputDims\"),g=f(t.pads,\"pads\"),m=f(_u27,\"kernelStrides\"),b=f(t.strides,\"strides\");var y=\"\";return y=t.pads.reduce(function(e,t){return e+t;})?\"\\n            if (x[j] >= inputDims[j] || x[j] < 0) {\\n              pad++;\\n              isPad = true;\\n              break;\\n            }\\n          }\\n          if (!isPad) {\\n            \".concat(n,\"\\n          }\"):\"\\n          }\\n          \".concat(n,\"\\n        \"),\"\\n        \".concat(_p7,\"\\n        float process(int indices[\").concat(a,\"]) {\\n          int x[\").concat(a,\"];\\n          copyVec(indices, x);\\n          int offset[\").concat(_l10,\"];\\n          int pads[\").concat(_c6,\"];\\n          int inputDims[\").concat(a,\"];\\n          int kernelStrides[\").concat(_l10,\"];\\n          int strides[\").concat(_l10,\"];\\n          \").concat(g,\"\\n          \").concat(_d9,\"\\n          \").concat(b,\"\\n          \").concat(m,\"\\n\\n          float value = \").concat(i,\";\\n          int pad = 0;\\n          bool isPad = false;\\n          for (int i = 0; i < \").concat(_s7,\"; i++) {\\n            offsetToIndices(i, kernelStrides, offset);\\n            isPad = false;\\n            for (int j = \").concat(a,\" - \").concat(_l10,\"; j < \").concat(a,\"; j++) {\\n              x[j] = indices[j] * strides[j - \").concat(a,\" + \").concat(_l10,\"]\\n                + offset[j - \").concat(a,\" + \").concat(_l10,\"] - pads[j - 2];\\n              \").concat(y,\"\\n          }\\n          \").concat(r,\"\\n\\n          return value;\\n        }\\n      \");}},f=function f(e,t){var n=\"\";for(var _r24=0;_r24<e.length;_r24++)n+=\"\\n      \".concat(t,\"[\").concat(_r24,\"] = \").concat(e[_r24],\";\\n    \");return n;},h=function h(e){return\"\\n  void offsetToIndices(int offset, int[\".concat(e,\"] strides, out int[\").concat(e,\"] indices) {\\n    if (\").concat(e,\" == 0) {\\n      return;\\n    }\\n    for (int i = 0; i < \").concat(e,\" - 1; ++i) {\\n      indices[i] = offset / strides[i];\\n      offset -= indices[i] * strides[i];\\n    }\\n    indices[\").concat(e,\" - 1] = offset;\\n  }\");};},1010:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.reduceLogSumSquare=t.reduceLogSum=t.reduceProd=t.reduceMin=t.reduceMax=t.reduceMean=t.reduceSum=t.parseReduceAttributes=void 0;var r=n(4910),o=n(6145),i=n(7273),a=n(5639),s=function s(e,t,n,r,o){l(t);var i={name:r,inputNames:[\"A\"],inputTypes:[a.TextureType.unpacked]};return[e.run(Object.assign(Object.assign({},i),{cacheHint:n.cacheKey,get:function get(){return u(e,t,n,r,o,i);}}),t)];};t.parseReduceAttributes=function(e){var t=e.attributes.getInts(\"axes\",[]),n=1===e.attributes.getInt(\"keepdims\",1);return(0,r.createAttributeWithCacheKey)({axes:t,keepDims:n});};var u=function u(e,t,n,r,o,s){var u=[],l=t[0].dims.length||1,c=[],p=i.ShapeUtil.normalizeAxes(n.axes,t[0].dims.length),d=o(t,p);var f=d[1];for(var _e47=0;_e47<t[0].dims.length;_e47++)p.indexOf(_e47)>=0||0===p.length?(n.keepDims&&u.push(1),f=\"\\n          for(int j\".concat(_e47,\" = 0; j\").concat(_e47,\" < \").concat(t[0].dims[_e47],\"; j\").concat(_e47,\"++) {\\n            inputIdx[\").concat(_e47,\"] = j\").concat(_e47,\";\\n            \").concat(f,\"\\n          }\")):(c.push(\"inputIdx[\".concat(_e47,\"] = outputIdx[\").concat(u.length,\"];\")),u.push(t[0].dims[_e47]));var h=\"\\n      float process(int outputIdx[\".concat(u.length||1,\"]) {\\n        float value;                 // final result\\n        int inputIdx[\").concat(l,\"];      // addressing input data\\n        \").concat(c.join(\"\\n\"),\"\\n        \").concat(d[0],\"       // init ops for reduce max/min\\n        \").concat(f,\"\\n        \").concat(d[2],\"       // final computation for reduce mean\\n        return value;\\n      }\");return Object.assign(Object.assign({},s),{output:{dims:u,type:t[0].type,textureType:a.TextureType.unpacked},shaderSource:h});},l=function l(e){if(!e||1!==e.length)throw new Error(\"Reduce op requires 1 input.\");if(-1===o.NUMBER_TYPES.indexOf(e[0].type))throw new Error(\"Invalid input type.\");};t.reduceSum=function(e,t,n){return s(e,t,n,\"ReduceSum\",function(){return[\"value = 0.0;\",\"value += _A(inputIdx);\",\"\"];});},t.reduceMean=function(e,t,n){return s(e,t,n,\"ReduceMean\",function(e,t){var n=1;for(var _r25=0;_r25<e[0].dims.length;_r25++)(t.indexOf(_r25)>=0||0===t.length)&&(n*=e[0].dims[_r25]);return[\"value = 0.0;\",\"value += _A(inputIdx);\",\"value /= \".concat(n,\".;\")];});},t.reduceMax=function(e,t,n){return s(e,t,n,\"ReduceMax\",function(e,t){var n=[];for(var _r26=0;_r26<e[0].dims.length;_r26++)(t.indexOf(_r26)>=0||0===t.length)&&n.push(\"inputIdx[\".concat(_r26,\"] = 0;\"));return[\"\".concat(n.join(\"\\n\"),\"\\nvalue = _A(inputIdx);\"),\"value = max(value, _A(inputIdx));\",\"\"];});},t.reduceMin=function(e,t,n){return s(e,t,n,\"ReduceMin\",function(e,t){var n=[];for(var _r27=0;_r27<e[0].dims.length;_r27++)(t.indexOf(_r27)>=0||0===t.length)&&n.push(\"inputIdx[\".concat(_r27,\"] = 0;\"));return[\"\".concat(n.join(\"\\n\"),\"\\nvalue = _A(inputIdx);\"),\"value = min(value, _A(inputIdx));\",\"\"];});},t.reduceProd=function(e,t,n){return s(e,t,n,\"ReduceProd\",function(){return[\"value = 1.0;\",\"value *= _A(inputIdx);\",\"\"];});},t.reduceLogSum=function(e,t,n){return s(e,t,n,\"ReduceLogSum\",function(){return[\"value = 0.0;\",\"value += _A(inputIdx);\",\"value = log(value);\"];});},t.reduceLogSumSquare=function(e,t,n){return s(e,t,n,\"ReduceLogSumSquare\",function(){return[\"float t; value = 0.0;\",\"t = _A(inputIdx); value += t * t;\",\"\"];});};},7379:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.isReshapeCheap=t.processDims3D=t.createPackedReshape3DProgramInfoLoader=void 0;var r=n(7273),o=n(6757),i=n(5639),a=n(5614);t.createPackedReshape3DProgramInfoLoader=function(e,t,n){var s=function(e){return{name:\"Reshape (packed)\",inputTypes:[i.TextureType.packed],inputNames:[\"A\"],cacheHint:\"\".concat(e)};}(n);return Object.assign(Object.assign({},s),{get:function get(){return function(e,t,n,s){var u=t.dims,l=s;var c=\"\";for(var _e48=0;_e48<4;_e48++){var _t36=\"\";switch(_e48){case 0:_t36=\"outputCoords = rc;\";break;case 1:_t36=\"outputCoords = ivec3(rc.x, rc.y+1, rc.z);\";break;case 2:_t36=\"outputCoords = ivec3(rc.x, rc.y, rc.z+1);\";break;case 3:_t36=\"outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);\";break;default:throw new Error();}c+=\"\\n        \".concat(_t36,\"\\n        \").concat(_e48>0?\"if(outputCoords.y < rows && outputCoords.z < cols){\":\"\",\"\\n          int flattenedIndex = getFlattenedIndex(outputCoords);\\n\\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\\n\\n          result[\").concat(_e48,\"] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\\n\\n        \").concat(_e48>0?\"}\":\"\",\"\\n      \");}var p=(0,o.getGlsl)(e.session.backend.glContext.version),d=\"\\n      \".concat(function(e){var t=r.ShapeUtil.computeStrides(e),n=[\"b\",\"r\",\"c\"],o=\"index\";return\"\\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\\n      \".concat(t.map(function(e,r){return\"int \".concat(n[r],\" = \").concat(o,\" / \").concat(e,\"; \").concat(r===t.length-1?\"int \".concat(n[r+1],\" = \").concat(o,\" - \").concat(n[r],\" * \").concat(e):\"index -= \".concat(n[r],\" * \").concat(e),\";\");}).join(\"\"),\"\\n      return ivec3(b, r, c);\\n    }\\n  \");}(u),\"\\n      \").concat(function(e){var t=r.ShapeUtil.computeStrides(e);return\"\\n  int getFlattenedIndex(ivec3 coords) {\\n    // reverse y, z order\\n    return coords.x * \".concat(t[0],\" + coords.z * \").concat(t[1],\" + coords.y;\\n  }\\n\");}(l),\"\\n      \").concat((0,a.unpackFromChannel)(),\"\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0.0);\\n\\n        ivec3 outputCoords;\\n        int rows = \").concat(l[2],\";\\n        int cols = \").concat(l[1],\";\\n\\n        \").concat(c,\"\\n        \").concat(p.output,\" = result;\\n      }\\n    \");return Object.assign(Object.assign({},n),{output:{dims:l,type:t.type,textureType:i.TextureType.packed},shaderSource:d,hasMain:!0});}(e,t,s,n);}});},t.processDims3D=function(e){if(0===e.length)return[1,1,1];var t=1;for(var _n35=0;_n35<e.length-2;++_n35)t*=e[_n35];return[t,e.length>1?e[e.length-2]:1,e[e.length-1]];},t.isReshapeCheap=function(e,t){var n=!1;return n=0===e.length||0===t.length||(e.length<2||t.length<2?e[e.length-1]===t[t.length-1]:e[e.length-1]===t[t.length-1]&&e[e.length-2]===t[t.length-2]),n;};},8126:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.reshape=void 0;var r=n(7273);t.reshape=function(e,t){var n=r.ShapeUtil.calculateReshapedDims(t[0].dims,t[1].integerData);return e.session.pack?[e.reshapePacked(t[0],n)]:[e.reshapeUnpacked(t[0],n)];};},2801:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseResizeAttributesV11=t.parseResizeAttributesV10=t.resize=void 0;var r=n(6757),o=n(5639),i=n(432),a=n(5614),s=n(3980),u={name:\"Resize\",inputNames:[\"A\"],inputTypes:[o.TextureType.packed]};t.resize=function(e,t,n){return(0,s.validateInputs)(t,n),[e.run(Object.assign(Object.assign({},u),{cacheHint:n.cacheKey,get:function get(){return l(e,t,n);}}),t)];},t.parseResizeAttributesV10=function(e){return(0,s.parseUpsampleAttributes)(e,10);},t.parseResizeAttributesV11=function(e){return(0,s.parseUpsampleAttributes)(e,11);};var l=function l(e,t,n){var s=(0,r.getGlsl)(e.session.backend.glContext.version),_c7=c(t,n),_c8=_slicedToArray(_c7,2),l=_c8[0],p=_c8[1];if(l.every(function(e){return 1===e;})&&\"tf_crop_and_resize\"!==n.coordinateTransformMode)return Object.assign(Object.assign({},u),{output:{dims:p,type:t[0].type,textureType:o.TextureType.packed},hasMain:!0,shaderSource:\"void main() {\\n                    vec4 v = \".concat(s.texture2D,\"(X, TexCoords);\\n                    \").concat(s.output,\" = v;\\n                }\")});var d=p.length;if(d<2)throw new Error(\"output dimension should be at least 2, but got \".concat(d));var f=p[d-2],h=p[d-1],g=t[0].dims;if(d!==g.length)throw new Error(\"output dimension should match input \".concat(g.length,\", but got \").concat(d));var m=g[d-2],b=g[d-1],y=l[d-2],w=l[d-1];var _=\"\";if(\"linear\"!==n.mode)throw new Error(\"resize (packed) does not support mode: '\".concat(n.mode,\"'\"));switch(n.coordinateTransformMode){case\"asymmetric\":_=\"\\n                    vec4 getSourceFracIndex(ivec4 coords) {\\n                        return vec4(coords) / scaleWHWH;\\n                    }\\n                \";break;case\"half_pixel\":_=\"\\n                    vec4 getSourceFracIndex(ivec4 coords) {\\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\\n                    }\\n                \";break;case\"pytorch_half_pixel\":_=\"\\n                    vec4 getSourceFracIndex(ivec4 coords) {\\n                        vec4 fcoords = vec4(coords);\\n                        return vec4(\\n                            \".concat(h,\".0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\\n                            \").concat(f,\".0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\\n                            \").concat(h,\".0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\\n                            \").concat(f,\".0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\\n                          );\\n                    }\\n                \");break;case\"align_corners\":_=\"\\n                    vec4 getSourceFracIndex(ivec4 coords) {\\n                        vec4 resized = vec4(\".concat(h,\".0 - 1.0, \").concat(f,\".0 - 1.0, \").concat(h,\".0 - 1.0,\\n                            \").concat(f,\".0 - 1.0);\\n                        vec4 original = vec4(\").concat(b,\".0 - 1.0, \").concat(m,\".0 - 1.0, \").concat(b,\".0 - 1.0,\\n                            \").concat(m,\".0 - 1.0);\\n                        vec4 new_scale = original / resized;\\n                        return vec4(coords) * new_scale;\\n                    }\\n                \");break;default:throw new Error(\"resize (packed) does not support coordinateTransformMode:                                 '\".concat(n.coordinateTransformMode,\"'\"));}var v=(0,i.getCoordsDataType)(d),x=\"\\n            const vec2 inputWH = vec2(\".concat(m,\".0, \").concat(b,\".0);\\n            const vec4 scaleWHWH = vec4(float(\").concat(y,\"), float(\").concat(w,\"), float(\").concat(y,\"), float(\").concat(w,\"));\\n            \").concat((0,a.unpackFromChannel)(),\"\\n            \").concat(_,\"\\n            float getAValue(int x10, int r, int c, int d) {\\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\\n            }\\n            void main() {\\n                \").concat(v,\" rc = getOutputCoords();\\n\\n                int batch = rc[0];\\n                int depth = rc[1];\\n\\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\\n\\n                // calculate the source index in fraction\\n                vec4 sourceFrac = getSourceFracIndex(coords);\\n\\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\\n\\n                bool hasNextRow = rc.w < \").concat(f-1,\";\\n                bool hasNextCol = rc.z < \").concat(h-1,\";\\n\\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\\n                vec4 topLeft = vec4(\\n                    getAValue(batch, depth, x00.x, x00.y),\\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\\n\\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\\n                vec4 topRight = vec4(\\n                    getAValue(batch, depth, x00.x, x00.w),\\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\\n\\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\\n                vec4 bottomLeft = vec4(\\n                    getAValue(batch, depth, x00.z, x00.y),\\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\\n\\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\\n                vec4 bottomRight = vec4(\\n                    getAValue(batch, depth, x00.z, x00.w),\\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\\n\\n                // calculate the interpolation fraction on u and v direction\\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\\n\\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\\n\\n                \").concat(s.output,\" = vec4(newValue);\\n            }\\n        \");return Object.assign(Object.assign({},u),{output:{dims:p,type:t[0].type,textureType:o.TextureType.packed},hasMain:!0,shaderSource:x});},c=function c(e,t){var n=e[0].dims;var r,o=t.scales;if(0===o.length){var _i15=e[t.scalesInputIdx];if(_i15&&0!==_i15.size){if(e[t.sizesInputIdx])throw new Error(\"Only one of scales or sizes must be provided as input.\");o=p(_i15,t.mode,t.isResize);}else{var _i16=e[t.sizesInputIdx];if(!_i16||0===_i16.size)throw new Error(\"Either scales or sizes MUST be provided as input.\");r=Array.from(_i16.integerData),o=d(r,n,t.mode,t.isResize);}}else if(e[t.sizesInputIdx])throw new Error(\"Only one of scales or sizes must be provided as input.\");var i=r||n.map(function(e,t){return Math.floor(e*o[t]);});return[o,i];},p=function p(e,t,n){var r=Array.from(e.floatData);return(0,s.scalesValidation)(r,t,n),r;},d=function d(e,t,n,r){var o=t.length,i=new Array(o);for(var _n36=0,_r28=o;_n36<_r28;_n36++)if(0===t[_n36]){if(0!==e[_n36])throw new Error(\"Input dim is zero but required output dim is non-zero.\");i[_n36]=1;}else i[_n36]=e[_n36]/t[_n36];return(0,s.scalesValidation)(i,n,r),i;};},565:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.shape=void 0;var r=n(9240);t.shape=function(e,t){return o(t),[new r.Tensor([t[0].dims.length],\"int32\",void 0,void 0,new Int32Array(t[0].dims))];};var o=function o(e){if(!e||1!==e.length)throw new Error(\"Shape requires 1 input.\");};},2444:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.sliceV10=t.parseSliceAttributes=t.slice=void 0;var r=n(4910),o=n(6145),i=n(7273),a=n(5639),s={name:\"Slice\",inputNames:[\"A\"],inputTypes:[a.TextureType.unpacked]};t.slice=function(e,t,n){return l(t),[e.run(Object.assign(Object.assign({},s),{cacheHint:n.cacheKey,get:function get(){return u(e,t[0],n);}}),t)];},t.parseSliceAttributes=function(e){var t=e.attributes.getInts(\"starts\"),n=e.attributes.getInts(\"ends\"),o=e.attributes.getInts(\"axes\",[]);return(0,r.createAttributeWithCacheKey)({starts:t,ends:n,axes:o});};var u=function u(e,t,n){var r=0===n.axes.length?t.dims.slice(0).map(function(e,t){return t;}):n.axes,o=i.ShapeUtil.normalizeAxes(r,t.dims.length),u=n.starts.map(function(e,n){return e>t.dims[o[n]]-1?t.dims[o[n]]:i.ShapeUtil.normalizeAxis(e,t.dims[o[n]]);}),l=n.ends.map(function(e,n){return e>t.dims[o[n]]-1?t.dims[o[n]]:i.ShapeUtil.normalizeAxis(e,t.dims[o[n]]);}),c=t.dims.slice(),p=[];for(var _e49=0;_e49<o.length;_e49++)c[o[_e49]]=l[_e49]-u[_e49],u[_e49]>0&&p.push(\"outputIdx[\".concat(o[_e49],\"] += \").concat(u[_e49],\";\"));var d=\"\\n      float process(int outputIdx[\".concat(c.length,\"]) {\\n        \").concat(p.join(\"\\n      \"),\"\\n        return _A(outputIdx);\\n      }\");return Object.assign(Object.assign({},s),{output:{dims:c,type:t.type,textureType:a.TextureType.unpacked},shaderSource:d});},l=function l(e){if(!e||1!==e.length)throw new Error(\"Slice requires 1 input.\");if(-1===o.NUMBER_TYPES.indexOf(e[0].type))throw new Error(\"Invalid input type.\");};t.sliceV10=function(e,t){p(t);var n=c(e,t);return[e.run(Object.assign(Object.assign({},s),{cacheHint:n.cacheKey,get:function get(){return u(e,t[0],n);}}),[t[0]])];};var c=function c(e,t){if(!e.session.isInitializer(t[1].dataId)||!e.session.isInitializer(t[2].dataId)||t.length>=4&&!e.session.isInitializer(t[3].dataId)||t.length>=5&&!e.session.isInitializer(t[4].dataId))throw new Error(\"dynamic slice attributes are not allowed\");if(t.length>=5&&t[4].integerData.some(function(e){return 1!==e;}))throw new Error(\"currently non-1 steps is not supported for Slice\");var n=Array.from(t[1].integerData),r=Array.from(t[2].integerData),o=t.length>=4?Array.from(t[3].integerData):[];return{starts:n,ends:r,axes:o,cacheKey:\"\".concat(o,\";\").concat(n,\";\").concat(r)};},p=function p(e){if(!e||e.length<3||e.length>5)throw new Error(\"Invalid input number.\");if(\"int32\"!==e[1].type||1!==e[1].dims.length)throw new Error(\"Invalid input type.\");if(\"int32\"!==e[2].type||1!==e[2].dims.length)throw new Error(\"Invalid input type.\");if(e.length>=4&&(\"int32\"!==e[3].type||1!==e[3].dims.length))throw new Error(\"Invalid input type.\");if(e.length>=5&&(\"int32\"!==e[4].type||1!==e[4].dims.length))throw new Error(\"Invalid input type.\");};},815:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.softmaxV13=t.parseSoftmaxAttributesV13=t.parseSoftmaxAttributes=t.softmax=void 0;var r=n(4910),o=n(7273),i=n(6757),a=n(5639),s=n(5707),u={name:\"SoftmaxComputeMax\",inputNames:[\"A\"],inputTypes:[a.TextureType.unpacked]},l={name:\"SoftmaxComputeScale\",inputNames:[\"A\",\"Max\"],inputTypes:[a.TextureType.unpacked,a.TextureType.unpacked]},c={name:\"SoftMax\",inputNames:[\"A\",\"Max\",\"Norm\"],inputTypes:[a.TextureType.unpacked,a.TextureType.unpacked,a.TextureType.unpacked]};t.softmax=function(e,t,n){g(t);var r=t[0].dims.slice(),i=o.ShapeUtil.normalizeAxis(n.axis,r.length),a=o.ShapeUtil.sizeToDimension(r,i),s=o.ShapeUtil.sizeFromDimension(r,i);return p(e,t,n,a,s);},t.parseSoftmaxAttributes=function(e){return(0,r.createAttributeWithCacheKey)({axis:e.attributes.getInt(\"axis\",1)});},t.parseSoftmaxAttributesV13=function(e){return(0,r.createAttributeWithCacheKey)({axis:e.attributes.getInt(\"axis\",-1)});},t.softmaxV13=function(e,t,n){g(t);var i=t[0].dims.slice(),a=o.ShapeUtil.normalizeAxis(n.axis,i.length),u=i.length,l=a!==u-1,c=[];var d,f=[],h=[];l&&(f=Array.from({length:u}).map(function(e,t){return t;}),f[a]=u-1,f[u-1]=a,f.map(function(e){return c.push(i[e]);}),d=(0,r.createAttributeWithCacheKey)({perm:f}),h=(0,s.transpose)(e,t,d));var m=l?o.ShapeUtil.sizeToDimension(c,u-1):o.ShapeUtil.sizeToDimension(i,u-1),b=l?o.ShapeUtil.sizeFromDimension(c,u-1):o.ShapeUtil.sizeFromDimension(i,u-1),y=p(e,l?h:t,n,m,b);return l?(0,s.transpose)(e,y,d):y;};var p=function p(e,t,n,r,o){var i=d(e,t[0],r,o,[r]),a=e.run(Object.assign(Object.assign({},u),{cacheHint:n.cacheKey,get:function get(){return i;}}),t),s=f(e,t[0],r,o,i.output.dims,[r]),p=e.run(Object.assign(Object.assign({},l),{cacheHint:n.cacheKey,get:function get(){return s;}}),[t[0],a]),g=h(e,t[0],r,o,i.output.dims,s.output.dims);return[e.run(Object.assign(Object.assign({},c),{cacheHint:n.cacheKey,get:function get(){return g;}}),[t[0],a,p])];},d=function d(e,t,n,r,o){var _e$calculateTextureWi11=e.calculateTextureWidthAndHeight(t.dims,a.TextureType.unpacked),_e$calculateTextureWi12=_slicedToArray(_e$calculateTextureWi11,2),s=_e$calculateTextureWi12[0],l=_e$calculateTextureWi12[1],c=o.length;if(n<1||r<1)throw new Error(\"Logical row count N and feature count D must be greater than or equal to 1\");if(1!==o.length)throw new Error(\"Dimensionality of the output should be 1\");if(o[0]!==n)throw new Error(\"Shape of the output should be equal to logical row count\");var p=(0,i.getGlsl)(e.session.backend.glContext.version),d=\"\\n      float process(int[\".concat(c,\"] indices) {\\n        int logical_row_start_offset = indices[0] * \").concat(r,\";\\n\\n        float max = getColorAsFloat(\").concat(p.texture2D,\"(A, offsetToCoords(logical_row_start_offset, \").concat(s,\",\\n        \").concat(l,\" )));\\n        for(int i=1; i<\").concat(r,\"; ++i)\\n        {\\n          float current = getColorAsFloat(\").concat(p.texture2D,\"(A, offsetToCoords(logical_row_start_offset + i,\\n            \").concat(s,\", \").concat(l,\")));\\n          if(current > max)\\n          max = current;\\n        }\\n\\n        return max;\\n      }\");return Object.assign(Object.assign({},u),{output:{dims:o,type:t.type,textureType:a.TextureType.unpacked},shaderSource:d});},f=function f(e,t,n,r,o,s){var _e$calculateTextureWi13=e.calculateTextureWidthAndHeight(t.dims,a.TextureType.unpacked),_e$calculateTextureWi14=_slicedToArray(_e$calculateTextureWi13,2),u=_e$calculateTextureWi14[0],c=_e$calculateTextureWi14[1],p=s.length;if(n<1||r<1)throw new Error(\"Logical row count N and feature count D must be greater than or equal to 1\");if(1!==s.length)throw new Error(\"Dimensionality of the output should be 1\");if(s[0]!==n)throw new Error(\"Shape of the output should be equal to logical row count\");if(1!==o.length)throw new Error(\"Dimensionality of the intermediate results should be 1\");if(o[0]!==n)throw new Error(\"Shape of the intermediate results should be equal to logical row count\");var d=\"\\n      float process(int[\".concat(p,\"] indices) {\\n        int logical_row_start_offset = indices[0] * \").concat(r,\";\\n\\n        float norm_factor = 0.0;\\n        float max = _Max(indices);\\n        for(int i=0; i<\").concat(r,\"; ++i)\\n        {\\n          norm_factor += exp(getColorAsFloat(\").concat((0,i.getGlsl)(e.session.backend.glContext.version).texture2D,\"(A, offsetToCoords(logical_row_start_offset + i,\\n            \").concat(u,\", \").concat(c,\"))) - max);\\n        }\\n\\n        return norm_factor;\\n      }\");return Object.assign(Object.assign({},l),{output:{dims:s,type:t.type,textureType:a.TextureType.unpacked},shaderSource:d});},h=function h(e,t,n,r,o,i){var _e$calculateTextureWi15=e.calculateTextureWidthAndHeight(t.dims,a.TextureType.unpacked),_e$calculateTextureWi16=_slicedToArray(_e$calculateTextureWi15,2),s=_e$calculateTextureWi16[0],u=_e$calculateTextureWi16[1],l=t.dims.length;if(n<1||r<1)throw new Error(\"Logical row count N and feature count D must be greater than or equal to 1\");if(1!==o.length||1!==i.length)throw new Error(\"Dimensionality of the intermediate results should be 1\");if(o[0]!==n||i[0]!==n)throw new Error(\"Shape of the intermediate results should be equal to logical row count\");var p=\"\\n      float process(int[\".concat(l,\"] indices) {\\n\\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\\n      int offset = coordsToOffset(TexCoords, \").concat(s,\", \").concat(u,\");\\n\\n      //determine the logical row for this index\\n      int logical_row_index[1];\\n      logical_row_index[0] = offset / \").concat(r,\";\\n\\n      float norm_factor = _Norm(logical_row_index);\\n\\n      // avoid possible division by 0\\n      // if norm_facor is 0, all elements are zero\\n      // if so, return 0\\n      if(norm_factor == 0.0)\\n        return 0.0;\\n\\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\\n    }\");return Object.assign(Object.assign({},c),{output:{dims:t.dims,type:t.type,textureType:a.TextureType.unpacked},shaderSource:p});},g=function g(e){if(!e||1!==e.length)throw new Error(\"Softmax requires 1 input.\");if(\"float32\"!==e[0].type&&\"float64\"!==e[0].type)throw new Error(\"Invalid input type\");};},564:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseSplitAttributes=t.split=void 0;var r=n(4910),o=n(7273),i=n(5639),a={name:\"Split\",inputNames:[\"A\"],inputTypes:[i.TextureType.unpacked]};t.split=function(e,t,n){l(t);var r=o.ShapeUtil.normalizeAxis(n.axis,t[0].dims.length),i=s(e,t,r,n),c=[];var _loop2=function _loop2(_o23){c.push(e.run(Object.assign(Object.assign({},a),{cacheHint:\"\".concat(n.cacheKey,\";\").concat(_o23),get:function get(){return u(e,t[0],n,r,_o23);}}),t));};for(var _o23=0;_o23<i;++_o23){_loop2(_o23);}return c;},t.parseSplitAttributes=function(e){var t=e.attributes.getInt(\"axis\",0),n=e.attributes.getInts(\"split\",[]),o=e.outputs.length;return(0,r.createAttributeWithCacheKey)({axis:t,split:n,numOutputs:o});};var s=function s(e,t,n,r){var _o$SplitUtil$splitSha=o.SplitUtil.splitShape(t[0].dims,n,r.split,r.numOutputs),_o$SplitUtil$splitSha2=_slicedToArray(_o$SplitUtil$splitSha,2),i=_o$SplitUtil$splitSha2[1];return i.length;},u=function u(e,t,n,r,s){var _o$SplitUtil$splitSha3=o.SplitUtil.splitShape(t.dims,r,n.split,n.numOutputs),_o$SplitUtil$splitSha4=_slicedToArray(_o$SplitUtil$splitSha3,2),u=_o$SplitUtil$splitSha4[0],l=_o$SplitUtil$splitSha4[1],c=l[s],p=u[s],d=\"\\n      float process(int indices[\".concat(p.length,\"]) {\\n        indices[\").concat(r,\"] += \").concat(c,\";\\n        return _A(indices);\\n      }\\n    \");return Object.assign(Object.assign({},a),{cacheHint:\"\".concat(n.cacheKey,\":\").concat(s),output:{dims:p,type:t.type,textureType:i.TextureType.unpacked},shaderSource:d});},l=function l(e){if(!e||1!==e.length)throw new Error(\"Split requires one input.\");if(\"int8\"!==e[0].type&&\"uint8\"!==e[0].type&&\"int16\"!==e[0].type&&\"uint16\"!==e[0].type&&\"int32\"!==e[0].type&&\"uint32\"!==e[0].type&&\"float32\"!==e[0].type&&\"float64\"!==e[0].type&&\"bool\"!==e[0].type)throw new Error(\"Invalid input type.\");};},5416:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseSqueezeAttributes=t.squeezeV13=t.squeeze=void 0;var r=n(7273);t.squeeze=function(e,t,n){o(t);var i=r.ShapeUtil.squeezeShape(t[0].dims,n);return[e.reshapeUnpacked(t[0],i)];},t.squeezeV13=function(e,n){return i(n),(0,t.squeeze)(e,[n[0]],Array.from(n[1].integerData));},t.parseSqueezeAttributes=function(e){return e.attributes.getInts(\"axes\");};var o=function o(e){if(!e||1!==e.length)throw new Error(\"Squeeze requires 1 input.\");if(\"string\"===e[0].type)throw new Error(\"invalid input tensor types.\");},i=function i(e){if(!e||2!==e.length)throw new Error(\"Squeeze requires 2 inputs.\");if(\"int32\"!==e[1].type)throw new Error(\"Invalid input type.\");};},1240:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.sum=void 0;var r=n(6757),o=n(5639);t.sum=function(e,t){a(t);var n={name:\"Sum\",inputNames:t.map(function(e,t){return\"X\".concat(t);}),inputTypes:new Array(t.length).fill(o.TextureType.unpacked)};return[e.run(Object.assign(Object.assign({},n),{get:function get(){return i(e,t,n);}}),t)];};var i=function i(e,t,n){var i=(0,r.getGlsl)(e.session.backend.glContext.version),a=t[0].dims.slice(),s=\"\\n      void main() {\\n        vec4 result = \".concat(t.map(function(e,t){return\"\".concat(i.texture2D,\"(X\").concat(t,\",TexCoords)\");}).join(\" + \"),\";\\n        \").concat(i.output,\" = result;\\n      }\\n    \");return Object.assign(Object.assign({},n),{output:{dims:a,type:t[0].type,textureType:o.TextureType.unpacked},hasMain:!0,shaderSource:s});},a=function a(e){if(!e||0===e.length)throw new Error(\"Sum requires inputs.\");var t=e[0].dims.length;for(var _n37=1;_n37<e.length;_n37++){if(t!==e[_n37].dims.length)throw new Error(\"Input shapes are mismatched.\");for(var _r29=0;_r29<t;_r29++)if(e[0].dims[_r29]!==e[_n37].dims[_r29])throw new Error(\"Input shapes are not matched.\");}if(\"float32\"!==e[0].type&&\"float64\"!==e[0].type)throw new Error(\"Invalid input type.\");for(var _t37=1;_t37<e.length;_t37++)if(e[0].type!==e[_t37].type)throw new Error(\"Input types are not matched.\");};},5944:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.tile=void 0;var r=n(6145),o=n(5639);t.tile=function(e,t){a(t);var n={name:\"Tile\",inputNames:[\"A\"],inputTypes:[o.TextureType.unpacked]};return[e.run(Object.assign(Object.assign({},n),{get:function get(){return i(e,t,n);}}),t)];};var i=function i(e,t,n){var r=t[0].dims.slice(),i=new Array(r.length),a=[];for(var _e50=0;_e50<r.length;_e50++)i[_e50]=r[_e50]*t[1].numberData[_e50],a.push(\"inputIdx[\".concat(_e50,\"] = int(mod(float(outputIdx[\").concat(_e50,\"]), \").concat(r[_e50],\".));\"));var s=i.length,u=\"\\n      float process(int outputIdx[\".concat(s,\"]) {\\n        int inputIdx[\").concat(s,\"];\\n        \").concat(a.join(\"\\n\"),\"\\n        return _A(inputIdx);\\n      }\\n    \");return Object.assign(Object.assign({},n),{output:{dims:i,type:t[0].type,textureType:o.TextureType.unpacked},shaderSource:u});},a=function a(e){if(!e||2!==e.length)throw new Error(\"Tile requires 2 input.\");if(1!==e[1].dims.length)throw new Error(\"The second input shape must 1 dimension.\");if(e[1].dims[0]!==e[0].dims.length)throw new Error(\"Invalid input shape.\");if(-1===r.NUMBER_TYPES.indexOf(e[0].type))throw new Error(\"Invalid input type.\");if(\"int32\"!==e[1].type&&\"int16\"!==e[1].type)throw new Error(\"Invalid repeat type.\");};},5707:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseTransposeAttributes=t.transpose=void 0;var r=n(4910),o=n(7273),i=n(5639),a={name:\"Transpose\",inputNames:[\"A\"],inputTypes:[i.TextureType.unpacked]};t.transpose=function(e,t,n){return p(t),[e.run(Object.assign(Object.assign({},a),{cacheHint:n.cacheKey,get:function get(){return s(e,t[0],n.perm);}}),t)];},t.parseTransposeAttributes=function(e){return(0,r.createAttributeWithCacheKey)({perm:e.attributes.getInts(\"perm\",[])});};var s=function s(e,t,n){var r=t.dims;n=u(r,n);var o=l(r,n),s=r.length,p=\"\\n      \".concat(c(\"perm\",n,s),\"\\n      float process(int indices[\").concat(s,\"]) {\\n        int a[\").concat(s,\"];\\n        perm(a, indices);\\n        return _A(a);\\n      }\");return Object.assign(Object.assign({},a),{output:{dims:o,type:t.type,textureType:i.TextureType.unpacked},shaderSource:p});},u=function u(e,t){return t&&t.length!==e.length&&(t=_toConsumableArray(e.keys()).reverse()),t;},l=function l(e,t){return t=u(e,t),o.ShapeUtil.sortBasedOnPerm(e,t);},c=function c(e,t,n){var r=[];r.push(\"void \".concat(e,\"(out int a[\").concat(n,\"], int src[\").concat(n,\"]) {\"));for(var _e51=0;_e51<n;++_e51)r.push(\"\\ta[\".concat(t[_e51],\"]=src[\").concat(_e51,\"];\"));return r.push(\"\\t}\"),r.join(\"\\n\");},p=function p(e){if(!e||1!==e.length)throw new Error(\"Transpose requires 1 input.\");if(\"float32\"!==e[0].type&&\"float64\"!==e[0].type)throw new Error(\"input should be float tensor\");};},2488:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.encodeAsUint8=void 0;var r=n(6757),o=n(5639);t.encodeAsUint8=function(e,t){var n=t.shape,i=(0,r.getGlsl)(e.session.backend.glContext.version),a=\"\\n    const float FLOAT_MAX = 1.70141184e38;\\n    const float FLOAT_MIN = 1.17549435e-38;\\n\\n    bool isNaN(float val) {\\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\\n    }\\n\\n    highp vec4 encodeAsUint8(highp float v) {\\n      if (isNaN(v)) {\\n        return vec4(255, 255, 255, 255);\\n      }\\n\\n      highp float av = abs(v);\\n\\n      if(av < FLOAT_MIN) {\\n        return vec4(0.0, 0.0, 0.0, 0.0);\\n      } else if(v > FLOAT_MAX) {\\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n      } else if(v < -FLOAT_MAX) {\\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n      }\\n\\n      highp vec4 c = vec4(0,0,0,0);\\n\\n      highp float e = floor(log2(av));\\n      highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n      c[2] = floor(128.0 * m);\\n      m -= c[2] / 128.0;\\n      c[1] = floor(32768.0 * m);\\n      m -= c[1] / 32768.0;\\n      c[0] = floor(8388608.0 * m);\\n\\n      highp float ebias = e + 127.0;\\n      c[3] = floor(ebias / 2.0);\\n      ebias -= c[3] * 2.0;\\n      c[2] += floor(ebias) * 128.0;\\n\\n      c[3] += 128.0 * step(0.0, -v);\\n\\n      return c / 255.0;\\n    }\\n\\n    void main() {\\n      float value = \".concat(i.texture2D,\"(X,TexCoords).r;\\n      \").concat(i.output,\" = encodeAsUint8(value);\\n    }\"),s={name:\"Uint8Encode\",inputTypes:[o.TextureType.unpacked],inputNames:[\"X\"],output:{dims:n,type:t.tensor.type,textureType:o.TextureType.downloadUint8AsFloat},shaderSource:a,hasMain:!0};return e.executeProgram(s,[t.tensor]);};},9087:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.tanh=t.tan=t.sqrt=t.sin=t.sigmoid=t.relu=t.not=t.neg=t.log=t.parseLeakyReluAttributes=t.leakyRelu=t.identity=t.floor=t.exp=t.parseEluAttributes=t.elu=t.cos=t.ceil=t.clipV11=t.parseClipAttributes=t.clip=t.atan=t.asin=t.acos=t.abs=t.glslTanh=t.glslTan=t.glslSqrt=t.glslSigmoid=t.glslRelu=t.glslSin=t.glslNot=t.glslNeg=t.glslLog=t.glslLeakyRelu=t.glslIdentity=t.glslClip=t.glslFloor=t.glslExp=t.glslElu=t.glslCos=t.glslCeil=t.glslAtan=t.glslAsin=t.glslAcos=t.glslAbs=void 0;var r=n(4910),o=n(7273),i=n(1997),a=n(6757),s=n(5639);function u(){return $(\"abs\");}function l(){return $(\"acos\");}function c(){return $(\"asin\");}function p(){return $(\"atan\");}function d(){return $(\"ceil\");}function f(){return $(\"cos\");}function h(e){var t=\"elu\";return{body:\"\\n  const float alpha = float(\".concat(e,\");\\n\\n  float \").concat(t,\"_(float a) {\\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\\n  }\\n  vec4 \").concat(t,\"_(vec4 v) {\\n    return vec4(\").concat(t,\"_(v.x), \").concat(t,\"_(v.y), \").concat(t,\"_(v.z), \").concat(t,\"_(v.w));\\n  }\\n  \"),name:t,type:i.FunctionType.ValueBased};}function g(){return $(\"exp\");}function m(){return $(\"floor\");}function b(e,t){var n=\"clip\";return{body:\"\\n  const float min = float(\".concat(e,\");\\n  const float max = float(\").concat(t,\");\\n\\n  float \").concat(n,\"_(float a) {\\n    return clamp(a, min, max);\\n  }\\n  vec4 \").concat(n,\"_(vec4 v) {\\n    return clamp(v, min, max);\\n  }\\n  \"),name:n,type:i.FunctionType.ValueBased};}function y(){var e=\"indentity\";return{body:\"\\n  float \".concat(e,\"_(float a) {\\n    return a;\\n  }\\n  vec4 \").concat(e,\"_(vec4 v) {\\n    return v;\\n  }\\n  \"),name:e,type:i.FunctionType.ValueBased};}function w(e){var t=\"leakyRelu\";return{body:\"\\n  const float alpha = float(\".concat(e,\");\\n\\n  float \").concat(t,\"_(float a) {\\n    return a < 0.0 ? a * alpha : a;\\n  }\\n  vec4 \").concat(t,\"_(vec4 v) {\\n    return vec4(\").concat(t,\"_(v.x), \").concat(t,\"_(v.y), \").concat(t,\"_(v.z), \").concat(t,\"_(v.w));\\n  }\\n  \"),name:t,type:i.FunctionType.ValueBased};}function _(){return $(\"log\");}function v(){var e=\"neg\";return{body:\"\\n  float \".concat(e,\"_(float a) {\\n    return -a;\\n  }\\n  vec4 \").concat(e,\"_(vec4 v) {\\n    return -v;\\n  }\\n  \"),name:e,type:i.FunctionType.ValueBased};}function x(){var e=\"not\";return{body:\"\\n  float \".concat(e,\"_(float a) {\\n    return float( ! bool(a) );\\n  }\\n  bool \").concat(e,\"_(bool a) {\\n    return !a;\\n  }\\n  vec4 \").concat(e,\"_(vec4 v) {\\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\\n  }\\n  bvec4 \").concat(e,\"_(bvec4 v) {\\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\\n  }\\n  \"),name:e,type:i.FunctionType.ValueBased};}function T(){return $(\"sin\");}function S(){var e=\"relu\";return{body:\"\\n  float \".concat(e,\"_(float a) {\\n    return max( a, 0.0 );\\n  }\\n  vec4 \").concat(e,\"_(vec4 v) {\\n    return max( v, 0.0 );\\n  }\\n  \"),name:e,type:i.FunctionType.ValueBased};}function O(){var e=\"sigmoid\";return{body:\"\\n  float \".concat(e,\"_(float a) {\\n    return 1.0 / (1.0 + exp(-a));\\n  }\\n  vec4 \").concat(e,\"_(vec4 v) {\\n    return 1.0 / (1.0 + exp(-v));\\n  }\\n  \"),name:e,type:i.FunctionType.ValueBased};}function A(){return $(\"sqrt\");}function E(){return $(\"tan\");}function I(){var e=\"tanh\";return{body:\"\\n  float \".concat(e,\"_(float a) {\\n    a = clamp(a, -10., 10.);\\n    a = exp(2.*a);\\n    return (a - 1.) / (a + 1.);\\n  }\\n  vec4 \").concat(e,\"_(vec4 v) {\\n    v = clamp(v, -10., 10.);\\n    v = exp(2.*v);\\n    return (v - 1.) / (v + 1.);\\n  }\\n  \"),name:e,type:i.FunctionType.ValueBased};}function $(e){return{body:\"\\n  float \".concat(e,\"_(float a) {\\n    return \").concat(e,\"(a);\\n  }\\n  vec4 \").concat(e,\"_(vec4 v) {\\n    return \").concat(e,\"(v);\\n  }\\n  \"),name:e,type:i.FunctionType.ValueBased};}t.glslAbs=u,t.glslAcos=l,t.glslAsin=c,t.glslAtan=p,t.glslCeil=d,t.glslCos=f,t.glslElu=h,t.glslExp=g,t.glslFloor=m,t.glslClip=b,t.glslIdentity=y,t.glslLeakyRelu=w,t.glslLog=_,t.glslNeg=v,t.glslNot=x,t.glslSin=T,t.glslRelu=S,t.glslSigmoid=O,t.glslSqrt=A,t.glslTan=E,t.glslTanh=I;var P=function P(e,t,n,r){var o=e.session.pack?s.TextureType.packed:s.TextureType.unpacked,i={name:n.name,inputTypes:[o],inputNames:[\"A\"],cacheHint:r};return Object.assign(Object.assign({},i),{get:function get(){return function(e,t,n,r){var o=e.session.pack?s.TextureType.packed:s.TextureType.unpacked,i=(0,a.getGlsl)(e.session.backend.glContext.version);return Object.assign(Object.assign({},t),{output:{dims:n.dims,type:n.type,textureType:o},shaderSource:\"\\n     \".concat(r.body,\"\\n     void main() {\\n       vec4 v = \").concat(i.texture2D,\"(A, TexCoords);\\n       v = \").concat(r.name,\"_(v);\\n       \").concat(i.output,\" = v;\\n     }\\n     \"),hasMain:!0});}(e,i,t,n);}});};t.abs=function(e,t){return[e.run(P(e,t[0],u()),t)];},t.acos=function(e,t){return[e.run(P(e,t[0],l()),t)];},t.asin=function(e,t){return[e.run(P(e,t[0],c()),t)];},t.atan=function(e,t){return[e.run(P(e,t[0],p()),t)];},t.clip=function(e,t,n){return[e.run(P(e,t[0],b(n.min,n.max),n.cacheKey),t)];},t.parseClipAttributes=function(e){return(0,r.createAttributeWithCacheKey)({min:e.attributes.getFloat(\"min\",o.MIN_CLIP),max:e.attributes.getFloat(\"max\",o.MAX_CLIP)});},t.clipV11=function(e,n){var r=D(e,n);return(0,t.clip)(e,[n[0]],r);};var D=function D(e,t){if(t.length>=3&&(!e.session.isInitializer(t[1].dataId)||!e.session.isInitializer(t[2].dataId)))throw new Error(\"dynamic clip attributes are not allowed\");var n=t.length>=3?t[1].numberData[0]:o.MIN_CLIP,i=t.length>=3?t[2].numberData[0]:o.MAX_CLIP;return(0,r.createAttributeWithCacheKey)({min:n,max:i});};t.ceil=function(e,t){return[e.run(P(e,t[0],d()),t)];},t.cos=function(e,t){return[e.run(P(e,t[0],f()),t)];},t.elu=function(e,t,n){return[e.run(P(e,t[0],h(n.alpha),n.cacheKey),t)];},t.parseEluAttributes=function(e){return(0,r.createAttributeWithCacheKey)({alpha:e.attributes.getFloat(\"alpha\",1)});},t.exp=function(e,t){return[e.run(P(e,t[0],g()),t)];},t.floor=function(e,t){return[e.run(P(e,t[0],m()),t)];},t.identity=function(e,t){return[e.run(P(e,t[0],y()),t)];},t.leakyRelu=function(e,t,n){return[e.run(P(e,t[0],w(n.alpha),n.cacheKey),t)];},t.parseLeakyReluAttributes=function(e){return(0,r.createAttributeWithCacheKey)({alpha:e.attributes.getFloat(\"alpha\",.01)});},t.log=function(e,t){return[e.run(P(e,t[0],_()),t)];},t.neg=function(e,t){return[e.run(P(e,t[0],v()),t)];},t.not=function(e,t){return[e.run(P(e,t[0],x()),t)];},t.relu=function(e,t){return[e.run(P(e,t[0],S()),t)];},t.sigmoid=function(e,t){return[e.run(P(e,t[0],O()),t)];},t.sin=function(e,t){return[e.run(P(e,t[0],T()),t)];},t.sqrt=function(e,t){return[e.run(P(e,t[0],A()),t)];},t.tan=function(e,t){return[e.run(P(e,t[0],E()),t)];},t.tanh=function(e,t){return[e.run(P(e,t[0],I()),t)];};},540:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createUnpackProgramInfoLoader=t.createUnpackProgramInfo=void 0;var r=n(6757),o=n(5639),i=n(432),a=n(5614),s={name:\"unpack\",inputNames:[\"A\"],inputTypes:[o.TextureType.packed]};t.createUnpackProgramInfo=function(e,t){var n=t.dims.length,u=(0,a.getChannels)(\"rc\",n),l=u.slice(-2),c=(0,i.getCoordsDataType)(n),p=(0,a.unpackFromChannel)(),d=0===t.dims.length?\"\":function(e,t){if(1===e)return\"rc\";var n=\"\";for(var _r30=0;_r30<e;_r30++)n+=t[_r30],_r30<e-1&&(n+=\",\");return n;}(n,u),f=n<=1?\"rc\":\"vec2(\".concat(l.join(\",\"),\")\"),h=\"\\n    \".concat(p,\"\\n    void main() {\\n      \").concat(c,\" rc = getOutputCoords();\\n\\n       // Sample the texture with the coords to get the rgba channel value.\\n       vec4 packedInput = getA(\").concat(d,\");\\n\\n       \").concat((0,r.getGlsl)(e.session.backend.glContext.version).output,\" = vec4(getChannel(packedInput, \").concat(f,\"), 0, 0, 0);\\n     }\\n   \");return Object.assign(Object.assign({},s),{hasMain:!0,output:{dims:t.dims,type:t.type,textureType:o.TextureType.unpacked},shaderSource:h});},t.createUnpackProgramInfoLoader=function(e,n){return Object.assign(Object.assign({},s),{get:function get(){return(0,t.createUnpackProgramInfo)(e,n);}});};},7862:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseUnsqueezeAttributes=t.unsqueezeV13=t.unsqueeze=void 0;var r=n(7273);t.unsqueeze=function(e,t,n){o(t);var i=r.ShapeUtil.unsqueezeShape(t[0].dims,n);return[e.reshapeUnpacked(t[0],i)];},t.unsqueezeV13=function(e,n){return i(n),(0,t.unsqueeze)(e,[n[0]],Array.from(n[1].integerData));},t.parseUnsqueezeAttributes=function(e){return e.attributes.getInts(\"axes\");};var o=function o(e){if(!e||1!==e.length)throw new Error(\"Unsqueeze requires 1 input.\");if(\"string\"===e[0].type)throw new Error(\"invalid input tensor types.\");},i=function i(e){if(!e||2!==e.length)throw new Error(\"Unsqueeze requires 2 inputs.\");if(\"int32\"!==e[1].type)throw new Error(\"Invalid input type.\");};},3980:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.scalesValidation=t.validateInputs=t.parseUpsampleAttributes=t.parseUpsampleAttributesV9=t.parseUpsampleAttributesV7=t.upsample=void 0;var r=n(4910),o=n(6757),i=n(5639),a={name:\"Upsample\",inputNames:[\"X\"],inputTypes:[i.TextureType.unpacked]};t.upsample=function(e,n,r){return(0,t.validateInputs)(n,r),[e.run(Object.assign(Object.assign({},a),{cacheHint:r.cacheKey,get:function get(){return s(e,n,r);}}),n)];},t.parseUpsampleAttributesV7=function(e){return(0,t.parseUpsampleAttributes)(e,7);},t.parseUpsampleAttributesV9=function(e){return(0,t.parseUpsampleAttributes)(e,9);},t.parseUpsampleAttributes=function(e,n){var o=n>=10,i=e.attributes.getString(\"mode\",\"nearest\");if(\"nearest\"!==i&&\"linear\"!==i&&(n<11||\"cubic\"!==i))throw new Error(\"unrecognized mode: \".concat(i));var a=[];n<9&&(a=e.attributes.getFloats(\"scales\"),(0,t.scalesValidation)(a,i,o));var s=e.attributes.getFloat(\"extrapolation_value\",0),u=n>10?e.attributes.getString(\"coordinate_transformation_mode\",\"half_pixel\"):\"asymmetric\";if(-1===[\"asymmetric\",\"pytorch_half_pixel\",\"tf_half_pixel_for_nn\",\"align_corners\",\"tf_crop_and_resize\",\"half_pixel\"].indexOf(u))throw new Error(\"coordinate_transform_mode '\".concat(u,\"' is not supported\"));var l=\"tf_crop_and_resize\"===u,c=l,p=\"nearest\"===i&&n>=11?e.attributes.getString(\"nearest_mode\",\"round_prefer_floor\"):\"\";if(-1===[\"round_prefer_floor\",\"round_prefer_ceil\",\"floor\",\"ceil\",\"\"].indexOf(p))throw new Error(\"nearest_mode '\".concat(p,\"' is not supported\"));var d=e.attributes.getFloat(\"cubic_coeff_a\",-.75),f=0!==e.attributes.getInt(\"exclude_outside\",0);if(f&&\"cubic\"!==i)throw new Error(\"exclude_outside can be set to 1 only when mode is CUBIC.\");var h=n<11||\"nearest\"===i&&\"asymmetric\"===u&&\"floor\"===p;var g=0,m=0,b=0;return n>10?e.inputs.length>2?(g=1,m=2,b=3):(m=1,b=2):9===n&&(m=1),(0,r.createAttributeWithCacheKey)({opset:n,isResize:o,mode:i,scales:a,extrapolationValue:s,coordinateTransformMode:u,useExtrapolation:c,needRoiInput:l,nearestMode:p,cubicCoefficientA:d,excludeOutside:f,useNearest2xOptimization:h,roiInputIdx:g,scalesInputIdx:m,sizesInputIdx:b});};var s=function s(e,t,n){var r=(0,o.getGlsl)(e.session.backend.glContext.version),_e$calculateTextureWi17=e.calculateTextureWidthAndHeight(t[0].dims,i.TextureType.unpacked),_e$calculateTextureWi18=_slicedToArray(_e$calculateTextureWi17,2),s=_e$calculateTextureWi18[0],u=_e$calculateTextureWi18[1],l=t[0].dims.map(function(e,t){return Math.floor(e*n.scales[t]);}),_e$calculateTextureWi19=e.calculateTextureWidthAndHeight(l,i.TextureType.unpacked),_e$calculateTextureWi20=_slicedToArray(_e$calculateTextureWi19,2),c=_e$calculateTextureWi20[0],p=_e$calculateTextureWi20[1],d=l.length,f=new Array(d),h=new Array(d);var g=\"\\n      int output_pitches[\".concat(d,\"];\\n      int input_pitches[\").concat(d,\"];\\n      \");for(var _e52=d-1;_e52>=0;_e52--)f[_e52]=_e52===d-1?1:f[_e52+1]*l[_e52+1],h[_e52]=_e52===d-1?1:h[_e52+1]*t[0].dims[_e52+1],g+=\"\\n        output_pitches[\".concat(_e52,\"] = \").concat(f[_e52],\";\\n        input_pitches[\").concat(_e52,\"] = \").concat(h[_e52],\";\\n        \");var m=\"\\n      float getInputFloat(int index) {\\n        vec2 coords = offsetToCoords(index, \".concat(s,\", \").concat(u,\");\\n        float value = getColorAsFloat(\").concat(r.texture2D,\"(X, coords));\\n        return value;\\n      }\\n      \"),b=\"nearest\"===n.mode?\"\\n    \".concat(m,\"\\n    float process(int indices[\").concat(d,\"]) {\\n      int input_index = 0;\\n      int output_index = coordsToOffset(TexCoords, \").concat(c,\", \").concat(p,\");\\n\\n      \").concat(g,\"\\n\\n      int d, m;\\n      for (int dim = 0; dim < \").concat(d,\"; ++dim) {\\n        d = output_index / output_pitches[dim];\\n        m = output_index - d * output_pitches[dim];\\n        output_index = m;\\n\\n        if (scales[dim] != 1 && d > 0) {\\n          int d2 = d / scales[dim];\\n          m = d - d2 * scales[dim];\\n          d = d2;\\n        }\\n        input_index += input_pitches[dim] * d;\\n      }\\n\\n      return getInputFloat(input_index);\\n    }\"):4===d?\"\\n    \".concat(m,\"\\n    float process(int indices[4]) {\\n      int input_index = 0;\\n      int output_index = coordsToOffset(TexCoords, \").concat(c,\", \").concat(p,\");\\n\\n      \").concat(g,\"\\n\\n      int m;\\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\\n      index_of_dim0 = output_index / output_pitches[0];\\n      m = output_index - index_of_dim0 * output_pitches[0];\\n      index_of_dim1 = m / output_pitches[1];\\n      m = m - index_of_dim1 * output_pitches[1];\\n      index_of_dim2 = m / output_pitches[2];\\n      m = m - index_of_dim2 * output_pitches[2];\\n      index_of_dim3 = m;\\n\\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\\n      index_of_input_dim2 = index_of_dim2 / scales[2];\\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\\n      index_of_input_dim3 = index_of_dim3 / scales[3];\\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\\n\\n      input_index = index_of_dim0 * input_pitches[0] +\\n            index_of_dim1 * input_pitches[1] +\\n            index_of_input_dim2 * input_pitches[2] +\\n            index_of_input_dim3;\\n\\n      float x00 = getInputFloat(input_index);\\n      float x10, x01, x11;\\n\\n      bool end_of_dim2 = false;\\n      if (index_of_input_dim2 == (\").concat(t[0].dims[2],\" - 1)) {\\n        // It's the end in dimension 2\\n        x01 = x00;\\n        end_of_dim2 = true;\\n      } else {\\n        x01 = getInputFloat(input_index + input_pitches[2]);\\n      }\\n\\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\\n        // It's the end in dimension 3\\n        x10 = x00;\\n        x11 = x01;\\n      }\\n      else {\\n        x10 = getInputFloat(input_index + 1);\\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\\n      }\\n\\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\\n    }\"):\"\\n    \".concat(m,\"\\n    float process(int indices[2]) {\\n      int input_index = 0;\\n      int output_index = coordsToOffset(TexCoords, \").concat(c,\", \").concat(p,\");\\n\\n      \").concat(g,\"\\n\\n      int m;\\n      int index_of_dim0, index_of_dim1;\\n      index_of_dim0 = output_index / output_pitches[0];\\n      m = output_index - index_of_dim0 * output_pitches[0];\\n      index_of_dim1 = m;\\n\\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\\n      index_of_input_dim0 = index_of_dim0 / scales[0];\\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\\n      index_of_input_dim1 = index_of_dim1 / scales[1];\\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\\n\\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\\n\\n      float x00 = getInputFloat(input_index);\\n      float x10, x01, x11;\\n\\n      bool end_of_dim0 = false;\\n      if (index_of_input_dim0 == (\").concat(t[0].dims[0],\" - 1)) {\\n        // It's the end in dimension 0\\n        x01 = x00;\\n        end_of_dim0 = true;\\n      } else {\\n        x01 = getInputFloat(input_index + input_pitches[0]);\\n      }\\n\\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\\n        // It's the end in dimension 1\\n        x10 = x00;\\n        x11 = x01;\\n      }\\n      else {\\n        x10 = getInputFloat(input_index + 1);\\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\\n      }\\n\\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\\n    }\");return Object.assign(Object.assign({},a),{output:{dims:l,type:t[0].type,textureType:i.TextureType.unpacked},shaderSource:b,variables:[{name:\"scales\",type:\"int\",arrayLength:n.scales.length,data:n.scales.map(function(e){return Math.ceil(e);})}]});};t.validateInputs=function(e,t){if(!e||t.opset<9&&1!==e.length||t.opset>=9&&t.opset<11&&2!==e.length||t.opset>=11&&e.length<2)throw new Error(\"invalid inputs.\");if(t.scales.length>0&&e[0].dims.length!==t.scales.length)throw new Error(\"Invalid input shape.\");if(\"string\"===e[0].type)throw new Error(\"Invalid input tensor types.\");},t.scalesValidation=function(e,t,n){if(n){var _iterator13=_createForOfIteratorHelper(e),_step13;try{for(_iterator13.s();!(_step13=_iterator13.n()).done;){var _t38=_step13.value;if(_t38<=0)throw new Error(\"Scale value should be greater than 0.\");}}catch(err){_iterator13.e(err);}finally{_iterator13.f();}}else{var _iterator14=_createForOfIteratorHelper(e),_step14;try{for(_iterator14.s();!(_step14=_iterator14.n()).done;){var _t39=_step14.value;if(_t39<1)throw new Error(\"Scale value should be greater than or equal to 1.\");}}catch(err){_iterator14.e(err);}finally{_iterator14.f();}}if(!(\"linear\"!==t&&\"cubic\"!==t||2===e.length||4===e.length&&1===e[0]&&1===e[1]))throw new Error(\"'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic')         or 4-D inputs with the corresponding outermost 2 scale values being 1         in the \".concat(n?\"Resize\":\"Upsample\",\" opeartor.\"));};},2757:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.ProgramManager=void 0;var r=n(8453),o=n(1315),i=n(8897),a=n(6757);t.ProgramManager=/*#__PURE__*/function(){function _class12(e,t,n){_classCallCheck(this,_class12);this.profiler=e,this.glContext=t,this.textureLayoutStrategy=n,this.repo=new Map(),this.attributesBound=!1;}_createClass(_class12,[{key:\"getArtifact\",value:function getArtifact(e){return this.repo.get(e);}},{key:\"setArtifact\",value:function setArtifact(e,t){this.repo.set(e,t);}},{key:\"run\",value:function run(e,t,n){var _this20=this;var r;this.profiler.event(\"op\",\"ProgramManager.run \".concat(null!==(r=e.programInfo.name)&&void 0!==r?r:\"unknown kernel\"),function(){var r;var i=_this20.glContext.gl,a=e.program;i.useProgram(a);try{_this20.bindOutput(n),_this20.attributesBound||_this20.bindAttributes(e.attribLocations),_this20.bindUniforms(e.uniformLocations,null!==(r=e.programInfo.variables)&&void 0!==r?r:[],t);}catch(t){throw o.Logger.error(\"ProgramManager\",e.programInfo.shaderSource),t;}_this20.profiler.event(\"backend\",\"GlContext.draw()\",function(){_this20.glContext.draw();});},this.glContext);}},{key:\"dispose\",value:function dispose(){var _this21=this;this.vertexShader&&this.glContext.deleteShader(this.vertexShader),this.repo.forEach(function(e){return _this21.glContext.deleteProgram(e.program);});}},{key:\"build\",value:function build(e,t,n){var _this22=this;return this.profiler.event(\"backend\",\"ProgramManager.build\",function(){var r=new i.GlslPreprocessor(_this22.glContext,e,t,n),o=r.preprocess(),a=_this22.compile(o);return{programInfo:e,program:a,uniformLocations:_this22.getUniformLocations(a,r.context.programInfo.inputNames,r.context.programInfo.variables),attribLocations:_this22.getAttribLocations(a)};});}},{key:\"compile\",value:function compile(e){if(!this.vertexShader){o.Logger.verbose(\"ProrgramManager\",\"Compiling and caching Vertex shader for the first time\");var _e53=(0,a.getVertexShaderSource)(this.glContext.version);this.vertexShader=this.glContext.compileShader(_e53,this.glContext.gl.VERTEX_SHADER);}r.env.debug&&o.Logger.verbose(\"ProrgramManager\",\"FragShader:\\n\".concat(e,\"\\n\"));var t=this.glContext.compileShader(e,this.glContext.gl.FRAGMENT_SHADER),n=this.glContext.createProgram(this.vertexShader,t);return this.glContext.deleteShader(t),n;}},{key:\"bindOutput\",value:function bindOutput(e){var t=e.width,n=e.height;o.Logger.verbose(\"ProrgramManager\",\"Binding output texture to Framebuffer: w/h=\".concat(t,\"/\").concat(n,\", shape=\").concat(e.shape,\", type=\").concat(e.tensor.type)),this.glContext.attachFramebuffer(e.texture,t,n);}},{key:\"bindAttributes\",value:function bindAttributes(e){var t=e.position,n=e.textureCoord;this.glContext.setVertexAttributes(t,n),this.attributesBound=!0;}},{key:\"bindUniforms\",value:function bindUniforms(e,t,n){var _this23=this;var r;var o=this.glContext.gl;var i=0;var _iterator15=_createForOfIteratorHelper(e),_step15;try{var _loop3=function _loop3(){var _step15$value=_step15.value,a=_step15$value.name,s=_step15$value.type,u=_step15$value.location,l=_step15$value.arrayLength;var e=null===(r=t.find(function(e){return e.name===a;}))||void 0===r?void 0:r.data;if(\"sampler2D\"!==s&&!e)throw new Error(\"variable '\".concat(a,\"' does not have data defined in program info\"));switch(s){case\"sampler2D\":_this23.bindTexture(n[i],u,i),i++;break;case\"float\":l?o.uniform1fv(u,e):o.uniform1f(u,e);break;case\"int\":l?o.uniform1iv(u,e):o.uniform1i(u,e);break;default:throw new Error(\"Uniform not implemented: \".concat(s));}};for(_iterator15.s();!(_step15=_iterator15.n()).done;){_loop3();}}catch(err){_iterator15.e(err);}finally{_iterator15.f();}}},{key:\"bindTexture\",value:function bindTexture(e,t,n){this.glContext.bindTextureToUniform(e.texture,n,t);}},{key:\"getAttribLocations\",value:function getAttribLocations(e){return{position:this.getAttribLocation(e,\"position\"),textureCoord:this.getAttribLocation(e,\"textureCoord\")};}},{key:\"getUniformLocations\",value:function getUniformLocations(e,t,n){var r=[];if(t){var _iterator16=_createForOfIteratorHelper(t),_step16;try{for(_iterator16.s();!(_step16=_iterator16.n()).done;){var _n38=_step16.value;r.push({name:_n38,type:\"sampler2D\",location:this.getUniformLocation(e,_n38)});}}catch(err){_iterator16.e(err);}finally{_iterator16.f();}}if(n){var _iterator17=_createForOfIteratorHelper(n),_step17;try{for(_iterator17.s();!(_step17=_iterator17.n()).done;){var _t40=_step17.value;r.push(Object.assign(Object.assign({},_t40),{location:this.getUniformLocation(e,_t40.name)}));}}catch(err){_iterator17.e(err);}finally{_iterator17.f();}}return r;}},{key:\"getUniformLocation\",value:function getUniformLocation(e,t){var n=this.glContext.gl.getUniformLocation(e,t);if(null===n)throw new Error(\"Uniform \".concat(t,\" not found.\"));return n;}},{key:\"getAttribLocation\",value:function getAttribLocation(e,t){return this.glContext.gl.getAttribLocation(e,t);}}]);return _class12;}();},2171:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.WebGLSessionHandler=void 0;var r=n(1315),o=n(5881),i=n(7860),a=n(4110),s=n(2757),u=n(7618),l=n(5243);t.WebGLSessionHandler=/*#__PURE__*/function(){function _class13(e,t){_classCallCheck(this,_class13);this.backend=e,this.context=t,this.layoutStrategy=new u.PreferLogicalStrategy(e.glContext.maxTextureSize),this.programManager=new s.ProgramManager(this.context.profiler,e.glContext,this.layoutStrategy),this.textureManager=new l.TextureManager(e.glContext,this.layoutStrategy,this.context.profiler,{reuseTextures:\"full\"===e.textureCacheMode}),this.packedTextureDataCache=new Map(),this.unpackedTextureDataCache=new Map(),this.pack=e.pack,this.pack2unpackMap=new Map(),this.unpack2packMap=new Map();}_createClass(_class13,[{key:\"createInferenceHandler\",value:function createInferenceHandler(){return new i.WebGLInferenceHandler(this);}},{key:\"onGraphInitialized\",value:function onGraphInitialized(e){var t=e.getValues().filter(function(e){return-1===e.from&&e.tensor;}).map(function(e){return e.tensor.dataId;});this.initializers=new Set(t);}},{key:\"isInitializer\",value:function isInitializer(e){return!!this.initializers&&this.initializers.has(e);}},{key:\"addInitializer\",value:function addInitializer(e){this.initializers.add(e);}},{key:\"getTextureData\",value:function getTextureData(e,t){return t?this.packedTextureDataCache.get(e):this.unpackedTextureDataCache.get(e);}},{key:\"setTextureData\",value:function setTextureData(e,t){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:!1;r.Logger.verbose(\"WebGLSessionHandler\",\"Storing Texture data in cache\"),n?this.packedTextureDataCache.set(e,t):this.unpackedTextureDataCache.set(e,t);}},{key:\"dispose\",value:function dispose(){var _this24=this;this.programManager.dispose(),this.textureManager.clearActiveTextures(),this.packedTextureDataCache.forEach(function(e){return _this24.textureManager.releaseTexture(e,!0);}),this.packedTextureDataCache=new Map(),this.unpackedTextureDataCache.forEach(function(e){return _this24.textureManager.releaseTexture(e,!0);}),this.unpackedTextureDataCache=new Map();}},{key:\"resolve\",value:function resolve(e,t,n){var r=(0,o.resolveOperator)(e,t,a.WEBGL_OP_RESOLVE_RULES);return{impl:r.opImpl,context:r.opInit?r.opInit(e,n):e};}}]);return _class13;}();},9622:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Uint8DataEncoder=t.RGBAFloatDataEncoder=t.RedFloat32DataEncoder=void 0;var r=n(1315);t.RedFloat32DataEncoder=/*#__PURE__*/function(){function _class14(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;_classCallCheck(this,_class14);if(1===t)this.internalFormat=e.R32F,this.format=e.RED,this.textureType=e.FLOAT,this.channelSize=t;else{if(4!==t)throw new Error(\"Invalid number of channels: \".concat(t));this.internalFormat=e.RGBA32F,this.format=e.RGBA,this.textureType=e.FLOAT,this.channelSize=t;}}_createClass(_class14,[{key:\"encode\",value:function encode(e,t){var n,o;return e.constructor!==Float32Array&&(r.Logger.warning(\"Encoder\",\"data was not of type Float32; creating new Float32Array\"),o=new Float32Array(e)),t*this.channelSize>e.length?(r.Logger.warning(\"Encoder\",\"Source data too small. Allocating larger array\"),o=e,n=this.allocate(t*this.channelSize),o.forEach(function(e,t){return n[t]=e;})):(o=e,n=o),n;}},{key:\"allocate\",value:function allocate(e){return new Float32Array(4*e);}},{key:\"decode\",value:function decode(e,t){return 1===this.channelSize?e.filter(function(e,t){return t%4==0;}).subarray(0,t):e.subarray(0,t);}}]);return _class14;}(),t.RGBAFloatDataEncoder=/*#__PURE__*/function(){function _class15(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var n=arguments.length>2?arguments[2]:undefined;_classCallCheck(this,_class15);if(1!==t&&4!==t)throw new Error(\"Invalid number of channels: \".concat(t));this.internalFormat=e.RGBA,this.format=e.RGBA,this.channelSize=t,this.textureType=n||e.FLOAT;}_createClass(_class15,[{key:\"encode\",value:function encode(e,t){var n=e;return 1===this.channelSize&&(r.Logger.verbose(\"Encoder\",\"Exploding into a larger array\"),n=this.allocate(t),e.forEach(function(e,t){return n[4*t]=e;})),n;}},{key:\"allocate\",value:function allocate(e){return new Float32Array(4*e);}},{key:\"decode\",value:function decode(e,t){return 1===this.channelSize?e.filter(function(e,t){return t%4==0;}).subarray(0,t):e.subarray(0,t);}}]);return _class15;}(),t.Uint8DataEncoder=/*#__PURE__*/function(){function _class16(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;_classCallCheck(this,_class16);if(this.channelSize=4,1===t)this.internalFormat=e.ALPHA,this.format=e.ALPHA,this.textureType=e.UNSIGNED_BYTE,this.channelSize=t;else{if(4!==t)throw new Error(\"Invalid number of channels: \".concat(t));this.internalFormat=e.RGBA,this.format=e.RGBA,this.textureType=e.UNSIGNED_BYTE,this.channelSize=t;}}_createClass(_class16,[{key:\"encode\",value:function encode(e,t){return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);}},{key:\"allocate\",value:function allocate(e){return new Uint8Array(e*this.channelSize);}},{key:\"decode\",value:function decode(e,t){if(e instanceof Uint8Array)return e.subarray(0,t);throw new Error(\"Invalid array type: \".concat(e.constructor));}}]);return _class16;}();},7618:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.getBatchDim=t.sizeToSquarishShape=t.getRowsCols=t.sizeFromShape=t.isInt=t.parseAxisParam=t.squeezeShape=t.PreferLogicalStrategy=t.AlwaysKeepOriginalSizeStrategy=void 0;var r=n(1315),o=n(7273);function i(e,t){var n=[],r=[],o=null!=t&&Array.isArray(t)&&0===t.length,i=null==t||o?null:a(t,e).sort();var s=0;for(var _t41=0;_t41<e.length;++_t41){if(null!=i){if(i[s]===_t41&&1!==e[_t41])throw new Error(\"Can't squeeze axis \".concat(_t41,\" since its dim '\").concat(e[_t41],\"' is not 1\"));(null==i[s]||i[s]>_t41)&&1===e[_t41]&&(n.push(e[_t41]),r.push(_t41)),i[s]<=_t41&&s++;}1!==e[_t41]&&(n.push(e[_t41]),r.push(_t41));}return{newShape:n,keptDims:r};}function a(e,t){var n=t.length;return e=null==e?t.map(function(e,t){return t;}):[].concat(e),(0,o.assert)(e.every(function(e){return e>=-n&&e<n;}),function(){return\"All values in axis param must be in range [-\".concat(n,\", \").concat(n,\") but got axis \").concat(e);}),(0,o.assert)(e.every(s),function(){return\"All values in axis param must be integers but got axis \".concat(e);}),e.map(function(e){return e<0?n+e:e;});}function s(e){return e%1==0;}function u(e){if(0===e.length)return 1;var t=e[0];for(var _n39=1;_n39<e.length;_n39++)t*=e[_n39];return t;}function l(e){var t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)];}t.AlwaysKeepOriginalSizeStrategy=/*#__PURE__*/function(){function _class17(e){_classCallCheck(this,_class17);this.maxTextureSize=e;}_createClass(_class17,[{key:\"computeTextureWH\",value:function computeTextureWH(e,t){if(0===e.length)return[1,1];var n=this.maxTextureSize;if(t&&void 0!==t.breakAxis){var _o24=t.breakAxis>=e.length?1:e.slice(t.breakAxis).reduce(function(e,t){return e*t;}),_i17=t.breakAxis<=0?1:e.slice(0,t.breakAxis).reduce(function(e,t){return e*t;});if(!(_o24>n||_i17>n))return[_o24,_i17];r.Logger.verbose(\"TextureLayout\",\"Given width/height preferences were unattainable: shape:\".concat(e,\", breakAxis:\").concat(t.breakAxis));}var o=e.reduce(function(e,t){return e*t;});var i=Math.floor(Math.sqrt(o));for(;i<n&&i<o&&o%i!=0;i++);if(i>=n||o%i!=0)throw new Error(\"The given dimensions are outside this GPU's boundaries: \".concat(e));return[i,o/i];}}]);return _class17;}(),t.PreferLogicalStrategy=/*#__PURE__*/function(){function _class18(e){_classCallCheck(this,_class18);this.maxTextureSize=e;}_createClass(_class18,[{key:\"computeTextureWH\",value:function computeTextureWH(e,t){var n=this.computeTexture(e,t);return t&&t.isPacked&&(n[0]/=2,n[1]/=2),t&&t.reverseWH?[n[1],n[0]]:n;}},{key:\"computeTexture\",value:function computeTexture(e,t){var n=t&&t.isPacked;if(0===e.length)return n?[2,2]:[1,1];var o=this.maxTextureSize;if(t&&void 0!==t.breakAxis){var _n40=t.breakAxis>=e.length?1:e.slice(t.breakAxis).reduce(function(e,t){return e*t;}),_i18=t.breakAxis<=0?1:e.slice(0,t.breakAxis).reduce(function(e,t){return e*t;});if(!(_n40>o||_i18>o))return[_n40,_i18];r.Logger.verbose(\"TextureLayout\",\"Given width/height preferences were unattainable: shape:\".concat(e,\", breakAxis:\").concat(t.breakAxis));}var a=e.slice(0);if(n&&(o*=2,a=a.map(function(e,t){return t>=a.length-2?a[t]%2==0?a[t]:a[t]+1:a[t];}),1===a.length&&(a=[2,a[0]])),2!==a.length){var _e54=i(a);a=_e54.newShape;}var s=u(a);return a.length<=1&&s<=o?[1,s]:2===a.length&&a[0]<=o&&a[1]<=o?a:3===a.length&&a[0]*a[1]<=o&&a[2]<=o?[a[0]*a[1],a[2]]:3===a.length&&a[0]<=o&&a[1]*a[2]<=o?[a[0],a[1]*a[2]]:4===a.length&&a[0]*a[1]*a[2]<=o&&a[3]<=o?[a[0]*a[1]*a[2],a[3]]:4===a.length&&a[0]<=o&&a[1]*a[2]*a[3]<=o?[a[0],a[1]*a[2]*a[3]]:n?l(s/4).map(function(e){return 2*e;}):l(s);}}]);return _class18;}(),t.squeezeShape=i,t.parseAxisParam=a,t.isInt=s,t.sizeFromShape=u,t.getRowsCols=function(e){if(0===e.length)throw Error(\"Cannot get rows and columns of an empty shape array.\");return[e.length>1?e[e.length-2]:1,e[e.length-1]];},t.sizeToSquarishShape=l,t.getBatchDim=function(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;return u(e.slice(0,e.length-t));};},3314:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createTextureLayoutFromShape=t.calculateTextureWidthAndHeight=t.createTextureLayoutFromTextureType=void 0;var r=n(7273),o=n(5639);t.createTextureLayoutFromTextureType=function(e,n,r){var i=r===o.TextureType.unpacked||r===o.TextureType.unpackedReversed?1:4,a=r===o.TextureType.packed,s=r===o.TextureType.unpackedReversed||r===o.TextureType.packed,u=r===o.TextureType.packedLastDimension?n.length-1:void 0,l=r===o.TextureType.packedLastDimension?n.map(function(e,t){return t===n.length-1?4*e:e;}):void 0;return(0,t.createTextureLayoutFromShape)(e,n,i,l,{isPacked:a,reverseWH:s,breakAxis:u});},t.calculateTextureWidthAndHeight=function(e,n,r){var o=(0,t.createTextureLayoutFromTextureType)(e,n,r);return[o.width,o.height];},t.createTextureLayoutFromShape=function(e,t){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var o=arguments.length>3?arguments[3]:undefined;var i=arguments.length>4?arguments[4]:undefined;var a=!(!i||!i.isPacked),_e$computeTextureWH=e.computeTextureWH(a&&o||t,i),_e$computeTextureWH2=_slicedToArray(_e$computeTextureWH,2),s=_e$computeTextureWH2[0],u=_e$computeTextureWH2[1],l=t.length;var c=t.slice(0);if(0===l&&(c=[1]),1===n)o=t;else if(a){if(4!==n)throw new Error(\"a packed texture must be 4-channel\");o=t,l>0&&(c[l-1]=Math.ceil(c[l-1]/2)),l>1&&(c[l-2]=Math.ceil(c[l-2]/2));}else if(!o)throw new Error(\"Unpacked shape is needed when using channels > 1\");return{width:s,height:u,channels:n,isPacked:a,shape:c,strides:r.ShapeUtil.computeStrides(c),unpackedShape:o,reversedWH:i&&i.reverseWH};};},5243:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.TextureManager=void 0;var r=n(1315);t.TextureManager=/*#__PURE__*/function(){function _class19(e,t,n,r){_classCallCheck(this,_class19);this.glContext=e,this.layoutStrategy=t,this.profiler=n,this.config=r,this.pendingRead=new Map(),r.reuseTextures&&(this.inUseTextures=new Map(),this.idleTextures=new Map(),this.textureLookup=new Map());}_createClass(_class19,[{key:\"createTextureFromLayout\",value:function createTextureFromLayout(e,t,n,o){var i=this.toEncoderType(e),a=this.glContext.getEncoder(i,t.channels||1,o);if(t.isPacked&&1===o)throw new Error(\"not implemented\");var s=t.width,u=t.height;var l,c;if(this.config.reuseTextures){l=\"\".concat(s,\"x\").concat(u,\"_\").concat(a.format,\"_\").concat(a.internalFormat,\"_\").concat(a.textureType),c=this.inUseTextures.get(l),c||(c=[],this.inUseTextures.set(l,c));var _t42=this.idleTextures.get(l);if(_t42&&_t42.length>0){var _r31=_t42.pop();return c.push(_r31),1===o&&this.glContext.updateTexture(_r31,s,u,a,this.toTextureData(e,n)),_r31;}}r.Logger.verbose(\"TextureManager\",\"Creating new texture of size \".concat(t.width,\"x\").concat(t.height));var p=this.glContext.allocateTexture(s,u,a,this.toTextureData(e,n));return this.config.reuseTextures&&(c.push(p),this.textureLookup.set(p,l)),p;}},{key:\"readTexture\",value:function readTexture(e,t,n){var _this25=this;return n||(n=1),this.profiler.event(\"backend\",\"TextureManager.readTexture\",function(){var r=e.shape.reduce(function(e,t){return e*t;})*n,o=_this25.glContext.readTexture(e.texture,e.width,e.height,r,_this25.toEncoderType(t),n);return _this25.toTensorData(t,o);});}},{key:\"readTextureAsync\",value:function(){var _readTextureAsync2=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee31(e,t,n){var _this26=this;var r,_e55;return _regeneratorRuntime2().wrap(function _callee31$(_context31){while(1)switch(_context31.prev=_context31.next){case 0:r=e.tensor.dataId;if(!(n||(n=1),this.pendingRead.has(r))){_context31.next=4;break;}_e55=this.pendingRead.get(r);return _context31.abrupt(\"return\",new Promise(function(t){return null==_e55?void 0:_e55.push(t);}));case 4:return _context31.abrupt(\"return\",this.profiler.event(\"backend\",\"TextureManager.readTextureAsync\",/*#__PURE__*/_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee30(){var o,i,a,s;return _regeneratorRuntime2().wrap(function _callee30$(_context30){while(1)switch(_context30.prev=_context30.next){case 0:_this26.pendingRead.set(r,[]);o=e.shape.reduce(function(e,t){return e*t;})*n;_context30.next=4;return _this26.glContext.createAndWaitForFence();case 4:i=_this26.glContext.readTexture(e.texture,e.width,e.height,o,_this26.toEncoderType(t),n),a=_this26.toTensorData(t,i),s=_this26.pendingRead.get(r);return _context30.abrupt(\"return\",(_this26.pendingRead[\"delete\"](r),null==s||s.forEach(function(e){return e(a);}),a));case 6:case\"end\":return _context30.stop();}},_callee30);}))));case 5:case\"end\":return _context31.stop();}},_callee31,this);}));function readTextureAsync(_x32,_x33,_x34){return _readTextureAsync2.apply(this,arguments);}return readTextureAsync;}()},{key:\"readUint8TextureAsFloat\",value:function readUint8TextureAsFloat(e){var _this27=this;return this.profiler.event(\"backend\",\"TextureManager.readUint8TextureAsFloat\",function(){var t=e.shape.reduce(function(e,t){return e*t;}),n=_this27.glContext.readTexture(e.texture,e.width,e.height,4*t,\"byte\",4);return new Float32Array(n.buffer,n.byteOffset,t);});}},{key:\"releaseTexture\",value:function releaseTexture(e,t){var n;if(this.config.reuseTextures&&(n=this.textureLookup.get(e.texture),n)){t&&this.textureLookup[\"delete\"](n);var _r32=this.inUseTextures.get(n);if(_r32){var _t43=_r32.indexOf(e.texture);if(-1!==_t43){_r32.splice(_t43,1);var o=this.idleTextures.get(n);o||(o=[],this.idleTextures.set(n,o)),o.push(e.texture);}}}n&&!t||(r.Logger.verbose(\"TextureManager\",\"Deleting texture of size \".concat(e.width,\"x\").concat(e.height)),this.glContext.deleteTexture(e.texture));}},{key:\"toTensorData\",value:function toTensorData(e,t){switch(e){case\"int16\":return t instanceof Int16Array?t:Int16Array.from(t);case\"int32\":return t instanceof Int32Array?t:Int32Array.from(t);case\"int8\":return t instanceof Int8Array?t:Int8Array.from(t);case\"uint16\":return t instanceof Uint16Array?t:Uint16Array.from(t);case\"uint32\":return t instanceof Uint32Array?t:Uint32Array.from(t);case\"uint8\":case\"bool\":return t instanceof Uint8Array?t:Uint8Array.from(t);case\"float32\":return t instanceof Float32Array?t:Float32Array.from(t);case\"float64\":return t instanceof Float64Array?t:Float64Array.from(t);default:throw new Error(\"TensorData type \".concat(e,\" is not supported\"));}}},{key:\"toTextureData\",value:function toTextureData(e,t){if(t)return t instanceof Float32Array?t:new Float32Array(t);}},{key:\"toEncoderType\",value:function toEncoderType(e){return\"float\";}},{key:\"clearActiveTextures\",value:function clearActiveTextures(){this.glContext.clearActiveTextures();}}]);return _class19;}();},5639:function _(e,t){\"use strict\";var n;Object.defineProperty(t,\"__esModule\",{value:!0}),t.TextureType=void 0,(n=t.TextureType||(t.TextureType={}))[n.unpacked=0]=\"unpacked\",n[n.unpackedReversed=1]=\"unpackedReversed\",n[n.packed=2]=\"packed\",n[n.downloadUint8AsFloat=3]=\"downloadUint8AsFloat\",n[n.packedLastDimension=4]=\"packedLastDimension\";},432:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.getGlChannels=t.getCoordsDataType=t.getSqueezedParams=t.squeezeInputShape=t.generateShaderFuncNameFromInputSamplerNameAtOutCoords=t.generateShaderFuncNameFromInputSamplerName=t.repeatedTry=t.getPackedShape=void 0;var r=n(7273);t.getPackedShape=function(e){var t=e.length;return e.slice(0,t-1).concat(e[t-1]/4);},t.repeatedTry=/*#__PURE__*/function(){var _ref29=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee32(e){var t,n,_args31=arguments;return _regeneratorRuntime2().wrap(function _callee32$(_context32){while(1)switch(_context32.prev=_context32.next){case 0:t=_args31.length>1&&_args31[1]!==undefined?_args31[1]:function(e){return 0;};n=_args31.length>2?_args31[2]:undefined;return _context32.abrupt(\"return\",new Promise(function(r,o){var i=0;var a=function a(){if(e())return void r();i++;var s=t(i);null!=n&&i>=n?o():setTimeout(a,s);};a();}));case 3:case\"end\":return _context32.stop();}},_callee32);}));return function(_x35){return _ref29.apply(this,arguments);};}(),t.generateShaderFuncNameFromInputSamplerName=function(e){return(0,r.assert)(void 0!==e&&0!==e.length,function(){return\"empty string found for sampler name\";}),\"get\"+e.charAt(0).toUpperCase()+e.slice(1);},t.generateShaderFuncNameFromInputSamplerNameAtOutCoords=function(e){return(0,r.assert)(void 0!==e&&0!==e.length,function(){return\"empty string found for sampler name\";}),\"get\"+e.charAt(0).toUpperCase()+e.slice(1)+\"AtOutCoords\";},t.squeezeInputShape=function(e,t){var n=JSON.parse(JSON.stringify(e));return n=t,n;},t.getSqueezedParams=function(e,t){return t.map(function(t){return e[t];}).join(\", \");},t.getCoordsDataType=function(e){if(e<=1)return\"int\";if(2===e)return\"ivec2\";if(3===e)return\"ivec3\";if(4===e)return\"ivec4\";if(5===e)return\"ivec5\";if(6===e)return\"ivec6\";throw Error(\"GPU for rank \".concat(e,\" is not yet supported\"));},t.getGlChannels=function(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:6;return[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,e);};},3389:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createNewWebGLContext=t.createWebGLContext=void 0;var r=n(1315),o=n(3524),i={};function a(e){var t=function(){if(\"undefined\"==typeof document){if(\"undefined\"==typeof OffscreenCanvas)throw new TypeError(\"failed to create canvas: OffscreenCanvas is not supported\");return new OffscreenCanvas(1,1);}var e=document.createElement(\"canvas\");return e.width=1,e.height=1,e;}();var n;var i={alpha:!1,depth:!1,antialias:!1,stencil:!1,preserveDrawingBuffer:!1,premultipliedAlpha:!1,failIfMajorPerformanceCaveat:!1};if((!e||\"webgl2\"===e)&&(n=t.getContext(\"webgl2\",i),n))try{return new o.WebGLContext(n,2);}catch(e){r.Logger.warning(\"GlContextFactory\",\"failed to create WebGLContext using contextId 'webgl2'. Error: \".concat(e));}if((!e||\"webgl\"===e)&&(n=t.getContext(\"webgl\",i)||t.getContext(\"experimental-webgl\",i),n))try{return new o.WebGLContext(n,1);}catch(e){r.Logger.warning(\"GlContextFactory\",\"failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: \".concat(e));}throw new Error(\"WebGL is not supported\");}t.createWebGLContext=function e(t){var n;t&&\"webgl2\"!==t||!(\"webgl2\"in i)?t&&\"webgl\"!==t||!(\"webgl\"in i)||(n=i.webgl):n=i.webgl2,n=n||a(t),t=t||1===n.version?\"webgl\":\"webgl2\";var r=n.gl;return i[t]=n,r.isContextLost()?(delete i[t],e(t)):(r.disable(r.DEPTH_TEST),r.disable(r.STENCIL_TEST),r.disable(r.BLEND),r.disable(r.DITHER),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SAMPLE_COVERAGE),r.enable(r.SCISSOR_TEST),r.enable(r.CULL_FACE),r.cullFace(r.BACK),n);},t.createNewWebGLContext=a;},3524:function _(e,t,n){\"use strict\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!(\"get\"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function get(){return t[n];}}),Object.defineProperty(e,r,o);}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n];}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\"default\",{enumerable:!0,value:t});}:function(e,t){e[\"default\"]=t;}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\"default\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t;};Object.defineProperty(t,\"__esModule\",{value:!0}),t.WebGLContext=t.linearSearchLastTrue=void 0;var a=n(8453),s=i(n(9622)),u=n(432);function l(e){var t=0;for(;t<e.length&&e[t]();++t);return t-1;}t.linearSearchLastTrue=l,t.WebGLContext=/*#__PURE__*/function(){function _class20(e,t){_classCallCheck(this,_class20);this.frameBufferBound=!1,this.itemsToPoll=[],this.gl=e,this.version=t,this.getExtensions(),this.vertexbuffer=this.createVertexbuffer(),this.framebuffer=this.createFramebuffer(),this.queryVitalParameters();}_createClass(_class20,[{key:\"allocateTexture\",value:function allocateTexture(e,t,n,r){var o=this.gl,i=o.createTexture();o.bindTexture(o.TEXTURE_2D,i),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_MIN_FILTER,o.NEAREST),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_MAG_FILTER,o.NEAREST),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_WRAP_S,o.CLAMP_TO_EDGE),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_WRAP_T,o.CLAMP_TO_EDGE);var a=r?n.encode(r,e*t):null;return o.texImage2D(o.TEXTURE_2D,0,n.internalFormat,e,t,0,n.format,n.textureType,a),this.checkError(),i;}},{key:\"updateTexture\",value:function updateTexture(e,t,n,r,o){var i=this.gl;i.bindTexture(i.TEXTURE_2D,e);var a=r.encode(o,t*n);i.texSubImage2D(i.TEXTURE_2D,0,0,0,t,n,r.format,r.textureType,a),this.checkError();}},{key:\"attachFramebuffer\",value:function attachFramebuffer(e,t,n){var r=this.gl;r.bindTexture(r.TEXTURE_2D,e),r.bindFramebuffer(r.FRAMEBUFFER,this.framebuffer),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,e,0),this.checkError(),r.viewport(0,0,t,n),r.scissor(0,0,t,n);}},{key:\"readTexture\",value:function readTexture(e,t,n,r,o,i){var a=this.gl;i||(i=1),this.frameBufferBound||this.attachFramebuffer(e,t,n);var s=this.getEncoder(o,i),u=s.allocate(t*n);return a.bindTexture(a.TEXTURE_2D,e),a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,e,0),a.readPixels(0,0,t,n,a.RGBA,s.textureType,u),this.checkError(),s.decode(u,r);}},{key:\"isFramebufferReady\",value:function isFramebufferReady(){return!0;}},{key:\"getActiveTexture\",value:function getActiveTexture(){var e=this.gl;return\"TEXTURE\"+(e.getParameter(this.gl.ACTIVE_TEXTURE)-e.TEXTURE0);}},{key:\"getTextureBinding\",value:function getTextureBinding(){return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);}},{key:\"getFramebufferBinding\",value:function getFramebufferBinding(){return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);}},{key:\"setVertexAttributes\",value:function setVertexAttributes(e,t){var n=this.gl;n.vertexAttribPointer(e,3,n.FLOAT,!1,20,0),n.enableVertexAttribArray(e),-1!==t&&(n.vertexAttribPointer(t,2,n.FLOAT,!1,20,12),n.enableVertexAttribArray(t)),this.checkError();}},{key:\"createProgram\",value:function createProgram(e,t){var n=this.gl,r=n.createProgram();return n.attachShader(r,e),n.attachShader(r,t),n.linkProgram(r),r;}},{key:\"compileShader\",value:function compileShader(e,t){var n=this.gl,r=n.createShader(t);if(!r)throw new Error(\"createShader() returned null with type \".concat(t));if(n.shaderSource(r,e),n.compileShader(r),!1===n.getShaderParameter(r,n.COMPILE_STATUS))throw new Error(\"Failed to compile shader: \".concat(n.getShaderInfoLog(r),\"\\nShader source:\\n\").concat(e));return r;}},{key:\"deleteShader\",value:function deleteShader(e){this.gl.deleteShader(e);}},{key:\"bindTextureToUniform\",value:function bindTextureToUniform(e,t,n){var r=this.gl;r.activeTexture(r.TEXTURE0+t),this.checkError(),r.bindTexture(r.TEXTURE_2D,e),this.checkError(),r.uniform1i(n,t),this.checkError();}},{key:\"draw\",value:function draw(){this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4),this.checkError();}},{key:\"checkError\",value:function checkError(){if(a.env.debug){var _e56=this.gl,_t44=_e56.getError();var _n41=\"\";switch(_t44){case _e56.NO_ERROR:return;case _e56.INVALID_ENUM:_n41=\"INVALID_ENUM\";break;case _e56.INVALID_VALUE:_n41=\"INVALID_VALUE\";break;case _e56.INVALID_OPERATION:_n41=\"INVALID_OPERATION\";break;case _e56.INVALID_FRAMEBUFFER_OPERATION:_n41=\"INVALID_FRAMEBUFFER_OPERATION\";break;case _e56.OUT_OF_MEMORY:_n41=\"OUT_OF_MEMORY\";break;case _e56.CONTEXT_LOST_WEBGL:_n41=\"CONTEXT_LOST_WEBGL\";break;default:_n41=\"Unknown WebGL Error: \".concat(_t44.toString(16));}throw new Error(_n41);}}},{key:\"deleteTexture\",value:function deleteTexture(e){this.gl.deleteTexture(e);}},{key:\"deleteProgram\",value:function deleteProgram(e){this.gl.deleteProgram(e);}},{key:\"getEncoder\",value:function getEncoder(e,t){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;if(2===this.version)return new s.RedFloat32DataEncoder(this.gl,t);switch(e){case\"float\":return 1===n||this.isRenderFloat32Supported?new s.RGBAFloatDataEncoder(this.gl,t):new s.RGBAFloatDataEncoder(this.gl,t,this.textureHalfFloatExtension.HALF_FLOAT_OES);case\"int\":throw new Error(\"not implemented\");case\"byte\":return new s.Uint8DataEncoder(this.gl,t);default:throw new Error(\"Invalid dataType: \".concat(e));}}},{key:\"clearActiveTextures\",value:function clearActiveTextures(){var e=this.gl;for(var _t45=0;_t45<this.maxTextureImageUnits;++_t45)e.activeTexture(e.TEXTURE0+_t45),e.bindTexture(e.TEXTURE_2D,null);}},{key:\"dispose\",value:function dispose(){if(this.disposed)return;var e=this.gl;e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteFramebuffer(this.framebuffer),e.bindBuffer(e.ARRAY_BUFFER,null),e.deleteBuffer(this.vertexbuffer),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),e.finish(),this.disposed=!0;}},{key:\"createDefaultGeometry\",value:function createDefaultGeometry(){return new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);}},{key:\"createVertexbuffer\",value:function createVertexbuffer(){var e=this.gl,t=e.createBuffer();if(!t)throw new Error(\"createBuffer() returned null\");var n=this.createDefaultGeometry();return e.bindBuffer(e.ARRAY_BUFFER,t),e.bufferData(e.ARRAY_BUFFER,n,e.STATIC_DRAW),this.checkError(),t;}},{key:\"createFramebuffer\",value:function createFramebuffer(){var e=this.gl.createFramebuffer();if(!e)throw new Error(\"createFramebuffer returned null\");return e;}},{key:\"queryVitalParameters\",value:function queryVitalParameters(){var e=this.gl;if(this.isFloatTextureAttachableToFrameBuffer=this.checkFloatTextureAttachableToFrameBuffer(),this.isRenderFloat32Supported=this.checkRenderFloat32(),this.isFloat32DownloadSupported=this.checkFloat32Download(),1===this.version&&!this.textureHalfFloatExtension&&!this.isRenderFloat32Supported)throw new Error(\"both float32 and float16 TextureType are not supported\");this.isBlendSupported=!this.isRenderFloat32Supported||this.checkFloat32Blend(),this.maxTextureSize=e.getParameter(e.MAX_TEXTURE_SIZE),this.maxTextureImageUnits=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),this.version;}},{key:\"getExtensions\",value:function getExtensions(){2===this.version?(this.colorBufferFloatExtension=this.gl.getExtension(\"EXT_color_buffer_float\"),this.disjointTimerQueryWebgl2Extension=this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\")):(this.textureFloatExtension=this.gl.getExtension(\"OES_texture_float\"),this.textureHalfFloatExtension=this.gl.getExtension(\"OES_texture_half_float\"));}},{key:\"checkFloatTextureAttachableToFrameBuffer\",value:function checkFloatTextureAttachableToFrameBuffer(){var e=this.gl,t=e.createTexture();e.bindTexture(e.TEXTURE_2D,t);var n=2===this.version?e.RGBA32F:e.RGBA;e.texImage2D(e.TEXTURE_2D,0,n,1,1,0,e.RGBA,e.FLOAT,null);var r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0);var o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(t),e.deleteFramebuffer(r),o;}},{key:\"checkRenderFloat32\",value:function checkRenderFloat32(){if(2===this.version){if(!this.colorBufferFloatExtension)return!1;}else if(!this.textureFloatExtension)return!1;return this.isFloatTextureAttachableToFrameBuffer;}},{key:\"checkFloat32Download\",value:function checkFloat32Download(){if(2===this.version){if(!this.colorBufferFloatExtension)return!1;}else{if(!this.textureFloatExtension)return!1;if(!this.gl.getExtension(\"WEBGL_color_buffer_float\"))return!1;}return this.isFloatTextureAttachableToFrameBuffer;}},{key:\"checkFloat32Blend\",value:function checkFloat32Blend(){var e=this.gl;var t,n,r,o,i;try{t=e.createTexture(),n=e.createFramebuffer(),e.bindTexture(e.TEXTURE_2D,t);var _a14=2===this.version?e.RGBA32F:e.RGBA;return e.texImage2D(e.TEXTURE_2D,0,_a14,1,1,0,e.RGBA,e.FLOAT,null),e.bindFramebuffer(e.FRAMEBUFFER,n),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0),e.enable(e.BLEND),r=e.createShader(e.VERTEX_SHADER),!!r&&(e.shaderSource(r,\"void main(){}\"),e.compileShader(r),o=e.createShader(e.FRAGMENT_SHADER),!!o&&(e.shaderSource(o,\"precision highp float;void main(){gl_FragColor=vec4(0.5);}\"),e.compileShader(o),i=e.createProgram(),!!i&&(e.attachShader(i,r),e.attachShader(i,o),e.linkProgram(i),e.useProgram(i),e.drawArrays(e.POINTS,0,1),e.getError()===e.NO_ERROR)));}finally{e.disable(e.BLEND),i&&e.deleteProgram(i),r&&e.deleteShader(r),o&&e.deleteShader(o),n&&(e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteFramebuffer(n)),t&&(e.bindTexture(e.TEXTURE_2D,null),e.deleteTexture(t));}}},{key:\"beginTimer\",value:function beginTimer(){if(2===this.version&&this.disjointTimerQueryWebgl2Extension){var _e57=this.gl,_t46=this.disjointTimerQueryWebgl2Extension,_n42=_e57.createQuery();return _e57.beginQuery(_t46.TIME_ELAPSED_EXT,_n42),_n42;}throw new Error(\"WebGL1 profiling currently not supported.\");}},{key:\"endTimer\",value:function endTimer(){if(2!==this.version||!this.disjointTimerQueryWebgl2Extension)throw new Error(\"WebGL1 profiling currently not supported\");{var _e58=this.gl,_t47=this.disjointTimerQueryWebgl2Extension;_e58.endQuery(_t47.TIME_ELAPSED_EXT);}}},{key:\"isTimerResultAvailable\",value:function isTimerResultAvailable(e){var t=!1,n=!1;if(2!==this.version||!this.disjointTimerQueryWebgl2Extension)throw new Error(\"WebGL1 profiling currently not supported\");{var _r33=this.gl,_o25=this.disjointTimerQueryWebgl2Extension;t=_r33.getQueryParameter(e,_r33.QUERY_RESULT_AVAILABLE),n=_r33.getParameter(_o25.GPU_DISJOINT_EXT);}return t&&!n;}},{key:\"getTimerResult\",value:function getTimerResult(e){var t=0;if(2!==this.version)throw new Error(\"WebGL1 profiling currently not supported\");{var _n43=this.gl;t=_n43.getQueryParameter(e,_n43.QUERY_RESULT),_n43.deleteQuery(e);}return t/1e6;}},{key:\"waitForQueryAndGetTime\",value:function(){var _waitForQueryAndGetTime=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee33(e){var _this28=this;return _regeneratorRuntime2().wrap(function _callee33$(_context33){while(1)switch(_context33.prev=_context33.next){case 0:_context33.next=2;return(0,u.repeatedTry)(function(){return _this28.isTimerResultAvailable(e);});case 2:return _context33.abrupt(\"return\",this.getTimerResult(e));case 3:case\"end\":return _context33.stop();}},_callee33,this);}));function waitForQueryAndGetTime(_x36){return _waitForQueryAndGetTime.apply(this,arguments);}return waitForQueryAndGetTime;}()},{key:\"createAndWaitForFence\",value:function(){var _createAndWaitForFence=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee34(){var e;return _regeneratorRuntime2().wrap(function _callee34$(_context34){while(1)switch(_context34.prev=_context34.next){case 0:e=this.createFence(this.gl);return _context34.abrupt(\"return\",this.pollFence(e));case 2:case\"end\":return _context34.stop();}},_callee34,this);}));function createAndWaitForFence(){return _createAndWaitForFence.apply(this,arguments);}return createAndWaitForFence;}()},{key:\"createFence\",value:function createFence(e){var t;var n=e,r=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);return e.flush(),t=null===r?function(){return!0;}:function(){var e=n.clientWaitSync(r,0,0);return e===n.ALREADY_SIGNALED||e===n.CONDITION_SATISFIED;},{query:r,isFencePassed:t};}},{key:\"pollFence\",value:function(){var _pollFence=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee35(e){var _this29=this;return _regeneratorRuntime2().wrap(function _callee35$(_context35){while(1)switch(_context35.prev=_context35.next){case 0:return _context35.abrupt(\"return\",new Promise(function(t){_this29.addItemToPoll(function(){return e.isFencePassed();},function(){return t();});}));case 1:case\"end\":return _context35.stop();}},_callee35);}));function pollFence(_x37){return _pollFence.apply(this,arguments);}return pollFence;}()},{key:\"pollItems\",value:function pollItems(){var e=l(this.itemsToPoll.map(function(e){return e.isDoneFn;}));for(var _t48=0;_t48<=e;++_t48){var _e59=this.itemsToPoll[_t48].resolveFn;_e59();}this.itemsToPoll=this.itemsToPoll.slice(e+1);}},{key:\"addItemToPoll\",value:function(){var _addItemToPoll=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee36(e,t){var _this30=this;return _regeneratorRuntime2().wrap(function _callee36$(_context36){while(1)switch(_context36.prev=_context36.next){case 0:this.itemsToPoll.push({isDoneFn:e,resolveFn:t});_context36.t0=this.itemsToPoll.length>1;if(_context36.t0){_context36.next=5;break;}_context36.next=5;return(0,u.repeatedTry)(function(){return _this30.pollItems(),0===_this30.itemsToPoll.length;});case 5:case\"end\":return _context36.stop();}},_callee36,this);}));function addItemToPoll(_x38,_x39){return _addItemToPoll.apply(this,arguments);}return addItemToPoll;}()}]);return _class20;}();},6496:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.ExecutionPlan=void 0;var r=n(1315);var o=/*#__PURE__*/_createClass(function o(e,t){_classCallCheck(this,o);this.op=e,this.node=t;});t.ExecutionPlan=/*#__PURE__*/function(){function _class21(e,t,n){_classCallCheck(this,_class21);this.graph=e,this.profiler=n,this.initialize(t);}_createClass(_class21,[{key:\"initialize\",value:function initialize(e){var _this31=this;this.profiler.event(\"session\",\"ExecutionPlan.initialize\",function(){var t=_this31.graph.getNodes();if(t.length!==e.length)throw new Error(\"The size of nodes and OPs do not match.\");_this31._ops=e.map(function(e,n){return new o(e,t[n]);}),_this31.reset(),_this31._starter=[],_this31._ops.forEach(function(e,t){var n=!0;var _iterator18=_createForOfIteratorHelper(e.node.inputs),_step18;try{for(_iterator18.s();!(_step18=_iterator18.n()).done;){var _t49=_step18.value;if(!_this31._values[_t49]&&-1===_this31.graph.getInputIndices().indexOf(_t49)){n=!1;break;}}}catch(err){_iterator18.e(err);}finally{_iterator18.f();}n&&_this31._starter.push(t);});});}},{key:\"reset\",value:function reset(){this._values=this.graph.getValues().map(function(e){return e.tensor;});}},{key:\"execute\",value:function(){var _execute=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee39(e,t){var _this32=this;return _regeneratorRuntime2().wrap(function _callee39$(_context40){while(1)switch(_context40.prev=_context40.next){case 0:return _context40.abrupt(\"return\",this.profiler.event(\"session\",\"ExecutionPlan.execute\",/*#__PURE__*/_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee38(){var n,o,i,a,s,u,_loop4,l,_e60,_t50,_n44;return _regeneratorRuntime2().wrap(function _callee38$(_context39){while(1)switch(_context39.prev=_context39.next){case 0:_this32.reset();n=e.createInferenceHandler(),o=_this32.graph.getInputIndices();if(!(t.length!==o.length)){_context39.next=4;break;}throw new Error(\"number of input tensors don't match the number of inputs to the model: actual: \".concat(t.length,\" expected: \").concat(o.length));case 4:t.forEach(function(e,t){var n=o[t];_this32._values[n]=e;});i=_this32._starter.slice(0),a=_this32.graph.getValues(),s=_this32.graph.getNodes();u=0;_loop4=/*#__PURE__*/_regeneratorRuntime2().mark(function _loop4(){var e,t,o,l,c,p;return _regeneratorRuntime2().wrap(function _loop4$(_context38){while(1)switch(_context38.prev=_context38.next){case 0:e=i[u++],t=_this32._ops[e],o=t.node.inputs.map(function(e){return _this32._values[e];});if(!(-1!==o.indexOf(void 0))){_context38.next=3;break;}throw new Error(\"unresolved input detected: op: \".concat(t.node));case 3:l=o;r.Logger.verbose(\"ExecPlan\",\"Runing op:\".concat(t.node.name,\" (\").concat(l.map(function(e,n){return\"'\".concat(t.node.inputs[n],\"': \").concat(e.type,\"[\").concat(e.dims.join(\",\"),\"]\");}).join(\", \"),\")\"));_context38.next=7;return _this32.profiler.event(\"node\",t.node.name,/*#__PURE__*/_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee37(){return _regeneratorRuntime2().wrap(function _callee37$(_context37){while(1)switch(_context37.prev=_context37.next){case 0:return _context37.abrupt(\"return\",t.op.impl(n,l,t.op.context));case 1:case\"end\":return _context37.stop();}},_callee37);})));case 7:c=_context38.sent;if(!(c.length!==t.node.outputs.length)){_context38.next=10;break;}throw new Error(\"the size of output does not match model definition.\");case 10:c.forEach(function(e,n){var r=t.node.outputs[n];if(_this32._values[r])throw new Error(\"output [\".concat(r,\"] already has value: op:\").concat(t.node.name));_this32._values[r]=e;});p=new Set();c.forEach(function(e,n){var r=t.node.outputs[n];var _iterator19=_createForOfIteratorHelper(a[r].to),_step19;try{for(_iterator19.s();!(_step19=_iterator19.n()).done;){var _e61=_step19.value;var _t51=s[_e61];var _n45=!0;var _iterator20=_createForOfIteratorHelper(_t51.inputs),_step20;try{for(_iterator20.s();!(_step20=_iterator20.n()).done;){var _e62=_step20.value;if(!_this32._values[_e62]){_n45=!1;break;}}}catch(err){_iterator20.e(err);}finally{_iterator20.f();}_n45&&p.add(_e61);}}catch(err){_iterator19.e(err);}finally{_iterator19.f();}}),i.push.apply(i,_toConsumableArray(p));case 13:case\"end\":return _context38.stop();}},_loop4);});case 8:if(!(u<i.length)){_context39.next=12;break;}return _context39.delegateYield(_loop4(),\"t0\",10);case 10:_context39.next=8;break;case 12:l=[];_e60=0;case 14:if(!(_e60<_this32.graph.getOutputIndices().length)){_context39.next=28;break;}_t50=_this32.graph.getOutputIndices()[_e60],_n44=_this32._values[_t50];if(!(void 0===_n44)){_context39.next=18;break;}throw new Error(\"required output [\".concat(_t50,\"] does not have value\"));case 18:if(!(0===_t50)){_context39.next=23;break;}_context39.next=21;return _n44.getData();case 21:_context39.next=24;break;case 23:_n44.data;case 24:l.push(_n44);case 25:_e60++;_context39.next=14;break;case 28:return _context39.abrupt(\"return\",(r.Logger.verbose(\"ExecPlan\",\"disposing of inferenceHandler\"),n.dispose(),l));case 29:case\"end\":return _context39.stop();}},_callee38);}))));case 1:case\"end\":return _context40.stop();}},_callee39,this);}));function execute(_x40,_x41){return _execute.apply(this,arguments);}return execute;}()}]);return _class21;}();},4662:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Graph=void 0;var r=n(1446),o=n(6874),i=n(1287),a=n(9240),s=n(7273);var u=i.onnxruntime.experimental.fbs;t.Graph={from:function from(e,t){return new p(e,t);}};var l=/*#__PURE__*/function(){function l(e){_classCallCheck(this,l);this._from=void 0,this._to=[],this.tensor=void 0,this.type=void 0,e&&(this.type=s.ProtoUtil.tensorValueTypeFromProto(e.type.tensorType));}_createClass(l,[{key:\"from\",get:function get(){return this._from;}},{key:\"to\",get:function get(){return this._to;}}]);return l;}();var c=/*#__PURE__*/_createClass(function c(e,t){_classCallCheck(this,c);e instanceof r.onnx.NodeProto?(this.name=e.name,this.opType=e.opType,this.attributes=new o.Attribute(e.attribute)):e instanceof u.Node&&(this.name=null!=t?t:e.name(),this.opType=e.opType(),this.attributes=new o.Attribute(s.ProtoUtil.tensorAttributesFromORTFormat(e))),this.inputs=[],this.outputs=[],this.executeNode=!0;});var p=/*#__PURE__*/function(){function p(e,t){_classCallCheck(this,p);if(!e)throw new TypeError(\"graph is empty\");this.buildGraph(e),this.transformGraph(t),this.checkIsAcyclic();}_createClass(p,[{key:\"getInputIndices\",value:function getInputIndices(){return this._allInputIndices;}},{key:\"getInputNames\",value:function getInputNames(){return this._allInputNames;}},{key:\"getOutputIndices\",value:function getOutputIndices(){return this._allOutputIndices;}},{key:\"getOutputNames\",value:function getOutputNames(){return this._allOutputNames;}},{key:\"getValues\",value:function getValues(){return this._allData;}},{key:\"getNodes\",value:function getNodes(){return this._nodes;}},{key:\"buildGraph\",value:function buildGraph(e){if(e instanceof r.onnx.GraphProto)this.buildGraphFromOnnxFormat(e);else{if(!(e instanceof u.Graph))throw new TypeError(\"Graph type is not supported.\");this.buildGraphFromOrtFormat(e);}}},{key:\"buildGraphFromOnnxFormat\",value:function buildGraphFromOnnxFormat(e){var t=new Map();this._allData=[],this._allInputIndices=[],this._allInputNames=[],this._allOutputIndices=[],this._allOutputNames=[],this._nodes=[];var n=new Map();if(!e.input)throw new Error(\"missing information in graph: input\");var r=[];var _iterator21=_createForOfIteratorHelper(e.input),_step21;try{for(_iterator21.s();!(_step21=_iterator21.n()).done;){var _n48=_step21.value;if(t.has(_n48.name))throw new Error(\"duplicated input name: \".concat(_n48.name));var _e66=this._allData.push(new l(_n48))-1;t.set(_n48.name,_e66),r.push(_n48.name);}}catch(err){_iterator21.e(err);}finally{_iterator21.f();}if(!e.initializer)throw new Error(\"missing information in graph: initializer\");var _iterator22=_createForOfIteratorHelper(e.initializer),_step22;try{for(_iterator22.s();!(_step22=_iterator22.n()).done;){var _n49=_step22.value;var _e67=t.get(_n49.name);if(void 0===_e67){var _r36=new l();_r36.type={shape:{dims:s.ProtoUtil.tensorDimsFromProto(_n49.dims)},tensorType:s.ProtoUtil.tensorDataTypeFromProto(_n49.dataType)},_e67=this._allData.push(_r36)-1,t.set(_n49.name,_e67);}this._allData[_e67]._from=-1,this._allData[_e67].tensor=a.Tensor.fromProto(_n49);}}catch(err){_iterator22.e(err);}finally{_iterator22.f();}for(var _e63=0;_e63<this._allData.length;_e63++)this._allData[_e63].tensor||(this._allInputIndices.push(_e63),this._allInputNames.push(r[_e63]));if(!e.output)throw new Error(\"missing information in graph: output\");var _iterator23=_createForOfIteratorHelper(e.output),_step23;try{for(_iterator23.s();!(_step23=_iterator23.n()).done;){var _n50=_step23.value;if(t.has(_n50.name))throw new Error(\"duplicated output name: \".concat(_n50.name));var _e68=this._allData.push(new l(_n50))-1;t.set(_n50.name,_e68),this._allOutputIndices.push(_e68),this._allOutputNames.push(_n50.name);}}catch(err){_iterator23.e(err);}finally{_iterator23.f();}if(!e.node)throw new Error(\"missing information in graph: node\");var _iterator24=_createForOfIteratorHelper(e.node),_step24;try{for(_iterator24.s();!(_step24=_iterator24.n()).done;){var _t52=_step24.value;if(!_t52.name)for(var _e69=0;;_e69++){var _r37=\"unnamed_\".concat(_t52.opType,\"_\").concat(_e69);if(!n.has(_r37)){_t52.name=_r37;break;}}if(n.has(_t52.name))throw new Error(\"duplicated node name: \".concat(_t52.name));var _e70=this._nodes.push(new c(_t52))-1;n.set(_t52.name,_e70);}}catch(err){_iterator24.e(err);}finally{_iterator24.f();}for(var _n46=0;_n46<this._nodes.length;_n46++){var _r34=this._nodes[_n46],_o26=e.node[_n46];if(!_o26.output)throw new Error(\"missing output for node: \".concat(_o26.name));var _iterator25=_createForOfIteratorHelper(_o26.output),_step25;try{for(_iterator25.s();!(_step25=_iterator25.n()).done;){var _e64=_step25.value;var _i19=t.get(_e64);if(void 0===_i19&&(_i19=this._allData.push(new l())-1,t.set(_e64,_i19)),_r34.outputs.push(_i19),void 0!==this._allData[_i19]._from)throw new Error(\"multiple nodes output to one data value: \".concat(_i19));if(this._allData[_i19]._from=_n46,\"Constant\"===_o26.opType){if(!_o26.attribute||1!==_o26.attribute.length||!_o26.attribute[0].t)throw new Error(\"missing attributes or missing tensor value in attributes for this Constant operator\");if(!_o26.output||1!==_o26.output.length)throw new Error(\"missing output or incorrect number of outputs for this Constant operator\");_r34.outputs.pop(),_r34.executeNode=!1,this._allData[_i19]._from=-1,this._allData[_i19].tensor=a.Tensor.fromProto(_o26.attribute[0].t);}}}catch(err){_iterator25.e(err);}finally{_iterator25.f();}}for(var _n47=0;_n47<this._nodes.length;_n47++){var _r35=this._nodes[_n47],_o27=e.node[_n47];if(!_o27.input)throw new Error(\"missing input for node: \".concat(_o27.name));var _iterator26=_createForOfIteratorHelper(_o27.input),_step26;try{for(_iterator26.s();!(_step26=_iterator26.n()).done;){var _e65=_step26.value;var _i20=t.get(_e65);if(void 0===_i20){if(\"\"===_e65&&3===_o27.input.length&&\"Resize\"===_o27.opType)continue;throw new Error(\"unrecognized input '\".concat(_e65,\"' for node: \").concat(_o27.name));}_r35.inputs.push(_i20),this._allData[_i20]._to.push(_n47);}}catch(err){_iterator26.e(err);}finally{_iterator26.f();}}return!0;}},{key:\"buildGraphFromOrtFormat\",value:function buildGraphFromOrtFormat(e){var t,n,r;var o=new Map();this._allData=[],this._allInputIndices=[],this._allInputNames=[],this._allOutputIndices=[],this._allOutputNames=[],this._nodes=[];var i=new Map(),_p8=[];for(var _i21=0;_i21<e.inputsLength();_i21++){var _a15=e.inputs(_i21);if(o.has(_a15))throw new Error(\"duplicated input name: \".concat(_a15));for(var _i22=0;_i22<e.nodeArgsLength();_i22++)if((null===(t=e.nodeArgs(_i22))||void 0===t?void 0:t.name())===_a15){var _t53=new l();if((null===(r=null===(n=e.nodeArgs(_i22))||void 0===n?void 0:n.type())||void 0===r?void 0:r.valueType())!==u.TypeInfoValue.tensor_type)throw new Error(\"Unexpected value type for the nodeArg.\");var _c9=e.nodeArgs(_i22).type().value(new u.TensorTypeAndShape()),d=s.ProtoUtil.tensorDataTypeFromProto(_c9.elemType()),f=_c9.shape(),h=[];for(var _e71=0;_e71<f.dimLength();_e71++)h.push(s.LongUtil.longToNumber(f.dim(_e71).value().dimValue()));_t53.type={shape:{dims:h},tensorType:d};var g=this._allData.push(_t53)-1;o.set(_a15,g),_p8.push(_a15);}}for(var _t54=0;_t54<e.initializersLength();_t54++){var _n51=e.initializers(_t54);var _r38=o.get(_n51.name());if(void 0===_r38){var _e72=new l(),_t55=s.ProtoUtil.tensorDimsFromORTFormat(_n51),_i23=s.ProtoUtil.tensorDataTypeFromProto(_n51.dataType());_e72.type={shape:{dims:_t55},tensorType:_i23},_r38=this._allData.push(_e72)-1,o.set(_n51.name(),_r38);}this._allData[_r38]._from=-1,this._allData[_r38].tensor=a.Tensor.fromOrtTensor(_n51);}for(var _e73=0;_e73<this._allData.length;_e73++)this._allData[_e73].tensor||(this._allInputIndices.push(_e73),this._allInputNames.push(_p8[_e73]));for(var _t56=0;_t56<e.outputsLength();_t56++){var _n52=e.outputs(_t56);if(o.has(_n52))throw new Error(\"duplicated output name: \".concat(_n52));var _r39=this._allData.push(new l())-1;o.set(_n52,_r39),this._allOutputIndices.push(_r39),this._allOutputNames.push(_n52);}if(!e.nodes)throw new Error(\"missing information in graph: node\");for(var _t57=0;_t57<e.nodesLength();_t57++){var _n53=e.nodes(_t57);var _r40=_n53.name();if(!_r40)for(var _e74=0;_r40=\"unnamed_\".concat(_n53.opType(),\"_\").concat(_e74),i.has(_r40);_e74++);if(i.has(_r40))throw new Error(\"duplicated node name: \".concat(_r40));var _o28=this._nodes.push(new c(_n53,_r40))-1;i.set(_r40,_o28);}for(var _t58=0;_t58<this._nodes.length;_t58++){var _n54=this._nodes[_t58],_r41=e.nodes(_t58);if(null==_r41)throw new Error(\"No node exists at index \".concat(_t58));if(0===(null==_r41?void 0:_r41.outputsLength()))throw new Error(\"missing output for node: \".concat(_r41.name));for(var _e75=0;_e75<(null==_r41?void 0:_r41.outputsLength());_e75++){var _i24=null==_r41?void 0:_r41.outputs(_e75);var _s8=o.get(_i24);if(void 0===_s8&&(_s8=this._allData.push(new l())-1,o.set(_i24,_s8)),_n54.outputs.push(_s8),void 0!==this._allData[_s8]._from)throw new Error(\"multiple nodes output to one data value: \".concat(_s8));if(this._allData[_s8]._from=_t58,\"Constant\"===_r41.opType()){if(1!==_r41.attributesLength()||!_r41.attributes(0).t())throw new Error(\"missing attributes or missing tensor value in attributes for this Constant operator\");if(1!==_r41.outputsLength())throw new Error(\"missing output or incorrect number of outputs for this Constant operator\");_n54.outputs.pop(),_n54.executeNode=!1,this._allData[_s8]._from=-1,this._allData[_s8].tensor=a.Tensor.fromOrtTensor(_r41.attributes(0).t());}}}for(var _t59=0;_t59<this._nodes.length;_t59++){var _n55=this._nodes[_t59],_r42=e.nodes(_t59);if(0===_r42.inputsLength())throw new Error(\"missing input for node: \".concat(_r42.name));for(var _e76=0;_e76<_r42.inputsLength();_e76++){var _i25=_r42.inputs(_e76),_a16=o.get(_i25);if(void 0===_a16)throw new Error(\"unrecognized input '\".concat(_i25,\"' for node: \").concat(_r42.name()));_n55.inputs.push(_a16),this._allData[_a16]._to.push(_t59);}}}},{key:\"checkIsAcyclic\",value:function checkIsAcyclic(){var _this33=this;var e=new Set();this._allInputIndices.forEach(function(t){_this33._allData[t]._to.forEach(function(t){e.add(t);});});var t=Array.from(e),n=new Array(this._nodes.length).fill(\"white\");var _loop5=function _loop5(){var e=t.pop();\"gray\"===n[e]?n[e]=\"black\":(t.push(e),n[e]=\"gray\",_this33._nodes[e].outputs.forEach(function(r){var o=_this33._allData[r];if(void 0!==o.tensor)throw new Error(\"node outputs should not be initialized\");if(o._from!==e)throw new Error(\"from property of the Value object doesn't match index of Node being processed\");o._to.forEach(function(e){if(\"gray\"===n[e])throw new Error(\"model graph is cyclic\");\"white\"===n[e]&&t.push(e);});}));};for(;t.length>0;){_loop5();}}},{key:\"transformGraph\",value:function transformGraph(e){this.removeAllIdentityNodes(),this.removeAllDropoutNodes(),this.fuseConvActivationNodes(),e&&e.transformGraph(this),this.finalizeGraph();}},{key:\"finalizeGraph\",value:function finalizeGraph(){var _this34=this;var e=0;var t=new Array(this._nodes.length,0);var n=0;for(var _e77=0;_e77<this._nodes.length;_e77++)t[_e77]=n,this._nodes[_e77].executeNode?(n!==_e77&&(this._nodes[n]=this._nodes[_e77]),n++):this._nodes[_e77].outputs.forEach(function(e){_this34._allData[e]._from=-2;});this._nodes.splice(n,this._nodes.length-n);for(var _e78=0;_e78<this._allData.length;_e78++){var _n56=this._allData[_e78];void 0!==_n56._from&&-1!==_n56._from&&-2!==_n56._from&&(_n56._from=t[_n56._from]);for(var _e79=0;_e79<_n56._to.length;_e79++){if(!(_n56._to[_e79]>=0))throw new Error(\"Trying to update a removed node\");_n56._to[_e79]=t[_n56._to[_e79]];}}e=0;var _loop6=function _loop6(_t61){if(-2!==_this34._allData[_t61].from||-1!==_this34._allOutputIndices.indexOf(_t61+e)){if(e>0){var _n57=-1;void 0!==_this34._allData[_t61].from&&-1!==_this34._allData[_t61].from?(_n57=_this34._nodes[_this34._allData[_t61].from].outputs.indexOf(_t61+e),-1!==_n57&&(_this34._nodes[_this34._allData[_t61].from].outputs[_n57]=_t61)):(_n57=_this34._allInputIndices.indexOf(_t61+e),-1!==_n57&&(_this34._allInputIndices[_n57]=_t61)),_this34._allData[_t61].to.forEach(function(r){_n57=_this34._nodes[r].inputs.indexOf(_t61+e),-1!==_n57&&(_this34._nodes[r].inputs[_n57]=_t61);}),0===_this34._allData[_t61].to.length&&(_n57=_this34._allOutputIndices.indexOf(_t61+e),-1!==_n57&&(_this34._allOutputIndices[_n57]=_t61));}}else e++,_this34._allData.splice(_t61,1),_t61--;_t60=_t61;};for(var _t60=0;_t60<this._allData.length;_t60++){_loop6(_t60);}}},{key:\"deleteNode\",value:function deleteNode(e){var t=this._nodes[e];if(t.outputs.length>1)for(var _e80=1;_e80<t.outputs.length;_e80++)if(this._allData[t.outputs[_e80]].to.length>0)throw new Error(\"Node deletion with more than one output connected to other nodes is not supported. \");t.executeNode=!1;var n=t.inputs[0],r=t.outputs[0],o=this._allData[r].to;for(var _n58=0;_n58<t.inputs.length;_n58++){var _r43=this._allData[t.inputs[_n58]].to.indexOf(e);if(-1===_r43)throw new Error(\"The Value object doesn't have the current Node in it's 'to' property \");this._allData[t.inputs[_n58]].to.splice(_r43,1);}this._allData[r]._to=[];var i=this._allOutputIndices.indexOf(r);if(-1!==i&&(this._allOutputIndices[i]=n),o&&o.length>0){var _iterator27=_createForOfIteratorHelper(o),_step27;try{for(_iterator27.s();!(_step27=_iterator27.n()).done;){var _e81=_step27.value;var _t62=this._nodes[_e81].inputs.indexOf(r);if(-1===_t62)throw new Error(\"The Node object doesn't have the output Value in it's 'inputs' property \");this._nodes[_e81].inputs[_t62]=n,this._allData[n].to.push(_e81);}}catch(err){_iterator27.e(err);}finally{_iterator27.f();}}}},{key:\"removeAllDropoutNodes\",value:function removeAllDropoutNodes(){var e=0;var _iterator28=_createForOfIteratorHelper(this._nodes),_step28;try{for(_iterator28.s();!(_step28=_iterator28.n()).done;){var _t63=_step28.value;if(\"Dropout\"===_t63.opType){if(1!==_t63.inputs.length)throw new Error(\"Dropout nodes should only contain one input. \");if(1!==_t63.outputs.length&&2!==_t63.outputs.length)throw new Error(\"Dropout nodes should contain either 1 or 2 output(s)\");if(2===_t63.outputs.length&&0!==this._allData[_t63.outputs[1]]._to.length)throw new Error(\"Dropout nodes's second output should not be referenced by other nodes\");this.deleteNode(e);}e++;}}catch(err){_iterator28.e(err);}finally{_iterator28.f();}}},{key:\"removeAllIdentityNodes\",value:function removeAllIdentityNodes(){var e=0;var _iterator29=_createForOfIteratorHelper(this._nodes),_step29;try{for(_iterator29.s();!(_step29=_iterator29.n()).done;){var _t64=_step29.value;\"Identity\"===_t64.opType&&this.deleteNode(e),e++;}}catch(err){_iterator29.e(err);}finally{_iterator29.f();}}},{key:\"isActivation\",value:function isActivation(e){switch(e.opType){case\"Relu\":case\"Sigmoid\":case\"Clip\":return!0;default:return!1;}}},{key:\"fuseConvActivationNodes\",value:function fuseConvActivationNodes(){var _iterator30=_createForOfIteratorHelper(this._nodes),_step30;try{for(_iterator30.s();!(_step30=_iterator30.n()).done;){var _e82=_step30.value;if(\"Conv\"===_e82.opType){var _t65=this._allData[_e82.outputs[0]]._to;if(1===_t65.length&&this.isActivation(this._nodes[_t65[0]])){var _n59=this._nodes[_t65[0]];if(\"Clip\"===_n59.opType)if(1===_n59.inputs.length)try{_e82.attributes.set(\"activation_params\",\"floats\",[_n59.attributes.getFloat(\"min\"),_n59.attributes.getFloat(\"max\")]);}catch(t){_e82.attributes.set(\"activation_params\",\"floats\",[s.MIN_CLIP,s.MAX_CLIP]);}else{if(!(_n59.inputs.length>=3&&void 0!==this._allData[_n59.inputs[1]].tensor&&void 0!==this._allData[_n59.inputs[2]].tensor))continue;_e82.attributes.set(\"activation_params\",\"floats\",[this._allData[_n59.inputs[1]].tensor.floatData[0],this._allData[_n59.inputs[2]].tensor.floatData[0]]);}_e82.attributes.set(\"activation\",\"string\",_n59.opType),this.deleteNode(_t65[0]);}}}}catch(err){_iterator30.e(err);}finally{_iterator30.f();}}}]);return p;}();},1315:function _(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.now=t.Profiler=t.Logger=void 0;var n={verbose:1e3,info:2e3,warning:4e3,error:5e3,fatal:6e3},r={none:new(/*#__PURE__*/function(){function _class22(){_classCallCheck(this,_class22);}_createClass(_class22,[{key:\"log\",value:function log(e,t,n){}}]);return _class22;}())(),console:new(/*#__PURE__*/function(){function _class23(){_classCallCheck(this,_class23);}_createClass(_class23,[{key:\"log\",value:function log(e,t,n){console.log(\"\".concat(this.color(e),\" \").concat(n?\"\u001b[35m\"+n+\"\u001b[0m \":\"\").concat(t));}},{key:\"color\",value:function color(e){switch(e){case\"verbose\":return\"\u001b[34;40mv\u001b[0m\";case\"info\":return\"\u001b[32mi\u001b[0m\";case\"warning\":return\"\u001b[30;43mw\u001b[0m\";case\"error\":return\"\u001b[31;40me\u001b[0m\";case\"fatal\":return\"\u001b[101mf\u001b[0m\";default:throw new Error(\"unsupported severity: \".concat(e));}}}]);return _class23;}())()},o={provider:\"console\",minimalSeverity:\"warning\",logDateTime:!0,logSourceLocation:!1};var i={\"\":o};function a(e,t,n,r){if(void 0===t)return o=e,{verbose:a.verbose.bind(null,o),info:a.info.bind(null,o),warning:a.warning.bind(null,o),error:a.error.bind(null,o),fatal:a.fatal.bind(null,o)};if(void 0===n)s(e,t);else if(\"number\"==typeof n&&void 0===r)s(e,t);else if(\"string\"==typeof n&&void 0===r)s(e,n,0,t);else{if(\"string\"!=typeof n||\"number\"!=typeof r)throw new TypeError(\"input is valid\");s(e,n,0,t);}var o;}function s(e,t,o,a){var s=i[a||\"\"]||i[\"\"];n[e]<n[s.minimalSeverity]||(s.logDateTime&&(t=\"\".concat(new Date().toISOString(),\"|\").concat(t)),s.logSourceLocation,r[s.provider].log(e,t,a));}!function(e){function t(e){i={},n(\"\",e||{});}function n(e,n){if(\"*\"===e)t(n);else{var _t66=i[e]||o;i[e]={provider:n.provider||_t66.provider,minimalSeverity:n.minimalSeverity||_t66.minimalSeverity,logDateTime:void 0===n.logDateTime?_t66.logDateTime:n.logDateTime,logSourceLocation:void 0===n.logSourceLocation?_t66.logSourceLocation:n.logSourceLocation};}}e.verbose=function(t,n){e(\"verbose\",t,n);},e.info=function(t,n){e(\"info\",t,n);},e.warning=function(t,n){e(\"warning\",t,n);},e.error=function(t,n){e(\"error\",t,n);},e.fatal=function(t,n){e(\"fatal\",t,n);},e.reset=t,e.set=n,e.setWithEnv=function(e){var t={};e.logLevel&&(t.minimalSeverity=e.logLevel),n(\"\",t);};}(a||(a={})),t.Logger=a;var u=/*#__PURE__*/function(){function u(e,t,n,r,o,i){_classCallCheck(this,u);this.category=e,this.name=t,this.startTime=n,this.endCallback=r,this.timer=o,this.ctx=i;}_createClass(u,[{key:\"end\",value:function(){var _end=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee40(){return _regeneratorRuntime2().wrap(function _callee40$(_context41){while(1)switch(_context41.prev=_context41.next){case 0:return _context41.abrupt(\"return\",this.endCallback(this));case 1:case\"end\":return _context41.stop();}},_callee40,this);}));function end(){return _end.apply(this,arguments);}return end;}()},{key:\"checkTimer\",value:function(){var _checkTimer=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee41(){return _regeneratorRuntime2().wrap(function _callee41$(_context42){while(1)switch(_context42.prev=_context42.next){case 0:if(!(void 0===this.ctx||void 0===this.timer)){_context42.next=2;break;}throw new Error(\"No webgl timer found\");case 2:return _context42.abrupt(\"return\",(this.ctx.endTimer(),this.ctx.waitForQueryAndGetTime(this.timer)));case 3:case\"end\":return _context42.stop();}},_callee41,this);}));function checkTimer(){return _checkTimer.apply(this,arguments);}return checkTimer;}()}]);return u;}();var l=/*#__PURE__*/_createClass(function l(e,t,n,r){_classCallCheck(this,l);this.category=e,this.name=t,this.startTime=n,this.endTime=r;});t.Profiler=/*#__PURE__*/function(){function _class24(e,t,n){_classCallCheck(this,_class24);this._started=!1,this._flushPointer=0,this._started=!1,this._maxNumberEvents=void 0===e?1e4:e,this._flushBatchSize=void 0===t?10:t,this._flushIntervalInMilliseconds=void 0===n?5e3:n;}_createClass(_class24,[{key:\"start\",value:function start(){this._started=!0,this._timingEvents=[],this._flushTime=(0,t.now)(),this._flushPointer=0;}},{key:\"stop\",value:function stop(){for(this._started=!1;this._flushPointer<this._timingEvents.length;this._flushPointer++)this.logOneEvent(this._timingEvents[this._flushPointer]);}},{key:\"event\",value:function event(e,t,n,r){var o=this._started?this.begin(e,t,r):void 0;var i=!1;var a=n();if(a&&\"function\"==typeof a.then)return i=!0,new Promise(function(e,t){a.then(/*#__PURE__*/function(){var _ref32=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee42(t){return _regeneratorRuntime2().wrap(function _callee42$(_context43){while(1)switch(_context43.prev=_context43.next){case 0:_context43.t0=o;if(!_context43.t0){_context43.next=4;break;}_context43.next=4;return o.end();case 4:e(t);case 5:case\"end\":return _context43.stop();}},_callee42);}));return function(_x42){return _ref32.apply(this,arguments);};}(),/*#__PURE__*/function(){var _ref33=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee43(e){return _regeneratorRuntime2().wrap(function _callee43$(_context44){while(1)switch(_context44.prev=_context44.next){case 0:_context44.t0=o;if(!_context44.t0){_context44.next=4;break;}_context44.next=4;return o.end();case 4:t(e);case 5:case\"end\":return _context44.stop();}},_callee43);}));return function(_x43){return _ref33.apply(this,arguments);};}());});if(!i&&o){var _e83=o.end();if(_e83&&\"function\"==typeof _e83.then)return new Promise(function(t,n){_e83.then(function(){t(a);},function(e){n(e);});});}return a;}},{key:\"begin\",value:function begin(e,n,r){var _this35=this;if(!this._started)throw new Error(\"profiler is not started yet\");if(void 0===r){var _r44=(0,t.now)();return this.flush(_r44),new u(e,n,_r44,function(e){return _this35.endSync(e);});}{var _t67=r.beginTimer();return new u(e,n,0,/*#__PURE__*/function(){var _ref34=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee44(e){return _regeneratorRuntime2().wrap(function _callee44$(_context45){while(1)switch(_context45.prev=_context45.next){case 0:return _context45.abrupt(\"return\",_this35.end(e));case 1:case\"end\":return _context45.stop();}},_callee44);}));return function(_x44){return _ref34.apply(this,arguments);};}(),_t67,r);}}},{key:\"end\",value:function(){var _end2=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee45(e){var t;return _regeneratorRuntime2().wrap(function _callee45$(_context46){while(1)switch(_context46.prev=_context46.next){case 0:_context46.next=2;return e.checkTimer();case 2:t=_context46.sent;this._timingEvents.length<this._maxNumberEvents&&(this._timingEvents.push(new l(e.category,e.name,e.startTime,t)),this.flush(t));case 4:case\"end\":return _context46.stop();}},_callee45,this);}));function end(_x45){return _end2.apply(this,arguments);}return end;}()},{key:\"endSync\",value:function endSync(e){var n=(0,t.now)();this._timingEvents.length<this._maxNumberEvents&&(this._timingEvents.push(new l(e.category,e.name,e.startTime,n)),this.flush(n));}},{key:\"logOneEvent\",value:function logOneEvent(e){t.Logger.verbose(\"Profiler.\".concat(e.category),\"\".concat((e.endTime-e.startTime).toFixed(2),\"ms on event '\").concat(e.name,\"' at \").concat(e.endTime.toFixed(2)));}},{key:\"flush\",value:function flush(e){if(this._timingEvents.length-this._flushPointer>=this._flushBatchSize||e-this._flushTime>=this._flushIntervalInMilliseconds){for(var _e84=this._flushPointer;this._flushPointer<_e84+this._flushBatchSize&&this._flushPointer<this._timingEvents.length;this._flushPointer++)this.logOneEvent(this._timingEvents[this._flushPointer]);this._flushTime=(0,t.now)();}}},{key:\"started\",get:function get(){return this._started;}}],[{key:\"create\",value:function create(e){return void 0===e?new this():new this(e.maxNumberEvents,e.flushBatchSize,e.flushIntervalInMilliseconds);}}]);return _class24;}(),t.now=\"undefined\"!=typeof performance&&performance.now?function(){return performance.now();}:Date.now;},1745:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Model=void 0;var r=n(5686),o=n(1446),i=n(4662),a=n(1287),s=n(7273);var u=a.onnxruntime.experimental.fbs;t.Model=/*#__PURE__*/function(){function _class25(){_classCallCheck(this,_class25);}_createClass(_class25,[{key:\"load\",value:function load(e,t,n){if(!n)try{return void this.loadFromOnnxFormat(e,t);}catch(e){if(void 0!==n)throw e;}this.loadFromOrtFormat(e,t);}},{key:\"loadFromOnnxFormat\",value:function loadFromOnnxFormat(e,t){var n=o.onnx.ModelProto.decode(e);if(s.LongUtil.longToNumber(n.irVersion)<3)throw new Error(\"only support ONNX model with IR_VERSION>=3\");this._opsets=n.opsetImport.map(function(e){return{domain:e.domain,version:s.LongUtil.longToNumber(e.version)};}),this._graph=i.Graph.from(n.graph,t);}},{key:\"loadFromOrtFormat\",value:function loadFromOrtFormat(e,t){var n=new r.flatbuffers.ByteBuffer(e),o=u.InferenceSession.getRootAsInferenceSession(n).model();if(s.LongUtil.longToNumber(o.irVersion())<3)throw new Error(\"only support ONNX model with IR_VERSION>=3\");this._opsets=[];for(var _e85=0;_e85<o.opsetImportLength();_e85++){var _t68=o.opsetImport(_e85);this._opsets.push({domain:null==_t68?void 0:_t68.domain(),version:s.LongUtil.longToNumber(_t68.version())});}this._graph=i.Graph.from(o.graph(),t);}},{key:\"graph\",get:function get(){return this._graph;}},{key:\"opsets\",get:function get(){return this._opsets;}}]);return _class25;}();},6145:function _(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.FLOAT_TYPES=t.INT_TYPES=t.NUMBER_TYPES=void 0,t.NUMBER_TYPES=[\"float32\",\"float64\",\"int32\",\"int16\",\"int8\",\"uint16\",\"uint32\",\"uint8\"],t.INT_TYPES=[\"int32\",\"int16\",\"int8\",\"uint16\",\"uint32\",\"uint8\"],t.FLOAT_TYPES=[\"float32\",\"float64\"];},5881:function _(e,t){\"use strict\";function n(e,t){if(t.endsWith(\"+\")){var _n60=Number.parseInt(t.substring(0,t.length-1),10);return!isNaN(_n60)&&_n60<=e;}if(2===t.split(\"-\").length){var _n61=t.split(\"-\"),r=Number.parseInt(_n61[0],10),o=Number.parseInt(_n61[1],10);return!isNaN(r)&&!isNaN(o)&&r<=e&&e<=o;}return Number.parseInt(t,10)===e;}Object.defineProperty(t,\"__esModule\",{value:!0}),t.resolveOperator=void 0,t.resolveOperator=function(e,t,r){var _iterator31=_createForOfIteratorHelper(r),_step31;try{for(_iterator31.s();!(_step31=_iterator31.n()).done;){var o=_step31.value;var _r45=o[0],i=o[1],a=o[2],s=o[3],u=o[4];if(e.opType===_r45){var _iterator32=_createForOfIteratorHelper(t),_step32;try{for(_iterator32.s();!(_step32=_iterator32.n()).done;){var _e86=_step32.value;if((_e86.domain===i||\"ai.onnx\"===_e86.domain&&\"\"===i)&&n(_e86.version,a))return{opImpl:s,opInit:u};}}catch(err){_iterator32.e(err);}finally{_iterator32.f();}}}}catch(err){_iterator31.e(err);}finally{_iterator31.f();}throw new TypeError(\"cannot resolve operator '\".concat(e.opType,\"' with opsets: \").concat(t.map(function(e){return\"\".concat(e.domain||\"ai.onnx\",\" v\").concat(e.version);}).join(\", \")));};},1287:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.onnxruntime=void 0;var r=n(5686);var o,i;o=t.onnxruntime||(t.onnxruntime={}),function(e){var t;!function(e){e[e.UNDEFINED=0]=\"UNDEFINED\",e[e.FLOAT=1]=\"FLOAT\",e[e.INT=2]=\"INT\",e[e.STRING=3]=\"STRING\",e[e.TENSOR=4]=\"TENSOR\",e[e.GRAPH=5]=\"GRAPH\",e[e.FLOATS=6]=\"FLOATS\",e[e.INTS=7]=\"INTS\",e[e.STRINGS=8]=\"STRINGS\",e[e.TENSORS=9]=\"TENSORS\",e[e.GRAPHS=10]=\"GRAPHS\",e[e.SPARSE_TENSOR=11]=\"SPARSE_TENSOR\",e[e.SPARSE_TENSORS=12]=\"SPARSE_TENSORS\";}(t=e.AttributeType||(e.AttributeType={}));}((i=o.experimental||(o.experimental={})).fbs||(i.fbs={})),function(e){!function(e){!function(e){var t;!function(e){e[e.UNKNOWN=0]=\"UNKNOWN\",e[e.VALUE=1]=\"VALUE\",e[e.PARAM=2]=\"PARAM\";}(t=e.DimensionValueType||(e.DimensionValueType={}));}(e.fbs||(e.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(e){!function(e){var t;!function(e){e[e.UNDEFINED=0]=\"UNDEFINED\",e[e.FLOAT=1]=\"FLOAT\",e[e.UINT8=2]=\"UINT8\",e[e.INT8=3]=\"INT8\",e[e.UINT16=4]=\"UINT16\",e[e.INT16=5]=\"INT16\",e[e.INT32=6]=\"INT32\",e[e.INT64=7]=\"INT64\",e[e.STRING=8]=\"STRING\",e[e.BOOL=9]=\"BOOL\",e[e.FLOAT16=10]=\"FLOAT16\",e[e.DOUBLE=11]=\"DOUBLE\",e[e.UINT32=12]=\"UINT32\",e[e.UINT64=13]=\"UINT64\",e[e.COMPLEX64=14]=\"COMPLEX64\",e[e.COMPLEX128=15]=\"COMPLEX128\",e[e.BFLOAT16=16]=\"BFLOAT16\";}(t=e.TensorDataType||(e.TensorDataType={}));}(e.fbs||(e.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(e){!function(e){var t;!function(e){e[e.Primitive=0]=\"Primitive\",e[e.Fused=1]=\"Fused\";}(t=e.NodeType||(e.NodeType={}));}(e.fbs||(e.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(e){!function(e){var t;!function(e){e[e.NONE=0]=\"NONE\",e[e.tensor_type=1]=\"tensor_type\",e[e.sequence_type=2]=\"sequence_type\",e[e.map_type=3]=\"map_type\";}(t=e.TypeInfoValue||(e.TypeInfoValue={}));}(e.fbs||(e.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"dim\",value:function dim(t,_n62){var r=this.bb.__offset(this.bb_pos,4);return r?(_n62||new e.experimental.fbs.Dimension()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*t),this.bb):null;}},{key:\"dimLength\",value:function dimLength(){var e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__vector_len(this.bb_pos+e):0;}}],[{key:\"getRootAsShape\",value:function getRootAsShape(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsShape\",value:function getSizePrefixedRootAsShape(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startShape\",value:function startShape(e){e.startObject(1);}},{key:\"addDim\",value:function addDim(e,t){e.addFieldOffset(0,t,0);}},{key:\"createDimVector\",value:function createDimVector(e,t){e.startVector(4,t.length,4);for(var _n64=t.length-1;_n64>=0;_n64--)e.addOffset(t[_n64]);return e.endVector();}},{key:\"startDimVector\",value:function startDimVector(e,t){e.startVector(4,t,4);}},{key:\"endShape\",value:function endShape(e){return e.endObject();}},{key:\"createShape\",value:function createShape(e,t){return n.startShape(e),n.addDim(e,t),n.endShape(e);}}]);return n;}();t.Shape=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"value\",value:function value(t){var _n65=this.bb.__offset(this.bb_pos,4);return _n65?(t||new e.experimental.fbs.DimensionValue()).__init(this.bb.__indirect(this.bb_pos+_n65),this.bb):null;}},{key:\"denotation\",value:function denotation(e){var t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__string(this.bb_pos+t,e):null;}}],[{key:\"getRootAsDimension\",value:function getRootAsDimension(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsDimension\",value:function getSizePrefixedRootAsDimension(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startDimension\",value:function startDimension(e){e.startObject(2);}},{key:\"addValue\",value:function addValue(e,t){e.addFieldOffset(0,t,0);}},{key:\"addDenotation\",value:function addDenotation(e,t){e.addFieldOffset(1,t,0);}},{key:\"endDimension\",value:function endDimension(e){return e.endObject();}},{key:\"createDimension\",value:function createDimension(e,t,r){return n.startDimension(e),n.addValue(e,t),n.addDenotation(e,r),n.endDimension(e);}}]);return n;}();t.Dimension=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"dimType\",value:function dimType(){var t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt8(this.bb_pos+t):e.experimental.fbs.DimensionValueType.UNKNOWN;}},{key:\"dimValue\",value:function dimValue(){var e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readInt64(this.bb_pos+e):this.bb.createLong(0,0);}},{key:\"dimParam\",value:function dimParam(e){var t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__string(this.bb_pos+t,e):null;}}],[{key:\"getRootAsDimensionValue\",value:function getRootAsDimensionValue(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsDimensionValue\",value:function getSizePrefixedRootAsDimensionValue(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startDimensionValue\",value:function startDimensionValue(e){e.startObject(3);}},{key:\"addDimType\",value:function addDimType(t,_n66){t.addFieldInt8(0,_n66,e.experimental.fbs.DimensionValueType.UNKNOWN);}},{key:\"addDimValue\",value:function addDimValue(e,t){e.addFieldInt64(1,t,e.createLong(0,0));}},{key:\"addDimParam\",value:function addDimParam(e,t){e.addFieldOffset(2,t,0);}},{key:\"endDimensionValue\",value:function endDimensionValue(e){return e.endObject();}},{key:\"createDimensionValue\",value:function createDimensionValue(e,t,r,o){return n.startDimensionValue(e),n.addDimType(e,t),n.addDimValue(e,r),n.addDimParam(e,o),n.endDimensionValue(e);}}]);return n;}();t.DimensionValue=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"elemType\",value:function elemType(){var t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):e.experimental.fbs.TensorDataType.UNDEFINED;}},{key:\"shape\",value:function shape(t){var _n67=this.bb.__offset(this.bb_pos,6);return _n67?(t||new e.experimental.fbs.Shape()).__init(this.bb.__indirect(this.bb_pos+_n67),this.bb):null;}}],[{key:\"getRootAsTensorTypeAndShape\",value:function getRootAsTensorTypeAndShape(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsTensorTypeAndShape\",value:function getSizePrefixedRootAsTensorTypeAndShape(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startTensorTypeAndShape\",value:function startTensorTypeAndShape(e){e.startObject(2);}},{key:\"addElemType\",value:function addElemType(t,_n68){t.addFieldInt32(0,_n68,e.experimental.fbs.TensorDataType.UNDEFINED);}},{key:\"addShape\",value:function addShape(e,t){e.addFieldOffset(1,t,0);}},{key:\"endTensorTypeAndShape\",value:function endTensorTypeAndShape(e){return e.endObject();}},{key:\"createTensorTypeAndShape\",value:function createTensorTypeAndShape(e,t,r){return n.startTensorTypeAndShape(e),n.addElemType(e,t),n.addShape(e,r),n.endTensorTypeAndShape(e);}}]);return n;}();t.TensorTypeAndShape=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"keyType\",value:function keyType(){var t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):e.experimental.fbs.TensorDataType.UNDEFINED;}},{key:\"valueType\",value:function valueType(t){var _n69=this.bb.__offset(this.bb_pos,6);return _n69?(t||new e.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos+_n69),this.bb):null;}}],[{key:\"getRootAsMapType\",value:function getRootAsMapType(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsMapType\",value:function getSizePrefixedRootAsMapType(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startMapType\",value:function startMapType(e){e.startObject(2);}},{key:\"addKeyType\",value:function addKeyType(t,_n70){t.addFieldInt32(0,_n70,e.experimental.fbs.TensorDataType.UNDEFINED);}},{key:\"addValueType\",value:function addValueType(e,t){e.addFieldOffset(1,t,0);}},{key:\"endMapType\",value:function endMapType(e){return e.endObject();}},{key:\"createMapType\",value:function createMapType(e,t,r){return n.startMapType(e),n.addKeyType(e,t),n.addValueType(e,r),n.endMapType(e);}}]);return n;}();t.MapType=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"elemType\",value:function elemType(t){var _n71=this.bb.__offset(this.bb_pos,4);return _n71?(t||new e.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos+_n71),this.bb):null;}}],[{key:\"getRootAsSequenceType\",value:function getRootAsSequenceType(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsSequenceType\",value:function getSizePrefixedRootAsSequenceType(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startSequenceType\",value:function startSequenceType(e){e.startObject(1);}},{key:\"addElemType\",value:function addElemType(e,t){e.addFieldOffset(0,t,0);}},{key:\"endSequenceType\",value:function endSequenceType(e){return e.endObject();}},{key:\"createSequenceType\",value:function createSequenceType(e,t){return n.startSequenceType(e),n.addElemType(e,t),n.endSequenceType(e);}}]);return n;}();t.SequenceType=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(e){(e.fbs||(e.fbs={})).EdgeEnd=/*#__PURE__*/function(){function _class26(){_classCallCheck(this,_class26);this.bb=null,this.bb_pos=0;}_createClass(_class26,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"nodeIndex\",value:function nodeIndex(){return this.bb.readUint32(this.bb_pos);}},{key:\"srcArgIndex\",value:function srcArgIndex(){return this.bb.readInt32(this.bb_pos+4);}},{key:\"dstArgIndex\",value:function dstArgIndex(){return this.bb.readInt32(this.bb_pos+8);}}],[{key:\"createEdgeEnd\",value:function createEdgeEnd(e,t,n,r){return e.prep(4,12),e.writeInt32(r),e.writeInt32(n),e.writeInt32(t),e.offset();}}]);return _class26;}();}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"nodeIndex\",value:function nodeIndex(){var e=this.bb.__offset(this.bb_pos,4);return e?this.bb.readUint32(this.bb_pos+e):0;}},{key:\"inputEdges\",value:function inputEdges(t,_n72){var r=this.bb.__offset(this.bb_pos,6);return r?(_n72||new e.experimental.fbs.EdgeEnd()).__init(this.bb.__vector(this.bb_pos+r)+12*t,this.bb):null;}},{key:\"inputEdgesLength\",value:function inputEdgesLength(){var e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"outputEdges\",value:function outputEdges(t,_n73){var r=this.bb.__offset(this.bb_pos,8);return r?(_n73||new e.experimental.fbs.EdgeEnd()).__init(this.bb.__vector(this.bb_pos+r)+12*t,this.bb):null;}},{key:\"outputEdgesLength\",value:function outputEdgesLength(){var e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__vector_len(this.bb_pos+e):0;}}],[{key:\"getRootAsNodeEdge\",value:function getRootAsNodeEdge(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsNodeEdge\",value:function getSizePrefixedRootAsNodeEdge(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startNodeEdge\",value:function startNodeEdge(e){e.startObject(3);}},{key:\"addNodeIndex\",value:function addNodeIndex(e,t){e.addFieldInt32(0,t,0);}},{key:\"addInputEdges\",value:function addInputEdges(e,t){e.addFieldOffset(1,t,0);}},{key:\"startInputEdgesVector\",value:function startInputEdgesVector(e,t){e.startVector(12,t,4);}},{key:\"addOutputEdges\",value:function addOutputEdges(e,t){e.addFieldOffset(2,t,0);}},{key:\"startOutputEdgesVector\",value:function startOutputEdgesVector(e,t){e.startVector(12,t,4);}},{key:\"endNodeEdge\",value:function endNodeEdge(e){return e.endObject();}},{key:\"createNodeEdge\",value:function createNodeEdge(e,t,r,o){return n.startNodeEdge(e),n.addNodeIndex(e,t),n.addInputEdges(e,r),n.addOutputEdges(e,o),n.endNodeEdge(e);}}]);return n;}();t.NodeEdge=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"name\",value:function name(e){var t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"docString\",value:function docString(e){var t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"domain\",value:function domain(e){var t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"sinceVersion\",value:function sinceVersion(){var e=this.bb.__offset(this.bb_pos,10);return e?this.bb.readInt32(this.bb_pos+e):0;}},{key:\"index\",value:function index(){var e=this.bb.__offset(this.bb_pos,12);return e?this.bb.readUint32(this.bb_pos+e):0;}},{key:\"opType\",value:function opType(e){var t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"type\",value:function type(){var t=this.bb.__offset(this.bb_pos,16);return t?this.bb.readInt32(this.bb_pos+t):e.experimental.fbs.NodeType.Primitive;}},{key:\"executionProviderType\",value:function executionProviderType(e){var t=this.bb.__offset(this.bb_pos,18);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"inputs\",value:function inputs(e,t){var _n74=this.bb.__offset(this.bb_pos,20);return _n74?this.bb.__string(this.bb.__vector(this.bb_pos+_n74)+4*e,t):null;}},{key:\"inputsLength\",value:function inputsLength(){var e=this.bb.__offset(this.bb_pos,20);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"outputs\",value:function outputs(e,t){var _n75=this.bb.__offset(this.bb_pos,22);return _n75?this.bb.__string(this.bb.__vector(this.bb_pos+_n75)+4*e,t):null;}},{key:\"outputsLength\",value:function outputsLength(){var e=this.bb.__offset(this.bb_pos,22);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"attributes\",value:function attributes(t,_n76){var r=this.bb.__offset(this.bb_pos,24);return r?(_n76||new e.experimental.fbs.Attribute()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*t),this.bb):null;}},{key:\"attributesLength\",value:function attributesLength(){var e=this.bb.__offset(this.bb_pos,24);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"inputArgCounts\",value:function inputArgCounts(e){var t=this.bb.__offset(this.bb_pos,26);return t?this.bb.readInt32(this.bb.__vector(this.bb_pos+t)+4*e):0;}},{key:\"inputArgCountsLength\",value:function inputArgCountsLength(){var e=this.bb.__offset(this.bb_pos,26);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"inputArgCountsArray\",value:function inputArgCountsArray(){var e=this.bb.__offset(this.bb_pos,26);return e?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+e),this.bb.__vector_len(this.bb_pos+e)):null;}},{key:\"implicitInputs\",value:function implicitInputs(e,t){var _n77=this.bb.__offset(this.bb_pos,28);return _n77?this.bb.__string(this.bb.__vector(this.bb_pos+_n77)+4*e,t):null;}},{key:\"implicitInputsLength\",value:function implicitInputsLength(){var e=this.bb.__offset(this.bb_pos,28);return e?this.bb.__vector_len(this.bb_pos+e):0;}}],[{key:\"getRootAsNode\",value:function getRootAsNode(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsNode\",value:function getSizePrefixedRootAsNode(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startNode\",value:function startNode(e){e.startObject(13);}},{key:\"addName\",value:function addName(e,t){e.addFieldOffset(0,t,0);}},{key:\"addDocString\",value:function addDocString(e,t){e.addFieldOffset(1,t,0);}},{key:\"addDomain\",value:function addDomain(e,t){e.addFieldOffset(2,t,0);}},{key:\"addSinceVersion\",value:function addSinceVersion(e,t){e.addFieldInt32(3,t,0);}},{key:\"addIndex\",value:function addIndex(e,t){e.addFieldInt32(4,t,0);}},{key:\"addOpType\",value:function addOpType(e,t){e.addFieldOffset(5,t,0);}},{key:\"addType\",value:function addType(t,_n78){t.addFieldInt32(6,_n78,e.experimental.fbs.NodeType.Primitive);}},{key:\"addExecutionProviderType\",value:function addExecutionProviderType(e,t){e.addFieldOffset(7,t,0);}},{key:\"addInputs\",value:function addInputs(e,t){e.addFieldOffset(8,t,0);}},{key:\"createInputsVector\",value:function createInputsVector(e,t){e.startVector(4,t.length,4);for(var _n84=t.length-1;_n84>=0;_n84--)e.addOffset(t[_n84]);return e.endVector();}},{key:\"startInputsVector\",value:function startInputsVector(e,t){e.startVector(4,t,4);}},{key:\"addOutputs\",value:function addOutputs(e,t){e.addFieldOffset(9,t,0);}},{key:\"createOutputsVector\",value:function createOutputsVector(e,t){e.startVector(4,t.length,4);for(var _n85=t.length-1;_n85>=0;_n85--)e.addOffset(t[_n85]);return e.endVector();}},{key:\"startOutputsVector\",value:function startOutputsVector(e,t){e.startVector(4,t,4);}},{key:\"addAttributes\",value:function addAttributes(e,t){e.addFieldOffset(10,t,0);}},{key:\"createAttributesVector\",value:function createAttributesVector(e,t){e.startVector(4,t.length,4);for(var _n86=t.length-1;_n86>=0;_n86--)e.addOffset(t[_n86]);return e.endVector();}},{key:\"startAttributesVector\",value:function startAttributesVector(e,t){e.startVector(4,t,4);}},{key:\"addInputArgCounts\",value:function addInputArgCounts(e,t){e.addFieldOffset(11,t,0);}},{key:\"createInputArgCountsVector\",value:function createInputArgCountsVector(e,t){e.startVector(4,t.length,4);for(var _n87=t.length-1;_n87>=0;_n87--)e.addInt32(t[_n87]);return e.endVector();}},{key:\"startInputArgCountsVector\",value:function startInputArgCountsVector(e,t){e.startVector(4,t,4);}},{key:\"addImplicitInputs\",value:function addImplicitInputs(e,t){e.addFieldOffset(12,t,0);}},{key:\"createImplicitInputsVector\",value:function createImplicitInputsVector(e,t){e.startVector(4,t.length,4);for(var _n88=t.length-1;_n88>=0;_n88--)e.addOffset(t[_n88]);return e.endVector();}},{key:\"startImplicitInputsVector\",value:function startImplicitInputsVector(e,t){e.startVector(4,t,4);}},{key:\"endNode\",value:function endNode(e){return e.endObject();}},{key:\"createNode\",value:function createNode(e,t,r,o,i,a,s,u,l,c,p,d,f,h){return n.startNode(e),n.addName(e,t),n.addDocString(e,r),n.addDomain(e,o),n.addSinceVersion(e,i),n.addIndex(e,a),n.addOpType(e,s),n.addType(e,u),n.addExecutionProviderType(e,l),n.addInputs(e,c),n.addOutputs(e,p),n.addAttributes(e,d),n.addInputArgCounts(e,f),n.addImplicitInputs(e,h),n.endNode(e);}}]);return n;}();t.Node=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"name\",value:function name(e){var t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"docString\",value:function docString(e){var t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"type\",value:function type(t){var _n89=this.bb.__offset(this.bb_pos,8);return _n89?(t||new e.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos+_n89),this.bb):null;}}],[{key:\"getRootAsValueInfo\",value:function getRootAsValueInfo(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsValueInfo\",value:function getSizePrefixedRootAsValueInfo(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startValueInfo\",value:function startValueInfo(e){e.startObject(3);}},{key:\"addName\",value:function addName(e,t){e.addFieldOffset(0,t,0);}},{key:\"addDocString\",value:function addDocString(e,t){e.addFieldOffset(1,t,0);}},{key:\"addType\",value:function addType(e,t){e.addFieldOffset(2,t,0);}},{key:\"endValueInfo\",value:function endValueInfo(e){return e.endObject();}},{key:\"createValueInfo\",value:function createValueInfo(e,t,r,o){return n.startValueInfo(e),n.addName(e,t),n.addDocString(e,r),n.addType(e,o),n.endValueInfo(e);}}]);return n;}();t.ValueInfo=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"denotation\",value:function denotation(e){var t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"valueType\",value:function valueType(){var t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readUint8(this.bb_pos+t):e.experimental.fbs.TypeInfoValue.NONE;}},{key:\"value\",value:function value(e){var t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__union(e,this.bb_pos+t):null;}}],[{key:\"getRootAsTypeInfo\",value:function getRootAsTypeInfo(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsTypeInfo\",value:function getSizePrefixedRootAsTypeInfo(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startTypeInfo\",value:function startTypeInfo(e){e.startObject(3);}},{key:\"addDenotation\",value:function addDenotation(e,t){e.addFieldOffset(0,t,0);}},{key:\"addValueType\",value:function addValueType(t,_n90){t.addFieldInt8(1,_n90,e.experimental.fbs.TypeInfoValue.NONE);}},{key:\"addValue\",value:function addValue(e,t){e.addFieldOffset(2,t,0);}},{key:\"endTypeInfo\",value:function endTypeInfo(e){return e.endObject();}},{key:\"createTypeInfo\",value:function createTypeInfo(e,t,r,o){return n.startTypeInfo(e),n.addDenotation(e,t),n.addValueType(e,r),n.addValue(e,o),n.endTypeInfo(e);}}]);return n;}();t.TypeInfo=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(e){!function(e){var t=/*#__PURE__*/function(){function t(){_classCallCheck(this,t);this.bb=null,this.bb_pos=0;}_createClass(t,[{key:\"__init\",value:function __init(e,_t69){return this.bb_pos=e,this.bb=_t69,this;}},{key:\"domain\",value:function domain(e){var _t70=this.bb.__offset(this.bb_pos,4);return _t70?this.bb.__string(this.bb_pos+_t70,e):null;}},{key:\"version\",value:function version(){var e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readInt64(this.bb_pos+e):this.bb.createLong(0,0);}}],[{key:\"getRootAsOperatorSetId\",value:function getRootAsOperatorSetId(e,n){return(n||new t()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsOperatorSetId\",value:function getSizePrefixedRootAsOperatorSetId(e,n){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(n||new t()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startOperatorSetId\",value:function startOperatorSetId(e){e.startObject(2);}},{key:\"addDomain\",value:function addDomain(e,_t71){e.addFieldOffset(0,_t71,0);}},{key:\"addVersion\",value:function addVersion(e,_t72){e.addFieldInt64(1,_t72,e.createLong(0,0));}},{key:\"endOperatorSetId\",value:function endOperatorSetId(e){return e.endObject();}},{key:\"createOperatorSetId\",value:function createOperatorSetId(e,n,r){return t.startOperatorSetId(e),t.addDomain(e,n),t.addVersion(e,r),t.endOperatorSetId(e);}}]);return t;}();e.OperatorSetId=t;}(e.fbs||(e.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"name\",value:function name(e){var t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"docString\",value:function docString(e){var t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"dims\",value:function dims(e){var t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readInt64(this.bb.__vector(this.bb_pos+t)+8*e):this.bb.createLong(0,0);}},{key:\"dimsLength\",value:function dimsLength(){var e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"dataType\",value:function dataType(){var t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt32(this.bb_pos+t):e.experimental.fbs.TensorDataType.UNDEFINED;}},{key:\"rawData\",value:function rawData(e){var t=this.bb.__offset(this.bb_pos,12);return t?this.bb.readUint8(this.bb.__vector(this.bb_pos+t)+e):0;}},{key:\"rawDataLength\",value:function rawDataLength(){var e=this.bb.__offset(this.bb_pos,12);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"rawDataArray\",value:function rawDataArray(){var e=this.bb.__offset(this.bb_pos,12);return e?new Uint8Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+e),this.bb.__vector_len(this.bb_pos+e)):null;}},{key:\"stringData\",value:function stringData(e,t){var _n91=this.bb.__offset(this.bb_pos,14);return _n91?this.bb.__string(this.bb.__vector(this.bb_pos+_n91)+4*e,t):null;}},{key:\"stringDataLength\",value:function stringDataLength(){var e=this.bb.__offset(this.bb_pos,14);return e?this.bb.__vector_len(this.bb_pos+e):0;}}],[{key:\"getRootAsTensor\",value:function getRootAsTensor(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsTensor\",value:function getSizePrefixedRootAsTensor(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startTensor\",value:function startTensor(e){e.startObject(6);}},{key:\"addName\",value:function addName(e,t){e.addFieldOffset(0,t,0);}},{key:\"addDocString\",value:function addDocString(e,t){e.addFieldOffset(1,t,0);}},{key:\"addDims\",value:function addDims(e,t){e.addFieldOffset(2,t,0);}},{key:\"createDimsVector\",value:function createDimsVector(e,t){e.startVector(8,t.length,8);for(var _n96=t.length-1;_n96>=0;_n96--)e.addInt64(t[_n96]);return e.endVector();}},{key:\"startDimsVector\",value:function startDimsVector(e,t){e.startVector(8,t,8);}},{key:\"addDataType\",value:function addDataType(t,_n93){t.addFieldInt32(3,_n93,e.experimental.fbs.TensorDataType.UNDEFINED);}},{key:\"addRawData\",value:function addRawData(e,t){e.addFieldOffset(4,t,0);}},{key:\"createRawDataVector\",value:function createRawDataVector(e,t){e.startVector(1,t.length,1);for(var _n97=t.length-1;_n97>=0;_n97--)e.addInt8(t[_n97]);return e.endVector();}},{key:\"startRawDataVector\",value:function startRawDataVector(e,t){e.startVector(1,t,1);}},{key:\"addStringData\",value:function addStringData(e,t){e.addFieldOffset(5,t,0);}},{key:\"createStringDataVector\",value:function createStringDataVector(e,t){e.startVector(4,t.length,4);for(var _n98=t.length-1;_n98>=0;_n98--)e.addOffset(t[_n98]);return e.endVector();}},{key:\"startStringDataVector\",value:function startStringDataVector(e,t){e.startVector(4,t,4);}},{key:\"endTensor\",value:function endTensor(e){return e.endObject();}},{key:\"createTensor\",value:function createTensor(e,t,r,o,i,a,s){return n.startTensor(e),n.addName(e,t),n.addDocString(e,r),n.addDims(e,o),n.addDataType(e,i),n.addRawData(e,a),n.addStringData(e,s),n.endTensor(e);}}]);return n;}();t.Tensor=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"values\",value:function values(t){var _n99=this.bb.__offset(this.bb_pos,4);return _n99?(t||new e.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos+_n99),this.bb):null;}},{key:\"indices\",value:function indices(t){var _n100=this.bb.__offset(this.bb_pos,6);return _n100?(t||new e.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos+_n100),this.bb):null;}},{key:\"dims\",value:function dims(e){var t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readInt64(this.bb.__vector(this.bb_pos+t)+8*e):this.bb.createLong(0,0);}},{key:\"dimsLength\",value:function dimsLength(){var e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__vector_len(this.bb_pos+e):0;}}],[{key:\"getRootAsSparseTensor\",value:function getRootAsSparseTensor(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsSparseTensor\",value:function getSizePrefixedRootAsSparseTensor(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startSparseTensor\",value:function startSparseTensor(e){e.startObject(3);}},{key:\"addValues\",value:function addValues(e,t){e.addFieldOffset(0,t,0);}},{key:\"addIndices\",value:function addIndices(e,t){e.addFieldOffset(1,t,0);}},{key:\"addDims\",value:function addDims(e,t){e.addFieldOffset(2,t,0);}},{key:\"createDimsVector\",value:function createDimsVector(e,t){e.startVector(8,t.length,8);for(var _n102=t.length-1;_n102>=0;_n102--)e.addInt64(t[_n102]);return e.endVector();}},{key:\"startDimsVector\",value:function startDimsVector(e,t){e.startVector(8,t,8);}},{key:\"endSparseTensor\",value:function endSparseTensor(e){return e.endObject();}},{key:\"createSparseTensor\",value:function createSparseTensor(e,t,r,o){return n.startSparseTensor(e),n.addValues(e,t),n.addIndices(e,r),n.addDims(e,o),n.endSparseTensor(e);}}]);return n;}();t.SparseTensor=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"name\",value:function name(e){var t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"docString\",value:function docString(e){var t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"type\",value:function type(){var t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readInt32(this.bb_pos+t):e.experimental.fbs.AttributeType.UNDEFINED;}},{key:\"f\",value:function f(){var e=this.bb.__offset(this.bb_pos,10);return e?this.bb.readFloat32(this.bb_pos+e):0;}},{key:\"i\",value:function i(){var e=this.bb.__offset(this.bb_pos,12);return e?this.bb.readInt64(this.bb_pos+e):this.bb.createLong(0,0);}},{key:\"s\",value:function s(e){var t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"t\",value:function t(_t73){var _n103=this.bb.__offset(this.bb_pos,16);return _n103?(_t73||new e.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos+_n103),this.bb):null;}},{key:\"g\",value:function g(t){var _n104=this.bb.__offset(this.bb_pos,18);return _n104?(t||new e.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb_pos+_n104),this.bb):null;}},{key:\"floats\",value:function floats(e){var t=this.bb.__offset(this.bb_pos,20);return t?this.bb.readFloat32(this.bb.__vector(this.bb_pos+t)+4*e):0;}},{key:\"floatsLength\",value:function floatsLength(){var e=this.bb.__offset(this.bb_pos,20);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"floatsArray\",value:function floatsArray(){var e=this.bb.__offset(this.bb_pos,20);return e?new Float32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+e),this.bb.__vector_len(this.bb_pos+e)):null;}},{key:\"ints\",value:function ints(e){var t=this.bb.__offset(this.bb_pos,22);return t?this.bb.readInt64(this.bb.__vector(this.bb_pos+t)+8*e):this.bb.createLong(0,0);}},{key:\"intsLength\",value:function intsLength(){var e=this.bb.__offset(this.bb_pos,22);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"strings\",value:function strings(e,t){var _n105=this.bb.__offset(this.bb_pos,24);return _n105?this.bb.__string(this.bb.__vector(this.bb_pos+_n105)+4*e,t):null;}},{key:\"stringsLength\",value:function stringsLength(){var e=this.bb.__offset(this.bb_pos,24);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"tensors\",value:function tensors(t,_n106){var r=this.bb.__offset(this.bb_pos,26);return r?(_n106||new e.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*t),this.bb):null;}},{key:\"tensorsLength\",value:function tensorsLength(){var e=this.bb.__offset(this.bb_pos,26);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"graphs\",value:function graphs(t,_n107){var r=this.bb.__offset(this.bb_pos,28);return r?(_n107||new e.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*t),this.bb):null;}},{key:\"graphsLength\",value:function graphsLength(){var e=this.bb.__offset(this.bb_pos,28);return e?this.bb.__vector_len(this.bb_pos+e):0;}}],[{key:\"getRootAsAttribute\",value:function getRootAsAttribute(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsAttribute\",value:function getSizePrefixedRootAsAttribute(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startAttribute\",value:function startAttribute(e){e.startObject(13);}},{key:\"addName\",value:function addName(e,t){e.addFieldOffset(0,t,0);}},{key:\"addDocString\",value:function addDocString(e,t){e.addFieldOffset(1,t,0);}},{key:\"addType\",value:function addType(t,_n108){t.addFieldInt32(2,_n108,e.experimental.fbs.AttributeType.UNDEFINED);}},{key:\"addF\",value:function addF(e,t){e.addFieldFloat32(3,t,0);}},{key:\"addI\",value:function addI(e,t){e.addFieldInt64(4,t,e.createLong(0,0));}},{key:\"addS\",value:function addS(e,t){e.addFieldOffset(5,t,0);}},{key:\"addT\",value:function addT(e,t){e.addFieldOffset(6,t,0);}},{key:\"addG\",value:function addG(e,t){e.addFieldOffset(7,t,0);}},{key:\"addFloats\",value:function addFloats(e,t){e.addFieldOffset(8,t,0);}},{key:\"createFloatsVector\",value:function createFloatsVector(e,t){e.startVector(4,t.length,4);for(var _n114=t.length-1;_n114>=0;_n114--)e.addFloat32(t[_n114]);return e.endVector();}},{key:\"startFloatsVector\",value:function startFloatsVector(e,t){e.startVector(4,t,4);}},{key:\"addInts\",value:function addInts(e,t){e.addFieldOffset(9,t,0);}},{key:\"createIntsVector\",value:function createIntsVector(e,t){e.startVector(8,t.length,8);for(var _n115=t.length-1;_n115>=0;_n115--)e.addInt64(t[_n115]);return e.endVector();}},{key:\"startIntsVector\",value:function startIntsVector(e,t){e.startVector(8,t,8);}},{key:\"addStrings\",value:function addStrings(e,t){e.addFieldOffset(10,t,0);}},{key:\"createStringsVector\",value:function createStringsVector(e,t){e.startVector(4,t.length,4);for(var _n116=t.length-1;_n116>=0;_n116--)e.addOffset(t[_n116]);return e.endVector();}},{key:\"startStringsVector\",value:function startStringsVector(e,t){e.startVector(4,t,4);}},{key:\"addTensors\",value:function addTensors(e,t){e.addFieldOffset(11,t,0);}},{key:\"createTensorsVector\",value:function createTensorsVector(e,t){e.startVector(4,t.length,4);for(var _n117=t.length-1;_n117>=0;_n117--)e.addOffset(t[_n117]);return e.endVector();}},{key:\"startTensorsVector\",value:function startTensorsVector(e,t){e.startVector(4,t,4);}},{key:\"addGraphs\",value:function addGraphs(e,t){e.addFieldOffset(12,t,0);}},{key:\"createGraphsVector\",value:function createGraphsVector(e,t){e.startVector(4,t.length,4);for(var _n118=t.length-1;_n118>=0;_n118--)e.addOffset(t[_n118]);return e.endVector();}},{key:\"startGraphsVector\",value:function startGraphsVector(e,t){e.startVector(4,t,4);}},{key:\"endAttribute\",value:function endAttribute(e){return e.endObject();}},{key:\"createAttribute\",value:function createAttribute(e,t,r,o,i,a,s,u,l,c,p,d,f,h){return n.startAttribute(e),n.addName(e,t),n.addDocString(e,r),n.addType(e,o),n.addF(e,i),n.addI(e,a),n.addS(e,s),n.addT(e,u),n.addG(e,l),n.addFloats(e,c),n.addInts(e,p),n.addStrings(e,d),n.addTensors(e,f),n.addGraphs(e,h),n.endAttribute(e);}}]);return n;}();t.Attribute=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"initializers\",value:function initializers(t,_n119){var r=this.bb.__offset(this.bb_pos,4);return r?(_n119||new e.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*t),this.bb):null;}},{key:\"initializersLength\",value:function initializersLength(){var e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"nodeArgs\",value:function nodeArgs(t,_n120){var r=this.bb.__offset(this.bb_pos,6);return r?(_n120||new e.experimental.fbs.ValueInfo()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*t),this.bb):null;}},{key:\"nodeArgsLength\",value:function nodeArgsLength(){var e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"nodes\",value:function nodes(t,_n121){var r=this.bb.__offset(this.bb_pos,8);return r?(_n121||new e.experimental.fbs.Node()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*t),this.bb):null;}},{key:\"nodesLength\",value:function nodesLength(){var e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"maxNodeIndex\",value:function maxNodeIndex(){var e=this.bb.__offset(this.bb_pos,10);return e?this.bb.readUint32(this.bb_pos+e):0;}},{key:\"nodeEdges\",value:function nodeEdges(t,_n122){var r=this.bb.__offset(this.bb_pos,12);return r?(_n122||new e.experimental.fbs.NodeEdge()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*t),this.bb):null;}},{key:\"nodeEdgesLength\",value:function nodeEdgesLength(){var e=this.bb.__offset(this.bb_pos,12);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"inputs\",value:function inputs(e,t){var _n123=this.bb.__offset(this.bb_pos,14);return _n123?this.bb.__string(this.bb.__vector(this.bb_pos+_n123)+4*e,t):null;}},{key:\"inputsLength\",value:function inputsLength(){var e=this.bb.__offset(this.bb_pos,14);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"outputs\",value:function outputs(e,t){var _n124=this.bb.__offset(this.bb_pos,16);return _n124?this.bb.__string(this.bb.__vector(this.bb_pos+_n124)+4*e,t):null;}},{key:\"outputsLength\",value:function outputsLength(){var e=this.bb.__offset(this.bb_pos,16);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"sparseInitializers\",value:function sparseInitializers(t,_n125){var r=this.bb.__offset(this.bb_pos,18);return r?(_n125||new e.experimental.fbs.SparseTensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*t),this.bb):null;}},{key:\"sparseInitializersLength\",value:function sparseInitializersLength(){var e=this.bb.__offset(this.bb_pos,18);return e?this.bb.__vector_len(this.bb_pos+e):0;}}],[{key:\"getRootAsGraph\",value:function getRootAsGraph(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsGraph\",value:function getSizePrefixedRootAsGraph(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startGraph\",value:function startGraph(e){e.startObject(8);}},{key:\"addInitializers\",value:function addInitializers(e,t){e.addFieldOffset(0,t,0);}},{key:\"createInitializersVector\",value:function createInitializersVector(e,t){e.startVector(4,t.length,4);for(var _n133=t.length-1;_n133>=0;_n133--)e.addOffset(t[_n133]);return e.endVector();}},{key:\"startInitializersVector\",value:function startInitializersVector(e,t){e.startVector(4,t,4);}},{key:\"addNodeArgs\",value:function addNodeArgs(e,t){e.addFieldOffset(1,t,0);}},{key:\"createNodeArgsVector\",value:function createNodeArgsVector(e,t){e.startVector(4,t.length,4);for(var _n134=t.length-1;_n134>=0;_n134--)e.addOffset(t[_n134]);return e.endVector();}},{key:\"startNodeArgsVector\",value:function startNodeArgsVector(e,t){e.startVector(4,t,4);}},{key:\"addNodes\",value:function addNodes(e,t){e.addFieldOffset(2,t,0);}},{key:\"createNodesVector\",value:function createNodesVector(e,t){e.startVector(4,t.length,4);for(var _n135=t.length-1;_n135>=0;_n135--)e.addOffset(t[_n135]);return e.endVector();}},{key:\"startNodesVector\",value:function startNodesVector(e,t){e.startVector(4,t,4);}},{key:\"addMaxNodeIndex\",value:function addMaxNodeIndex(e,t){e.addFieldInt32(3,t,0);}},{key:\"addNodeEdges\",value:function addNodeEdges(e,t){e.addFieldOffset(4,t,0);}},{key:\"createNodeEdgesVector\",value:function createNodeEdgesVector(e,t){e.startVector(4,t.length,4);for(var _n136=t.length-1;_n136>=0;_n136--)e.addOffset(t[_n136]);return e.endVector();}},{key:\"startNodeEdgesVector\",value:function startNodeEdgesVector(e,t){e.startVector(4,t,4);}},{key:\"addInputs\",value:function addInputs(e,t){e.addFieldOffset(5,t,0);}},{key:\"createInputsVector\",value:function createInputsVector(e,t){e.startVector(4,t.length,4);for(var _n137=t.length-1;_n137>=0;_n137--)e.addOffset(t[_n137]);return e.endVector();}},{key:\"startInputsVector\",value:function startInputsVector(e,t){e.startVector(4,t,4);}},{key:\"addOutputs\",value:function addOutputs(e,t){e.addFieldOffset(6,t,0);}},{key:\"createOutputsVector\",value:function createOutputsVector(e,t){e.startVector(4,t.length,4);for(var _n138=t.length-1;_n138>=0;_n138--)e.addOffset(t[_n138]);return e.endVector();}},{key:\"startOutputsVector\",value:function startOutputsVector(e,t){e.startVector(4,t,4);}},{key:\"addSparseInitializers\",value:function addSparseInitializers(e,t){e.addFieldOffset(7,t,0);}},{key:\"createSparseInitializersVector\",value:function createSparseInitializersVector(e,t){e.startVector(4,t.length,4);for(var _n139=t.length-1;_n139>=0;_n139--)e.addOffset(t[_n139]);return e.endVector();}},{key:\"startSparseInitializersVector\",value:function startSparseInitializersVector(e,t){e.startVector(4,t,4);}},{key:\"endGraph\",value:function endGraph(e){return e.endObject();}},{key:\"createGraph\",value:function createGraph(e,t,r,o,i,a,s,u,l){return n.startGraph(e),n.addInitializers(e,t),n.addNodeArgs(e,r),n.addNodes(e,o),n.addMaxNodeIndex(e,i),n.addNodeEdges(e,a),n.addInputs(e,s),n.addOutputs(e,u),n.addSparseInitializers(e,l),n.endGraph(e);}}]);return n;}();t.Graph=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"irVersion\",value:function irVersion(){var e=this.bb.__offset(this.bb_pos,4);return e?this.bb.readInt64(this.bb_pos+e):this.bb.createLong(0,0);}},{key:\"opsetImport\",value:function opsetImport(t,_n140){var r=this.bb.__offset(this.bb_pos,6);return r?(_n140||new e.experimental.fbs.OperatorSetId()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*t),this.bb):null;}},{key:\"opsetImportLength\",value:function opsetImportLength(){var e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"producerName\",value:function producerName(e){var t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"producerVersion\",value:function producerVersion(e){var t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"domain\",value:function domain(e){var t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"modelVersion\",value:function modelVersion(){var e=this.bb.__offset(this.bb_pos,14);return e?this.bb.readInt64(this.bb_pos+e):this.bb.createLong(0,0);}},{key:\"docString\",value:function docString(e){var t=this.bb.__offset(this.bb_pos,16);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"graph\",value:function graph(t){var _n141=this.bb.__offset(this.bb_pos,18);return _n141?(t||new e.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb_pos+_n141),this.bb):null;}},{key:\"graphDocString\",value:function graphDocString(e){var t=this.bb.__offset(this.bb_pos,20);return t?this.bb.__string(this.bb_pos+t,e):null;}}],[{key:\"getRootAsModel\",value:function getRootAsModel(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsModel\",value:function getSizePrefixedRootAsModel(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startModel\",value:function startModel(e){e.startObject(9);}},{key:\"addIrVersion\",value:function addIrVersion(e,t){e.addFieldInt64(0,t,e.createLong(0,0));}},{key:\"addOpsetImport\",value:function addOpsetImport(e,t){e.addFieldOffset(1,t,0);}},{key:\"createOpsetImportVector\",value:function createOpsetImportVector(e,t){e.startVector(4,t.length,4);for(var _n143=t.length-1;_n143>=0;_n143--)e.addOffset(t[_n143]);return e.endVector();}},{key:\"startOpsetImportVector\",value:function startOpsetImportVector(e,t){e.startVector(4,t,4);}},{key:\"addProducerName\",value:function addProducerName(e,t){e.addFieldOffset(2,t,0);}},{key:\"addProducerVersion\",value:function addProducerVersion(e,t){e.addFieldOffset(3,t,0);}},{key:\"addDomain\",value:function addDomain(e,t){e.addFieldOffset(4,t,0);}},{key:\"addModelVersion\",value:function addModelVersion(e,t){e.addFieldInt64(5,t,e.createLong(0,0));}},{key:\"addDocString\",value:function addDocString(e,t){e.addFieldOffset(6,t,0);}},{key:\"addGraph\",value:function addGraph(e,t){e.addFieldOffset(7,t,0);}},{key:\"addGraphDocString\",value:function addGraphDocString(e,t){e.addFieldOffset(8,t,0);}},{key:\"endModel\",value:function endModel(e){return e.endObject();}},{key:\"createModel\",value:function createModel(e,t,r,o,i,a,s,u,l,c){return n.startModel(e),n.addIrVersion(e,t),n.addOpsetImport(e,r),n.addProducerName(e,o),n.addProducerVersion(e,i),n.addDomain(e,a),n.addModelVersion(e,s),n.addDocString(e,u),n.addGraph(e,l),n.addGraphDocString(e,c),n.endModel(e);}}]);return n;}();t.Model=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(e){!function(e){var t=/*#__PURE__*/function(){function t(){_classCallCheck(this,t);this.bb=null,this.bb_pos=0;}_createClass(t,[{key:\"__init\",value:function __init(e,_t74){return this.bb_pos=e,this.bb=_t74,this;}},{key:\"nodeIndices\",value:function nodeIndices(e){var _t75=this.bb.__offset(this.bb_pos,4);return _t75?this.bb.readUint32(this.bb.__vector(this.bb_pos+_t75)+4*e):0;}},{key:\"nodeIndicesLength\",value:function nodeIndicesLength(){var e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__vector_len(this.bb_pos+e):0;}},{key:\"nodeIndicesArray\",value:function nodeIndicesArray(){var e=this.bb.__offset(this.bb_pos,4);return e?new Uint32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+e),this.bb.__vector_len(this.bb_pos+e)):null;}},{key:\"kernelDefHashes\",value:function kernelDefHashes(e){var _t76=this.bb.__offset(this.bb_pos,6);return _t76?this.bb.readUint64(this.bb.__vector(this.bb_pos+_t76)+8*e):this.bb.createLong(0,0);}},{key:\"kernelDefHashesLength\",value:function kernelDefHashesLength(){var e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__vector_len(this.bb_pos+e):0;}}],[{key:\"getRootAsKernelCreateInfos\",value:function getRootAsKernelCreateInfos(e,n){return(n||new t()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsKernelCreateInfos\",value:function getSizePrefixedRootAsKernelCreateInfos(e,n){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(n||new t()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startKernelCreateInfos\",value:function startKernelCreateInfos(e){e.startObject(2);}},{key:\"addNodeIndices\",value:function addNodeIndices(e,_t77){e.addFieldOffset(0,_t77,0);}},{key:\"createNodeIndicesVector\",value:function createNodeIndicesVector(e,_t78){e.startVector(4,_t78.length,4);for(var _n144=_t78.length-1;_n144>=0;_n144--)e.addInt32(_t78[_n144]);return e.endVector();}},{key:\"startNodeIndicesVector\",value:function startNodeIndicesVector(e,_t79){e.startVector(4,_t79,4);}},{key:\"addKernelDefHashes\",value:function addKernelDefHashes(e,_t80){e.addFieldOffset(1,_t80,0);}},{key:\"createKernelDefHashesVector\",value:function createKernelDefHashesVector(e,_t81){e.startVector(8,_t81.length,8);for(var _n145=_t81.length-1;_n145>=0;_n145--)e.addInt64(_t81[_n145]);return e.endVector();}},{key:\"startKernelDefHashesVector\",value:function startKernelDefHashesVector(e,_t82){e.startVector(8,_t82,8);}},{key:\"endKernelCreateInfos\",value:function endKernelCreateInfos(e){return e.endObject();}},{key:\"createKernelCreateInfos\",value:function createKernelCreateInfos(e,n,r){return t.startKernelCreateInfos(e),t.addNodeIndices(e,n),t.addKernelDefHashes(e,r),t.endKernelCreateInfos(e);}}]);return t;}();e.KernelCreateInfos=t;}(e.fbs||(e.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"graphId\",value:function graphId(e){var t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"sessionState\",value:function sessionState(t){var _n146=this.bb.__offset(this.bb_pos,6);return _n146?(t||new e.experimental.fbs.SessionState()).__init(this.bb.__indirect(this.bb_pos+_n146),this.bb):null;}}],[{key:\"getRootAsSubGraphSessionState\",value:function getRootAsSubGraphSessionState(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsSubGraphSessionState\",value:function getSizePrefixedRootAsSubGraphSessionState(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startSubGraphSessionState\",value:function startSubGraphSessionState(e){e.startObject(2);}},{key:\"addGraphId\",value:function addGraphId(e,t){e.addFieldOffset(0,t,0);}},{key:\"addSessionState\",value:function addSessionState(e,t){e.addFieldOffset(1,t,0);}},{key:\"endSubGraphSessionState\",value:function endSubGraphSessionState(e){var t=e.endObject();return e.requiredField(t,4),t;}},{key:\"createSubGraphSessionState\",value:function createSubGraphSessionState(e,t,r){return n.startSubGraphSessionState(e),n.addGraphId(e,t),n.addSessionState(e,r),n.endSubGraphSessionState(e);}}]);return n;}();t.SubGraphSessionState=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"kernels\",value:function kernels(t){var _n147=this.bb.__offset(this.bb_pos,4);return _n147?(t||new e.experimental.fbs.KernelCreateInfos()).__init(this.bb.__indirect(this.bb_pos+_n147),this.bb):null;}},{key:\"subGraphSessionStates\",value:function subGraphSessionStates(t,_n148){var r=this.bb.__offset(this.bb_pos,6);return r?(_n148||new e.experimental.fbs.SubGraphSessionState()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+4*t),this.bb):null;}},{key:\"subGraphSessionStatesLength\",value:function subGraphSessionStatesLength(){var e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__vector_len(this.bb_pos+e):0;}}],[{key:\"getRootAsSessionState\",value:function getRootAsSessionState(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsSessionState\",value:function getSizePrefixedRootAsSessionState(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"startSessionState\",value:function startSessionState(e){e.startObject(2);}},{key:\"addKernels\",value:function addKernels(e,t){e.addFieldOffset(0,t,0);}},{key:\"addSubGraphSessionStates\",value:function addSubGraphSessionStates(e,t){e.addFieldOffset(1,t,0);}},{key:\"createSubGraphSessionStatesVector\",value:function createSubGraphSessionStatesVector(e,t){e.startVector(4,t.length,4);for(var _n150=t.length-1;_n150>=0;_n150--)e.addOffset(t[_n150]);return e.endVector();}},{key:\"startSubGraphSessionStatesVector\",value:function startSubGraphSessionStatesVector(e,t){e.startVector(4,t,4);}},{key:\"endSessionState\",value:function endSessionState(e){return e.endObject();}},{key:\"createSessionState\",value:function createSessionState(e,t,r){return n.startSessionState(e),n.addKernels(e,t),n.addSubGraphSessionStates(e,r),n.endSessionState(e);}}]);return n;}();t.SessionState=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={})),function(e){!function(t){!function(t){var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);this.bb=null,this.bb_pos=0;}_createClass(n,[{key:\"__init\",value:function __init(e,t){return this.bb_pos=e,this.bb=t,this;}},{key:\"ortVersion\",value:function ortVersion(e){var t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__string(this.bb_pos+t,e):null;}},{key:\"model\",value:function model(t){var _n151=this.bb.__offset(this.bb_pos,6);return _n151?(t||new e.experimental.fbs.Model()).__init(this.bb.__indirect(this.bb_pos+_n151),this.bb):null;}},{key:\"sessionState\",value:function sessionState(t){var _n152=this.bb.__offset(this.bb_pos,8);return _n152?(t||new e.experimental.fbs.SessionState()).__init(this.bb.__indirect(this.bb_pos+_n152),this.bb):null;}}],[{key:\"getRootAsInferenceSession\",value:function getRootAsInferenceSession(e,t){return(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"getSizePrefixedRootAsInferenceSession\",value:function getSizePrefixedRootAsInferenceSession(e,t){return e.setPosition(e.position()+r.flatbuffers.SIZE_PREFIX_LENGTH),(t||new n()).__init(e.readInt32(e.position())+e.position(),e);}},{key:\"bufferHasIdentifier\",value:function bufferHasIdentifier(e){return e.__has_identifier(\"ORTM\");}},{key:\"startInferenceSession\",value:function startInferenceSession(e){e.startObject(3);}},{key:\"addOrtVersion\",value:function addOrtVersion(e,t){e.addFieldOffset(0,t,0);}},{key:\"addModel\",value:function addModel(e,t){e.addFieldOffset(1,t,0);}},{key:\"addSessionState\",value:function addSessionState(e,t){e.addFieldOffset(2,t,0);}},{key:\"endInferenceSession\",value:function endInferenceSession(e){return e.endObject();}},{key:\"finishInferenceSessionBuffer\",value:function finishInferenceSessionBuffer(e,t){e.finish(t,\"ORTM\");}},{key:\"finishSizePrefixedInferenceSessionBuffer\",value:function finishSizePrefixedInferenceSessionBuffer(e,t){e.finish(t,\"ORTM\",!0);}},{key:\"createInferenceSession\",value:function createInferenceSession(e,t,r,o){return n.startInferenceSession(e),n.addOrtVersion(e,t),n.addModel(e,r),n.addSessionState(e,o),n.endInferenceSession(e);}}]);return n;}();t.InferenceSession=n;}(t.fbs||(t.fbs={}));}(e.experimental||(e.experimental={}));}(t.onnxruntime||(t.onnxruntime={}));},1723:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.OnnxjsSessionHandler=void 0;var r=n(8453),o=n(9240);t.OnnxjsSessionHandler=/*#__PURE__*/function(){function _class27(e){_classCallCheck(this,_class27);this.session=e,this.inputNames=this.session.inputNames,this.outputNames=this.session.outputNames;}_createClass(_class27,[{key:\"dispose\",value:function(){var _dispose=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee46(){return _regeneratorRuntime2().wrap(function _callee46$(_context47){while(1)switch(_context47.prev=_context47.next){case 0:case\"end\":return _context47.stop();}},_callee46);}));function dispose(){return _dispose.apply(this,arguments);}return dispose;}()},{key:\"run\",value:function(){var _run2=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee47(e,t,n){var i,_t83,_n153,a,s;return _regeneratorRuntime2().wrap(function _callee47$(_context48){while(1)switch(_context48.prev=_context48.next){case 0:i=new Map();for(_t83 in e)if(Object.hasOwnProperty.call(e,_t83)){_n153=e[_t83];i.set(_t83,new o.Tensor(_n153.dims,_n153.type,void 0,void 0,_n153.data));}_context48.next=4;return this.session.run(i);case 4:a=_context48.sent;s={};return _context48.abrupt(\"return\",(a.forEach(function(e,t){s[t]=new r.Tensor(e.type,e.data,e.dims);}),s));case 7:case\"end\":return _context48.stop();}},_callee47,this);}));function run(_x46,_x47,_x48){return _run2.apply(this,arguments);}return run;}()},{key:\"startProfiling\",value:function startProfiling(){this.session.startProfiling();}},{key:\"endProfiling\",value:function endProfiling(){this.session.endProfiling();}}]);return _class27;}();},6027:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Session=void 0;var r=n(7067),o=n(1296),i=n(1975),a=n(6496),s=n(1315),u=n(1745);t.Session=/*#__PURE__*/function(){function _class28(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,_class28);this._initialized=!1,this.backendHint=e.backendHint,this.profiler=s.Profiler.create(e.profiler),this.context={profiler:this.profiler,graphInputTypes:[],graphInputDims:[]};}_createClass(_class28,[{key:\"inputNames\",get:function get(){return this._model.graph.getInputNames();}},{key:\"outputNames\",get:function get(){return this._model.graph.getOutputNames();}},{key:\"startProfiling\",value:function startProfiling(){this.profiler.start();}},{key:\"endProfiling\",value:function endProfiling(){this.profiler.stop();}},{key:\"loadModel\",value:function(){var _loadModel=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee49(e,t,n){var _this36=this;return _regeneratorRuntime2().wrap(function _callee49$(_context50){while(1)switch(_context50.prev=_context50.next){case 0:_context50.next=2;return this.profiler.event(\"session\",\"Session.loadModel\",/*#__PURE__*/_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee48(){var a,_t84,_n154,_n155,_r46,_r47;return _regeneratorRuntime2().wrap(function _callee48$(_context49){while(1)switch(_context49.prev=_context49.next){case 0:_context49.next=2;return(0,i.resolveBackend)(_this36.backendHint);case 2:a=_context49.sent;if(!(_this36.sessionHandler=a.createSessionHandler(_this36.context),_this36._model=new u.Model(),\"string\"==typeof e)){_context49.next=21;break;}_t84=e.endsWith(\".ort\");if(!(\"undefined\"==typeof fetch)){_context49.next=12;break;}_context49.next=8;return(0,o.promisify)(r.readFile)(e);case 8:_n154=_context49.sent;_this36.initialize(_n154,_t84);_context49.next=19;break;case 12:_context49.next=14;return fetch(e);case 14:_n155=_context49.sent;_context49.next=17;return _n155.arrayBuffer();case 17:_r46=_context49.sent;_this36.initialize(new Uint8Array(_r46),_t84);case 19:_context49.next=22;break;case 21:if(ArrayBuffer.isView(e))_this36.initialize(e);else{_r47=new Uint8Array(e,t||0,n||e.byteLength);_this36.initialize(_r47);}case 22:case\"end\":return _context49.stop();}},_callee48);})));case 2:case\"end\":return _context50.stop();}},_callee49,this);}));function loadModel(_x49,_x50,_x51){return _loadModel.apply(this,arguments);}return loadModel;}()},{key:\"initialize\",value:function initialize(e,t){var _this37=this;if(this._initialized)throw new Error(\"already initialized\");this.profiler.event(\"session\",\"Session.initialize\",function(){var n=_this37.sessionHandler.transformGraph?_this37.sessionHandler:void 0;_this37._model.load(e,n,t),_this37.sessionHandler.onGraphInitialized&&_this37.sessionHandler.onGraphInitialized(_this37._model.graph),_this37.initializeOps(_this37._model.graph),_this37._executionPlan=new a.ExecutionPlan(_this37._model.graph,_this37._ops,_this37.profiler);}),this._initialized=!0;}},{key:\"run\",value:function(){var _run3=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee51(e){var _this38=this;return _regeneratorRuntime2().wrap(function _callee51$(_context52){while(1)switch(_context52.prev=_context52.next){case 0:if(this._initialized){_context52.next=2;break;}throw new Error(\"session not initialized yet\");case 2:return _context52.abrupt(\"return\",this.profiler.event(\"session\",\"Session.run\",/*#__PURE__*/_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee50(){var t,n;return _regeneratorRuntime2().wrap(function _callee50$(_context51){while(1)switch(_context51.prev=_context51.next){case 0:t=_this38.normalizeAndValidateInputs(e);_context51.next=3;return _this38._executionPlan.execute(_this38.sessionHandler,t);case 3:n=_context51.sent;return _context51.abrupt(\"return\",_this38.createOutput(n));case 5:case\"end\":return _context51.stop();}},_callee50);}))));case 3:case\"end\":return _context52.stop();}},_callee51,this);}));function run(_x52){return _run3.apply(this,arguments);}return run;}()},{key:\"normalizeAndValidateInputs\",value:function normalizeAndValidateInputs(e){var t=this._model.graph.getInputNames();if(Array.isArray(e)){if(e.length!==t.length)throw new Error(\"incorrect input array length: expected \".concat(t.length,\" but got \").concat(e.length));}else{if(e.size!==t.length)throw new Error(\"incorrect input map size: expected \".concat(t.length,\" but got \").concat(e.size));var _n156=new Array(e.size);var _r48=0;for(var _o29=0;_o29<t.length;++_o29){var _i26=e.get(t[_o29]);if(!_i26)throw new Error(\"missing input tensor for: '\".concat(name,\"'\"));_n156[_r48++]=_i26;}e=_n156;}if(this.context.graphInputTypes&&0!==this.context.graphInputTypes.length&&this.context.graphInputDims&&0!==this.context.graphInputDims.length)this.validateInputTensorDims(this.context.graphInputDims,e,!1);else{var _t85=this._model.graph.getInputIndices(),_n157=this._model.graph.getValues(),_r49=new Array(_t85.length);for(var _o30=0;_o30<_t85.length;++_o30){var _i27=_n157[_t85[_o30]];_r49[_o30]=_i27.type.shape.dims,this.context.graphInputTypes.push(_i27.type.tensorType),this.context.graphInputDims.push(e[_o30].dims);}this.validateInputTensorDims(_r49,e,!0);}return this.validateInputTensorTypes(this.context.graphInputTypes,e),e;}},{key:\"validateInputTensorTypes\",value:function validateInputTensorTypes(e,t){for(var _n158=0;_n158<t.length;_n158++){var _r50=e[_n158],_o31=t[_n158].type;if(_r50!==_o31)throw new Error(\"input tensor[\".concat(_n158,\"] check failed: expected type '\").concat(_r50,\"' but got \").concat(_o31));}}},{key:\"validateInputTensorDims\",value:function validateInputTensorDims(e,t,n){for(var _r51=0;_r51<t.length;_r51++){var _o32=e[_r51],_i28=t[_r51].dims;if(!this.compareTensorDims(_o32,_i28,n))throw new Error(\"input tensor[\".concat(_r51,\"] check failed: expected shape '[\").concat(_o32.join(\",\"),\"]' but got [\").concat(_i28.join(\",\"),\"]\"));}}},{key:\"compareTensorDims\",value:function compareTensorDims(e,t,n){if(e.length!==t.length)return!1;for(var _r52=0;_r52<e.length;++_r52)if(e[_r52]!==t[_r52]&&(!n||0!==e[_r52]))return!1;return!0;}},{key:\"createOutput\",value:function createOutput(e){var t=this._model.graph.getOutputNames();if(e.length!==t.length)throw new Error(\"expected number of outputs do not match number of generated outputs\");var n=new Map();for(var _r53=0;_r53<t.length;++_r53)n.set(t[_r53],e[_r53]);return n;}},{key:\"initializeOps\",value:function initializeOps(e){var t=e.getNodes();this._ops=new Array(t.length);for(var _n159=0;_n159<t.length;_n159++)this._ops[_n159]=this.sessionHandler.resolve(t[_n159],this._model.opsets,e);}}]);return _class28;}();},9240:function _(e,t,n){\"use strict\";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{\"default\":e};};Object.defineProperty(t,\"__esModule\",{value:!0}),t.Tensor=void 0;var o=n(3442),i=r(n(3720)),a=n(1446),s=n(1287),u=n(7273);var l=s.onnxruntime.experimental.fbs;var c=/*#__PURE__*/function(){function c(e,t,n,r,i){var a=arguments.length>5&&arguments[5]!==undefined?arguments[5]:o.Guid.create();_classCallCheck(this,c);this.dims=e,this.type=t,this.dataProvider=n,this.asyncDataProvider=r,this.cache=i,this.dataId=a,this.size=u.ShapeUtil.validateDimsAndCalcSize(e);var s=this.size,l=void 0===n&&void 0===r&&void 0===i;if(void 0!==i&&i.length!==s)throw new RangeError(\"Input dims doesn't match data length.\");if(\"string\"===t){if(!(void 0===i||Array.isArray(i)&&i.every(function(e){return\"string\"==typeof e;})))throw new TypeError(\"cache should be a string array\");l&&(this.cache=new Array(s));}else{if(void 0!==i){var _e87=d(t);if(!(i instanceof _e87))throw new TypeError(\"cache should be type \".concat(_e87.name));}if(l){var _e88=new ArrayBuffer(s*function(e){switch(e){case\"bool\":case\"int8\":case\"uint8\":return 1;case\"int16\":case\"uint16\":return 2;case\"int32\":case\"uint32\":case\"float32\":return 4;case\"float64\":return 8;default:throw new Error(\"cannot calculate sizeof() on type \".concat(e));}}(t));this.cache=function(e,t){return new(d(t))(e);}(_e88,t);}}}_createClass(c,[{key:\"data\",get:function get(){if(void 0===this.cache){var _e89=this.dataProvider(this.dataId);if(_e89.length!==this.size)throw new Error(\"Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.\");this.cache=_e89;}return this.cache;}},{key:\"stringData\",get:function get(){if(\"string\"!==this.type)throw new TypeError(\"data type is not string\");return this.data;}},{key:\"integerData\",get:function get(){switch(this.type){case\"uint8\":case\"int8\":case\"uint16\":case\"int16\":case\"int32\":case\"uint32\":case\"bool\":return this.data;default:throw new TypeError(\"data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)\");}}},{key:\"floatData\",get:function get(){switch(this.type){case\"float32\":case\"float64\":return this.data;default:throw new TypeError(\"data type is not float (float32, float64)\");}}},{key:\"numberData\",get:function get(){if(\"string\"!==this.type)return this.data;throw new TypeError(\"type cannot be non-number (string)\");}},{key:\"get\",value:function get(e){return this.data[u.ShapeUtil.indicesToOffset(e,this.strides)];}},{key:\"set\",value:function set(e,t){this.data[u.ShapeUtil.indicesToOffset(e,this.strides)]=t;}},{key:\"getData\",value:function(){var _getData=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee52(){return _regeneratorRuntime2().wrap(function _callee52$(_context53){while(1)switch(_context53.prev=_context53.next){case 0:_context53.t0=void 0===this.cache;if(!_context53.t0){_context53.next=5;break;}_context53.next=4;return this.asyncDataProvider(this.dataId);case 4:this.cache=_context53.sent;case 5:return _context53.abrupt(\"return\",this.cache);case 6:case\"end\":return _context53.stop();}},_callee52,this);}));function getData(){return _getData.apply(this,arguments);}return getData;}()},{key:\"strides\",get:function get(){return this._strides||(this._strides=u.ShapeUtil.computeStrides(this.dims)),this._strides;}}],[{key:\"fromProto\",value:function fromProto(e){if(!e)throw new Error(\"cannot construct Value from an empty tensor\");var t=u.ProtoUtil.tensorDataTypeFromProto(e.dataType),n=u.ProtoUtil.tensorDimsFromProto(e.dims),r=new c(n,t);if(\"string\"===t)e.stringData.forEach(function(e,t){r.data[t]=(0,u.decodeUtf8String)(e);});else if(e.rawData&&\"number\"==typeof e.rawData.byteLength&&e.rawData.byteLength>0){var _t86=r.data,_n160=new DataView(e.rawData.buffer,e.rawData.byteOffset,e.rawData.byteLength),_o33=p(e.dataType),_i29=e.rawData.byteLength/_o33;if(e.rawData.byteLength%_o33!=0)throw new Error(\"invalid buffer length\");if(_t86.length!==_i29)throw new Error(\"buffer length mismatch\");for(var _r54=0;_r54<_i29;_r54++){var _i30=h(_n160,e.dataType,_r54*_o33);_t86[_r54]=_i30;}}else{var _t87;switch(e.dataType){case a.onnx.TensorProto.DataType.FLOAT:_t87=e.floatData;break;case a.onnx.TensorProto.DataType.INT32:case a.onnx.TensorProto.DataType.INT16:case a.onnx.TensorProto.DataType.UINT16:case a.onnx.TensorProto.DataType.INT8:case a.onnx.TensorProto.DataType.UINT8:case a.onnx.TensorProto.DataType.BOOL:_t87=e.int32Data;break;case a.onnx.TensorProto.DataType.INT64:_t87=e.int64Data;break;case a.onnx.TensorProto.DataType.DOUBLE:_t87=e.doubleData;break;case a.onnx.TensorProto.DataType.UINT32:case a.onnx.TensorProto.DataType.UINT64:_t87=e.uint64Data;break;default:throw new Error(\"unspecific error\");}if(null==_t87)throw new Error(\"failed to populate data from a tensorproto value\");var _n161=r.data;if(_n161.length!==_t87.length)throw new Error(\"array length mismatch\");for(var _r55=0;_r55<_t87.length;_r55++){var _o34=_t87[_r55];i[\"default\"].isLong(_o34)?_n161[_r55]=f(_o34,e.dataType):_n161[_r55]=_o34;}}return r;}},{key:\"fromData\",value:function fromData(e,t,n){return new c(t,n,void 0,void 0,e);}},{key:\"fromOrtTensor\",value:function fromOrtTensor(e){if(!e)throw new Error(\"cannot construct Value from an empty tensor\");var t=u.ProtoUtil.tensorDimsFromORTFormat(e),n=u.ProtoUtil.tensorDataTypeFromProto(e.dataType()),r=new c(t,n);if(\"string\"===n)for(var _t88=0;_t88<e.stringDataLength();_t88++)r.data[_t88]=e.stringData(_t88);else if(e.rawDataArray()&&\"number\"==typeof e.rawDataLength()&&e.rawDataLength()>0){var _t89=r.data,_n162=new DataView(e.rawDataArray().buffer,e.rawDataArray().byteOffset,e.rawDataLength()),_o35=p(e.dataType()),_i31=e.rawDataLength()/_o35;if(e.rawDataLength()%_o35!=0)throw new Error(\"invalid buffer length\");if(_t89.length!==_i31)throw new Error(\"buffer length mismatch\");for(var _r56=0;_r56<_i31;_r56++){var _i32=h(_n162,e.dataType(),_r56*_o35);_t89[_r56]=_i32;}}return r;}}]);return c;}();function p(e){switch(e){case a.onnx.TensorProto.DataType.UINT8:case a.onnx.TensorProto.DataType.INT8:case a.onnx.TensorProto.DataType.BOOL:return 1;case a.onnx.TensorProto.DataType.UINT16:case a.onnx.TensorProto.DataType.INT16:return 2;case a.onnx.TensorProto.DataType.FLOAT:case a.onnx.TensorProto.DataType.INT32:case a.onnx.TensorProto.DataType.UINT32:return 4;case a.onnx.TensorProto.DataType.INT64:case a.onnx.TensorProto.DataType.DOUBLE:case a.onnx.TensorProto.DataType.UINT64:return 8;default:throw new Error(\"cannot calculate sizeof() on type \".concat(a.onnx.TensorProto.DataType[e]));}}function d(e){switch(e){case\"bool\":case\"uint8\":return Uint8Array;case\"int8\":return Int8Array;case\"int16\":return Int16Array;case\"uint16\":return Uint16Array;case\"int32\":return Int32Array;case\"uint32\":return Uint32Array;case\"float32\":return Float32Array;case\"float64\":return Float64Array;default:throw new Error(\"unspecified error\");}}function f(e,t){if(t===a.onnx.TensorProto.DataType.INT64||t===l.TensorDataType.INT64){if(e.greaterThanOrEqual(2147483648)||e.lessThan(-2147483648))throw new TypeError(\"int64 is not supported\");}else{if(t!==a.onnx.TensorProto.DataType.UINT32&&t!==l.TensorDataType.UINT32&&t!==a.onnx.TensorProto.DataType.UINT64&&t!==l.TensorDataType.UINT64)throw new TypeError(\"not a LONG type: \".concat(a.onnx.TensorProto.DataType[t]));if(e.greaterThanOrEqual(4294967296)||e.lessThan(0))throw new TypeError(\"uint64 is not supported\");}return e.toNumber();}function h(e,t,n){switch(t){case a.onnx.TensorProto.DataType.BOOL:case a.onnx.TensorProto.DataType.UINT8:return e.getUint8(n);case a.onnx.TensorProto.DataType.INT8:return e.getInt8(n);case a.onnx.TensorProto.DataType.UINT16:return e.getUint16(n,!0);case a.onnx.TensorProto.DataType.INT16:return e.getInt16(n,!0);case a.onnx.TensorProto.DataType.FLOAT:return e.getFloat32(n,!0);case a.onnx.TensorProto.DataType.INT32:return e.getInt32(n,!0);case a.onnx.TensorProto.DataType.UINT32:return e.getUint32(n,!0);case a.onnx.TensorProto.DataType.INT64:return f(i[\"default\"].fromBits(e.getUint32(n,!0),e.getUint32(n+4,!0),!1),t);case a.onnx.TensorProto.DataType.DOUBLE:return e.getFloat64(n,!0);case a.onnx.TensorProto.DataType.UINT64:return f(i[\"default\"].fromBits(e.getUint32(n,!0),e.getUint32(n+4,!0),!0),t);default:throw new Error(\"cannot read from DataView for type \".concat(a.onnx.TensorProto.DataType[t]));}}t.Tensor=c;},7273:function _(e,t,n){\"use strict\";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{\"default\":e};};Object.defineProperty(t,\"__esModule\",{value:!0}),t.decodeUtf8String=t.MAX_CLIP=t.MIN_CLIP=t.PoolConvUtil=t.ReduceUtil=t.SplitUtil=t.MathUtil=t.ShapeUtil=t.LongUtil=t.ProtoUtil=t.GemmUtil=t.arrayCopyHelper=t.BroadcastUtil=t.MatMulUtil=t.ArrayUtil=t.assert=t.checkInputsShape=void 0;var o=n(5686),i=r(n(3720)),a=n(1446),s=n(9240);t.checkInputsShape=function(e){for(var _len2=arguments.length,t=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){t[_key2-1]=arguments[_key2];}if(!e||e.length!==t.length)return!1;for(var _n163=0;_n163<e.length;_n163++)if(!e[_n163].dims||e[_n163].dims.length!==t[_n163])return!1;return!0;},t.assert=function(e,t){if(!e)throw new Error(\"string\"==typeof t?t:t());},t.ArrayUtil=/*#__PURE__*/function(){function _class29(){_classCallCheck(this,_class29);}_createClass(_class29,null,[{key:\"arraysEqual\",value:function arraysEqual(e,t){if(e.length!==t.length)return!1;for(var _n164=0;_n164<e.length;_n164++)if(e[_n164]!==t[_n164])return!1;return!0;}}]);return _class29;}();var u=/*#__PURE__*/function(){function u(){_classCallCheck(this,u);}_createClass(u,null,[{key:\"preprocessInputShapes\",value:function preprocessInputShapes(e,t){return[1===e.length?[1,e[0]]:e,1===t.length?[t[0],1]:t];}},{key:\"postprocessOutputShape\",value:function postprocessOutputShape(e,t,n){1===t&&e.splice(e.length-2,1),1===n&&e.pop();}},{key:\"calcMatMulShape\",value:function calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]];}}]);return u;}();t.MatMulUtil=u;var l=/*#__PURE__*/function(){function l(){_classCallCheck(this,l);}_createClass(l,null,[{key:\"calcShape\",value:function calcShape(e,t){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:!1;var r=e.length,o=t.length;if(0===r)return t;if(0===o)return e;var i=Math.max(e.length,t.length),a=new Array(i);if(n){if(r<2||o<2)return;var _n165=u.calcMatMulShape([e[r-2],e[r-1]],[t[o-2],t[o-1]]);if(void 0===_n165)return;var _n166=_slicedToArray(_n165,2);a[i-2]=_n166[0];a[i-1]=_n166[1];}for(var _s9=n?3:1;_s9<=i;_s9++){var _n167=r-_s9<0?1:e[r-_s9],_u28=o-_s9<0?1:t[o-_s9];if(_n167!==_u28&&_n167>1&&_u28>1)return;a[i-_s9]=Math.max(_n167,_u28);}return a;}},{key:\"index\",value:function index(e,t){var n=new Array(t.length);return l.fillIndex(e,t,n),n;}},{key:\"fillIndex\",value:function fillIndex(e,t,n){var r=e.length-t.length;for(var _o36=0;_o36<t.length;_o36++)n[_o36]=e[r+_o36]%t[_o36];}},{key:\"calc\",value:function calc(e,t,n,r,o){var i=l.calcShape(e.dims,t.dims);if(i){if(r&&!d.areEqual(i,e.dims))return;var _a17=d.size(i),_u29=r?e:new s.Tensor(i,o||e.type);if(0===i.length)_u29.set([],n(e.get([]),t.get([])));else{var _r57=new Array(i.length),_o37=new Array(e.dims.length),_s10=new Array(t.dims.length);var _c10,_p9=0,_d10=0,_f6=!1,_h3=!1;0===e.dims.length&&(_p9=e.get([]),_f6=!0),0===t.dims.length&&(_d10=t.get([]),_h3=!0);for(var _g3=0;_g3<_a17;_g3++){_c10=_g3;for(var _e90=i.length-1;_e90>=0;_e90--)_r57[_e90]=_c10%i[_e90],_c10=Math.floor(_c10/i[_e90]);_f6||(l.fillIndex(_r57,e.dims,_o37),_p9=e.get(_o37)),_h3||(l.fillIndex(_r57,t.dims,_s10),_d10=t.get(_s10)),_u29.set(_r57,n(_p9,_d10));}}return _u29;}}},{key:\"isValidBroadcast\",value:function isValidBroadcast(e,t){var n=e.length,r=t.length;if(n>r)return!1;for(var _o38=1;_o38<=n;_o38++)if(1!==e[n-_o38]&&e[n-_o38]!==t[r-_o38])return!1;return!0;}},{key:\"getBroadcastDims\",value:function getBroadcastDims(e,t){var n=e.length,r=[];for(var _o39=0;_o39<n;_o39++){var _i33=n-1-_o39,_a18=e[_i33]||1;(t[t.length-1-_o39]||1)>1&&1===_a18&&r.unshift(_i33);}return r;}}]);return l;}();t.BroadcastUtil=l,t.arrayCopyHelper=function(e,t,n,r,o){if(r<0||r>=t.length)throw new Error(\"sourceIndex out of bounds\");if(n<0||n>=e.length)throw new Error(\"targetIndex out of bounds\");if(r+o>t.length)throw new Error(\"source indices to be copied are outside bounds\");if(n+o>e.length)throw new Error(\"target array is too small to hold result\");for(var _i34=0;_i34<o;_i34++)e[n+_i34]=t[r+_i34];},t.GemmUtil=/*#__PURE__*/function(){function _class30(){_classCallCheck(this,_class30);}_createClass(_class30,null,[{key:\"getShapeOfGemmResult\",value:function getShapeOfGemmResult(e,t,n,r,o){if(2!==e.length||2!==n.length)throw new Error(\"shape need to be of size 2\");var i,a,s;t?(i=e[1],a=e[0]):(i=e[0],a=e[1]);var u=-1;if(r?(s=n[0],u=1):(s=n[1],u=0),n[u]!==a)throw new Error(\"dimension mismatch\");if(i<=0||s<=0||a<=0)throw new Error(\"invalid shape specified\");if(o&&!l.isValidBroadcast(o,[i,s]))throw new Error(\"gemm: invalid bias shape for broadcast\");return[i,s,a];}}]);return _class30;}();var c=/*#__PURE__*/function(){function c(){_classCallCheck(this,c);}_createClass(c,null,[{key:\"tensorDataTypeFromProto\",value:function tensorDataTypeFromProto(e){switch(e){case a.onnx.TensorProto.DataType.INT8:return\"int8\";case a.onnx.TensorProto.DataType.UINT8:return\"uint8\";case a.onnx.TensorProto.DataType.BOOL:return\"bool\";case a.onnx.TensorProto.DataType.INT16:return\"int16\";case a.onnx.TensorProto.DataType.UINT16:return\"uint16\";case a.onnx.TensorProto.DataType.INT32:return\"int32\";case a.onnx.TensorProto.DataType.UINT32:return\"uint32\";case a.onnx.TensorProto.DataType.FLOAT:return\"float32\";case a.onnx.TensorProto.DataType.DOUBLE:return\"float64\";case a.onnx.TensorProto.DataType.STRING:return\"string\";case a.onnx.TensorProto.DataType.INT64:return\"int32\";case a.onnx.TensorProto.DataType.UINT64:return\"uint32\";default:throw new Error(\"unsupported data type: \".concat(a.onnx.TensorProto.DataType[e]));}}},{key:\"tensorDataTypeStringToEnum\",value:function tensorDataTypeStringToEnum(e){switch(e){case\"int8\":return a.onnx.TensorProto.DataType.INT8;case\"uint8\":return a.onnx.TensorProto.DataType.UINT8;case\"bool\":return a.onnx.TensorProto.DataType.BOOL;case\"int16\":return a.onnx.TensorProto.DataType.INT16;case\"uint16\":return a.onnx.TensorProto.DataType.UINT16;case\"int32\":return a.onnx.TensorProto.DataType.INT32;case\"uint32\":return a.onnx.TensorProto.DataType.UINT32;case\"float32\":return a.onnx.TensorProto.DataType.FLOAT;case\"float64\":return a.onnx.TensorProto.DataType.DOUBLE;case\"string\":return a.onnx.TensorProto.DataType.STRING;case\"int64\":return a.onnx.TensorProto.DataType.INT64;case\"uint64\":return a.onnx.TensorProto.DataType.UINT64;default:throw new Error(\"unsupported data type: \".concat(e));}}},{key:\"tensorDimsFromProto\",value:function tensorDimsFromProto(e){return e.map(function(e){return i[\"default\"].isLong(e)?e.toNumber():e;});}},{key:\"tensorValueTypeFromProto\",value:function tensorValueTypeFromProto(e){return{tensorType:c.tensorDataTypeFromProto(e.elemType),shape:{dims:c.tensorDimsFromProto(e.shape.dim.map(function(e){return e.dimValue;}))}};}},{key:\"tensorDimsFromORTFormat\",value:function tensorDimsFromORTFormat(e){var t=[];for(var _n168=0;_n168<e.dimsLength();_n168++)t.push(p.longToNumber(e.dims(_n168)));return t;}},{key:\"tensorAttributesFromORTFormat\",value:function tensorAttributesFromORTFormat(e){var t=[];for(var _n169=0;_n169<e.attributesLength();_n169++)t.push(e.attributes(_n169));return t;}}]);return c;}();t.ProtoUtil=c;var p=/*#__PURE__*/function(){function p(){_classCallCheck(this,p);}_createClass(p,null,[{key:\"longToNumber\",value:function longToNumber(e,t){return i[\"default\"].isLong(e)?e.toNumber():e instanceof o.flatbuffers.Long?i[\"default\"].fromValue({low:e.low,high:e.high,unsigned:null!=t&&t}).toNumber():e;}},{key:\"isLong\",value:function isLong(e){return i[\"default\"].isLong(e)||e instanceof o.flatbuffers.Long;}}]);return p;}();t.LongUtil=p;var d=/*#__PURE__*/function(){function d(){_classCallCheck(this,d);}_createClass(d,null,[{key:\"size\",value:function size(e){return d.getSizeFromDimensionRange(e,0,e.length);}},{key:\"sizeFromDimension\",value:function sizeFromDimension(e,t){if(t<0||t>e.length)throw new Error(\"invalid dimension of \".concat(t,\" for sizeFromDimension as Tensor has \").concat(e.length,\" dimensions.\"));return d.getSizeFromDimensionRange(e,t,e.length);}},{key:\"sizeToDimension\",value:function sizeToDimension(e,t){if(t<0||t>e.length)throw new Error(\"invalid dimension of \".concat(t,\" for sizeToDimension as Tensor has \").concat(e.length,\" dimensions.\"));return d.getSizeFromDimensionRange(e,0,t);}},{key:\"getSizeFromDimensionRange\",value:function getSizeFromDimensionRange(e,t,n){var r=1;for(var _o40=t;_o40<n;_o40++){if(e[_o40]<=0)throw new Error(\"cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.\");r*=e[_o40];}return r;}},{key:\"computeStrides\",value:function computeStrides(e){var t=e.length;if(0===t)return[];if(1===t)return[1];var n=new Array(t);n[t-1]=1,n[t-2]=e[t-1];for(var _r58=t-3;_r58>=0;--_r58)n[_r58]=n[_r58+1]*e[_r58+1];return n;}},{key:\"transpose\",value:function transpose(e){return e.slice().reverse();}},{key:\"indicesToOffset\",value:function indicesToOffset(e,t,n){void 0===n&&(n=e.length);var r=0;for(var _o41=0;_o41<n;++_o41)r+=t[_o41]*e[_o41];return r;}},{key:\"offsetToIndices\",value:function offsetToIndices(e,t){var n=t.length;if(0===n)return[];if(1===n)return[e*t[0]];var r=new Array(t.length);for(var _n170=0;_n170<r.length-1;++_n170)r[_n170]=Math.floor(e/t[_n170]),e-=r[_n170]*t[_n170];return r[r.length-1]=e,r;}},{key:\"normalizeAxis\",value:function normalizeAxis(e,t){if(e<-t&&e>=t)throw new Error(\"unsupported axis for this operation.\");return e<0?e+t:e;}},{key:\"normalizeAxes\",value:function normalizeAxes(e,t){var _this39=this;return e.map(function(e){return _this39.normalizeAxis(e,t);});}},{key:\"incrementIndex\",value:function incrementIndex(e,t,n){if(0===t.length||0===e.length)throw new Error(\"Index incrementing unsupported for scalar Tensor\");if(void 0===n)n=t.length;else if(n<=0||n>t.length)throw new Error(\"Incorrect axis to increment on\");for(var _r59=n-1;_r59>=0&&(e[_r59]++,!(e[_r59]<t[_r59]));--_r59)e[_r59]=0;}},{key:\"calculateReshapedDims\",value:function calculateReshapedDims(e,t){if(0===t.length){if(0===e.length||1===d.size(e))return[];throw new Error(\"cannot reshape to a scalar Tensor\");}var n=t.length,r=new Array(n);var o=-1,i=1;for(var _a19=0;_a19<n;_a19++){if(t[_a19]<-1)throw new Error(\"a dimension in shape hints cannot be less than -1\");if(-1===t[_a19]){if(-1!==o)throw new Error(\"at most one dimension in shape hints can be -1\");o=_a19;}else{if(0===t[_a19]){if(_a19>=e.length)throw new Error(\"the dimension with value zero exceeds the dimension size of the input tensor\");r[_a19]=e[_a19];}else r[_a19]=t[_a19];i*=r[_a19];}}var a=d.size(e);if(-1!==o){if(a%i!=0)throw new Error(\"the input tensor cannot be reshaped to the requested shape. Input shape: [\".concat(e,\"] Output shape: [\").concat(t,\"]\"));r[o]=a/i;}else if(i!==a)throw new Error(\"reshapedDims and originalDims don't have matching sizes\");return r;}},{key:\"sortBasedOnPerm\",value:function sortBasedOnPerm(e,t){return t?t.map(function(t){return e[t];}):e.slice().reverse();}},{key:\"padShape\",value:function padShape(e,t){var n=e.length;return e.map(function(e,r){return e+t[r]+t[r+n];});}},{key:\"areEqual\",value:function areEqual(e,t){return e.length===t.length&&e.every(function(e,n){return e===t[n];});}},{key:\"validateDimsAndCalcSize\",value:function validateDimsAndCalcSize(e){if(e.length>6)throw new TypeError(\"Only rank 0 to 6 is supported for tensor shape.\");var t=1;var _iterator33=_createForOfIteratorHelper(e),_step33;try{for(_iterator33.s();!(_step33=_iterator33.n()).done;){var _n171=_step33.value;if(!Number.isInteger(_n171))throw new TypeError(\"Invalid shape: \".concat(_n171,\" is not an integer\"));if(_n171<0||_n171>2147483647)throw new TypeError(\"Invalid shape: length \".concat(_n171,\" is not allowed\"));t*=_n171;}}catch(err){_iterator33.e(err);}finally{_iterator33.f();}return t;}},{key:\"flattenShape\",value:function flattenShape(e,t){t<0&&(t+=e.length);var n=e.reduce(function(e,t){return e*t;},1),r=e.slice(t).reduce(function(e,t){return e*t;},1);return[n/r,r];}},{key:\"squeezeShape\",value:function squeezeShape(e,t){var n=new Array();t=d.normalizeAxes(t,e.length);for(var _r60=0;_r60<e.length;_r60++){var _o42=t.indexOf(_r60)>=0;if(_o42&&1!==e[_r60])throw new Error(\"squeeze an axis of size different than 1\");(0===t.length&&e[_r60]>1||t.length>0&&!_o42)&&n.push(e[_r60]);}return n;}},{key:\"unsqueezeShape\",value:function unsqueezeShape(e,t){var n=new Array(e.length+t.length);n.fill(0);for(var _e91=0;_e91<t.length;_e91++){var _r61=d.normalizeAxis(t[_e91],n.length);if(_r61>=n.length)throw new Error(\"'axes' has an out of range axis\");if(0!==n[_r61])throw new Error(\"'axes' has a duplicate axis\");n[_r61]=1;}var r=0;for(var _t90=0;_t90<n.length;_t90++)0===n[_t90]&&(n[_t90]=e[r++]);if(r!==e.length)throw new Error(\"the unsqueezed dimension could not be established\");return n;}}]);return d;}();t.ShapeUtil=d,t.MathUtil=/*#__PURE__*/function(){function _class31(){_classCallCheck(this,_class31);}_createClass(_class31,null,[{key:\"sqr\",value:function sqr(e,t,n,r,o){if(r<0||r>=t.length)throw new Error(\"sourceIndex out of bounds\");if(n<0||n>=e.length)throw new Error(\"targetIndex out of bounds\");if(r+o>t.length)throw new Error(\"source indices to be copied are outside bounds\");if(n+o>e.length)throw new Error(\"target array is too small to hold result\");for(var _i35=0;_i35<o;_i35++)e[n+_i35]+=Math.pow(t[r+_i35],2);}},{key:\"axpy\",value:function axpy(e,t,n,r,o,i){if(r<0||r>=t.length)throw new Error(\"sourceIndex out of bounds\");if(n<0||n>=e.length)throw new Error(\"targetIndex out of bounds\");if(r+o>t.length)throw new Error(\"source indices to be copied are outside bounds\");if(n+o>e.length)throw new Error(\"target array is too small to hold result\");for(var _a20=0;_a20<o;_a20++)e[n+_a20]+=i*t[r+_a20];}},{key:\"powx\",value:function powx(e,t,n,r,o,i){if(r<0||r>=t.length)throw new Error(\"sourceIndex out of bounds\");if(n<0||n>=e.length)throw new Error(\"targetIndex out of bounds\");if(r+o>t.length)throw new Error(\"source indices to be copied are outside bounds\");if(n+o>e.length)throw new Error(\"target array is too small to hold result\");for(var _a21=0;_a21<o;_a21++)e[n+_a21]=Math.pow(t[r+_a21],i);}},{key:\"mul\",value:function mul(e,t,n,r,o){if(r<0||r>=t.length)throw new Error(\"sourceIndex out of bounds\");if(n<0||n>=e.length)throw new Error(\"targetIndex out of bounds\");if(r+o>t.length)throw new Error(\"source indices to be copied are outside bounds\");if(n+o>e.length)throw new Error(\"target array is too small to hold result\");for(var _i36=0;_i36<o;_i36++)e[n+_i36]=t[r+_i36]*e[n+_i36];}}]);return _class31;}();var f=/*#__PURE__*/function(){function f(){_classCallCheck(this,f);}_createClass(f,null,[{key:\"splitShape\",value:function splitShape(e,t,n,r){if(0===n.length){if(!r)throw new Error(\"need to know number of outputs when the 'split' attribute is not specified\");f.determineSplit(e[t],r,n);}var o=[],i=[0];for(var _r62=0;_r62<n.length;++_r62){0!==_r62&&i.push(i[_r62-1]+n[_r62-1]);var _a22=e.slice();_a22[t]=n[_r62],o.push(_a22);}return[o,i];}},{key:\"determineSplit\",value:function determineSplit(e,t,n){if(e%t!=0)throw new Error(\"cannot split tensor to equal sized parts\");for(var _r63=0;_r63<t;++_r63)n.push(e/t);}}]);return f;}();t.SplitUtil=f;var h=/*#__PURE__*/function(){function h(){_classCallCheck(this,h);}_createClass(h,null,[{key:\"calcReduce\",value:function calcReduce(e,t,n,r,o){var i=e.dims.slice(0);0===t.length&&i.forEach(function(e,n){return t.push(n);});var a=h.calcReduceShape(i,t,!0),u=d.size(a),c=new s.Tensor(a,e.type),p=d.computeStrides(a),f=d.computeStrides(i),g=new Array(i.length);for(var _n172=0;_n172<u;_n172++){var _a23=d.offsetToIndices(_n172,p);l.fillIndex(_a23,i,g),c.set(_a23,h.calcReduceByAxis(e.numberData,t,i,0,d.indicesToOffset(g,f),r,o));}return n?c:new s.Tensor(h.calcReduceShape(i,t,n),c.type,void 0,void 0,c.data,c.dataId);}},{key:\"calcReduceByAxis\",value:function calcReduceByAxis(e,t,n,r,o,i,a){var s=0;if(r>=t.length)return i(e[o]);var u=t[r],l=u>=n.length?1:d.size(n.slice(u+1));for(var _c11=0;_c11<n[u];_c11++)s=0===_c11?h.calcReduceByAxis(e,t,n,r+1,o,i,a):a(s,h.calcReduceByAxis(e,t,n,r+1,o,i,a)),o+=l;return s;}},{key:\"calcReduceShape\",value:function calcReduceShape(e,t,n){var r=e.slice();for(var _e92=0;_e92<t.length;_e92++)r[t[_e92]]=n?1:0;return r.filter(function(e){return 0!==e;});}}]);return h;}();t.ReduceUtil=h;var g=/*#__PURE__*/function(){function g(){_classCallCheck(this,g);}_createClass(g,null,[{key:\"adjustPoolAttributes\",value:function adjustPoolAttributes(e,t,n,r,o,i){if(!e&&n.length!==t.length-2)throw new Error(\"length of specified kernel shapes should be 2 less than length of input dimensions\");if(e)for(var _e93=0;_e93<t.length-2;_e93++)_e93>=n.length?n.push(t[_e93+2]):n[_e93]=t[_e93+2];for(var _e94=0;_e94<n.length;_e94++)if(_e94<r.length){if(r[_e94]<0)throw new Error(\"strides should be greater than or equal to 1\");}else r.push(1);for(var _e95=0;_e95<n.length;_e95++)if(_e95<o.length){if(o[_e95]<0)throw new Error(\"dilations should be greater than or equal to 1\");}else o.push(1);for(var _e96=0;_e96<2*n.length;_e96++)if(_e96<i.length){if(i[_e96]<0)throw new Error(\"pad should be greater than or equal to 1\");}else i.push(0);for(var _e97=0;_e97<n.length;_e97++){if(n[_e97]<=0)throw new Error(\"kernel shapes need to be greater than 0\");if(i[_e97]>=n[_e97]||i[_e97+n.length]>=n[_e97])throw new Error(\"pads should be smaller than kernel\");}}},{key:\"adjustPadsBasedOnAutoPad\",value:function adjustPadsBasedOnAutoPad(e,t,n,r,o,i){if(i){if(o.length!==2*(e.length-2))throw new Error(\"length of pads should be twice the length of data dimensions\");if(t.length!==e.length-2)throw new Error(\"length of strides should be the length of data dimensions\");if(r.length!==e.length-2)throw new Error(\"length of kernel shapes should be the length of data dimensions\");for(var _a24=0;_a24<e.length-2;_a24++)g.adjustPadAndReturnShape(e[_a24+2],t[_a24],n[_a24],r[_a24],o,_a24,_a24+e.length-2,i);}}},{key:\"computePoolOutputShape\",value:function computePoolOutputShape(e,t,n,r,o,i,a){if(t.length<=0)throw new Error(\"input shape must be of size greater than 0\");var s=[t[0],t[1]];return g.computeShapeHelper(e,t,s,n,r,o,i,a),s;}},{key:\"computeConvOutputShape\",value:function computeConvOutputShape(e,t,n,r,o,i,a){if(e.length<=0||t.length<=0)throw new Error(\"invalid input tensor dims or invalid filter tensor dims\");var s=[e[0],t[0]];return g.computeShapeHelper(!1,e,s,n,r,o,i,a),s;}},{key:\"computeShapeHelper\",value:function computeShapeHelper(e,t,n,r,o,i,a,s){if(e)for(var _e98=0;_e98<t.length-2;_e98++)n.push(1);else for(var _e99=0;_e99<t.length-2;_e99++)n.push(g.adjustPadAndReturnShape(t[_e99+2],r[_e99],o[_e99],i[_e99],a,_e99,_e99+t.length-2,s));}},{key:\"adjustPadAndReturnShape\",value:function adjustPadAndReturnShape(e,t,n,r,o,i,a,s){var u=n*(r-1)+1;if(!s||\"NOTSET\"===s)return Math.floor((e+o[i]+o[a]-u)/t+1);switch(s){case\"VALID\":return o[i]=0,o[a]=0,Math.floor((e-u)/t+1);case\"SAME_LOWER\":case\"SAME_UPPER\":if(1!==n)throw new Error(\"Dilation not supported for SAME_UPPER or SAME_LOWER\");{var _n173=((e+t-1)/t-1)*t+r-e;return o[i]=\"SAME_LOWER\"===s?Math.floor((_n173+1)/2):Math.floor(_n173/2),o[a]=_n173-o[i],Math.floor((e+_n173-r)/t+1);}default:throw new Error(\"Unsupported AutoPad type\");}}}]);return g;}();t.PoolConvUtil=g,t.MIN_CLIP=-34028234663852886e22,t.MAX_CLIP=34028234663852886e22,t.decodeUtf8String=function(e){return new TextDecoder().decode(e);};},3838:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.WebGpuBackend=void 0;var r=n(8453),o=n(4955),i=n(7771),a=n(8510),s=n(8305);t.WebGpuBackend=/*#__PURE__*/function(){function _class32(){_classCallCheck(this,_class32);this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.pendingDispatchNumber=0,this.profilingEnabled=!1;}_createClass(_class32,[{key:\"currentKernelCustomData\",get:function get(){if(null===this.currentKernelId)throw new Error(\"currentKernelCustomData(): currentKernelId is null. (should not happen)\");var e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e;}},{key:\"initialize\",value:function(){var _initialize=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee53(){var e,t;return _regeneratorRuntime2().wrap(function _callee53$(_context54){while(1)switch(_context54.prev=_context54.next){case 0:if(navigator.gpu){_context54.next=2;break;}throw new Error(\"WebGpuBackend: WebGPU is not available.\");case 2:_context54.next=4;return navigator.gpu.requestAdapter();case 4:e=_context54.sent;if(e){_context54.next=7;break;}throw new Error(\"WebGpuBackend: Failed to get GPU adapter.\");case 7:t={requiredLimits:{maxComputeWorkgroupStorageSize:e.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:e.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:e.limits.maxStorageBufferBindingSize}};e.features.has(\"timestamp-query-inside-passes\")&&\"default\"===r.env.webgpu.profilingMode&&(this.profilingEnabled=!0,t.requiredFeatures=[\"timestamp-query-inside-passes\"]);_context54.next=11;return e.requestDevice(t);case 11:this.device=_context54.sent;this.gpuDataManager=(0,i.createGpuDataManager)(this);this.programManager=new s.ProgramManager(this);this.kernels=new Map();this.kernelPersistentData=new Map();this.kernelCustomData=new Map();this.device.onuncapturederror=function(e){e.error instanceof GPUValidationError&&console.error(\"An uncaught WebGPU validation error was raised: \".concat(e.error.message));};this.profilingEnabled&&(this.profilingQuerySet=this.device.createQuerySet({type:\"timestamp\",count:2}));case 19:case\"end\":return _context54.stop();}},_callee53,this);}));function initialize(){return _initialize.apply(this,arguments);}return initialize;}()},{key:\"dispose\",value:function dispose(){}},{key:\"getCommandEncoder\",value:function getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder;}},{key:\"getComputePassEncoder\",value:function getComputePassEncoder(){return this.computePassEncoder||(this.computePassEncoder=this.getCommandEncoder().beginComputePass()),this.computePassEncoder;}},{key:\"endComputePass\",value:function endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null);}},{key:\"flush\",value:function flush(){this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0;}},{key:\"run\",value:function run(e,t,n,r,i){if(t.length!==e.inputTypes.length)throw new Error(\"Input size must be equal to \".concat(e.inputTypes.length,\".\"));var a=[];for(var _e100=0;_e100<t.length;++_e100){var _n174=this.gpuDataManager.get(t[_e100].data);if(!_n174)throw new Error(\"no GPU data for input: \".concat(t[_e100].data));a[_e100]=_n174;}var s=function(e,t,n){var r=t.map(function(e){return\"\".concat(e.join(\",\"));}).join(\"_\"),o=n.join(\"_\");var i=e.name;return e.cacheHint&&(i+=\"[\"+e.cacheHint+\"]\"),i+=\":\"+r+\";\"+o,i;}(e,t.map(function(e){return e.dims;}),a.map(function(e){return e.type;}));var u=this.programManager.getArtifact(s);var l=u?u.programInfo:\"function\"==typeof e.get?e.get():e,c=0===n.length?l.outputs.map(function(e,t){return t;}):n;if(c.length!==l.outputs.length)throw new Error(\"Output size \".concat(c.length,\" must be equal to \").concat(l.outputs.length,\".\"));var p=[],d=[];for(var _e101=0;_e101<l.outputs.length;++_e101){if(!Number.isInteger(c[_e101])||c[_e101]<-2||c[_e101]>=l.outputs.length)throw new Error(\"Invalid output index: \".concat(c[_e101]));var _t91=-1===c[_e101],_n175=-2===c[_e101],_o43=_t91||_n175?i(l.outputs[_e101].dataType,l.outputs[_e101].dims):r(c[_e101],l.outputs[_e101].dataType,l.outputs[_e101].dims),_a25=this.gpuDataManager.get(_o43.data);if(!_a25)throw new Error(\"no GPU data for output: \".concat(_o43.data));if(_t91&&this.temporaryData.push(_a25),_n175){var _e102=this.kernelPersistentData.get(this.currentKernelId);_e102||(_e102=[],this.kernelPersistentData.set(this.currentKernelId,_e102)),_e102.push(_a25);}p.push(_o43),d.push(_a25);}var f=this.programManager.normalizeDispatchGroupSize(l.dispatchGroup(t));return u||(u=this.programManager.build(l,f),this.programManager.setArtifact(s,u)),(0,o.LOG_DEBUG)(\"info\",function(){return\"[ProgramManager] run \\\"\".concat(l.name,\"\\\" (key=\").concat(s,\") with \").concat(f[0],\"x\").concat(f[1],\"x\").concat(f[2]);}),this.programManager.run(u,a,d,f),p;}},{key:\"upload\",value:function upload(e,t){this.gpuDataManager.upload(e,t);}},{key:\"memcpy\",value:function memcpy(e,t){this.gpuDataManager.memcpy(e,t);}},{key:\"download\",value:function(){var _download=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee54(e,t){var n;return _regeneratorRuntime2().wrap(function _callee54$(_context55){while(1)switch(_context55.prev=_context55.next){case 0:_context55.next=2;return this.gpuDataManager.download(e);case 2:n=_context55.sent;t().set(new Uint8Array(n));case 4:case\"end\":return _context55.stop();}},_callee54,this);}));function download(_x53,_x54){return _download.apply(this,arguments);}return download;}()},{key:\"alloc\",value:function alloc(e){return this.gpuDataManager.create(e).id;}},{key:\"free\",value:function free(e){return this.gpuDataManager.release(e);}},{key:\"createKernel\",value:function createKernel(e,t,n){var r=a.WEBGPU_OP_RESOLVE_RULES.get(e);if(!r)throw new Error(\"kernel not implemented: \".concat(e));this.kernels.set(t,[e,r[0],[r[1],n]]);}},{key:\"releaseKernel\",value:function releaseKernel(e){var t=this.kernelPersistentData.get(e);if(t){var _iterator34=_createForOfIteratorHelper(t),_step34;try{for(_iterator34.s();!(_step34=_iterator34.n()).done;){var _e103=_step34.value;this.gpuDataManager.release(_e103.id);}}catch(err){_iterator34.e(err);}finally{_iterator34.f();}this.kernelPersistentData[\"delete\"](e);}this.kernelCustomData[\"delete\"](e),this.kernels[\"delete\"](e);}},{key:\"computeKernel\",value:function computeKernel(e,t){var n=this.kernels.get(e);if(!n)throw new Error(\"kernel not created: \".concat(e));var _n176=_slicedToArray(n,3),r=_n176[0],i=_n176[1],a=_n176[2];if(null!==this.currentKernelId)throw new Error(\"kernel \\\"\".concat(r,\"\\\" is not allowed to be called recursively\"));this.currentKernelId=e,a[0]&&(a[1]=a[0](a[1]),a[0]=void 0),(0,o.LOG_DEBUG)(\"info\",function(){return\"[WebGPU] Start to run kernel \\\"\".concat(r,\"\\\"...\");}),this.temporaryData=[];try{return i(t,a[1]),0;}catch(e){return(0,o.LOG_DEBUG)(\"warning\",\"[WebGPU] Kernel \\\"\".concat(r,\"\\\" failed. Error: \").concat(e)),1;}finally{var _iterator35=_createForOfIteratorHelper(this.temporaryData),_step35;try{for(_iterator35.s();!(_step35=_iterator35.n()).done;){var _e104=_step35.value;this.gpuDataManager.release(_e104.id);}}catch(err){_iterator35.e(err);}finally{_iterator35.f();}this.temporaryData=[],this.currentKernelId=null;}}}]);return _class32;}();},7675:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.init=void 0;var r=n(7917),o=n(3838),i=n(4955),a=n(6952);var s=/*#__PURE__*/function(){function s(e,t,n,r){_classCallCheck(this,s);this.module=e,this.dataType=t,this.data=n,this.dims=r;}_createClass(s,[{key:\"getFloat32Array\",value:function getFloat32Array(){return new Float32Array(this.module.HEAP8.buffer,this.data,a.ShapeUtil.size(this.dims));}},{key:\"reshape\",value:function reshape(e){if(a.ShapeUtil.size(e)!==a.ShapeUtil.size(this.dims))throw new Error(\"Invalid new shape\");return new s(this.module,this.dataType,this.data,e);}}]);return s;}();var u=/*#__PURE__*/function(){function u(e,t,n){_classCallCheck(this,u);this.module=e,this.backend=t;var r=e.HEAPU32;var o=n>>2;this.opKernelContext=r[o++];var i=r[o++],a=[];for(var _t92=0;_t92<i;_t92++){var _t93=r[o++],_n177=r[o++],_i37=r[o++],_u30=[];for(var _e105=0;_e105<_i37;_e105++)_u30.push(r[o++]);a.push(new s(e,_t93,_n177,_u30));}this.inputs=a;}_createClass(u,[{key:\"customData\",get:function get(){return this.backend.currentKernelCustomData;}},{key:\"compute\",value:function compute(e,t){var _this40=this;var n,o,i;var _u31=null!==(o=null===(n=null==t?void 0:t.inputs)||void 0===n?void 0:n.map(function(e){return\"number\"==typeof e?_this40.inputs[e]:e;}))&&void 0!==o?o:this.inputs,l=null!==(i=null==t?void 0:t.outputs)&&void 0!==i?i:[];return this.backend.run(e,_u31,l,function(e,t,n){return new s(_this40.module,t,_this40.output(e,n),n);},function(e,t){var n=(0,r.getTensorElementSize)(e);if(!n)throw new Error(\"Unsupported data type: \".concat(e));var o=n*a.ShapeUtil.size(t);return new s(_this40.module,e,_this40.backend.gpuDataManager.create(o).id,t);});}},{key:\"output\",value:function output(e,t){var n=this.module.stackSave();try{var _n178=this.module.stackAlloc(4*(1+t.length));var _r64=_n178>>2;this.module.HEAPU32[_r64++]=t.length;for(var _e106=0;_e106<t.length;_e106++)this.module.HEAPU32[_r64++]=t[_e106];return this.module._JsepOutput(this.opKernelContext,e,_n178);}finally{this.module.stackRestore(n);}}}]);return u;}();t.init=/*#__PURE__*/function(){var _ref37=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee56(e){var t,_n179;return _regeneratorRuntime2().wrap(function _callee56$(_context57){while(1)switch(_context57.prev=_context57.next){case 0:t=e.jsepInit;if(!(t&&navigator.gpu)){_context57.next=6;break;}_n179=new o.WebGpuBackend();_context57.next=5;return _n179.initialize();case 5:t({backend:_n179},function(e){return _n179.alloc(e);},function(e){return _n179.free(e);},function(t,r,o){var a=arguments.length>3&&arguments[3]!==undefined?arguments[3]:!1;if(a)(0,i.LOG_DEBUG)(\"verbose\",function(){return\"[WebGPU] jsepCopyGpuToGpu: src=\".concat(t,\", dst=\").concat(r,\", size=\").concat(o);}),_n179.memcpy(t,r);else{(0,i.LOG_DEBUG)(\"verbose\",function(){return\"[WebGPU] jsepCopyCpuToGpu: dataOffset=\".concat(t,\", gpuDataId=\").concat(r,\", size=\").concat(o);});var _a26=e.HEAPU8.subarray(t,t+o);_n179.upload(r,_a26);}},/*#__PURE__*/function(){var _ref38=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee55(t,r,o){return _regeneratorRuntime2().wrap(function _callee55$(_context56){while(1)switch(_context56.prev=_context56.next){case 0:(0,i.LOG_DEBUG)(\"verbose\",function(){return\"[WebGPU] jsepCopyGpuToCpu: gpuDataId=\".concat(t,\", dataOffset=\").concat(r,\", size=\").concat(o);});_context56.next=3;return _n179.download(t,function(){return e.HEAPU8.subarray(r,r+o);});case 3:case\"end\":return _context56.stop();}},_callee55);}));return function(_x56,_x57,_x58){return _ref38.apply(this,arguments);};}(),function(e,t,r){return _n179.createKernel(e,t,r);},function(e){return _n179.releaseKernel(e);},function(t,r){(0,i.LOG_DEBUG)(\"verbose\",function(){return\"[WebGPU] jsepRun: kernel=\".concat(t,\", contextDataOffset=\").concat(r);});var o=new u(e,_n179,r);return _n179.computeKernel(t,o);});case 6:case\"end\":return _context57.stop();}},_callee56);}));return function(_x55){return _ref37.apply(this,arguments);};}();},4955:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.LOG_DEBUG=t.LOG=void 0;var r=n(8453),o=n(7917),i=[\"V\",\"I\",\"W\",\"E\",\"F\"];t.LOG=function(e,t){var n=(0,o.logLevelStringToEnum)(e);var a,s;n>=(0,o.logLevelStringToEnum)(r.env.logLevel)&&(a=n,s=\"function\"==typeof t?t():t,console.log(\"[\".concat(i[a],\",\").concat(new Date().toISOString(),\"]\").concat(s)));},t.LOG_DEBUG=function(){r.env.debug&&(0,t.LOG).apply(void 0,arguments);};},6952:function _(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.MAX_CLIP=t.MIN_CLIP=t.GemmUtil=t.PoolConvUtil=t.ShapeUtil=t.BroadcastUtil=t.MatMulUtil=void 0;var n=/*#__PURE__*/function(){function n(){_classCallCheck(this,n);}_createClass(n,null,[{key:\"calcMatMulShape\",value:function calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]];}}]);return n;}();t.MatMulUtil=n;var r=/*#__PURE__*/function(){function r(){_classCallCheck(this,r);}_createClass(r,null,[{key:\"calcShape\",value:function calcShape(e,t){var _r65=arguments.length>2&&arguments[2]!==undefined?arguments[2]:!1;var o=e.length,i=t.length;if(0===o)return t;if(0===i)return e;var a=Math.max(e.length,t.length),s=new Array(a);if(_r65){if(o<2||i<2)return;var _r66=n.calcMatMulShape([e[o-2],e[o-1]],[t[i-2],t[i-1]]);if(void 0===_r66)return;var _r69=_slicedToArray(_r66,2);s[a-2]=_r69[0];s[a-1]=_r69[1];}for(var _n180=_r65?3:1;_n180<=a;_n180++){var _r67=o-_n180<0?1:e[o-_n180],u=i-_n180<0?1:t[i-_n180];if(_r67!==u&&_r67>1&&u>1)return;s[a-_n180]=Math.max(_r67,u);}return s;}},{key:\"isValidBroadcast\",value:function isValidBroadcast(e,t){var n=e.length,_r68=t.length;if(n>_r68)return!1;for(var _o44=1;_o44<=n;_o44++)if(1!==e[n-_o44]&&e[n-_o44]!==t[_r68-_o44])return!1;return!0;}}]);return r;}();t.BroadcastUtil=r;var o=/*#__PURE__*/function(){function o(){_classCallCheck(this,o);}_createClass(o,null,[{key:\"size\",value:function size(e){return o.getSizeFromDimensionRange(e,0,e.length);}},{key:\"sizeFromDimension\",value:function sizeFromDimension(e,t){if(t<0||t>e.length)throw new Error(\"invalid dimension of \".concat(t,\" for sizeFromDimension as Tensor has \").concat(e.length,\" dimensions.\"));return o.getSizeFromDimensionRange(e,t,e.length);}},{key:\"sizeToDimension\",value:function sizeToDimension(e,t){if(t<0||t>e.length)throw new Error(\"invalid dimension of \".concat(t,\" for sizeToDimension as Tensor has \").concat(e.length,\" dimensions.\"));return o.getSizeFromDimensionRange(e,0,t);}},{key:\"getSizeFromDimensionRange\",value:function getSizeFromDimensionRange(e,t,n){var r=1;for(var _o46=t;_o46<n;_o46++){if(e[_o46]<=0)throw new Error(\"cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.\");r*=e[_o46];}return r;}},{key:\"computeStrides\",value:function computeStrides(e){var t=e.length;if(0===t)return[];if(1===t)return[1];var n=new Array(t);n[t-1]=1,n[t-2]=e[t-1];for(var _r70=t-3;_r70>=0;--_r70)n[_r70]=n[_r70+1]*e[_r70+1];return n;}},{key:\"normalizeAxis\",value:function normalizeAxis(e,t){if(e<-t&&e>=t)throw new Error(\"unsupported axis for this operation.\");return e<0?e+t:e;}},{key:\"normalizeAxes\",value:function normalizeAxes(e,t){var _this41=this;return e.map(function(n){return _this41.normalizeAxis(n,null!=t?t:e.length);});}},{key:\"sortBasedOnPerm\",value:function sortBasedOnPerm(e,t){return t?t.map(function(t){return e[t];}):e.slice().reverse();}},{key:\"padShape\",value:function padShape(e,t){var n=e.length;return e.map(function(e,r){return e+t[r]+t[r+n];});}},{key:\"areEqual\",value:function areEqual(e,t){return e.length===t.length&&e.every(function(e,n){return e===t[n];});}}]);return o;}();t.ShapeUtil=o;var i=/*#__PURE__*/function(){function i(){_classCallCheck(this,i);}_createClass(i,null,[{key:\"adjustPoolAttributes\",value:function adjustPoolAttributes(e,t,n,r,o,_i38){if(!e&&n.length!==t.length-2)throw new Error(\"length of specified kernel shapes should be 2 less than length of input dimensions\");if(e)for(var _e107=0;_e107<t.length-2;_e107++)_e107>=n.length?n.push(t[_e107+2]):n[_e107]=t[_e107+2];for(var _e108=0;_e108<n.length;_e108++)if(_e108<r.length){if(r[_e108]<0)throw new Error(\"strides should be greater than or equal to 1\");}else r.push(1);for(var _e109=0;_e109<n.length;_e109++)if(_e109<o.length){if(o[_e109]<0)throw new Error(\"dilations should be greater than or equal to 1\");}else o.push(1);for(var _e110=0;_e110<2*n.length;_e110++)if(_e110<_i38.length){if(_i38[_e110]<0)throw new Error(\"pad should be greater than or equal to 1\");}else _i38.push(0);for(var _e111=0;_e111<n.length;_e111++){if(n[_e111]<=0)throw new Error(\"kernel shapes need to be greater than 0\");if(_i38[_e111]>=n[_e111]||_i38[_e111+n.length]>=n[_e111])throw new Error(\"pads should be smaller than kernel\");}}},{key:\"adjustPadsBasedOnAutoPad\",value:function adjustPadsBasedOnAutoPad(e,t,n,r,o,a,s){if(s){if(o.length!==2*(e.length-2))throw new Error(\"length of pads should be twice the length of data dimensions\");if(t.length!==e.length-2)throw new Error(\"length of strides should be the length of data dimensions\");if(r.length!==e.length-2)throw new Error(\"length of kernel shapes should be the length of data dimensions\");for(var u=0;u<e.length-2;u++)i.adjustPadAndReturnShape(e[u+(a?1:2)],t[u],n[u],r[u],o,u,u+e.length-2,s);}}},{key:\"computePoolOutputShape\",value:function computePoolOutputShape(e,t,n,r,o,a,s){if(t.length<=0)throw new Error(\"input shape must be of size greater than 0\");var u=[t[0],t[1]];return i.computeShapeHelper(e,t,u,n,r,o,a,s),u;}},{key:\"computeConvOutputShape\",value:function computeConvOutputShape(e,t,n,r,o,a,s){if(e.length<=0||t.length<=0)throw new Error(\"invalid input tensor dims or invalid filter tensor dims\");var u=[e[0],t[0]];return i.computeShapeHelper(!1,e,u,n,r,o,a,s),u;}},{key:\"computeShapeHelper\",value:function computeShapeHelper(e,t,n,r,o,a,s,u){if(e)for(var _e112=0;_e112<t.length-2;_e112++)n.push(1);else for(var _e113=0;_e113<t.length-2;_e113++)n.push(i.adjustPadAndReturnShape(t[_e113+2],r[_e113],o[_e113],a[_e113],s,_e113,_e113+t.length-2,u));}},{key:\"adjustPadAndReturnShape\",value:function adjustPadAndReturnShape(e,t,n,r,o,_i39,a,s){var u=n*(r-1)+1;if(!s||\"NOTSET\"===s)return Math.floor((e+o[_i39]+o[a]-u)/t+1);switch(s){case\"VALID\":return o[_i39]=0,o[a]=0,Math.floor((e-u)/t+1);case\"SAME_LOWER\":case\"SAME_UPPER\":if(1!==n)throw new Error(\"Dilation not supported for SAME_UPPER or SAME_LOWER\");{var _n181=((e+t-1)/t-1)*t+r-e;return o[_i39]=\"SAME_LOWER\"===s?Math.floor((_n181+1)/2):Math.floor(_n181/2),o[a]=_n181-o[_i39],Math.floor((e+_n181-r)/t+1);}default:throw new Error(\"Unsupported AutoPad type\");}}}]);return i;}();t.PoolConvUtil=i,t.GemmUtil=/*#__PURE__*/function(){function _class33(){_classCallCheck(this,_class33);}_createClass(_class33,null,[{key:\"getShapeOfGemmResult\",value:function getShapeOfGemmResult(e,t,n,o,i){if(2!==e.length||2!==n.length)throw new Error(\"shape need to be of size 2\");var a,s,u;t?(a=e[1],s=e[0]):(a=e[0],s=e[1]);var l=-1;if(o?(u=n[0],l=1):(u=n[1],l=0),n[l]!==s)throw new Error(\"dimension mismatch\");if(a<=0||u<=0||s<=0)throw new Error(\"invalid shape specified\");if(i&&!r.isValidBroadcast(i,[a,u]))throw new Error(\"gemm: invalid bias shape for broadcast\");return[a,u,s];}}]);return _class33;}(),t.MIN_CLIP=-34028234663852886e22,t.MAX_CLIP=34028234663852886e22;},387:function _(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createAttributeWithCacheKey=void 0;var n=/*#__PURE__*/function(){function n(e){_classCallCheck(this,n);Object.assign(this,e);}_createClass(n,[{key:\"cacheKey\",get:function get(){var _this42=this;return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map(function(e){return\"\".concat(_this42[e]);}).join(\";\")),this._cacheKey;}}]);return n;}();t.createAttributeWithCacheKey=function(e){return new n(e);};},7771:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createGpuDataManager=void 0;var r=n(4955),o=n(1163),i=function i(e){return 16*Math.ceil(e/16);};var a=0;var s=/*#__PURE__*/function(){function s(e){_classCallCheck(this,s);this.backend=e,this.storageCache=new Map(),this.downloadCache=new Map(),this.buffersForUploadingPending=[],this.buffersPending=[];}_createClass(s,[{key:\"upload\",value:function upload(e,t){var n=t.buffer,o=t.byteOffset,a=t.byteLength,_s11=i(a),u=this.storageCache.get(e);if(!u)throw new Error(\"gpu data for uploading does not exist\");if(u.originalSize!==a)throw new Error(\"inconsistent data size. gpu data size=\".concat(u.originalSize,\", data size=\").concat(a));var l=this.backend.device.createBuffer({mappedAtCreation:!0,size:_s11,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),c=l.getMappedRange();new Uint8Array(c).set(new Uint8Array(n,o,a)),l.unmap();var p=this.backend.getCommandEncoder();this.backend.endComputePass(),p.copyBufferToBuffer(l,0,u.gpuData.buffer,0,_s11),(0,r.LOG_DEBUG)(\"verbose\",function(){return\"[WebGPU] GpuDataManager.upload(id=\".concat(e,\")\");}),this.buffersForUploadingPending.push(l);}},{key:\"memcpy\",value:function memcpy(e,t){var n=this.storageCache.get(e);if(!n)throw new Error(\"source gpu data for memcpy does not exist\");var r=this.storageCache.get(t);if(!r)throw new Error(\"destination gpu data for memcpy does not exist\");if(n.originalSize!==r.originalSize)throw new Error(\"inconsistent source and destination gpu data size\");var o=i(n.originalSize);this.backend.getCommandEncoder().copyBufferToBuffer(n.gpuData.buffer,0,r.gpuData.buffer,0,o);}},{key:\"create\",value:function create(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;var n=i(e),_s12=this.backend.device.createBuffer({size:n,usage:t}),u={id:a++,type:o.GpuDataType[\"default\"],buffer:_s12};return this.storageCache.set(u.id,{gpuData:u,originalSize:e}),(0,r.LOG_DEBUG)(\"verbose\",function(){return\"[WebGPU] GpuDataManager.create(size=\".concat(e,\") => id=\").concat(u.id);}),u;}},{key:\"get\",value:function get(e){var t;return null===(t=this.storageCache.get(e))||void 0===t?void 0:t.gpuData;}},{key:\"release\",value:function release(e){var t=this.storageCache.get(e);if(!t)throw new Error(\"releasing data does not exist\");return(0,r.LOG_DEBUG)(\"verbose\",function(){return\"[WebGPU] GpuDataManager.release(id=\".concat(e,\"), gpuDataId=\").concat(t.gpuData.id);}),this.storageCache[\"delete\"](e),this.buffersPending.push(t.gpuData.buffer),this.downloadCache.get(e)&&this.downloadCache[\"delete\"](e),t.originalSize;}},{key:\"download\",value:function(){var _download2=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee57(e){var t,n,r,o,i;return _regeneratorRuntime2().wrap(function _callee57$(_context58){while(1)switch(_context58.prev=_context58.next){case 0:t=this.downloadCache.get(e);if(!t){_context58.next=3;break;}return _context58.abrupt(\"return\",t.data);case 3:n=this.storageCache.get(e);if(n){_context58.next=6;break;}throw new Error(\"data does not exist\");case 6:r=this.backend.getCommandEncoder();this.backend.endComputePass();o=this.backend.device.createBuffer({size:n.originalSize,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});r.copyBufferToBuffer(n.gpuData.buffer,0,o,0,n.originalSize),this.backend.flush();i=new Promise(function(e){o.mapAsync(GPUMapMode.READ).then(function(){var t=o.getMappedRange().slice(0);o.destroy(),e(t);});});return _context58.abrupt(\"return\",(this.downloadCache.set(e,{data:i}),i));case 12:case\"end\":return _context58.stop();}},_callee57,this);}));function download(_x59){return _download2.apply(this,arguments);}return download;}()},{key:\"refreshPendingBuffers\",value:function refreshPendingBuffers(){var _iterator36=_createForOfIteratorHelper(this.buffersForUploadingPending),_step36;try{for(_iterator36.s();!(_step36=_iterator36.n()).done;){var _e114=_step36.value;_e114.destroy();}}catch(err){_iterator36.e(err);}finally{_iterator36.f();}var _iterator37=_createForOfIteratorHelper(this.buffersPending),_step37;try{for(_iterator37.s();!(_step37=_iterator37.n()).done;){var _e115=_step37.value;_e115.destroy();}}catch(err){_iterator37.e(err);}finally{_iterator37.f();}}}]);return s;}();t.createGpuDataManager=function(){for(var _len3=arguments.length,e=new Array(_len3),_key3=0;_key3<_len3;_key3++){e[_key3]=arguments[_key3];}return _construct(s,e);};},8510:function _(e,t,n){\"use strict\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!(\"get\"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function get(){return t[n];}}),Object.defineProperty(e,r,o);}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n];}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\"default\",{enumerable:!0,value:t});}:function(e,t){e[\"default\"]=t;}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\"default\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t;};Object.defineProperty(t,\"__esModule\",{value:!0}),t.WEBGPU_OP_RESOLVE_RULES=void 0;var a=i(n(504)),s=n(9770),u=n(4271),l=n(1522),c=i(n(5262)),p=n(2625),d=i(n(9302));t.WEBGPU_OP_RESOLVE_RULES=new Map([[\"Abs\",[d.abs]],[\"Acos\",[d.acos]],[\"Acosh\",[d.acosh]],[\"Add\",[a.add]],[\"Asin\",[d.asin]],[\"Asinh\",[d.asinh]],[\"Atan\",[d.atan]],[\"Atanh\",[d.atanh]],[\"AveragePool\",[c.averagePool,c.parseAveragePoolAttributes]],[\"Ceil\",[d.ceil]],[\"ClipV10\",[d.clipV10]],[\"Clip\",[d.clip]],[\"Conv\",[s.conv,s.parseConvAttributes]],[\"Cos\",[d.cos]],[\"Cosh\",[d.cosh]],[\"Div\",[a.div]],[\"Elu\",[d.elu,d.parseAlphaAttributes]],[\"Erf\",[d.erf]],[\"Exp\",[d.exp]],[\"Floor\",[d.floor]],[\"Gemm\",[u.gemm,u.parseGemmAttributes]],[\"GlobalAveragePool\",[c.globalAveragePool,c.parseGlobalAveragePoolAttributes]],[\"GlobalMaxPool\",[c.globalMaxPool,c.parseGlobalMaxPoolAttributes]],[\"LeakyRelu\",[d.leakyRelu,d.parseAlphaAttributes]],[\"MatMul\",[l.matMul]],[\"MaxPool\",[c.maxPool,c.parseMaxPoolAttributes]],[\"Mul\",[a.mul]],[\"Neg\",[d.neg]],[\"Pow\",[a.pow]],[\"Reciprocal\",[d.reciprocal]],[\"Relu\",[d.relu]],[\"Sigmoid\",[d.sigmoid]],[\"Sin\",[d.sin]],[\"Sinh\",[d.sinh]],[\"Sqrt\",[d.sqrt]],[\"Sub\",[a.sub]],[\"Tan\",[d.tan]],[\"Tanh\",[d.tanh]],[\"ThresholdedRelu\",[d.thresholdedRelu,d.parseAlphaAttributes]],[\"Transpose\",[p.transpose,p.parseTransposeAttributes]]]);},1427:function _(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.biasActivationSnippet=t.activationFnSnippet=t.typeSnippet=void 0,t.typeSnippet=function(e){switch(e){case 1:return\"f32\";case 2:return\"vec2<f32>\";case 3:return\"vec3<f32>\";case 4:return\"vec4<f32>\";default:throw new Error(\"\".concat(e,\"-component is not supported.\"));}},t.activationFnSnippet=function(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:!1;var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:!1;var r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:3;return\"\";},t.biasActivationSnippet=function(e,t){return\"\\n      \".concat(e?\"value = value + getBiasByOutputCoords(coords);\":\"\",\"\\n      \").concat(t?\"value = activation(value, coords);\":\"\",\"\\n      \");};},9456:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createConv2DMatMulProgramInfo=void 0;var r=n(4955),o=n(6952),i=n(1163),a=n(1427),s=n(4085),u=n(158);t.createConv2DMatMulProgramInfo=function(e,t,n,l,c,p,d,f,h){var g=\"NHWC\"===n.format,m=g?e[0].dims[3]:e[0].dims[1],b=l[0],y=g?l[2]:l[3],w=g?l[1]:l[2],_=g?l[3]:l[1],v=((m%4==0||m%3==0)&&g||y%4==0&&!g)&&_%4==0,x=g?_:y*w,T=g?y*w:_,S=v?[8,8,1]:[x<=4?4:16,x>4&&T<=4?4:16,1],O=v?[4,4,1]:[x<=4?1:2,x>4&&T<=4?1:2,1],A=[Math.ceil(x/S[0]/O[0]),Math.ceil(T/S[1]/O[1]),Math.ceil(b/S[2]/O[1])];(0,r.LOG_DEBUG)(\"verbose\",function(){return\"[conv2d_mm_webgpu] dispatch = \".concat(A);});var E=v?g&&m%4!=0?3:4:O[0],I=S[1]*O[1],$=S[0]*O[0],P=Math.max(S[0]*E,S[1]),D=c%I==0,k=p%$==0,C=d%P==0,R=v?[E,4,4]:[1,1,1],M=[\"@group(0) @binding(0) var<storage, read> x: array<\".concat(v&&4===E?\"vec4<f32>\":\"f32\",\">;\"),\"@group(0) @binding(1) var<storage, read> w: array<\".concat(v?\"vec4<f32>\":\"f32\",\">;\")];var N=\"\\n      fn setOutputAtIndex(flatIndex : i32, value : \".concat(v?\"vec4<f32>\":\"f32\",\") {\\n        result[flatIndex] = \").concat(v?\"vec4<f32>\":\"f32\",\"(value);\\n      }\\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : \").concat(v?\"vec4<f32>\":\"f32\",\") {\\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\\n        setOutputAtIndex(flatIndex \").concat(v?\"/ 4\":\"\",\", value);\\n      }\");return f&&(M.push(\"@group(0) @binding(2) var<storage, read> bias: array<\".concat(v?\"vec4<f32>\":\"f32\",\">;\")),N+=\"\\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> \".concat(v?\"vec4<f32>\":\"f32\",\" {\\n          return bias[coords.\").concat(g?\"w\":\"y\").concat(v?\"/ 4\":\"\",\"];\\n        }\")),Object.assign(Object.assign({},t),{outputs:[{dims:l,dataType:e[0].dataType,gpuDataType:i.GpuDataType[\"default\"]}],dispatchGroup:function dispatchGroup(){return{x:A[0],y:A[1],z:A[2]};},getShaderSource:function getShaderSource(){return\"\\n        \".concat(s.utilFunctions,\"\\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\\n        \").concat(M.join(\"\"),\"\\n        @group(0) @binding(\").concat(M.length,\") var<storage, read_write> result: array<\").concat(v?\"vec4<f32>\":\"f32\",\">;\\n        //@group(0) @binding(\").concat(M.length+1,\") var<uniform> uniforms: Uniforms;\\n\\n        const xShape : vec4<i32> = vec4<i32>(\").concat(e[0].dims.join(\",\"),\");\\n        const wShape : vec4<i32> = vec4<i32>(\").concat(e[1].dims.join(\",\"),\");\\n        const outShape : vec4<i32> = vec4<i32>(\").concat(l.join(\",\"),\");\\n        const outShapeStrides : vec3<i32> = vec3<i32>(\").concat(o.ShapeUtil.computeStrides(l).slice(0,3).join(\",\"),\");\\n        const filterDims : vec2<i32> = vec2<i32>(\").concat(n.kernelShape[0],\", \").concat(n.kernelShape[1],\");\\n        const pad : vec2<i32> = vec2<i32>(\").concat(n.pads[0],\", \").concat(n.pads[1],\");\\n        const stride : vec2<i32> = vec2<i32>(\").concat(n.strides[0],\", \").concat(n.strides[1],\");\\n        const dilation : vec2<i32> = vec2<i32>(\").concat(n.dilations[0],\", \").concat(n.dilations[1],\");\\n        const dimAOuter : i32 = \").concat(c,\";\\n        const dimBOuter : i32 = \").concat(p,\";\\n        const dimInner : i32 = \").concat(d,\";\\n        \").concat(N,\"\\n        \").concat(function(e,t,n,r){var o=arguments.length>4&&arguments[4]!==undefined?arguments[4]:!1;var i=arguments.length>5?arguments[5]:undefined;var s=arguments.length>6&&arguments[6]!==undefined?arguments[6]:!1;var u=arguments.length>7&&arguments[7]!==undefined?arguments[7]:4;var l=arguments.length>8&&arguments[8]!==undefined?arguments[8]:4;var c=arguments.length>9&&arguments[9]!==undefined?arguments[9]:4;var p=e?\"\\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\\n    \":\"\\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\\n    \",d=e?\"\\n    let coords = vec4<i32>(\\n      batch,\\n      row / outWidth,\\n      row % outWidth,\\n      col);\\n    \":\"\\n    let coords = vec4<i32>(\\n      batch,\\n      row,\\n      col / outWidth,\\n      col % outWidth);\\n    \",f=e?\"xShape[1]\":\"xShape[2]\",h=e?\"xShape[2]\":\"xShape[3]\",g=e?\"row\":\"col\",m=e?\"col\":\"row\",b=\"\\n    let inChannels = wShape[2];\\n    let outWidth = \".concat(e?\"outShape[2]\":\"outShape[3]\",\";\\n    let outRow = \").concat(g,\" / outWidth;\\n    let outCol = \").concat(g,\" % outWidth;\\n\\n    let WRow = \").concat(m,\" / (filterDims[1] * inChannels);\\n    let WCol = \").concat(m,\" / inChannels % filterDims[1];\\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\\n    let xCh = \").concat(m,\" % inChannels;\\n    var resData = \").concat((0,a.typeSnippet)(u),\"(0.0);\\n    // The bounds checking is always needed since we use it to pad zero for\\n    // the 'same' padding type.\\n    if (xRow >= 0 && xRow < \").concat(f,\" && xCol >= 0 && xCol < \").concat(h,\") {\\n      \").concat(p,\"\\n      let xIndex = getIndexFromCoords4D(coord, xShape);\\n      \").concat(function(e){switch(e){case 1:return\"resData = x[xIndex];\";case 3:return\"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);\";case 4:return\"resData = x[xIndex / 4];\";default:throw new Error(\"innerElementSize \".concat(e,\" is not supported.\"));}}(u),\"\\n    }\\n    return resData;\"),y=e?t&&r?\"\\n    let col = colIn * \".concat(u,\";\\n    \").concat(b):\"\\n    let col = colIn * \".concat(u,\";\\n    if (row < dimAOuter && col < dimInner) {\\n      \").concat(b,\"\\n    }\\n    return \").concat((0,a.typeSnippet)(u),\"(0.0);\"):r&&n?\"\\n    let col = colIn * \".concat(u,\";\\n    \").concat(b):\"\\n    let col = colIn * \".concat(u,\";\\n    if (row < dimInner && col < dimBOuter) {\\n      \").concat(b,\"\\n    }\\n    return \").concat((0,a.typeSnippet)(u),\"(0.0);\"),w=\"\".concat(function(e){switch(e){case 1:return\"return w[row * wShape[3] + colIn];\";case 4:return\"return w[row * wShape[3] / 4 + colIn];\";default:throw new Error(\"innerElementSize \".concat(e,\" is not supported.\"));}}(l)),_=(0,a.typeSnippet)(c),v=e?(0,a.typeSnippet)(u):(0,a.typeSnippet)(l),x=e?(0,a.typeSnippet)(l):(0,a.typeSnippet)(u);return\"\\n    \".concat((0,a.activationFnSnippet)(i,s,4===c,4),\"\\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> \").concat(v,\" {\\n      \").concat(e?y:w,\"\\n    }\\n\\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> \").concat(x,\" {\\n      \").concat(e?w:y,\"\\n    }\\n\\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : \").concat(_,\") {\\n      let col = colIn * \").concat(c,\";\\n      if (row < dimAOuter && col < dimBOuter)\\n      {\\n      var value = valueIn;\\n      let outWidth = \").concat(e?\"outShape[2]\":\"outShape[3]\",\";\\n      \").concat(d,\"\\n      \").concat((0,a.biasActivationSnippet)(o,i),\"\\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\\n      }\\n    }\");}(g,D,k,C,f,void 0,!1,R[0],R[1],R[2]),\"\\n            \").concat(v?(0,u.makeMatMulPackedVec4Source)(O,S,!g,P):(0,u.makeMatMulPackedSource)(O,S,!g,P,!1,void 0,h));}});};},4085:function _(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.utilFunctions=void 0,t.utilFunctions=\"\\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\\n  return dot(coords, vec4<i32>(\\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\\n}\\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\\n  return dot(coords, vec4<i32>(\\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\\n}\\n\";},158:function _(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.makeMatMulPackedSource=t.makeMatMulPackedVec4Source=void 0,t.makeMatMulPackedVec4Source=function(e,t){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:!1;var r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:32;var o=arguments.length>4&&arguments[4]!==undefined?arguments[4]:!1;var i=arguments.length>5&&arguments[5]!==undefined?arguments[5]:32;var a=arguments.length>6&&arguments[6]!==undefined?arguments[6]:!1;var s=t[1]*e[1],u=t[0]*e[0],l=n?s:r,c=n?r:s,p=l/t[0],d=r/t[1];if((!n||4!==p||4!==e[1])&&(n||3!==p&&4!==p)||l%t[0]!=0||r%t[1]!=0||4!==e[0])throw new Error(\"If transposeA \".concat(n,\" is true, innerElementSize \").concat(p,\" and workPerThread[1] \").concat(e[1],\" must be 4.\\n      Otherwise, innerElementSize \").concat(p,\" must be 3 or 4.\\n  tileAWidth \").concat(l,\" must be divisible by workgroupSize[0]\").concat(t[0],\". tileInner \").concat(r,\" must be divisible by workgroupSize[1] \").concat(t[1],\". colPerThread \").concat(e[0],\" must be 4.\"));return\"\\nvar<workgroup> mm_Asub : array<array<vec\".concat(p,\"<f32>, \").concat(l/p,\">, \").concat(c,\">;\\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, \").concat(u/e[0],\">, \").concat(r,\">;\\n\\nconst rowPerThread = \").concat(e[1],\";\\nconst colPerThread = \").concat(e[0],\";\\nconst innerElementSize = \").concat(p,\";\\nconst tileInner = \").concat(r,\";\\n\\n@compute @workgroup_size(\").concat(t[0],\", \").concat(t[1],\", \").concat(t[2],\")\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\n  let localRow = i32(localId.y);\\n  let tileRow = \").concat(a?\"0\":\"localRow * rowPerThread\",\";\\n  let tileCol = i32(localId.x);\\n\\n  let globalRow = \").concat(a?\"0\":\"i32(globalId.y) * rowPerThread\",\";\\n  let globalCol = i32(globalId.x);\\n  let batch = \").concat(o?\"0\":\"i32(globalId.z)\",\";\\n  let globalRowStart = i32(workgroupId.y) * \").concat(s,\";\\n\\n  let numTiles = \").concat(o?\"\".concat(Math.ceil(i/r)):\"(dimInner - 1) / tileInner + 1\",\";\\n  var kStart = \").concat(o?\"i32(globalId.z) * \".concat(i):\"0\",\";\\n\\n  var acc: array<vec4<f32>, rowPerThread>;\\n\\n  // Loop over shared dimension.\\n  let tileRowB = localRow * \").concat(d,\";\\n  for (var t = 0; t < numTiles; t = t + 1) {\\n      // Load one tile of A into local memory.\\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n          let inputRow = tileRow + innerRow;\\n          let inputCol = tileCol;\\n          \").concat((f=n,f?\"\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\n          kStart + inputRow,\\n          globalRowStart / innerElementSize + inputCol);\\n        \":\"\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\n          globalRow + innerRow,\\n          kStart / innerElementSize + inputCol);\\n        \"),\"\\n      }\\n\\n      // Load one tile of B into local memory.\\n      for (var innerRow = 0; innerRow < \").concat(d,\"; innerRow = innerRow + 1) {\\n          let inputRow = tileRowB + innerRow;\\n          let inputCol = tileCol;\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\\n      }\\n      kStart = kStart + tileInner;\\n      workgroupBarrier();\\n\\n      // Compute acc values for a single thread.\\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\\n          \").concat(3===p?\"\":\"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];\",\"\\n\\n          \").concat(function(e,t){return e?\"\\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\\n        \".concat(3===t?\"\":\"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];\",\"\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\n          acc[i] = BCached0 * ACached0[i] + acc[i];\\n          acc[i] = BCached1 * ACached1[i] + acc[i];\\n          acc[i] = BCached2 * ACached2[i] + acc[i];\\n          \").concat(3===t?\"\":\"acc[i] = BCached3 * ACached3[i] + acc[i];\",\"\\n        }\"):\"\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\n          let ACached = mm_Asub[tileRow + i][k];\\n          acc[i] = BCached0 * ACached.x + acc[i];\\n          acc[i] = BCached1 * ACached.y + acc[i];\\n          acc[i] = BCached2 * ACached.z + acc[i];\\n          \".concat(3===t?\"\":\"acc[i] = BCached3 * ACached.w + acc[i];\",\"\\n        }\");}(n,p),\"\\n      }\\n\\n      workgroupBarrier();\\n  }\\n\\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\\n  }\\n}\");var f;};var n=function n(e){return e?\"\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\n              kStart + inputRow,\\n              globalRowStart + inputCol);\\n            \":\"\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\n              globalRowStart + inputRow,\\n              kStart + inputCol);\\n            \";};t.makeMatMulPackedSource=function(e,t){var r=arguments.length>2&&arguments[2]!==undefined?arguments[2]:!1;var o=arguments.length>3&&arguments[3]!==undefined?arguments[3]:32;var i=arguments.length>4&&arguments[4]!==undefined?arguments[4]:!1;var a=arguments.length>5&&arguments[5]!==undefined?arguments[5]:32;var s=arguments.length>6&&arguments[6]!==undefined?arguments[6]:!1;var u=e[1]*t[1],l=e[0]*t[0],c=r?u:o,p=r?o:u;if(p%t[1]!=0||c%t[0]!=0||o%t[1]!=0)throw new Error(\"tileAHight \".concat(p,\" must be divisible by workgroupSize[1]\").concat(t[1],\", tileAWidth \").concat(c,\" must be divisible by workgroupSize[0]\").concat(t[0],\", tileInner \").concat(o,\" must be divisible by workgroupSize[1]\").concat(t[1]));var d=p/t[1],f=c/t[0],h=o/t[1],g=s?\"\\n    let localRow = i32(localId.y);\\n    let localCol = i32(localId.x);\\n    let globalRowStart = i32(workgroupId.y) * \".concat(u,\";\\n    let globalColStart = i32(workgroupId.x) * \").concat(l,\";\\n\\n    // Loop over shared dimension.\\n    for (var t = 0; t < numTiles; t = t + 1) {\\n      // Load one tile of A into local memory.\\n      for (var inputRow = localRow; inputRow < \").concat(p,\"; inputRow = inputRow + \").concat(t[1],\") {\\n        for (var inputCol = localCol; inputCol < \").concat(c,\"; inputCol = inputCol + \").concat(t[0],\") {\\n          \").concat(n(r),\"\\n        }\\n      }\\n      // Load one tile of B into local memory.\\n      for (var inputRow = localRow; inputRow < \").concat(o,\"; inputRow = inputRow + \").concat(t[1],\") {\\n            for (var inputCol = localCol; inputCol < \").concat(l,\"; inputCol = inputCol + \").concat(t[0],\") {\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\n            kStart + inputRow,\\n            globalColStart + inputCol);\\n        }\\n      }\\n      kStart = kStart + tileInner;\\n      workgroupBarrier();\\n\\n      // Compute acc values for a single thread.\\n      var BCached : array<f32, colPerThread>;\\n      for (var k = 0; k < tileInner; k = k + 1) {\\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\n          BCached[inner] = mm_Bsub[k][localCol + inner * \").concat(t[0],\"];\\n        }\\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n          let ACached = \").concat(r?\"mm_Asub[k][localRow + innerRow * \".concat(t[1],\"];\"):\"mm_Asub[localRow + innerRow * \".concat(t[1],\"][k];\"),\"\\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\\n                ACached * BCached[innerCol];\\n          }\\n        }\\n      }\\n      workgroupBarrier();\\n    }\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n      let gRow = globalRowStart + localRow + innerRow * \").concat(t[1],\";\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n        let gCol = globalColStart + localCol + innerCol * \").concat(t[0],\";\\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\\n      }\\n    }\\n    \"):\"\\nlet tileRow = i32(localId.y) * rowPerThread;\\nlet tileCol = i32(localId.x) * colPerThread;\\n\\nlet globalRow = i32(globalId.y) * rowPerThread;\\nlet globalCol = i32(globalId.x) * colPerThread;\\nlet globalRowStart = i32(workgroupId.y) * \".concat(u,\";\\n\\nlet tileRowA = i32(localId.y) * \").concat(d,\";\\nlet tileColA = i32(localId.x) * \").concat(f,\";\\nlet tileRowB = i32(localId.y) * \").concat(h,\";\\n// Loop over shared dimension.\\nfor (var t = 0; t < numTiles; t = t + 1) {\\n  // Load one tile of A into local memory.\\n  for (var innerRow = 0; innerRow < \").concat(d,\"; innerRow = innerRow + 1) {\\n    for (var innerCol = 0; innerCol < \").concat(f,\"; innerCol = innerCol + 1) {\\n      let inputRow = tileRowA + innerRow;\\n      let inputCol = tileColA + innerCol;\\n      \").concat(n(r),\"\\n    }\\n  }\\n\\n  // Load one tile of B into local memory.\\n  for (var innerRow = 0; innerRow < \").concat(h,\"; innerRow = innerRow + 1) {\\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n      let inputRow = tileRowB + innerRow;\\n      let inputCol = tileCol + innerCol;\\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\n        kStart + inputRow,\\n        globalCol + innerCol);\\n    }\\n  }\\n  kStart = kStart + tileInner;\\n  workgroupBarrier();\\n\\n  // Compute acc values for a single thread.\\n  var BCached : array<f32, colPerThread>;\\n  for (var k = 0; k < tileInner; k = k + 1) {\\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\\n    }\\n\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n      \").concat(function(e){return e?\"let ACached = mm_Asub[k][tileRow + innerRow];\":\"let ACached = mm_Asub[tileRow + innerRow][k];\";}(r),\"\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\\n      }\\n    }\\n  }\\n\\n  workgroupBarrier();\\n}\\n\\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\\n        acc[innerRow][innerCol]);\\n  }\\n}\\n\");return\"\\n  var<workgroup> mm_Asub : array<array<f32, \".concat(c,\">, \").concat(p,\">;\\n  var<workgroup> mm_Bsub : array<array<f32, \").concat(l,\">, \").concat(o,\">;\\n  const rowPerThread = \").concat(e[1],\";\\n  const colPerThread = \").concat(e[0],\";\\n  const tileInner = \").concat(o,\";\\n\\n@compute @workgroup_size(\").concat(t[0],\", \").concat(t[1],\", \").concat(t[2],\")\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\n    let batch = \").concat(i?\"0\":\"i32(globalId.z)\",\";\\n    let numTiles = \").concat(i?\"\".concat(Math.ceil(a/o)):\"(dimInner - 1) / tileInner + 1\",\";\\n    var kStart = \").concat(i?\"i32(globalId.z) * \".concat(a):\"0\",\";\\n\\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\\n\\n    // Without this initialization strange values show up in acc.\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n        acc[innerRow][innerCol] = 0.0;\\n      }\\n    }\\n    \").concat(g,\"\\n  }\\n\");};},504:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.sub=t.pow=t.mul=t.div=t.add=void 0;var r=n(6952),o=n(1163),i=n(2075),a=function a(e,t,n,_a27,s){var u={name:t,inputTypes:[o.GpuDataType[\"default\"],o.GpuDataType[\"default\"]],cacheHint:s};return Object.assign(Object.assign({},u),{get:function get(){return function(e,t,n,a,s){var u=arguments.length>5&&arguments[5]!==undefined?arguments[5]:t.dataType;var l,c;var p=!r.ShapeUtil.areEqual(t.dims,n.dims);var d=t.dims,f=r.ShapeUtil.size(t.dims),h=!1;if(p){var _e116=r.BroadcastUtil.calcShape(t.dims,n.dims,!1);if(!_e116)throw new Error(\"Can't perform binary op on the given tensors\");d=_e116,f=r.ShapeUtil.size(d);var _o47=1;for(var _e117=0;_e117<d.length;_e117++){var _r71=null!==(l=t.dims[t.dims.length-_e117])&&void 0!==l?l:1;if(_r71!==(null!==(c=n.dims[n.dims.length-_e117])&&void 0!==c?c:1))break;_o47*=_r71;}_o47%4==0&&(h=!0);}else h=!0;return Object.assign(Object.assign({},e),{getShaderSource:function getShaderSource(e){return function(e,t,n,o,a,s,u,l){var c=arguments.length>8&&arguments[8]!==undefined?arguments[8]:\"f32\";var p=arguments.length>9&&arguments[9]!==undefined?arguments[9]:\"f32\";var d=arguments.length>10&&arguments[10]!==undefined?arguments[10]:\"f32\";var f=r.ShapeUtil.size(o),h=Math.ceil(f/4);var g,m;\"string\"==typeof u?g=m=function m(e,t){return\"\".concat(u,\"((\").concat(e,\"),(\").concat(t,\"))\");}:\"function\"==typeof u?g=m=u:(g=u.scalar,m=u.vector);var b=\"\";var y=(0,i.createIndicesHelper)(\"output\",o);if(s){var _e118=function _e118(e){var t=r.ShapeUtil.computeStrides(e),n=[];for(var _r72=e.length-1;_r72>=0;_r72--){var _i40=0===o.length?\"0u\":1===o.length?\"(*outputIndices)\":\"(*outputIndices)[\".concat(_r72+o.length-e.length,\"]\");n.push(\"\".concat(t[_r72],\"u * (\").concat(_i40,\" % \").concat(e[_r72],\"u)\"));}return n.length>0?n.join(\"+\"):\"0u\";};b=\"\\n  \".concat(y.o2iImpl,\"\\n\\n  fn calcOffsetA(outputIndices: ptr<function, \").concat(y.iType,\">) -> u32 {\\n    return \").concat(_e118(t),\";\\n  }\\n\\n  fn calcOffsetB(outputIndices: ptr<function, \").concat(y.iType,\">) -> u32 {\\n    return \").concat(_e118(n),\";\\n  }\\n  \");}var w;if(a)w=s?\"\\n      \".concat(y.indicesVariableDeclaration(\"outputIndices\"),\"\\n      \").concat(y.o2iCall(\"global_idx * 4u\",\"outputIndices\"),\"\\n      let offsetA = calcOffsetA(&outputIndices);\\n      let offsetB = calcOffsetB(&outputIndices);\\n      outputData[global_idx] = \").concat(m(\"aData[offsetA / 4u]\",\"bData[offsetB / 4u]\"),\";\"):\"outputData[global_idx] = \".concat(m(\"aData[global_idx]\",\"bData[global_idx]\"),\";\");else{if(!s)throw new Error(\"no necessary to use scalar implementation for element-wise binary op implementation.\");var _e119=function _e119(e){var t=\"aData[indexA\".concat(e,\"][componentA\").concat(e,\"]\"),n=\"bData[indexB\".concat(e,\"][componentB\").concat(e,\"]\");return\"\\n      \".concat(y.o2iCall(\"global_idx * 4u + \".concat(e,\"u\"),\"outputIndices\"),\"\\n      let offsetA\").concat(e,\" = calcOffsetA(&outputIndices);\\n      let offsetB\").concat(e,\" = calcOffsetB(&outputIndices);\\n      let indexA\").concat(e,\" = offsetA\").concat(e,\" / 4u;\\n      let indexB\").concat(e,\" = offsetB\").concat(e,\" / 4u;\\n      let componentA\").concat(e,\" = offsetA\").concat(e,\" % 4u;\\n      let componentB\").concat(e,\" = offsetB\").concat(e,\" % 4u;\\n      outputData[global_idx][\").concat(e,\"] = \").concat(g(t,n),\";\");};w=\"\\n      \".concat(y.indicesVariableDeclaration(\"outputIndices\"),\"\\n      \").concat(_e119(0),\"\\n      \").concat(_e119(1),\"\\n      \").concat(_e119(2),\"\\n      \").concat(_e119(3));}return\"\\n  @group(0) @binding(0) var<storage, read> aData : array<vec4<\".concat(c,\">>;\\n  @group(0) @binding(1) var<storage, read> bData : array<vec4<\").concat(p,\">>;\\n  @group(0) @binding(2) var<storage, read_write> outputData : array<vec4<\").concat(d,\">>;\\n\\n  \").concat(null!=l?l:\"\",\"\\n  \").concat(b,\"\\n\\n  \").concat(e.mainStart(),\"\\n    \").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(h),\"\\n    \").concat(w,\"\\n  }\");}(e,t.dims,n.dims,d,h,p,a,s);},outputs:[{dims:d,dataType:u,gpuDataType:o.GpuDataType[\"default\"]}],dispatchGroup:function dispatchGroup(){return{x:Math.ceil(f/64/(h?4:1))};}});}(u,e[0],e[1],n,_a27);}});};t.add=function(e){e.compute(a(e.inputs,\"Add\",function(e,t){return\"\".concat(e,\"+\").concat(t);}));},t.div=function(e){e.compute(a(e.inputs,\"Div\",function(e,t){return\"\".concat(e,\"/\").concat(t);}));},t.mul=function(e){e.compute(a(e.inputs,\"Mul\",function(e,t){return\"\".concat(e,\"*\").concat(t);}));},t.pow=function(e){e.compute(a(e.inputs,\"Pow\",{scalar:function scalar(e,t){return\"pow_f32(\".concat(e,\",\").concat(t,\")\");},vector:function vector(e,t){return\"pow_vf32(\".concat(e,\",\").concat(t,\")\");}},\"\\n    fn pow_f32(a : f32, b : f32) -> f32 {\\n      if (b == 0.0) {\\n        return 1.0;\\n      } else if (a < 0.0 && b != floor(b)) {\\n        return pow(a, b); // NaN\\n      }\\n      return select(sign(a), 1.0, round(abs(b) % 2.0) != 1.0) * pow(abs(a), b);\\n    }\\n    fn pow_vf32(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {\\n      // TODO: implement vectorized pow\\n      return vec4<f32>(pow_f32(a.x, b.x), pow_f32(a.y, b.y), pow_f32(a.z, b.z), pow_f32(a.w, b.w));\\n    }\\n      \"));},t.sub=function(e){e.compute(a(e.inputs,\"Sub\",function(e,t){return\"\".concat(e,\"-\").concat(t);}));};},2075:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createShaderHelper=t.createIndicesHelper=t.WORKGROUP_SIZE=void 0;var r=n(6952);t.WORKGROUP_SIZE=64,t.createIndicesHelper=function(e,t){var n=t.length<2?\"u32\":\"array<u32, \".concat(t.length,\">\"),o=r.ShapeUtil.computeStrides(t);var i=\"\";for(var _e120=0;_e120<t.length-1;_e120++)i+=\"\\n    let dim\".concat(_e120,\" = current / \").concat(o[_e120],\"u;\\n    let rest\").concat(_e120,\" = current % \").concat(o[_e120],\"u;\\n    (*indices)[\").concat(_e120,\"] = dim\").concat(_e120,\";\\n    current = rest\").concat(_e120,\";\\n    \");i+=\"(*indices)[\".concat(t.length-1,\"] = current;\");var a=t.length<2?\"\":\"\\n  fn ih_o2i_\".concat(e,\"(offset: u32, indices: ptr<function, \").concat(n,\">) {\\n    var current = offset;\\n    \").concat(i,\"\\n  }\"),s=[];if(0===t.length)s.push(\"0u\");else if(t.length<2)s.push(\"(*indices)\");else for(var _e121=t.length-1;_e121>=0;_e121--)s.push(\"\".concat(o[_e121],\"u * ((*indices)[\").concat(_e121,\"])\"));return{o2iImpl:a,o2iCall:function o2iCall(n,r){return t.length<2?\"\".concat(r,\"=\").concat(n,\";\"):\"ih_o2i_\".concat(e,\"(\").concat(n,\", &\").concat(r,\");\");},i2oImpl:t.length<2?\"\":\"\\n  fn ih_i2o_\".concat(e,\"(indices: ptr<function, \").concat(n,\">) -> u32 {\\n    return \").concat(s.join(\"+\"),\";\\n  }\"),i2oExpression:function i2oExpression(n,r){return t.length<2?\"(\".concat(r?\"*\":\"\").concat(n,\")\"):\"ih_i2o_\".concat(e,\"(\").concat(r?\"\":\"&\").concat(n,\")\");},indicesVariableDeclaration:function indicesVariableDeclaration(e,t){return\"var \".concat(e,\":\").concat(n).concat(t?\"=\".concat(n,\"(\").concat(t.join(\",\"),\")\"):\"\",\";\");},iType:n};};var o=/*#__PURE__*/function(){function o(e){_classCallCheck(this,o);this.normalizedDispatchGroup=e;}_createClass(o,[{key:\"guardAgainstOutOfBoundsWorkgroupSizes\",value:function guardAgainstOutOfBoundsWorkgroupSizes(e){return\"if (global_idx >= \".concat(\"number\"==typeof e?\"\".concat(e,\"u\"):e,\") { return; }\");}},{key:\"mainStart\",value:function mainStart(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:t.WORKGROUP_SIZE;var n=\"number\"==typeof e?e:e[0],r=\"number\"==typeof e?1:e[1],_o48=\"number\"==typeof e?1:e[2],i=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2];return\"@compute @workgroup_size(\".concat(n,\", \").concat(r,\", \").concat(_o48,\")\\n  fn main(\").concat(i?\"@builtin(global_invocation_id) global_id : vec3<u32>\":\"@builtin(local_invocation_index) local_index : u32,\\n    @builtin(workgroup_id) workgroup_id : vec3<u32>\",\") {\\n    \").concat(i?\"let global_idx = global_id.x;\":\"let global_idx = (workgroup_id.z * \".concat(this.normalizedDispatchGroup[0]*this.normalizedDispatchGroup[1],\"u +\\n          workgroup_id.y * \").concat(this.normalizedDispatchGroup[0],\"u + workgroup_id.x) * \").concat(n*r*_o48,\"u + local_index;\"),\"\\n  \");}}]);return o;}();t.createShaderHelper=function(e){return new o(e);};},9192:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createGroupedConvProgramInfoLoader=void 0;var r=n(6952),o=n(1163),i=n(2075),a=n(9770),s=n(3997);t.createGroupedConvProgramInfoLoader=function(e,t,n){var u=(l=e.length>2,c=t.cacheKey,{name:\"GroupedConv\",inputTypes:l?[o.GpuDataType[\"default\"],o.GpuDataType[\"default\"],o.GpuDataType[\"default\"]]:[o.GpuDataType[\"default\"],o.GpuDataType[\"default\"]],cacheHint:c});var l,c;return Object.assign(Object.assign({},u),{get:function get(){return function(e,t,n,u){var l=e.length>2,c=l?\"value += b[output_channel];\":\"\",p=e[0].dims,d=e[1].dims,f=d[0]/n.group,h=\"f32\",_ref39=(0,s.getActicationSnippet)(n),g=_ref39.activationFunction,m=_ref39.applyActivation,b=[\"@group(0) @binding(0) var<storage, read> x : array<\".concat(h,\">;\"),\"@group(0) @binding(1) var<storage, read> w : array<\".concat(h,\">;\")];l&&b.push(\"@group(0) @binding(2) var<storage, read> b : array<\".concat(h,\">;\"));var y=\"NHWC\"===n.format,w=(0,a.calculateOutputShape)(p,d,n.dilations,n.pads,n.strides,y),_=r.ShapeUtil.size(w),v=(0,i.createIndicesHelper)(\"output\",w),x=(0,i.createIndicesHelper)(\"x\",p),T=(0,i.createIndicesHelper)(\"w\",d);return Object.assign(Object.assign({},t),{outputs:[{dims:u?u(w):w,dataType:e[0].dataType,gpuDataType:o.GpuDataType[\"default\"]}],getShaderSource:function getShaderSource(e){return\"\\n  const strides: vec2<u32> = vec2(\".concat(n.strides[0],\"u, \").concat(n.strides[1],\"u);\\n  const pads: vec2<u32> = vec2(\").concat(n.pads[0],\"u, \").concat(n.pads[1],\"u);\\n\\n  \").concat(b.join(\"\\n\"),\"\\n  @group(0) @binding(\").concat(b.length,\") var<storage, read_write> output : array<\").concat(h,\">;\\n\\n  \").concat(g,\"\\n  \").concat(v.o2iImpl,\"\\n  \").concat(x.i2oImpl,\"\\n  \").concat(T.i2oImpl,\"\\n\\n  \").concat(e.mainStart(),\"\\n    \").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(_),\"\\n\\n    \").concat(v.indicesVariableDeclaration(\"outputIndices\"),\"\\n    \").concat(v.o2iCall(\"global_idx\",\"outputIndices\"),\"\\n    let batch: u32 = outputIndices[0];\\n    let output_channel: u32 = outputIndices[\").concat(y?3:1,\"];\\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[\").concat(y?1:2,\"], outputIndices[\").concat(y?2:3,\"]) * strides - pads;\\n    let group_id: u32 = output_channel / \").concat(f,\"u;\\n\\n    var value: \").concat(h,\" = \").concat(h,\"(0);\\n    for (var wInChannel: u32 = 0u; wInChannel < \").concat(d[1],\"u; wInChannel++) {\\n      let input_channel = group_id * \").concat(d[1],\"u + wInChannel;\\n      for (var wHeight: u32 = 0u; wHeight < \").concat(d[2],\"u; wHeight++) {\\n        let xHeight = xRCCorner.x + wHeight * \").concat(n.dilations[0],\"u;\\n\\n        if (xHeight < 0u || xHeight >= \").concat(p[y?1:2],\"u) {\\n          continue;\\n        }\\n\\n        for (var wWidth: u32 = 0u; wWidth < \").concat(d[3],\"u; wWidth++) {\\n          let xWidth = xRCCorner.y + wWidth * \").concat(n.dilations[1],\"u;\\n          if (xWidth < 0u || xWidth >= \").concat(p[y?2:3],\"u) {\\n            continue;\\n          }\\n\\n          \").concat(x.indicesVariableDeclaration(\"xIndices\",y?[\"batch\",\"xHeight\",\"xWidth\",\"input_channel\"]:[\"batch\",\"input_channel\",\"xHeight\",\"xWidth\"]),\"\\n          let xVal = x[\").concat(x.i2oExpression(\"xIndices\"),\"];\\n          \").concat(T.indicesVariableDeclaration(\"wIndices\",[\"output_channel\",\"wInChannel\",\"wHeight\",\"wWidth\"]),\"\\n          let wVal = w[\").concat(T.i2oExpression(\"wIndices\"),\"];\\n          value += xVal*wVal;\\n        }\\n      }\\n    }\\n    \").concat(c,\"\\n    \").concat(m,\"\\n    output[global_idx] = value;\\n  }\");},dispatchGroup:function dispatchGroup(){return{x:Math.ceil(_/64)};}});}(e,u,t,n);}});};},9770:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.conv=t.parseConvAttributes=t.calculateOutputShape=void 0;var r=n(6952),o=n(387),i=n(9192),a=n(3822),s=n(3997),u=n(2625);t.calculateOutputShape=function(e,t,n,r,o,i){var a=e[0],s=e.slice(i?1:2,i?3:4),u=s.length,l=t[0],c=t.slice(2).map(function(e,t){return e+(e-1)*(n[t]-1);}),p=s.map(function(e,t){return e+r[t]+r[t+u];}).map(function(e,t){return Math.floor((e-c[t]+o[t])/o[t]);});return p.splice(0,0,a),p.splice(i?3:1,0,l),p;};var l=(0,o.createAttributeWithCacheKey)({perm:[2,3,1,0]}),c=function c(e,t){var n=e.kernelShape.slice();for(var _e122=2;_e122<t[1].dims.length;++_e122)0===n[_e122-2]&&(n[_e122-2]=t[1].dims[_e122]);var o=e.pads.slice();r.PoolConvUtil.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,n,o,\"NHWC\"===e.format,e.autoPad);var i=Object.assign({},e);return Object.assign(i,{kernelShape:n,pads:o,cacheKey:e.cacheKey}),i;};t.parseConvAttributes=function(e){var t=(0,s.parseInternalActivationAttributes)(e),n=e.format,r=[\"NOTSET\",\"VALID\",\"SAME_UPPER\",\"SAME_LOWER\"][e.auto_pad],i=e.dilations,a=e.group,u=e.kernel_shape,l=e.pads,c=e.strides,p=e.w_is_const();return(0,o.createAttributeWithCacheKey)(Object.assign({autoPad:r,format:n,dilations:i,group:a,kernelShape:u,pads:l,strides:c,wIsConst:p},t));},t.conv=function(e,n){(function(e,t){if(!e||2!==e.length&&3!==e.length)throw new Error(\"Conv requires 2 or 3 inputs\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\"currently only support conv 1D and 2D\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\"filter does not have same dimension as input\");if(e[0].dims[\"NHWC\"===t.format?e[0].dims.length-1:1]!==e[1].dims[1]*t.group)throw new Error(\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error(\"invalid bias\");var n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(\"dilations should be \".concat(n,\"D\"));if(t.strides.length!==n)throw new Error(\"strides should be \".concat(n,\"D\"));if(t.pads.length!==2*n)throw new Error(\"pads should be \".concat(2*n,\"D\"));if(0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\"invalid kernel shape\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\"Conv input(X,W) should be float tensor\");if(3===e.length&&1!==e[2].dataType)throw new Error(\"Conv input(bias) should be float tensor\");})(e.inputs,n),3===e.inputs[0].dims.length?function(e,t){var n=\"NHWC\"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&r.push(e.inputs[2]);var o=[0,t.pads[0],0,t.pads[1]],a=[1].concat(t.strides),s=[1].concat(t.dilations),u=[1].concat(t.kernelShape),l=c(Object.assign(Object.assign({},t),{pads:o,strides:a,dilations:s,kernelShape:u}),r);e.compute((0,i.createGroupedConvProgramInfoLoader)(r,l,function(e){return n?[e[0],e[2],e[3]]:[];}));}(e,n):function(e,n,r){var o;var s=c(r,n),p=3===n.length,d=\"NHWC\"===r.format,f=n[0].dims[d?1:2],h=n[0].dims[d?2:3],g=n[0].dims[d?3:1],m=n[1].dims[2],b=n[1].dims[3],y=(0,t.calculateOutputShape)(n[0].dims,n[1].dims,r.dilations,s.pads,r.strides,d),w=y[d?1:2],_=y[d?2:3],v=y[d?3:1];if(d&&m===f&&b===h&&\"VALID\"===r.autoPad||1===m&&1===b&&1===r.dilations[0]&&1===r.dilations[1]&&1===r.strides[0]&&1===r.strides[1]&&(\"SAME_UPPER\"===r.autoPad||\"SAME_LOWER\"===r.autoPad||\"VALID\"===r.autoPad))return void e.compute((0,i.createGroupedConvProgramInfoLoader)(n,s));if(!d||1!==r.group)return void e.compute((0,i.createGroupedConvProgramInfoLoader)(n,s));var x=d?w*_:v,T=d?v:w*_,S=m*b*g,O=null!==(o=e.customData.wT)&&void 0!==o?o:e.compute(Object.assign(Object.assign({},u.transposeProgramMetadata),{cacheHint:l.cacheKey,get:function get(){return(0,u.createTransposeProgramInfo)(n[1],l.perm);}}),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.customData.wT&&(e.customData.wT=O);var A=[n[0],O];p&&(d||1!==n[2].dims.length?A.push(n[2]):A.push(n[2].reshape([n[2].dims[0],1,1]))),e.compute((0,a.createConv2DMatMulProgramInfoLoader)(A,s,y,x,T,S,p,!0),{inputs:A});}(e,e.inputs,n);};},3822:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createConv2DMatMulProgramInfoLoader=void 0;var r=n(1163),o=n(9456);t.createConv2DMatMulProgramInfoLoader=function(e,t,n,i,a,s,u,l){var c=function(e,t){return{name:\"Conv2DMatMul\",inputTypes:e?[r.GpuDataType[\"default\"],r.GpuDataType[\"default\"],r.GpuDataType[\"default\"]]:[r.GpuDataType[\"default\"],r.GpuDataType[\"default\"]],cacheHint:t};}(u,t.cacheKey);return Object.assign(Object.assign({},c),{get:function get(){return(0,o.createConv2DMatMulProgramInfo)(e,c,t,n,i,a,s,u,l);}});};},3997:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseInternalActivationAttributes=t.getActicationSnippet=void 0;var r=n(6952);t.getActicationSnippet=function(e){switch(e.activation){case\"Relu\":return{activationFunction:\"\",applyActivation:\"value = max(value, 0.0);\"};case\"Sigmoid\":return{activationFunction:\"\",applyActivation:\"value = (1.0 / (1.0 + exp(-value)));\"};case\"Clip\":return{activationFunction:\"const clip_min_=f32(\".concat(e.clipMin,\");const clip_max_=f32(\").concat(e.clipMax,\");\"),applyActivation:\"value = clamp(value, clip_min_, clip_max_);\"};default:return{activationFunction:\"\",applyActivation:\"\"};}},t.parseInternalActivationAttributes=function(e){var t=(null==e?void 0:e.activation)||\"\";if(\"Clip\"===t){var _ref40=(null==e?void 0:e.activation_params)||[r.MIN_CLIP,r.MAX_CLIP],_ref41=_slicedToArray(_ref40,2),_n182=_ref41[0],o=_ref41[1];return{activation:t,clipMax:o,clipMin:_n182,activationCacheKey:\"\".concat(t,\":\").concat(_n182,\",\").concat(o)};}return{activation:t,activationCacheKey:t};};},4271:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseGemmAttributes=t.gemm=void 0;var r=n(6952),o=n(387),i=n(1163);t.gemm=function(e,t){(function(e){if(!e)throw new Error(\"Input is missing\");if(e.length<2||e.length>3)throw new Error(\"Invaid input number.\");if(3===e.length&&e[2].dims.length>2)throw new Error(\"Invalid input shape of C\");if(1!==e[0].dataType||1!==e[1].dataType||3===e.length&&1!==e[2].dataType)throw new Error(\"Invalid input type.\");if(e[0].dataType!==e[1].dataType||3===e.length&&e[0].dataType!==e[2].dataType)throw new Error(\"Input types are mismatched\");})(e.inputs),e.compute(function(e,t){var n={name:\"Gemm\",inputTypes:3===e.length?[i.GpuDataType[\"default\"],i.GpuDataType[\"default\"],i.GpuDataType[\"default\"]]:[i.GpuDataType[\"default\"],i.GpuDataType[\"default\"]],cacheHint:t.cacheKey};return Object.assign(Object.assign({},n),{get:function get(){return function(e,t,n){var o=t[0].dims.slice(),a=t[1].dims.slice(),_r$GemmUtil$getShapeO=r.GemmUtil.getShapeOfGemmResult(o,n.transA,a,n.transB,3===t.length?t[2].dims:void 0),_r$GemmUtil$getShapeO2=_slicedToArray(_r$GemmUtil$getShapeO,3),s=_r$GemmUtil$getShapeO2[0],u=_r$GemmUtil$getShapeO2[1],l=_r$GemmUtil$getShapeO2[2],c=[s,u];if(!c)throw new Error(\"Can't use gemm on the given tensors\");var p=r.ShapeUtil.size(c);var d=\"\";n.transA&&n.transB?d=\"value += a[k * M + m] * b[n * K + k];\":n.transA&&!n.transB?d=\"value += a[k * M + m] * b[k * N + n];\":!n.transA&&n.transB?d=\"value += a[m * K + k] * b[n * K + k];\":n.transA||n.transB||(d=\"value += a[m * K + k] * b[k * N + n];\");var f=\"f32\",h=1===n.alpha?\"\":\"value *= alpha;\",g=3===t.length?\"value += beta * c[\".concat(function(e,t,n){if(0===n.length)return\"0u\";var r=1===n.length&&1!==e||2===n.length&&n[0]!==e,o=n[n.length-1]!==t;var i=\"0u\";return r||(i+=\"+ m * \".concat(n[n.length-1],\"u\")),o||(i+=\"+n\"),i;}(s,u,t[2].dims),\"];\"):\"\",m=[\"@group(0) @binding(0) var<storage, read> a : array<\".concat(f,\">;\"),\"@group(0) @binding(1) var<storage, read> b : array<\".concat(f,\">;\")];return 3===t.length&&m.push(\"@group(0) @binding(2) var<storage, read> c : array<\".concat(f,\">;\")),Object.assign(Object.assign({},e),{outputs:[{dims:c,dataType:t[0].dataType,gpuDataType:i.GpuDataType[\"default\"]}],getShaderSource:function getShaderSource(e){return\"\\n  const M: u32 = \".concat(s,\"u;\\n  const N: u32 = \").concat(u,\"u;\\n  const K: u32 = \").concat(l,\"u;\\n  const alpha = \").concat(f,\"(\").concat(n.alpha,\");\\n  const beta = \").concat(f,\"(\").concat(n.beta,\");\\n\\n  \").concat(m.join(\"\\n\"),\"\\n  @group(0) @binding(\").concat(t.length,\") var<storage, read_write> output : array<\").concat(f,\">;\\n\\n  \").concat(e.mainStart(),\"\\n    \").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(p),\"\\n\\n    let m = global_id.x / N;\\n    let n = global_id.x % N;\\n\\n    var value = \").concat(f,\"(0);\\n    for (var k: u32 = 0u; k<\").concat(l,\"u; k++) {\\n      \").concat(d,\"\\n    }\\n\\n    \").concat(h,\"\\n    \").concat(g,\"\\n    output[global_id.x] = value;\\n\\n  }\");},dispatchGroup:function dispatchGroup(){return{x:Math.ceil(p/64)};}});}(n,e,t);}});}(e.inputs,t));},t.parseGemmAttributes=function(e){return(0,o.createAttributeWithCacheKey)(e);};},1522:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.matMul=t.createMatmulProgramInfoLoader=void 0;var r=n(6952),o=n(1163),i=n(3997);t.createMatmulProgramInfoLoader=function(e,t){var n=(a=e.length>2,s=t.activationCacheKey,{name:\"MatMul\",inputTypes:a?[o.GpuDataType[\"default\"],o.GpuDataType[\"default\"],o.GpuDataType[\"default\"]]:[o.GpuDataType[\"default\"],o.GpuDataType[\"default\"]],cacheHint:s});var a,s;return Object.assign(Object.assign({},n),{get:function get(){return function(e,t,n){var a=t[0].dims,s=t[1].dims,u=r.BroadcastUtil.calcShape(a,s,!0);if(!u)throw new Error(\"Can't use matmul on the given tensors\");var l=r.ShapeUtil.size(u),c=\"f32\",_ref42=(0,i.getActicationSnippet)(n),p=_ref42.activationFunction,d=_ref42.applyActivation,f=u[u.length-2],h=a[a.length-1],g=u[u.length-1];return Object.assign(Object.assign({},e),{outputs:[{dims:u,dataType:t[0].dataType,gpuDataType:o.GpuDataType[\"default\"]}],getShaderSource:function getShaderSource(e){return\"\\n  const M: u32 = \".concat(f,\"u;\\n  const N: u32 = \").concat(g,\"u;\\n  const K: u32 = \").concat(h,\"u;\\n\\n  @group(0) @binding(0) var<storage, read> a : array<\").concat(c,\">;\\n  @group(0) @binding(1) var<storage, read> b : array<\").concat(c,\">;\\n  @group(0) @binding(2) var<storage, read_write> output : array<\").concat(c,\">;\\n\\n  \").concat(p,\"\\n\\n  \").concat(e.mainStart(),\"\\n    \").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(l),\"\\n\\n    let stack = global_idx / (M * N);\\n    let mn = global_idx % (M * N);\\n    let n = global_idx % N;\\n    let m = mn / N;\\n\\n    let offsetA = stack * (M * K);\\n    let offsetB = stack * (K * N);\\n\\n    var value = \").concat(c,\"(0);\\n    for (var k: u32 = 0u; k<\").concat(h,\"u; k++) {\\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\\n    }\\n    \").concat(d,\"\\n    output[global_idx] = value;\\n  }\");},dispatchGroup:function dispatchGroup(){return{x:Math.ceil(l/64)};}});}(n,e,t);}});},t.matMul=function(e){(function(e){if(!e||2!==e.length)throw new Error(\"MatMul requires 2 inputs.\");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error(\"shared dimension does not match.\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\"inputs should be float type\");})(e.inputs),e.compute((0,t.createMatmulProgramInfoLoader)(e.inputs,{activation:\"\",activationCacheKey:\"\"}));};},5262:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.globalMaxPool=t.parseGlobalMaxPoolAttributes=t.parseMaxPoolAttributes=t.maxPool=t.globalAveragePool=t.parseGlobalAveragePoolAttributes=t.averagePool=t.parseAveragePoolAttributes=void 0;var r=n(6952),o=n(387),i=n(1163),a=n(2075),s=function s(e){if(!e||1!==e.length)throw new Error(\"Pool ops requires 1 input.\");if(4!==e[0].dims.length)throw new Error(\"Pool ops supports 2-D inputs only for now.\");if(1!==e[0].dataType)throw new Error(\"Invalid input type.\");},u=function u(e,t,n){var o=\"NHWC\"===t.format,i=o?[e[0].dims[0],e[0].dims[3],e[0].dims[1],e[0].dims[2]]:e[0].dims.slice(),a=Object.hasOwnProperty.call(t,\"dilations\"),s=t.kernelShape.slice(),u=t.strides.slice(),l=a?t.dilations.slice():[],c=t.pads.slice();r.PoolConvUtil.adjustPoolAttributes(n,i,s,u,l,c);var p=r.PoolConvUtil.computePoolOutputShape(n,i,u,l,s,c,t.autoPad),d=Object.assign({},t);return a?Object.assign(d,{kernelShape:s,strides:u,pads:c,dilations:l,cacheKey:t.cacheKey}):Object.assign(d,{kernelShape:s,strides:u,pads:c,cacheKey:t.cacheKey}),[d,o?[p[0],p[2],p[3],p[1]]:p];},l=function l(e,t,n,o,i,s,u,_l11){var c=\"NHWC\"===o.format,p=t.length,d=r.ShapeUtil.size(n),f=(0,a.createIndicesHelper)(\"output\",n),h=(0,a.createIndicesHelper)(\"x\",t);if(o.kernelShape.length<=2){var _n183=o.kernelShape[o.kernelShape.length-1],_r73=o.strides[o.strides.length-1],_a28=o.pads[o.pads.length/2-1],g=p-(c?2:1);var m=\"\",b=\"\",y=\"\";if(m=_a28+o.pads[o.pads.length-1]!==0?\"\\n              for (var i: u32 = 0u; i < \".concat(_n183,\"u; i++) {\\n                xIndices[\").concat(g,\"] = indices[\").concat(g,\"] * \").concat(_r73,\" - \").concat(_a28,\" + i;\\n                if (xIndices[\").concat(g,\"] < 0 || xIndices[\").concat(g,\"] >= \").concat(t[g],\") {\\n                  pad++;\\n                  continue;\\n                }\\n                let x_val = x[\").concat(h.i2oExpression(\"xIndices\"),\"];\\n                \").concat(i,\"\\n              }\"):\"\\n              for (var i: u32 = 0u; i < \".concat(_n183,\"u; i++) {\\n                xIndices[\").concat(g,\"] = indices[\").concat(g,\"] * \").concat(_r73,\" - \").concat(_a28,\" + i;\\n                let x_val = x[\").concat(h.i2oExpression(\"xIndices\"),\"];\\n                \").concat(i,\"\\n              }\"),2===o.kernelShape.length){var _e123=o.kernelShape[o.kernelShape.length-2],_r74=o.strides[o.strides.length-2],_i41=o.pads[o.pads.length/2-2],_a29=o.pads[o.pads.length-2],_s13=p-(c?3:2),_u32=t[_s13];b=_i41+_a29!==0?\"\\n                for (var j: u32 = 0u; j < \".concat(_e123,\"u; j++) {\\n                  xIndices[\").concat(_s13,\"] = indices[\").concat(_s13,\"] * \").concat(_r74,\" - \").concat(_i41,\" + j;\\n                  if (xIndices[\").concat(_s13,\"] < 0 || xIndices[\").concat(_s13,\"] >= \").concat(_u32,\") {\\n                    pad+= \").concat(_n183,\";\\n                    continue;\\n                  }\\n              \"):\"\\n                for (var j: u32 = 0u; j < \".concat(_e123,\"u; j++) {\\n                  xIndices[\").concat(_s13,\"] = indices[\").concat(_s13,\"] * \").concat(_r74,\" - \").concat(_i41,\" + j;\\n                \"),y=\"\\n              }\\n            \";}return\"\\n            @group(0) @binding(0) var<storage, read> x : array<\".concat(u,\">;\\n            @group(0) @binding(1) var<storage, read_write> output : array<\").concat(u,\">;\\n\\n            \").concat(f.o2iImpl,\"\\n            \").concat(h.i2oImpl,\"\\n\\n            \").concat(e.mainStart(),\"\\n              \").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(d),\"\\n\\n              \").concat(f.indicesVariableDeclaration(\"indices\"),\"\\n              \").concat(f.o2iCall(\"global_idx\",\"indices\"),\"\\n              \").concat(f.indicesVariableDeclaration(\"xIndices\"),\"\\n              \").concat(f.o2iCall(\"global_idx\",\"xIndices\"),\"\\n\\n              var value: \").concat(u,\" = \").concat(u,\"(\").concat(_l11,\");\\n              var pad = 0;\\n              \").concat(b,\"\\n              \").concat(m,\"\\n              \").concat(y,\"\\n              \").concat(s,\"\\n\\n              output[global_idx] = value;\\n            }\");}{if(c)throw new Error(\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\");var _n184=r.ShapeUtil.size(o.kernelShape),_a30=r.ShapeUtil.computeStrides(o.kernelShape),_g4=_a30.length,_m3=o.pads.length;var _b2=\"\";return _b2=o.pads.reduce(function(e,t){return e+t;})?\"\\n                if (xIndices[j] >= inputDims[j]) {\\n                  pad++;\\n                  isPad = true;\\n                  break;\\n                }\\n              }\\n              if (!isPad) {\\n                let x_val = x[\".concat(h.i2oExpression(\"xIndices\"),\"];\\n                \").concat(i,\"\\n              }\"):\"\\n              }\\n              let x_val = x[\".concat(h.i2oExpression(\"xIndices\"),\"];\\n              \").concat(i,\"\\n            \"),\"\\n            @group(0) @binding(0) var<storage, read> x : array<\".concat(u,\">;\\n            @group(0) @binding(1) var<storage, read_write> output : array<\").concat(u,\">;\\n\\n            \").concat(f.o2iImpl,\"\\n            \").concat(h.i2oImpl,\"\\n\\n            const pads = array<u32, \").concat(_m3,\">(\").concat(o.pads.map(function(e){return\"\".concat(e,\"u\");}).join(\",\"),\");\\n            const inputDims = array<u32, \").concat(p,\">(\").concat(t.map(function(e){return\"\".concat(e,\"u\");}).join(\",\"),\");\\n            const kernelStrides = array<u32, \").concat(_g4,\">(\").concat(_a30.map(function(e){return\"\".concat(e,\"u\");}).join(\",\"),\");\\n            const strides = array<u32, \").concat(_g4,\">(\").concat(o.strides.map(function(e){return\"\".concat(e,\"u\");}).join(\",\"),\");\\n\\n            \").concat(e.mainStart(),\"\\n              \").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(d),\"\\n\\n              \").concat(f.indicesVariableDeclaration(\"indices\"),\"\\n              \").concat(f.o2iCall(\"global_idx\",\"indices\"),\"\\n              \").concat(f.indicesVariableDeclaration(\"xIndices\"),\"\\n              \").concat(f.o2iCall(\"global_idx\",\"xIndices\"),\"\\n\\n              var offsets: array<u32, \").concat(_g4,\">;\\n\\n              var value = \").concat(u,\"(\").concat(_l11,\");\\n              var pad = 0;\\n              var isPad = false;\\n\\n              for (var i: u32 = 0u; i < \").concat(_n184,\"u; i++) {\\n                var offset = i;\\n                for (var j = 0u; j < \").concat(_g4-1,\"u; j++) {\\n                  offsets[j] = offset / kernelStrides[j];\\n                  offset -= offsets[j] * kernelStrides[j];\\n                }\\n                offsets[\").concat(_g4-1,\"] = offset;\\n\\n                isPad = false;\\n                for (var j = \").concat(p-_g4,\"u; j < \").concat(p,\"u; j++) {\\n                  xIndices[j] = indices[j] * strides[j - \").concat(p-_g4,\"u]\\n                    + offsets[j - \").concat(p-_g4,\"u] - pads[j - 2u];\\n                  \").concat(_b2,\"\\n              }\\n              \").concat(s,\"\\n\\n              output[global_idx] = value;\\n            }\");}},c=function c(e){return{format:e.format,autoPad:[\"NOTSET\",\"VALID\",\"SAME_UPPER\",\"SAME_LOWER\"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads};},p=function p(e,t,n,o){var _u33=u(e,o,n),_u34=_slicedToArray(_u33,2),a=_u34[0],s=_u34[1],c=r.ShapeUtil.size(a.kernelShape),p=\"f32\";var d=\"\";return a.countIncludePad?d+=\"value /= \".concat(p,\"(\").concat(c,\");\"):d+=\"value /= \".concat(p,\"(\").concat(c,\" - pad);\"),Object.assign(Object.assign({},t),{outputs:[{dims:s,dataType:e[0].dataType,gpuDataType:i.GpuDataType[\"default\"]}],getShaderSource:function getShaderSource(t){return l(t,e[0].dims,s,a,\"value += x_val;\",d,p,\"0.0\");},dispatchGroup:function dispatchGroup(){return{x:Math.ceil(r.ShapeUtil.size(s)/64)};}});};t.parseAveragePoolAttributes=function(e){var t=0!==e.count_include_pad,n=c(e);if(0!==n.ceilMode)throw new Error(\"using ceil() in shape computation is not yet supported for AveragePool\");return(0,o.createAttributeWithCacheKey)(Object.assign({countIncludePad:t},n));},t.averagePool=function(e,t){s(e.inputs);var n={name:\"AveragePool\",inputTypes:[i.GpuDataType[\"default\"]],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:function get(){return p(e.inputs,n,!1,t);}}));};var d={autoPad:\"\",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:\"\"};t.parseGlobalAveragePoolAttributes=function(e){var t=e.format;return Object.assign(Object.assign({format:t},d),{cacheKey:t});},t.globalAveragePool=function(e,t){s(e.inputs);var n={name:\"GlobalAveragePool\",inputTypes:[i.GpuDataType[\"default\"]],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:function get(){return p(e.inputs,n,!0,t);}}));};var f=function f(e,t,n,o){var _u35=u(e,o,n),_u36=_slicedToArray(_u35,2),a=_u36[0],s=_u36[1];return Object.assign(Object.assign({},t),{outputs:[{dims:s,dataType:e[0].dataType,gpuDataType:i.GpuDataType[\"default\"]}],getShaderSource:function getShaderSource(t){return l(t,e[0].dims,s,a,\"\\n      value = max(x_val, value);\\n    \",\"\",\"f32\",\"-1e5\");},dispatchGroup:function dispatchGroup(){return{x:Math.ceil(r.ShapeUtil.size(s)/64)};}});};t.maxPool=function(e,t){s(e.inputs);var n={name:\"MaxPool\",inputTypes:[i.GpuDataType[\"default\"]],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:function get(){return f(e.inputs,n,!1,t);}}));},t.parseMaxPoolAttributes=function(e){var t=e.storage_order,n=e.dilations,r=c(e);if(0!==t)throw new Error(\"column major storage order is not yet supported for MaxPool\");if(0!==r.ceilMode)throw new Error(\"using ceil() in shape computation is not yet supported for MaxPool\");return(0,o.createAttributeWithCacheKey)(Object.assign({storageOrder:t,dilations:n},r));},t.parseGlobalMaxPoolAttributes=function(e){var t=e.format;return Object.assign(Object.assign({format:t},d),{cacheKey:t});},t.globalMaxPool=function(e,t){s(e.inputs);var n={name:\"GlobalMaxPool\",inputTypes:[i.GpuDataType[\"default\"]],cacheHint:t.cacheKey};e.compute(Object.assign(Object.assign({},n),{get:function get(){return f(e.inputs,n,!0,t);}}));};},2625:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.parseTransposeAttributes=t.transpose=t.createTransposeProgramInfo=t.transposeProgramMetadata=void 0;var r=n(6952),o=n(387),i=n(1163),a=n(2075);t.transposeProgramMetadata={name:\"Transpose\",inputTypes:[i.GpuDataType[\"default\"]]};var s=function s(e,t){return t&&t.length!==e.length?_toConsumableArray(e.keys()).reverse():t;};t.createTransposeProgramInfo=function(e,n){var o=e.dims,u=s(o,n),l=function(e,t){return r.ShapeUtil.sortBasedOnPerm(e,s(e,t));}(o,u),c=o.length,p=r.ShapeUtil.size(l),d=(0,a.createIndicesHelper)(\"output\",l),f=(0,a.createIndicesHelper)(\"a\",o);return Object.assign(Object.assign({},t.transposeProgramMetadata),{outputs:[{dims:l,dataType:e.dataType,gpuDataType:i.GpuDataType[\"default\"]}],getShaderSource:function getShaderSource(e){return\"\\n  @group(0) @binding(0) var<storage, read> a : array<f32>;\\n  @group(0) @binding(1) var<storage, read_write> output : array<f32>;\\n\\n  \".concat(function(e,t){var n=[];n.push(\"fn perm(a: ptr<function, array<u32, \".concat(t,\">>, i: ptr<function, array<u32, \").concat(t,\">>) {\"));for(var _r75=0;_r75<t;++_r75)n.push(\"\\t(*a)[\".concat(e[_r75],\"]=(*i)[\").concat(_r75,\"];\"));return n.push(\"\\t}\"),n.join(\"\\n\");}(u,c),\"\\n  \").concat(d.o2iImpl,\"\\n  \").concat(f.i2oImpl,\"\\n\\n  \").concat(e.mainStart(),\"\\n    \").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(p),\"\\n\\n    \").concat(d.indicesVariableDeclaration(\"indices\"),\"\\n    \").concat(d.o2iCall(\"global_idx\",\"indices\"),\"\\n    \").concat(f.indicesVariableDeclaration(\"aIndices\"),\"\\n    perm(&aIndices, &indices);\\n\\n    output[global_idx] = a[\").concat(f.i2oExpression(\"aIndices\"),\"];\\n  }\");},dispatchGroup:function dispatchGroup(){return{x:Math.ceil(p/64)};}});},t.transpose=function(e,n){(function(e){if(!e||1!==e.length)throw new Error(\"Transpose requires 1 input.\");if(1!==e[0].dataType)throw new Error(\"input should be float tensor\");})(e.inputs),e.compute(Object.assign(Object.assign({},t.transposeProgramMetadata),{cacheHint:n.cacheKey,get:function get(){return(0,t.createTransposeProgramInfo)(e.inputs[0],n.perm);}}));},t.parseTransposeAttributes=function(e){return(0,o.createAttributeWithCacheKey)({perm:e.perm});};},9302:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.thresholdedRelu=t.tanh=t.tan=t.sqrt=t.sinh=t.sin=t.sigmoid=t.relu=t.reciprocal=t.neg=t.leakyRelu=t.floor=t.exp=t.erf=t.elu=t.parseAlphaAttributes=t.cosh=t.cos=t.ceil=t.clip=t.clipV10=t.atanh=t.atan=t.asinh=t.asin=t.acosh=t.acos=t.abs=void 0;var r=n(6952),o=n(387),i=n(1163),a=function a(e,t,n,o,_a31){var s={name:t,inputTypes:[i.GpuDataType[\"default\"]],cacheHint:_a31};return Object.assign(Object.assign({},s),{get:function get(){return function(e,t,n,o){return Object.assign(Object.assign({},e),{getShaderSource:function getShaderSource(e){return function(e,t,n,r){var o=Math.ceil(t/4);var i=\"\";return i=\"string\"==typeof n?\"\".concat(n,\"(a)\"):n(\"a\"),\"\\n  @group(0) @binding(0) var<storage, read> inputData : array<vec4<f32>>;\\n  @group(0) @binding(1) var<storage, read_write> outputData : array<vec4<f32>>;\\n\\n  \".concat(null!=r?r:\"\",\"\\n\\n  \").concat(e.mainStart(),\"\\n    \").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(o),\"\\n\\n    let a = inputData[global_idx];\\n    outputData[global_idx] = \").concat(i,\";\\n  }\");}(e,r.ShapeUtil.size(t.dims),n,o);},outputs:[{dims:t.dims,dataType:t.dataType,gpuDataType:i.GpuDataType[\"default\"]}],dispatchGroup:function dispatchGroup(e){return{x:Math.ceil(r.ShapeUtil.size(e[0].dims)/64/4)};}});}(s,e,n,o);}});};t.abs=function(e){e.compute(a(e.inputs[0],\"Abs\",\"abs\"));},t.acos=function(e){e.compute(a(e.inputs[0],\"Acos\",\"acos\"));},t.acosh=function(e){e.compute(a(e.inputs[0],\"Acosh\",\"acosh\"));},t.asin=function(e){e.compute(a(e.inputs[0],\"Asin\",\"asin\"));},t.asinh=function(e){e.compute(a(e.inputs[0],\"Asinh\",\"asinh\"));},t.atan=function(e){e.compute(a(e.inputs[0],\"Atan\",\"atan\"));},t.atanh=function(e){e.compute(a(e.inputs[0],\"Atanh\",\"atanh\"));},t.clipV10=function(e,t){e.compute(a(e.inputs[0],\"Clip\",function(e){return\"clamp(\".concat(e,\", clip_min_, clip_max_)\");},\"\\n    const clip_min_: vec4<f32> = vec4(f32(\".concat(t.min,\"));\\n    const clip_max_: vec4<f32> = vec4(f32(\").concat(t.max,\"));\\n\"),t.cacheKey),{inputs:[0]});},t.clip=function(e){var n=function(e){var t=e.length>=2?e[1].getFloat32Array()[0]:r.MIN_CLIP,n=e.length>=3?e[2].getFloat32Array()[0]:r.MAX_CLIP;return(0,o.createAttributeWithCacheKey)({min:t,max:n});}(e.inputs);(0,t.clipV10)(e,n);},t.ceil=function(e){e.compute(a(e.inputs[0],\"Ceil\",\"ceil\"));},t.cos=function(e){e.compute(a(e.inputs[0],\"Cos\",\"cos\"));},t.cosh=function(e){e.compute(a(e.inputs[0],\"Cosh\",\"cosh\"));},t.parseAlphaAttributes=function(e){return(0,o.createAttributeWithCacheKey)(e);},t.elu=function(e,t){e.compute(a(e.inputs[0],\"Elu\",function(e){return\"elu_vf32(\".concat(e,\")\");},\"\\n  const elu_alpha_: f32 = f32(\".concat(t.alpha,\");\\n\\n  fn elu_f32(a: f32) -> f32 {\\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\\n  }\\n\\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\\n  }\"),t.cacheKey));},t.erf=function(e){e.compute(a(e.inputs[0],\"Erf\",function(e){return\"erf_vf32(\".concat(e,\")\");},\"\\n  const r0: f32 = 0.3275911;\\n  const r1: f32 = 0.254829592;\\n  const r2: f32 = -0.284496736;\\n  const r3: f32 = 1.421413741;\\n  const r4: f32 = -1.453152027;\\n  const r5: f32 = 1.061405429;\\n\\n  fn erf_vf32(v: vec4<f32>) -> vec4<f32> {\\n    let absv = abs(v);\\n    let x = 1.0 / (1.0 + r0 * absv);\\n    return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\\n  }\"));},t.exp=function(e){e.compute(a(e.inputs[0],\"Exp\",\"exp\"));},t.floor=function(e){e.compute(a(e.inputs[0],\"Floor\",\"floor\"));},t.leakyRelu=function(e,t){e.compute(a(e.inputs[0],\"LeakyRelu\",function(e){return\"select(leaky_relu_alpha_ * \".concat(e,\", \").concat(e,\", \").concat(e,\" >= vec4<f32>(0.0))\");},\"const leaky_relu_alpha_: f32 = f32(\".concat(t.alpha,\");\"),t.cacheKey));},t.neg=function(e){e.compute(a(e.inputs[0],\"Neg\",function(e){return\"-\".concat(e);}));},t.reciprocal=function(e){e.compute(a(e.inputs[0],\"Reciprocal\",function(e){return\"1.0/\".concat(e);}));},t.relu=function(e){e.compute(a(e.inputs[0],\"Relu\",function(e){return\"select(vec4<f32>(0.0), \".concat(e,\", \").concat(e,\" > vec4<f32>(0.0))\");}));},t.sigmoid=function(e){e.compute(a(e.inputs[0],\"Sigmoid\",function(e){return\"(1.0 / (1.0 + exp(-\".concat(e,\")))\");}));},t.sin=function(e){e.compute(a(e.inputs[0],\"Sin\",\"sin\"));},t.sinh=function(e){e.compute(a(e.inputs[0],\"Sinh\",\"sinh\"));},t.sqrt=function(e){e.compute(a(e.inputs[0],\"Sqrt\",\"sqrt\"));},t.tan=function(e){e.compute(a(e.inputs[0],\"Tan\",\"tan\"));},t.tanh=function(e){e.compute(a(e.inputs[0],\"Tanh\",\"tanh\"));},t.thresholdedRelu=function(e,t){return e.compute(a(e.inputs[0],\"ThresholdedRelu\",function(e){return\"select(vec4<f32>(0.0), \".concat(e,\", \").concat(e,\" > thresholded_relu_alpha_)\");},\"const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(\".concat(t.alpha,\");\"),t.cacheKey)),0;};},8305:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.ProgramManager=void 0;var r=n(4955),o=n(2075);t.ProgramManager=/*#__PURE__*/function(){function _class34(e){_classCallCheck(this,_class34);this.backend=e,this.repo=new Map(),this.attributesBound=!1;}_createClass(_class34,[{key:\"getArtifact\",value:function getArtifact(e){return this.repo.get(e);}},{key:\"setArtifact\",value:function setArtifact(e,t){this.repo.set(e,t);}},{key:\"run\",value:function run(e,t,n,r){var _this43=this;var o=this.backend.device,i=this.backend.getComputePassEncoder();this.backend.profilingEnabled&&i.writeTimestamp(this.backend.profilingQuerySet,0),i.setPipeline(e.computePipeline);var a=[];var _iterator38=_createForOfIteratorHelper(t),_step38;try{for(_iterator38.s();!(_step38=_iterator38.n()).done;){var _e125=_step38.value;a.push({binding:a.length,resource:{buffer:_e125.buffer}});}}catch(err){_iterator38.e(err);}finally{_iterator38.f();}var _iterator39=_createForOfIteratorHelper(n),_step39;try{for(_iterator39.s();!(_step39=_iterator39.n()).done;){var _e126=_step39.value;a.push({binding:a.length,resource:{buffer:_e126.buffer}});}}catch(err){_iterator39.e(err);}finally{_iterator39.f();}var s=o.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:a});if(i.setBindGroup(0,s),i.dispatchWorkgroups.apply(i,_toConsumableArray(r)),this.backend.pendingDispatchNumber++,this.backend.profilingEnabled){i.writeTimestamp(this.backend.profilingQuerySet,1);var _e124=this.backend.gpuDataManager.create(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),_t94=this.backend.gpuDataManager.create(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet,0,2,_e124.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(_e124.buffer,0,_t94.buffer,0,16),this.backend.flush();var _n185=this.backend.currentKernelId,_r76=this.backend.kernels.get(_n185)[0];_t94.buffer.mapAsync(GPUMapMode.READ).then(function(){var o=new BigUint64Array(_t94.buffer.getMappedRange()),i=o[0],a=o[1];_t94.buffer.unmap(),void 0===_this43.backend.profilingTimeBase&&(_this43.backend.profilingTimeBase=i);var s=Number(i-_this43.backend.profilingTimeBase),u=Number(a-_this43.backend.profilingTimeBase);if(!Number.isSafeInteger(s)||!Number.isSafeInteger(u))throw new RangeError(\"incorrect timestamp range\");_this43.backend.gpuDataManager.release(_e124.id),_this43.backend.gpuDataManager.release(_t94.id),console.log(\"[profiling] kernel \\\"\".concat(_n185,\"|\").concat(_r76,\"\\\" execution time: \").concat(u-s,\" ns\"));});}this.backend.pendingDispatchNumber>=16&&this.backend.flush();}},{key:\"dispose\",value:function dispose(){}},{key:\"build\",value:function build(e,t){var n=this.backend.device,i=e.getShaderSource((0,o.createShaderHelper)(t)),a=n.createShaderModule({code:i});return(0,r.LOG_DEBUG)(\"verbose\",function(){return\"[WebGPU] shader code: \".concat(i);}),{programInfo:e,computePipeline:n.createComputePipeline({compute:{module:a,entryPoint:\"main\"},layout:\"auto\"})};}},{key:\"normalizeDispatchGroupSize\",value:function normalizeDispatchGroupSize(e){var t=\"number\"==typeof e?e:e.x,n=\"number\"==typeof e?1:e.y||1,r=\"number\"==typeof e?1:e.z||1,o=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=o&&n<=o&&r<=o)return[t,n,r];var i=t*n*r;var a=Math.ceil(Math.sqrt(i));if(a>o){if(a=Math.ceil(Math.cbrt(i)),a>o)throw new Error(\"Total dispatch size exceeds WebGPU maximum.\");return[a,a,a];}return[a,a,1];}}]);return _class34;}();},1163:function _(e,t){\"use strict\";var n;Object.defineProperty(t,\"__esModule\",{value:!0}),t.GpuDataType=void 0,(n=t.GpuDataType||(t.GpuDataType={}))[n[\"default\"]=0]=\"default\",n[n.upload=1]=\"upload\",n[n.profile=2]=\"profile\";},3899:function _(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=function(e,n,r,o){if(\"object\"==_typeof2(e)&&null!==e){if(r.has(e))throw new Error(\"Circular reference in options\");r.add(e);}Object.entries(e).forEach(function(_ref43){var _ref44=_slicedToArray(_ref43,2),e=_ref44[0],i=_ref44[1];var a=n?n+e:e;if(\"object\"==_typeof2(i))(0,t.iterateExtraOptions)(i,a+\".\",r,o);else if(\"string\"==typeof i||\"number\"==typeof i)o(a,i.toString());else{if(\"boolean\"!=typeof i)throw new Error(\"Can't handle extra config type: \"+_typeof2(i));o(a,i?\"1\":\"0\");}});};},9544:function _(e,t,n){\"use strict\";var r,o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!(\"get\"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function get(){return t[n];}}),Object.defineProperty(e,r,o);}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n];}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\"default\",{enumerable:!0,value:t});}:function(e,t){e[\"default\"]=t;}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\"default\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t;};Object.defineProperty(t,\"__esModule\",{value:!0}),t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initOrt=t.initWasm=void 0;var s=n(8453),u=n(7675),l=a(n(1259)),c=n(263),p=function p(){return!!s.env.wasm.proxy&&\"undefined\"!=typeof document;};var d,f,h,g=!1,m=!1,b=!1;var y=[],w=[],_=[],v=[],x=[],T=[],S=function S(){if(g||!m||b||!d)throw new Error(\"worker not ready\");},O=function O(e){switch(e.data.type){case\"init-wasm\":g=!1,e.data.err?(b=!0,f[1](e.data.err)):(m=!0,f[0]());break;case\"init-ort\":e.data.err?h[1](e.data.err):h[0]();break;case\"create_allocate\":e.data.err?y.shift()[1](e.data.err):y.shift()[0](e.data.out);break;case\"create_finalize\":e.data.err?w.shift()[1](e.data.err):w.shift()[0](e.data.out);break;case\"create\":e.data.err?_.shift()[1](e.data.err):_.shift()[0](e.data.out);break;case\"release\":e.data.err?v.shift()[1](e.data.err):v.shift()[0]();break;case\"run\":e.data.err?x.shift()[1](e.data.err):x.shift()[0](e.data.out);break;case\"end-profiling\":e.data.err?T.shift()[1](e.data.err):T.shift()[0]();}},A=\"undefined\"!=typeof document?null===(r=null===document||void 0===document?void 0:document.currentScript)||void 0===r?void 0:r.src:void 0;t.initWasm=/*#__PURE__*/_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee58(){return _regeneratorRuntime2().wrap(function _callee58$(_context59){while(1)switch(_context59.prev=_context59.next){case 0:if(!p()){_context59.next=8;break;}if(!m){_context59.next=3;break;}return _context59.abrupt(\"return\");case 3:if(!g){_context59.next=5;break;}throw new Error(\"multiple calls to 'initWasm()' detected.\");case 5:if(!b){_context59.next=7;break;}throw new Error(\"previous call to 'initWasm()' failed.\");case 7:return _context59.abrupt(\"return\",(g=!0,void 0===s.env.wasm.wasmPaths&&A&&0!==A.indexOf(\"blob:\")&&(s.env.wasm.wasmPaths=A.substr(0,+A.lastIndexOf(\"/\")+1)),new Promise(function(e,t){null==d||d.terminate(),d=n(8050).Z(),d.onmessage=O,f=[e,t];var r={type:\"init-wasm\",\"in\":s.env.wasm};d.postMessage(r);})));case 8:return _context59.abrupt(\"return\",(0,c.initializeWebAssembly)(s.env.wasm));case 9:case\"end\":return _context59.stop();}},_callee58);})),t.initOrt=/*#__PURE__*/function(){var _ref46=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee59(e,t){return _regeneratorRuntime2().wrap(function _callee59$(_context60){while(1)switch(_context60.prev=_context60.next){case 0:if(!p()){_context60.next=2;break;}return _context60.abrupt(\"return\",(S(),new Promise(function(n,r){h=[n,r];var o={type:\"init-ort\",\"in\":{numThreads:e,loggingLevel:t}};d.postMessage(o);})));case 2:l.initOrt(e,t);_context60.next=5;return(0,u.init)((0,c.getInstance)());case 5:case\"end\":return _context60.stop();}},_callee59);}));return function(_x60,_x61){return _ref46.apply(this,arguments);};}(),t.createSessionAllocate=/*#__PURE__*/function(){var _ref47=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee60(e){return _regeneratorRuntime2().wrap(function _callee60$(_context61){while(1)switch(_context61.prev=_context61.next){case 0:return _context61.abrupt(\"return\",p()?(S(),new Promise(function(t,n){y.push([t,n]);var r={type:\"create_allocate\",\"in\":{model:e}};d.postMessage(r,[e.buffer]);})):l.createSessionAllocate(e));case 1:case\"end\":return _context61.stop();}},_callee60);}));return function(_x62){return _ref47.apply(this,arguments);};}(),t.createSessionFinalize=/*#__PURE__*/function(){var _ref48=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee61(e,t){return _regeneratorRuntime2().wrap(function _callee61$(_context62){while(1)switch(_context62.prev=_context62.next){case 0:return _context62.abrupt(\"return\",p()?(S(),new Promise(function(n,r){w.push([n,r]);var o={type:\"create_finalize\",\"in\":{modeldata:e,options:t}};d.postMessage(o);})):l.createSessionFinalize(e,t));case 1:case\"end\":return _context62.stop();}},_callee61);}));return function(_x63,_x64){return _ref48.apply(this,arguments);};}(),t.createSession=/*#__PURE__*/function(){var _ref49=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee62(e,t){return _regeneratorRuntime2().wrap(function _callee62$(_context63){while(1)switch(_context63.prev=_context63.next){case 0:return _context63.abrupt(\"return\",p()?(S(),new Promise(function(n,r){_.push([n,r]);var o={type:\"create\",\"in\":{model:e,options:t}};d.postMessage(o,[e.buffer]);})):l.createSession(e,t));case 1:case\"end\":return _context63.stop();}},_callee62);}));return function(_x65,_x66){return _ref49.apply(this,arguments);};}(),t.releaseSession=/*#__PURE__*/function(){var _ref50=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee63(e){return _regeneratorRuntime2().wrap(function _callee63$(_context64){while(1)switch(_context64.prev=_context64.next){case 0:if(!p()){_context64.next=2;break;}return _context64.abrupt(\"return\",(S(),new Promise(function(t,n){v.push([t,n]);var r={type:\"release\",\"in\":e};d.postMessage(r);})));case 2:l.releaseSession(e);case 3:case\"end\":return _context64.stop();}},_callee63);}));return function(_x67){return _ref50.apply(this,arguments);};}(),t.run=/*#__PURE__*/function(){var _ref51=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee64(e,t,n,r,o){return _regeneratorRuntime2().wrap(function _callee64$(_context65){while(1)switch(_context65.prev=_context65.next){case 0:return _context65.abrupt(\"return\",p()?(S(),new Promise(function(i,a){x.push([i,a]);var s={type:\"run\",\"in\":{sessionId:e,inputIndices:t,inputs:n,outputIndices:r,options:o}};d.postMessage(s,l.extractTransferableBuffers(n));})):l.run(e,t,n,r,o));case 1:case\"end\":return _context65.stop();}},_callee64);}));return function(_x68,_x69,_x70,_x71,_x72){return _ref51.apply(this,arguments);};}(),t.endProfiling=/*#__PURE__*/function(){var _ref52=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee65(e){return _regeneratorRuntime2().wrap(function _callee65$(_context66){while(1)switch(_context66.prev=_context66.next){case 0:if(!p()){_context66.next=2;break;}return _context66.abrupt(\"return\",(S(),new Promise(function(t,n){T.push([t,n]);var r={type:\"end-profiling\",\"in\":e};d.postMessage(r);})));case 2:l.endProfiling(e);case 3:case\"end\":return _context66.stop();}},_callee65);}));return function(_x73){return _ref52.apply(this,arguments);};}();},7918:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.setRunOptions=void 0;var r=n(3899),o=n(9444),i=n(263);t.setRunOptions=function(e){var t=(0,i.getInstance)();var n=0;var a=[],s=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\"number\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\"log serverity level is not valid: \".concat(e.logSeverityLevel));if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\"number\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\"log verbosity level is not valid: \".concat(e.logVerbosityLevel));void 0===(null==e?void 0:e.terminate)&&(s.terminate=!1);var _i42=0;if(void 0!==(null==e?void 0:e.tag)&&(_i42=(0,o.allocWasmString)(e.tag,a)),n=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,_i42),0===n)throw new Error(\"Can't create run options\");return void 0!==(null==e?void 0:e.extra)&&(0,r.iterateExtraOptions)(e.extra,\"\",new WeakSet(),function(e,r){var i=(0,o.allocWasmString)(e,a),s=(0,o.allocWasmString)(r,a);if(0!==t._OrtAddRunConfigEntry(n,i,s))throw new Error(\"Can't set a run config entry: \".concat(e,\" - \").concat(r));}),[n,a];}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),a.forEach(t._free),e;}};},6640:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.OnnxruntimeWebAssemblySessionHandler=void 0;var r=n(2806),o=n(8453),i=n(2850),a=n(9544),s=n(7917);var u;t.OnnxruntimeWebAssemblySessionHandler=/*#__PURE__*/function(){function _class35(){_classCallCheck(this,_class35);}_createClass(_class35,[{key:\"createSessionAllocate\",value:function(){var _createSessionAllocate=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee66(e){var t,n;return _regeneratorRuntime2().wrap(function _callee66$(_context67){while(1)switch(_context67.prev=_context67.next){case 0:_context67.next=2;return fetch(e);case 2:t=_context67.sent;_context67.next=5;return t.arrayBuffer();case 5:n=_context67.sent;return _context67.abrupt(\"return\",(0,a.createSessionAllocate)(new Uint8Array(n)));case 7:case\"end\":return _context67.stop();}},_callee66);}));function createSessionAllocate(_x74){return _createSessionAllocate.apply(this,arguments);}return createSessionAllocate;}()},{key:\"loadModel\",value:function(){var _loadModel2=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee67(e,t){var _n186,_yield,_yield2,_n187,_yield3,_yield4,_yield5,_yield6;return _regeneratorRuntime2().wrap(function _callee67$(_context68){while(1)switch(_context68.prev=_context68.next){case 0:_context68.t0=u;if(_context68.t0){_context68.next=5;break;}_context68.next=4;return(0,a.initOrt)(o.env.wasm.numThreads,(0,s.logLevelStringToEnum)(o.env.logLevel));case 4:u=!0;case 5:if(!(\"string\"==typeof e)){_context68.next=31;break;}if(!(\"undefined\"==typeof fetch)){_context68.next=19;break;}_context68.next=9;return(0,i.promisify)(r.readFile)(e);case 9:_n186=_context68.sent;_context68.next=12;return(0,a.createSession)(_n186,t);case 12:_yield=_context68.sent;_yield2=_slicedToArray(_yield,3);this.sessionId=_yield2[0];this.inputNames=_yield2[1];this.outputNames=_yield2[2];_context68.next=29;break;case 19:_context68.next=21;return this.createSessionAllocate(e);case 21:_n187=_context68.sent;_context68.next=24;return(0,a.createSessionFinalize)(_n187,t);case 24:_yield3=_context68.sent;_yield4=_slicedToArray(_yield3,3);this.sessionId=_yield4[0];this.inputNames=_yield4[1];this.outputNames=_yield4[2];case 29:_context68.next=38;break;case 31:_context68.next=33;return(0,a.createSession)(e,t);case 33:_yield5=_context68.sent;_yield6=_slicedToArray(_yield5,3);this.sessionId=_yield6[0];this.inputNames=_yield6[1];this.outputNames=_yield6[2];case 38:case\"end\":return _context68.stop();}},_callee67,this);}));function loadModel(_x75,_x76){return _loadModel2.apply(this,arguments);}return loadModel;}()},{key:\"dispose\",value:function(){var _dispose2=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee68(){return _regeneratorRuntime2().wrap(function _callee68$(_context69){while(1)switch(_context69.prev=_context69.next){case 0:return _context69.abrupt(\"return\",(0,a.releaseSession)(this.sessionId));case 1:case\"end\":return _context69.stop();}},_callee68,this);}));function dispose(){return _dispose2.apply(this,arguments);}return dispose;}()},{key:\"run\",value:function(){var _run4=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee69(e,t,n){var _this44=this;var r,i,s,u,l,_e127;return _regeneratorRuntime2().wrap(function _callee69$(_context70){while(1)switch(_context70.prev=_context70.next){case 0:r=[],i=[];Object.entries(e).forEach(function(e){var t=e[0],n=e[1],o=_this44.inputNames.indexOf(t);if(-1===o)throw new Error(\"invalid input '\".concat(t,\"'\"));r.push(n),i.push(o);});s=[];Object.entries(t).forEach(function(e){var t=e[0],n=_this44.outputNames.indexOf(t);if(-1===n)throw new Error(\"invalid output '\".concat(t,\"'\"));s.push(n);});_context70.next=6;return(0,a.run)(this.sessionId,i,r.map(function(e){return[e.type,e.dims,e.data];}),s,n);case 6:u=_context70.sent;l={};for(_e127=0;_e127<u.length;_e127++)l[this.outputNames[s[_e127]]]=new o.Tensor(u[_e127][0],u[_e127][2],u[_e127][1]);return _context70.abrupt(\"return\",l);case 10:case\"end\":return _context70.stop();}},_callee69,this);}));function run(_x77,_x78,_x79){return _run4.apply(this,arguments);}return run;}()},{key:\"startProfiling\",value:function startProfiling(){}},{key:\"endProfiling\",value:function endProfiling(){(0,a.endProfiling)(this.sessionId);}}]);return _class35;}();},7622:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.setSessionOptions=void 0;var r=n(3899),o=n(9444),i=n(263);t.setSessionOptions=function(e){var t,n,a,s;var u=(0,i.getInstance)();var l=0;var c=[],p=e||{};(function(e){e.extra||(e.extra={}),e.extra.session||(e.extra.session={});var t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\"1\"),e.executionProviders&&e.executionProviders.some(function(e){return\"webgpu\"===(\"string\"==typeof e?e:e.name);})&&(e.enableMemPattern=!1);})(p);try{var _e128=function(e){switch(e){case\"disabled\":return 0;case\"basic\":return 1;case\"extended\":return 2;case\"all\":return 99;default:throw new Error(\"unsupported graph optimization level: \".concat(e));}}(null!==(t=p.graphOptimizationLevel)&&void 0!==t?t:\"all\"),d=function(e){switch(e){case\"sequential\":return 0;case\"parallel\":return 1;default:throw new Error(\"unsupported execution mode: \".concat(e));}}(null!==(n=p.executionMode)&&void 0!==n?n:\"sequential\"),f=\"string\"==typeof p.logId?(0,o.allocWasmString)(p.logId,c):0,h=null!==(a=p.logSeverityLevel)&&void 0!==a?a:2;if(!Number.isInteger(h)||h<0||h>4)throw new Error(\"log serverity level is not valid: \".concat(h));var g=null!==(s=p.logVerbosityLevel)&&void 0!==s?s:0;if(!Number.isInteger(g)||g<0||g>4)throw new Error(\"log verbosity level is not valid: \".concat(g));var m=\"string\"==typeof p.optimizedModelFilePath?(0,o.allocWasmString)(p.optimizedModelFilePath,c):0;if(l=u._OrtCreateSessionOptions(_e128,!!p.enableCpuMemArena,!!p.enableMemPattern,d,!!p.enableProfiling,0,f,h,g,m),0===l)throw new Error(\"Can't create session options\");return p.executionProviders&&function(e,t,n){var _iterator40=_createForOfIteratorHelper(t),_step40;try{for(_iterator40.s();!(_step40=_iterator40.n()).done;){var _r77=_step40.value;var _t95=\"string\"==typeof _r77?_r77:_r77.name;switch(_t95){case\"xnnpack\":_t95=\"XNNPACK\";break;case\"webgpu\":_t95=\"JS\";break;case\"wasm\":case\"cpu\":continue;default:throw new Error(\"not supported EP: \".concat(_t95));}var _a32=(0,o.allocWasmString)(_t95,n);if(0!==(0,i.getInstance)()._OrtAppendExecutionProvider(e,_a32))throw new Error(\"Can't append execution provider: \".concat(_t95));}}catch(err){_iterator40.e(err);}finally{_iterator40.f();}}(l,p.executionProviders,c),void 0!==p.extra&&(0,r.iterateExtraOptions)(p.extra,\"\",new WeakSet(),function(e,t){var n=(0,o.allocWasmString)(e,c),r=(0,o.allocWasmString)(t,c);if(0!==u._OrtAddSessionConfigEntry(l,n,r))throw new Error(\"Can't set a session config entry: \".concat(e,\" - \").concat(t));}),[l,c];}catch(e){throw 0!==l&&u._OrtReleaseSessionOptions(l),c.forEach(u._free),e;}};},9444:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.allocWasmString=void 0;var r=n(263);t.allocWasmString=function(e,t){var n=(0,r.getInstance)(),o=n.lengthBytesUTF8(e)+1,i=n._malloc(o);return n.stringToUTF8(e,i,o),t.push(i),i;};},7917:function _(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=function(e){switch(e){case\"int8\":return 3;case\"uint8\":return 2;case\"bool\":return 9;case\"int16\":return 5;case\"uint16\":return 4;case\"int32\":return 6;case\"uint32\":return 12;case\"float32\":return 1;case\"float64\":return 11;case\"string\":return 8;case\"int64\":return 7;case\"uint64\":return 13;default:throw new Error(\"unsupported data type: \".concat(e));}},t.tensorDataTypeEnumToString=function(e){switch(e){case 3:return\"int8\";case 2:return\"uint8\";case 9:return\"bool\";case 5:return\"int16\";case 4:return\"uint16\";case 6:return\"int32\";case 12:return\"uint32\";case 1:return\"float32\";case 11:return\"float64\";case 8:return\"string\";case 7:return\"int64\";case 13:return\"uint64\";default:throw new Error(\"unsupported data type: \".concat(e));}},t.getTensorElementSize=function(e){return[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e];},t.tensorTypeToTypedArrayConstructor=function(e){switch(e){case\"float32\":return Float32Array;case\"uint8\":case\"bool\":return Uint8Array;case\"int8\":return Int8Array;case\"uint16\":return Uint16Array;case\"int16\":return Int16Array;case\"int32\":return Int32Array;case\"float64\":return Float64Array;case\"uint32\":return Uint32Array;case\"int64\":return BigInt64Array;case\"uint64\":return BigUint64Array;default:throw new Error(\"unsupported type: \".concat(e));}},t.logLevelStringToEnum=function(e){switch(e){case\"verbose\":return 0;case\"info\":return 1;case\"warning\":return 2;case\"error\":return 3;case\"fatal\":return 4;default:throw new Error(\"unsupported logging level: \".concat(e));}};},1259:function _(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initOrt=void 0;var r=n(7918),o=n(7622),i=n(9444),a=n(7917),s=n(263);t.initOrt=function(e,t){var n=(0,s.getInstance)()._OrtInit(e,t);if(0!==n)throw new Error(\"Can't initialize onnxruntime. error code = \".concat(n));};var u=new Map();t.createSessionAllocate=function(e){var t=(0,s.getInstance)(),n=t._malloc(e.byteLength);return t.HEAPU8.set(e,n),[n,e.byteLength];},t.createSessionFinalize=function(e,t){var n=(0,s.getInstance)();var r=0,i=0,a=[];try{var _ref53,_ref54;if((_ref53=(0,o.setSessionOptions)(t),_ref54=_slicedToArray(_ref53,2),i=_ref54[0],a=_ref54[1]),r=n._OrtCreateSession(e[0],e[1],i),0===r)throw new Error(\"Can't create a session\");}finally{n._free(e[0]),0!==i&&n._OrtReleaseSessionOptions(i),a.forEach(n._free);}var l=n._OrtGetInputCount(r),c=n._OrtGetOutputCount(r),p=[],d=[],f=[],h=[];for(var _e129=0;_e129<l;_e129++){var _t96=n._OrtGetInputName(r,_e129);if(0===_t96)throw new Error(\"Can't get an input name\");d.push(_t96),p.push(n.UTF8ToString(_t96));}for(var _e130=0;_e130<c;_e130++){var _t97=n._OrtGetOutputName(r,_e130);if(0===_t97)throw new Error(\"Can't get an output name\");h.push(_t97),f.push(n.UTF8ToString(_t97));}return u.set(r,[r,d,h]),[r,p,f];},t.createSession=function(e,n){var r=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(r,n);},t.releaseSession=function(e){var t=(0,s.getInstance)(),n=u.get(e);if(!n)throw new Error(\"invalid session id\");var r=n[0],o=n[1],i=n[2];o.forEach(t._OrtFree),i.forEach(t._OrtFree),t._OrtReleaseSession(r),u[\"delete\"](e);},t.run=/*#__PURE__*/function(){var _ref55=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee70(e,t,n,o,l){var c,p,d,f,h,g,m,b,y,w,_,_ref56,_ref57,_loop7,_e131,_e132,_s14,_u37,_p10,v,_e133,_n188,_r78,_i43,_r79,_e134,_l12,_y,_2,_e135,_t98,_n189,_r80,_o49,_i44,_e136,_n190,_s15,_u38,_p11,_e137,_d11,_e138,_t99,_n191,_r81,_o50,_e139;return _regeneratorRuntime2().wrap(function _callee70$(_context72){while(1)switch(_context72.prev=_context72.next){case 0:c=(0,s.getInstance)(),p=u.get(e);if(p){_context72.next=3;break;}throw new Error(\"invalid session id\");case 3:d=p[0],f=p[1],h=p[2],g=t.length,m=o.length;b=0,y=[];w=[],_=[];_context72.prev=6;_ref56=(0,r.setRunOptions)(l);_ref57=_slicedToArray(_ref56,2);b=_ref57[0];y=_ref57[1];_loop7=/*#__PURE__*/_regeneratorRuntime2().mark(function _loop7(){var t,r,o,s,u,_e140,_t100,l,p,_e141,_n192;return _regeneratorRuntime2().wrap(function _loop7$(_context71){while(1)switch(_context71.prev=_context71.next){case 0:t=n[_e131][0],r=n[_e131][1],o=n[_e131][2];if(!Array.isArray(o)){_context71.next=14;break;}u=4*o.length,s=c._malloc(u),_.push(s);_e140=s/4;_t100=0;case 5:if(!(_t100<o.length)){_context71.next=12;break;}if(!(\"string\"!=typeof o[_t100])){_context71.next=8;break;}throw new TypeError(\"tensor data at index \".concat(_t100,\" is not a string\"));case 8:c.HEAPU32[_e140++]=(0,i.allocWasmString)(o[_t100],_);case 9:_t100++;_context71.next=5;break;case 12:_context71.next=15;break;case 14:u=o.byteLength,s=c._malloc(u),_.push(s),c.HEAPU8.set(new Uint8Array(o.buffer,o.byteOffset,u),s);case 15:l=c.stackSave(),p=c.stackAlloc(4*r.length);_context71.prev=16;_e141=p/4;r.forEach(function(t){return c.HEAP32[_e141++]=t;});_n192=c._OrtCreateTensor((0,a.tensorDataTypeStringToEnum)(t),s,u,p,r.length);if(!(0===_n192)){_context71.next=22;break;}throw new Error(\"Can't create a tensor\");case 22:w.push(_n192);case 23:_context71.prev=23;c.stackRestore(l);return _context71.finish(23);case 26:case\"end\":return _context71.stop();}},_loop7,null,[[16,,23,26]]);});_e131=0;case 13:if(!(_e131<g)){_context72.next=18;break;}return _context72.delegateYield(_loop7(),\"t0\",15);case 15:_e131++;_context72.next=13;break;case 18:_e132=c.stackSave(),_s14=c.stackAlloc(4*g),_u37=c.stackAlloc(4*g),_p10=c.stackAlloc(4*m),v=c.stackAlloc(4*m);_context72.prev=19;_e133=_s14/4,_n188=_u37/4,_r78=_p10/4,_i43=v/4;for(_r79=0;_r79<g;_r79++)c.HEAPU32[_e133++]=w[_r79],c.HEAPU32[_n188++]=f[t[_r79]];for(_e134=0;_e134<m;_e134++)c.HEAPU32[_r78++]=0,c.HEAPU32[_i43++]=h[o[_e134]];_l12=c._OrtRun(d,_u37,_s14,g,v,m,_p10,b);_y=c.jsepRunPromise;_context72.t1=_y&&void 0!==_y.then;if(!_context72.t1){_context72.next=30;break;}_context72.next=29;return _y;case 29:_l12=_context72.sent;case 30:_2=[];if(!(0===_l12)){_context72.next=53;break;}_e135=0;case 33:if(!(_e135<m)){_context72.next=53;break;}_t98=c.HEAPU32[_p10/4+_e135],_n189=c.stackSave(),_r80=c.stackAlloc(16);_o49=void 0,_i44=0;_context72.prev=36;if(!(_l12=c._OrtGetTensorData(_t98,_r80,_r80+4,_r80+8,_r80+12),0!==_l12)){_context72.next=39;break;}throw new Error(\"Can't access output tensor data. error code = \".concat(_l12));case 39:_e136=_r80/4;_n190=c.HEAPU32[_e136++];_i44=c.HEAPU32[_e136++];_s15=c.HEAPU32[_e136++],_u38=c.HEAPU32[_e136++],_p11=[];for(_e137=0;_e137<_u38;_e137++)_p11.push(c.HEAPU32[_s15/4+_e137]);c._OrtFree(_s15);_d11=0===_p11.length?1:_p11.reduce(function(e,t){return e*t;});if(_o49=(0,a.tensorDataTypeEnumToString)(_n190),\"string\"===_o49){_e138=[];_t99=_i44/4;for(_n191=0;_n191<_d11;_n191++){_r81=c.HEAPU32[_t99++],_o50=_n191===_d11-1?void 0:c.HEAPU32[_t99]-_r81;_e138.push(c.UTF8ToString(_r81,_o50));}_2.push([_o49,_p11,_e138]);}else{_e139=new((0,a.tensorTypeToTypedArrayConstructor)(_o49))(_d11);new Uint8Array(_e139.buffer,_e139.byteOffset,_e139.byteLength).set(c.HEAPU8.subarray(_i44,_i44+_e139.byteLength)),_2.push([_o49,_p11,_e139]);}case 47:_context72.prev=47;c.stackRestore(_n189),\"string\"===_o49&&_i44&&c._free(_i44),c._OrtReleaseTensor(_t98);return _context72.finish(47);case 50:_e135++;_context72.next=33;break;case 53:if(!(0===_l12)){_context72.next=55;break;}return _context72.abrupt(\"return\",_2);case 55:throw new Error(\"failed to call OrtRun(). error code = \".concat(_l12,\".\"));case 56:_context72.prev=56;c.stackRestore(_e132);return _context72.finish(56);case 59:_context72.prev=59;w.forEach(c._OrtReleaseTensor),_.forEach(c._free),c._OrtReleaseRunOptions(b),y.forEach(c._free);return _context72.finish(59);case 62:case\"end\":return _context72.stop();}},_callee70,null,[[6,,59,62],[19,,56,59],[36,,47,50]]);}));return function(_x80,_x81,_x82,_x83,_x84){return _ref55.apply(this,arguments);};}(),t.endProfiling=function(e){var t=(0,s.getInstance)(),n=u.get(e);if(!n)throw new Error(\"invalid session id\");var r=n[0],o=t._OrtEndProfiling(r);if(0===o)throw new Error(\"Can't get an profile file name\");t._OrtFree(o);},t.extractTransferableBuffers=function(e){var t=[];var _iterator41=_createForOfIteratorHelper(e),_step41;try{for(_iterator41.s();!(_step41=_iterator41.n()).done;){var _n193=_step41.value;var _e142=_n193[2];!Array.isArray(_e142)&&_e142.buffer&&t.push(_e142.buffer);}}catch(err){_iterator41.e(err);}finally{_iterator41.f();}return t;};},263:function _(e,t,n){\"use strict\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!(\"get\"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function get(){return t[n];}}),Object.defineProperty(e,r,o);}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n];}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\"default\",{enumerable:!0,value:t});}:function(e,t){e[\"default\"]=t;}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\"default\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t;};Object.defineProperty(t,\"__esModule\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;var a=i(n(6449)),s=n(932),u=n(3474);var l,c=!1,p=!1,d=!1;t.initializeWebAssembly=/*#__PURE__*/function(){var _ref58=_asyncToGenerator2(/*#__PURE__*/_regeneratorRuntime2().mark(function _callee71(e){var t,r,o,i,f,h,g,m,b,y,w;return _regeneratorRuntime2().wrap(function _callee71$(_context73){while(1)switch(_context73.prev=_context73.next){case 0:if(!c){_context73.next=2;break;}return _context73.abrupt(\"return\",Promise.resolve());case 2:if(!p){_context73.next=4;break;}throw new Error(\"multiple calls to 'initializeWebAssembly()' detected.\");case 4:if(!d){_context73.next=6;break;}throw new Error(\"previous call to 'initializeWebAssembly()' failed.\");case 6:p=!0;t=e.initTimeout,r=e.numThreads,o=e.simd,i=r>1&&function(){try{return\"undefined\"!=typeof SharedArrayBuffer&&(\"undefined\"!=typeof MessageChannel&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])));}catch(e){return!1;}}(),f=o&&function(){try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]));}catch(e){return!1;}}(),h=e.wasmPaths,g=\"string\"==typeof h?h:void 0,m=function(e,t){return t?e?\"ort-wasm-simd-threaded.wasm\":\"ort-wasm-threaded.wasm\":e?\"ort-wasm-simd.wasm\":\"ort-wasm.wasm\";}(f,i),b=\"object\"==_typeof2(h)?h[m]:void 0;y=!1;w=[];t>0&&w.push(new Promise(function(e){setTimeout(function(){y=!0,e();},t);}));w.push(new Promise(function(e,t){var r=i?u:s,o={locateFile:function locateFile(e,t){return i&&e.endsWith(\".worker.js\")&&\"undefined\"!=typeof Blob?URL.createObjectURL(new Blob([n(4154)],{type:\"text/javascript\"})):e.endsWith(\".wasm\")?b||(null!=g?g:t)+m:t+e;}};if(i)if(\"undefined\"==typeof Blob)o.mainScriptUrlOrBlob=a.join(\"/\",\"ort-wasm-threaded.js\");else{var _e143=\"var ortWasmThreaded=(function(){var _scriptDir;return \".concat(r.toString(),\"})();\");o.mainScriptUrlOrBlob=new Blob([_e143],{type:\"text/javascript\"});}r(o).then(function(t){p=!1,c=!0,l=t,e();},function(e){p=!1,d=!0,t(e);});}));_context73.next=14;return Promise.race(w);case 14:if(!y){_context73.next=16;break;}throw new Error(\"WebAssembly backend initializing failed due to timeout: \".concat(t,\"ms\"));case 16:case\"end\":return _context73.stop();}},_callee71);}));return function(_x85){return _ref58.apply(this,arguments);};}(),t.getInstance=function(){if(c&&l)return l;throw new Error(\"WebAssembly is not initialized yet.\");},t.dispose=function(){var e;!c||p||d||(p=!0,null===(e=l.PThread)||void 0===e||e.terminateAllThreads(),l=void 0,p=!1,c=!1,d=!0);};},8050:function _(e,t,n){\"use strict\";n.d(t,{Z:function Z(){return i;}});var r=n(6614),o=n.n(r);function i(){return o()('/*!\\n* ONNX Runtime Web v1.15.1\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={899:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=(e,n,r,a)=>{if(\"object\"==typeof e&&null!==e){if(r.has(e))throw new Error(\"Circular reference in options\");r.add(e)}Object.entries(e).forEach((([e,o])=>{const i=n?n+e:e;if(\"object\"==typeof o)(0,t.iterateExtraOptions)(o,i+\".\",r,a);else if(\"string\"==typeof o||\"number\"==typeof o)a(i,o.toString());else{if(\"boolean\"!=typeof o)throw new Error(\"Can\\'t handle extra config type: \"+typeof o);a(i,o?\"1\":\"0\")}}))}},918:(e,t,n)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.setRunOptions=void 0;const r=n(899),a=n(444),o=n(263);t.setRunOptions=e=>{const t=(0,o.getInstance)();let n=0;const i=[],s=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\"number\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\"number\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(s.terminate=!1);let o=0;if(void 0!==(null==e?void 0:e.tag)&&(o=(0,a.allocWasmString)(e.tag,i)),n=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,o),0===n)throw new Error(\"Can\\'t create run options\");return void 0!==(null==e?void 0:e.extra)&&(0,r.iterateExtraOptions)(e.extra,\"\",new WeakSet,((e,r)=>{const o=(0,a.allocWasmString)(e,i),s=(0,a.allocWasmString)(r,i);if(0!==t._OrtAddRunConfigEntry(n,o,s))throw new Error(`Can\\'t set a run config entry: ${e} - ${r}`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach(t._free),e}}},622:(e,t,n)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.setSessionOptions=void 0;const r=n(899),a=n(444),o=n(263);t.setSessionOptions=e=>{var t,n,i,s;const u=(0,o.getInstance)();let c=0;const l=[],f=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\"1\"),e.executionProviders&&e.executionProviders.some((e=>\"webgpu\"===(\"string\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(f);try{const e=(e=>{switch(e){case\"disabled\":return 0;case\"basic\":return 1;case\"extended\":return 2;case\"all\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=f.graphOptimizationLevel)&&void 0!==t?t:\"all\"),p=(e=>{switch(e){case\"sequential\":return 0;case\"parallel\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(n=f.executionMode)&&void 0!==n?n:\"sequential\"),d=\"string\"==typeof f.logId?(0,a.allocWasmString)(f.logId,l):0,m=null!==(i=f.logSeverityLevel)&&void 0!==i?i:2;if(!Number.isInteger(m)||m<0||m>4)throw new Error(`log serverity level is not valid: ${m}`);const g=null!==(s=f.logVerbosityLevel)&&void 0!==s?s:0;if(!Number.isInteger(g)||g<0||g>4)throw new Error(`log verbosity level is not valid: ${g}`);const h=\"string\"==typeof f.optimizedModelFilePath?(0,a.allocWasmString)(f.optimizedModelFilePath,l):0;if(c=u._OrtCreateSessionOptions(e,!!f.enableCpuMemArena,!!f.enableMemPattern,p,!!f.enableProfiling,0,d,m,g,h),0===c)throw new Error(\"Can\\'t create session options\");return f.executionProviders&&((e,t,n)=>{for(const r of t){let t=\"string\"==typeof r?r:r.name;switch(t){case\"xnnpack\":t=\"XNNPACK\";break;case\"webgpu\":t=\"JS\";break;case\"wasm\":case\"cpu\":continue;default:throw new Error(`not supported EP: ${t}`)}const i=(0,a.allocWasmString)(t,n);if(0!==(0,o.getInstance)()._OrtAppendExecutionProvider(e,i))throw new Error(`Can\\'t append execution provider: ${t}`)}})(c,f.executionProviders,l),void 0!==f.extra&&(0,r.iterateExtraOptions)(f.extra,\"\",new WeakSet,((e,t)=>{const n=(0,a.allocWasmString)(e,l),r=(0,a.allocWasmString)(t,l);if(0!==u._OrtAddSessionConfigEntry(c,n,r))throw new Error(`Can\\'t set a session config entry: ${e} - ${t}`)})),[c,l]}catch(e){throw 0!==c&&u._OrtReleaseSessionOptions(c),l.forEach(u._free),e}}},444:(e,t,n)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.allocWasmString=void 0;const r=n(263);t.allocWasmString=(e,t)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(e)+1,o=n._malloc(a);return n.stringToUTF8(e,o,a),t.push(o),o}},917:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\"int8\":return 3;case\"uint8\":return 2;case\"bool\":return 9;case\"int16\":return 5;case\"uint16\":return 4;case\"int32\":return 6;case\"uint32\":return 12;case\"float32\":return 1;case\"float64\":return 11;case\"string\":return 8;case\"int64\":return 7;case\"uint64\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\"int8\";case 2:return\"uint8\";case 9:return\"bool\";case 5:return\"int16\";case 4:return\"uint16\";case 6:return\"int32\";case 12:return\"uint32\";case 1:return\"float32\";case 11:return\"float64\";case 8:return\"string\";case 7:return\"int64\";case 13:return\"uint64\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\"float32\":return Float32Array;case\"uint8\":case\"bool\":return Uint8Array;case\"int8\":return Int8Array;case\"uint16\":return Uint16Array;case\"int16\":return Int16Array;case\"int32\":return Int32Array;case\"float64\":return Float64Array;case\"uint32\":return Uint32Array;case\"int64\":return BigInt64Array;case\"uint64\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\"verbose\":return 0;case\"info\":return 1;case\"warning\":return 2;case\"error\":return 3;case\"fatal\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},259:(e,t,n)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initOrt=void 0;const r=n(918),a=n(622),o=n(444),i=n(917),s=n(263);t.initOrt=(e,t)=>{const n=(0,s.getInstance)()._OrtInit(e,t);if(0!==n)throw new Error(`Can\\'t initialize onnxruntime. error code = ${n}`)};const u=new Map;t.createSessionAllocate=e=>{const t=(0,s.getInstance)(),n=t._malloc(e.byteLength);return t.HEAPU8.set(e,n),[n,e.byteLength]},t.createSessionFinalize=(e,t)=>{const n=(0,s.getInstance)();let r=0,o=0,i=[];try{if([o,i]=(0,a.setSessionOptions)(t),r=n._OrtCreateSession(e[0],e[1],o),0===r)throw new Error(\"Can\\'t create a session\")}finally{n._free(e[0]),0!==o&&n._OrtReleaseSessionOptions(o),i.forEach(n._free)}const c=n._OrtGetInputCount(r),l=n._OrtGetOutputCount(r),f=[],p=[],d=[],m=[];for(let e=0;e<c;e++){const t=n._OrtGetInputName(r,e);if(0===t)throw new Error(\"Can\\'t get an input name\");p.push(t),f.push(n.UTF8ToString(t))}for(let e=0;e<l;e++){const t=n._OrtGetOutputName(r,e);if(0===t)throw new Error(\"Can\\'t get an output name\");m.push(t),d.push(n.UTF8ToString(t))}return u.set(r,[r,p,m]),[r,f,d]},t.createSession=(e,n)=>{const r=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(r,n)},t.releaseSession=e=>{const t=(0,s.getInstance)(),n=u.get(e);if(!n)throw new Error(\"invalid session id\");const r=n[0],a=n[1],o=n[2];a.forEach(t._OrtFree),o.forEach(t._OrtFree),t._OrtReleaseSession(r),u.delete(e)},t.run=async(e,t,n,a,c)=>{const l=(0,s.getInstance)(),f=u.get(e);if(!f)throw new Error(\"invalid session id\");const p=f[0],d=f[1],m=f[2],g=t.length,h=a.length;let y=0,v=[];const b=[],w=[];try{[y,v]=(0,r.setRunOptions)(c);for(let e=0;e<g;e++){const t=n[e][0],r=n[e][1],a=n[e][2];let s,u;if(Array.isArray(a)){u=4*a.length,s=l._malloc(u),w.push(s);let e=s/4;for(let t=0;t<a.length;t++){if(\"string\"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);l.HEAPU32[e++]=(0,o.allocWasmString)(a[t],w)}}else u=a.byteLength,s=l._malloc(u),w.push(s),l.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),s);const c=l.stackSave(),f=l.stackAlloc(4*r.length);try{let e=f/4;r.forEach((t=>l.HEAP32[e++]=t));const n=l._OrtCreateTensor((0,i.tensorDataTypeStringToEnum)(t),s,u,f,r.length);if(0===n)throw new Error(\"Can\\'t create a tensor\");b.push(n)}finally{l.stackRestore(c)}}const e=l.stackSave(),s=l.stackAlloc(4*g),u=l.stackAlloc(4*g),f=l.stackAlloc(4*h),_=l.stackAlloc(4*h);try{let e=s/4,n=u/4,r=f/4,o=_/4;for(let r=0;r<g;r++)l.HEAPU32[e++]=b[r],l.HEAPU32[n++]=d[t[r]];for(let e=0;e<h;e++)l.HEAPU32[r++]=0,l.HEAPU32[o++]=m[a[e]];let c=l._OrtRun(p,u,s,g,_,h,f,y);const v=l.jsepRunPromise;v&&void 0!==v.then&&(c=await v);const w=[];if(0===c)for(let e=0;e<h;e++){const t=l.HEAPU32[f/4+e],n=l.stackSave(),r=l.stackAlloc(16);let a,o=0;try{if(c=l._OrtGetTensorData(t,r,r+4,r+8,r+12),0!==c)throw new Error(`Can\\'t access output tensor data. error code = ${c}`);let e=r/4;const n=l.HEAPU32[e++];o=l.HEAPU32[e++];const s=l.HEAPU32[e++],u=l.HEAPU32[e++],f=[];for(let e=0;e<u;e++)f.push(l.HEAPU32[s/4+e]);l._OrtFree(s);const p=0===f.length?1:f.reduce(((e,t)=>e*t));if(a=(0,i.tensorDataTypeEnumToString)(n),\"string\"===a){const e=[];let t=o/4;for(let n=0;n<p;n++){const r=l.HEAPU32[t++],a=n===p-1?void 0:l.HEAPU32[t]-r;e.push(l.UTF8ToString(r,a))}w.push([a,f,e])}else{const e=new((0,i.tensorTypeToTypedArrayConstructor)(a))(p);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(l.HEAPU8.subarray(o,o+e.byteLength)),w.push([a,f,e])}}finally{l.stackRestore(n),\"string\"===a&&o&&l._free(o),l._OrtReleaseTensor(t)}}if(0===c)return w;throw new Error(`failed to call OrtRun(). error code = ${c}.`)}finally{l.stackRestore(e)}}finally{b.forEach(l._OrtReleaseTensor),w.forEach(l._free),l._OrtReleaseRunOptions(y),v.forEach(l._free)}},t.endProfiling=e=>{const t=(0,s.getInstance)(),n=u.get(e);if(!n)throw new Error(\"invalid session id\");const r=n[0],a=t._OrtEndProfiling(r);if(0===a)throw new Error(\"Can\\'t get an profile file name\");t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const n of e){const e=n[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,n){\"use strict\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\"get\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\"default\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\"default\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,\"__esModule\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const i=o(n(449)),s=n(932),u=n(474);let c,l=!1,f=!1,p=!1;t.initializeWebAssembly=async e=>{if(l)return Promise.resolve();if(f)throw new Error(\"multiple calls to \\'initializeWebAssembly()\\' detected.\");if(p)throw new Error(\"previous call to \\'initializeWebAssembly()\\' failed.\");f=!0;const t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&(()=>{try{return\"undefined\"!=typeof SharedArrayBuffer&&(\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),d=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),m=e.wasmPaths,g=\"string\"==typeof m?m:void 0,h=((e,t)=>t?e?\"ort-wasm-simd-threaded.wasm\":\"ort-wasm-threaded.wasm\":e?\"ort-wasm-simd.wasm\":\"ort-wasm.wasm\")(d,o),y=\"object\"==typeof m?m[h]:void 0;let v=!1;const b=[];if(t>0&&b.push(new Promise((e=>{setTimeout((()=>{v=!0,e()}),t)}))),b.push(new Promise(((e,t)=>{const r=o?u:s,a={locateFile:(e,t)=>o&&e.endsWith(\".worker.js\")&&\"undefined\"!=typeof Blob?URL.createObjectURL(new Blob([n(154)],{type:\"text/javascript\"})):e.endsWith(\".wasm\")?y||(null!=g?g:t)+h:t+e};if(o)if(\"undefined\"==typeof Blob)a.mainScriptUrlOrBlob=i.join(\"/\",\"ort-wasm-threaded.js\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\"text/javascript\"})}r(a).then((t=>{f=!1,l=!0,c=t,e()}),(e=>{f=!1,p=!0,t(e)}))}))),await Promise.race(b),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},t.getInstance=()=>{if(l&&c)return c;throw new Error(\"WebAssembly is not initialized yet.\")},t.dispose=()=>{var e;!l||f||p||(f=!0,null===(e=c.PThread)||void 0===e||e.terminateAllThreads(),c=void 0,f=!1,l=!1,p=!0)}},474:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\"/index.js\",function(e){function t(){return P.buffer!=D&&G(P.buffer),F}function r(){return P.buffer!=D&&G(P.buffer),U}function a(){return P.buffer!=D&&G(P.buffer),I}function o(){return P.buffer!=D&&G(P.buffer),W}function i(){return P.buffer!=D&&G(P.buffer),j}var s,u,c;e=e||{},s||(s=void 0!==e?e:{}),s.ready=new Promise((function(e,t){u=e,c=t}));var l,f,p,d,m,g,h=Object.assign({},s),y=\"./this.program\",v=(e,t)=>{throw t},b=\"object\"==typeof window,w=\"function\"==typeof importScripts,_=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,O=s.ENVIRONMENT_IS_PTHREAD||!1,S=\"\";function T(e){return s.locateFile?s.locateFile(e,S):S+e}if(_){let t;S=w?n(908).dirname(S)+\"/\":\"//\",g=()=>{m||(d=n(384),m=n(908))},l=function(e,t){return g(),e=m.normalize(e),d.readFileSync(e,t?void 0:\"utf8\")},p=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,n)=>{g(),e=m.normalize(e),d.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof ie))throw e})),process.on(\"unhandledRejection\",(function(e){throw e})),v=(e,t)=>{if(C)throw process.exitCode=e,t;t instanceof ie||x(\"exiting due to exception: \"+t),process.exit(e)},s.inspect=function(){return\"[Emscripten Module object]\"};try{t=n(925)}catch(e){throw console.error(\\'The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?\\'),e}n.g.Worker=t.Worker}else(b||w)&&(w?S=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(S=document.currentScript.src),_scriptDir&&(S=_scriptDir),S=0!==S.indexOf(\"blob:\")?S.substr(0,S.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",_||(l=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},w&&(p=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),f=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));_&&\"undefined\"==typeof performance&&(n.g.performance=n(953).performance);var A=console.log.bind(console),E=console.warn.bind(console);_&&(g(),A=e=>d.writeSync(1,e+\"\\\\n\"),E=e=>d.writeSync(2,e+\"\\\\n\"));var M,R=s.print||A,x=s.printErr||E;Object.assign(s,h),h=null,s.thisProgram&&(y=s.thisProgram),s.quit&&(v=s.quit),s.wasmBinary&&(M=s.wasmBinary);var C=s.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ne(\"no native wasm support detected\");var P,k,D,F,U,I,W,j,H=!1,L=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function Y(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&L)return L.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\"\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function z(e,t){return(e>>>=0)?Y(r(),e,t):\"\"}function B(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function N(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function G(e){D=e,s.HEAP8=F=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=I=new Int32Array(e),s.HEAPU8=U=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=W=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=j=new Float64Array(e)}O&&(D=s.buffer);var q=s.INITIAL_MEMORY||16777216;if(O)P=s.wasmMemory,D=s.buffer;else if(s.wasmMemory)P=s.wasmMemory;else if(!((P=new WebAssembly.Memory({initial:q/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),_&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");P&&(D=P.buffer),q=D.byteLength,G(D);var $,V=[],J=[],Q=[];function X(){var e=s.preRun.shift();V.unshift(e)}var K,Z=0,ee=null,te=null;function ne(e){throw O?postMessage({cmd:\"onAbort\",arg:e}):s.onAbort&&s.onAbort(e),x(e=\"Aborted(\"+e+\")\"),H=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),c(e),e}function re(){return K.startsWith(\"data:application/octet-stream;base64,\")}function ae(){var e=K;try{if(e==K&&M)return new Uint8Array(M);if(p)return p(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){ne(e)}}K=\"ort-wasm-threaded.wasm\",re()||(K=T(K));var oe={};function ie(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function se(e){(e=fe.La[e])||ne(),fe.Xa(e)}function ue(e){var t=fe.lb();if(!t)return 6;fe.Ra.push(t),fe.La[e.Ka]=t,t.Ka=e.Ka;var n={cmd:\"run\",start_routine:e.pb,arg:e.ib,pthread_ptr:e.Ka};return t.Qa=()=>{n.time=performance.now(),t.postMessage(n,e.vb)},t.loaded&&(t.Qa(),delete t.Qa),0}function ce(e){if(O)return He(1,1,e);C||(fe.qb(),s.onExit&&s.onExit(e),H=!0),v(e,new ie(e))}function le(e,t){if(!t&&O)throw de(e),\"unwind\";ce(e)}var fe={Oa:[],Ra:[],$a:[],La:{},Ua:function(){O&&fe.mb()},xb:function(){},mb:function(){fe.receiveObjectTransfer=fe.ob,fe.threadInitTLS=fe.Za,fe.setExitStatus=fe.Ya,C=!1},Ya:function(){},qb:function(){for(var e of Object.values(fe.La))fe.Xa(e);for(e of fe.Oa)e.terminate();fe.Oa=[]},Xa:function(e){var t=e.Ka;delete fe.La[t],fe.Oa.push(e),fe.Ra.splice(fe.Ra.indexOf(e),1),e.Ka=0,ct(t)},ob:function(){},Za:function(){fe.$a.forEach((e=>e()))},nb:function(e,t){e.onmessage=n=>{var r=(n=n.data).cmd;if(e.Ka&&(fe.kb=e.Ka),n.targetThread&&n.targetThread!=rt()){var a=fe.La[n.yb];a?a.postMessage(n,n.transferList):x(\\'Internal error! Worker sent a message \"\\'+r+\\'\" to target pthread \\'+n.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===r?De(n.queue):\"spawnThread\"===r?ue(n):\"cleanupThread\"===r?se(n.thread):\"killThread\"===r?(n=n.thread,r=fe.La[n],delete fe.La[n],r.terminate(),ct(n),fe.Ra.splice(fe.Ra.indexOf(r),1),r.Ka=0):\"cancelThread\"===r?fe.La[n.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(e.loaded=!0,t&&t(e),e.Qa&&(e.Qa(),delete e.Qa)):\"print\"===r?R(\"Thread \"+n.threadId+\": \"+n.text):\"printErr\"===r?x(\"Thread \"+n.threadId+\": \"+n.text):\"alert\"===r?alert(\"Thread \"+n.threadId+\": \"+n.text):\"setimmediate\"===n.target?e.postMessage(n):\"onAbort\"===r?s.onAbort&&s.onAbort(n.arg):r&&x(\"worker sent an unknown command \"+r);fe.kb=void 0},e.onerror=e=>{throw x(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},_&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})),e.on(\"detachedExit\",(function(){}))),e.postMessage({cmd:\"load\",urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:P,wasmModule:k})},hb:function(){var e=T(\"ort-wasm-threaded.worker.js\");fe.Oa.push(new Worker(e))},lb:function(){return 0==fe.Oa.length&&(fe.hb(),fe.nb(fe.Oa[0])),fe.Oa.pop()}};function pe(e){for(;0<e.length;)e.shift()(s)}function de(e){if(O)return He(2,0,e);try{le(e)}catch(e){e instanceof ie||\"unwind\"==e||v(1,e)}}s.PThread=fe,s.establishStackSpace=function(){var e=rt(),t=a()[e+44>>2>>>0];e=a()[e+48>>2>>>0],ft(t,t-e),dt(t)};var me,ge,he=[];function ye(e){this.Pa=e-24,this.gb=function(e){o()[this.Pa+4>>2>>>0]=e},this.cb=function(e){o()[this.Pa+8>>2>>>0]=e},this.eb=function(){a()[this.Pa>>2>>>0]=0},this.bb=function(){t()[this.Pa+12>>0>>>0]=0},this.fb=function(){t()[this.Pa+13>>0>>>0]=0},this.Ua=function(e,t){this.ab(),this.gb(e),this.cb(t),this.eb(),this.bb(),this.fb()},this.ab=function(){o()[this.Pa+16>>2>>>0]=0}}function ve(e,t,n,r){return O?He(3,1,e,t,n,r):be(e,t,n,r)}function be(e,t,n,r){if(\"undefined\"==typeof SharedArrayBuffer)return x(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return O&&0===a.length?ve(e,t,n,r):(e={pb:n,Ka:e,ib:r,vb:a},O?(e.wb=\"spawnThread\",postMessage(e,a),0):ue(e))}function we(e,t,n){return O?He(4,1,e,t,n):0}function _e(e,t){if(O)return He(5,1,e,t)}function Oe(e,t){if(O)return He(6,1,e,t)}function Se(e,t,n){if(O)return He(7,1,e,t,n)}function Te(e,t,n){return O?He(8,1,e,t,n):0}function Ae(e,t){if(O)return He(9,1,e,t)}function Ee(e,t,n){if(O)return He(10,1,e,t,n)}function Me(e,t,n,r){if(O)return He(11,1,e,t,n,r)}function Re(e,t,n,r){if(O)return He(12,1,e,t,n,r)}function xe(e,t,n,r){if(O)return He(13,1,e,t,n,r)}function Ce(e){if(O)return He(14,1,e)}function Pe(e,t){if(O)return He(15,1,e,t)}function ke(e,t,n){if(O)return He(16,1,e,t,n)}function De(e){Atomics.store(a(),e>>2,1),rt()&&ut(e),Atomics.compareExchange(a(),e>>2,1,0)}function Fe(e){return o()[e>>>2]+4294967296*a()[e+4>>>2]}function Ue(e,t,n,r,a,o){return O?He(17,1,e,t,n,r,a,o):-52}function Ie(e,t,n,r,a,o){if(O)return He(18,1,e,t,n,r,a,o)}function We(e){var n=N(e)+1,r=at(n);return r&&B(e,t(),r,n),r}function je(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\"GMT\"}if(O)return He(19,1,e,t,n);var i=(new Date).getFullYear(),s=new Date(i,0,1),u=new Date(i,6,1);i=s.getTimezoneOffset();var c=u.getTimezoneOffset(),l=Math.max(i,c);a()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=c),e=r(s),t=r(u),e=We(e),t=We(t),c<i?(o()[n>>2>>>0]=e,o()[n+4>>2>>>0]=t):(o()[n>>2>>>0]=t,o()[n+4>>2>>>0]=e)}function He(e,t){var n=arguments.length-2,r=arguments;return function(e){var t=pt();return e=e(),dt(t),e}((()=>{for(var a=mt(8*n),o=a>>3,s=0;s<n;s++){var u=r[2+s];i()[o+s>>>0]=u}return st(e,n,a,t)}))}s.invokeEntryPoint=function(e,t){var n=he[e];n||(e>=he.length&&(he.length=e+1),he[e]=n=$.get(e)),e=n(t),C?fe.Ya(e):lt(e)},s.executeNotifiedProxyingQueue=De,ge=_?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:O?()=>performance.now()-s.__performance_now_clock_drift:()=>performance.now();var Le,Ye=[],ze={};function Be(){if(!Le){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:y||\"./this.program\"};for(e in ze)void 0===ze[e]?delete t[e]:t[e]=ze[e];var n=[];for(e in t)n.push(e+\"=\"+t[e]);Le=n}return Le}function Ne(e,n){if(O)return He(20,1,e,n);var r=0;return Be().forEach((function(a,i){var s=n+r;for(i=o()[e+4*i>>2>>>0]=s,s=0;s<a.length;++s)t()[i++>>0>>>0]=a.charCodeAt(s);t()[i>>0>>>0]=0,r+=a.length+1})),0}function Ge(e,t){if(O)return He(21,1,e,t);var n=Be();o()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),o()[t>>2>>>0]=r,0}function qe(e){return O?He(22,1,e):52}function $e(e,t,n,r){return O?He(23,1,e,t,n,r):52}function Ve(e,t,n,r,a){return O?He(24,1,e,t,n,r,a):70}var Je=[null,[],[]];function Qe(e,t,n,a){if(O)return He(25,1,e,t,n,a);for(var i=0,s=0;s<n;s++){var u=o()[t>>2>>>0],c=o()[t+4>>2>>>0];t+=8;for(var l=0;l<c;l++){var f=r()[u+l>>>0],p=Je[e];0===f||10===f?((1===e?R:x)(Y(p,0)),p.length=0):p.push(f)}i+=c}return o()[a>>2>>>0]=i,0}function Xe(e){return 0==e%4&&(0!=e%100||0==e%400)}var Ke=[31,29,31,30,31,30,31,31,30,31,30,31],Ze=[31,28,31,30,31,30,31,31,30,31,30,31];function et(e,n,r,o){function i(e,t,n){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=n[0]+e;return e}function s(e,t){return i(e,t,\"0\")}function u(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){var t=e.Ma;for(e=new Date(new Date(e.Na+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(Xe(e.getFullYear())?Ke:Ze)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),n=c(n),0>=u(t,e)?0>=u(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=a()[o+40>>2>>>0];for(var p in o={tb:a()[o>>2>>>0],sb:a()[o+4>>2>>>0],Sa:a()[o+8>>2>>>0],Va:a()[o+12>>2>>>0],Ta:a()[o+16>>2>>>0],Na:a()[o+20>>2>>>0],Ja:a()[o+24>>2>>>0],Ma:a()[o+28>>2>>>0],zb:a()[o+32>>2>>>0],rb:a()[o+36>>2>>>0],ub:f?z(f):\"\"},r=z(r),f={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})r=r.replace(new RegExp(p,\"g\"),f[p]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),m=\"January February March April May June July August September October November December\".split(\" \");for(p in f={\"%a\":function(e){return d[e.Ja].substring(0,3)},\"%A\":function(e){return d[e.Ja]},\"%b\":function(e){return m[e.Ta].substring(0,3)},\"%B\":function(e){return m[e.Ta]},\"%C\":function(e){return s((e.Na+1900)/100|0,2)},\"%d\":function(e){return s(e.Va,2)},\"%e\":function(e){return i(e.Va,2,\" \")},\"%g\":function(e){return l(e).toString().substring(2)},\"%G\":function(e){return l(e)},\"%H\":function(e){return s(e.Sa,2)},\"%I\":function(e){return 0==(e=e.Sa)?e=12:12<e&&(e-=12),s(e,2)},\"%j\":function(e){for(var t=0,n=0;n<=e.Ta-1;t+=(Xe(e.Na+1900)?Ke:Ze)[n++]);return s(e.Va+t,3)},\"%m\":function(e){return s(e.Ta+1,2)},\"%M\":function(e){return s(e.sb,2)},\"%n\":function(){return\"\\\\n\"},\"%p\":function(e){return 0<=e.Sa&&12>e.Sa?\"AM\":\"PM\"},\"%S\":function(e){return s(e.tb,2)},\"%t\":function(){return\"\\\\t\"},\"%u\":function(e){return e.Ja||7},\"%U\":function(e){return s(Math.floor((e.Ma+7-e.Ja)/7),2)},\"%V\":function(e){var t=Math.floor((e.Ma+7-(e.Ja+6)%7)/7);if(2>=(e.Ja+371-e.Ma-2)%7&&t++,t)53==t&&(4==(n=(e.Ja+371-e.Ma)%7)||3==n&&Xe(e.Na)||(t=1));else{t=52;var n=(e.Ja+7-e.Ma-1)%7;(4==n||5==n&&Xe(e.Na%400-1))&&t++}return s(t,2)},\"%w\":function(e){return e.Ja},\"%W\":function(e){return s(Math.floor((e.Ma+7-(e.Ja+6)%7)/7),2)},\"%y\":function(e){return(e.Na+1900).toString().substring(2)},\"%Y\":function(e){return e.Na+1900},\"%z\":function(e){var t=0<=(e=e.rb);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.ub},\"%%\":function(){return\"%\"}},r=r.replace(/%%/g,\"\\\\0\\\\0\"),f)r.includes(p)&&(r=r.replace(new RegExp(p,\"g\"),f[p](o)));return p=function(e){var t=Array(N(e)+1);return B(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\"%\")),p.length>n?0:(function(e,n){t().set(e,n>>>0)}(p,e),p.length-1)}fe.Ua();var tt=[null,ce,de,ve,we,_e,Oe,Se,Te,Ae,Ee,Me,Re,xe,Ce,Pe,ke,Ue,Ie,je,Ne,Ge,qe,$e,Ve,Qe],nt={b:function(e){return at(e+24)+24},c:function(e,t,n){throw new ye(e).Ua(t,n),e},L:function(e){ot(e,!w,1,!b),fe.Za()},l:function(e){O?postMessage({cmd:\"cleanupThread\",thread:e}):se(e)},D:be,i:we,R:_e,z:Oe,B:Se,T:Te,P:Ae,I:Ee,O:Me,p:Re,A:xe,x:Ce,Q:Pe,y:ke,r:function(){},j:function(){ne(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},s:function(){ne(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},q:function(){return Date.now()},E:function(){return 2097152},V:function(){return!0},F:function(e,t,n,r){if(e==t)setTimeout((()=>De(r)));else if(O)postMessage({targetThread:e,cmd:\"processProxyingQueue\",queue:r});else{if(!(e=fe.La[e]))return;e.postMessage({cmd:\"processProxyingQueue\",queue:r})}return 1},K:function(){return-1},W:function(e,t){e=new Date(1e3*Fe(e)),a()[t>>2>>>0]=e.getUTCSeconds(),a()[t+4>>2>>>0]=e.getUTCMinutes(),a()[t+8>>2>>>0]=e.getUTCHours(),a()[t+12>>2>>>0]=e.getUTCDate(),a()[t+16>>2>>>0]=e.getUTCMonth(),a()[t+20>>2>>>0]=e.getUTCFullYear()-1900,a()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[t+28>>2>>>0]=e},X:function(e,t){e=new Date(1e3*Fe(e)),a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),a()[t+20>>2>>>0]=e.getFullYear()-1900,a()[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1),r=(e.getTime()-n.getTime())/864e5|0;a()[t+28>>2>>>0]=r,a()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>2>>>0]=e},Y:function(e){var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),n=a()[e+32>>2>>>0],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),s=o.getTimezoneOffset(),u=Math.min(s,i);return 0>n?a()[e+32>>2>>>0]=Number(i!=s&&u==r):0<n!=(u==r)&&(i=Math.max(s,i),t.setTime(t.getTime()+6e4*((0<n?u:i)-r))),a()[e+24>>2>>>0]=t.getDay(),n=(t.getTime()-o.getTime())/864e5|0,a()[e+28>>2>>>0]=n,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},G:Ue,H:Ie,Z:function e(t,n,r){e.jb||(e.jb=!0,je(t,n,r))},d:function(){ne(\"\")},m:function(){if(!_&&!w){var e=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";me||(me={}),me[e]||(me[e]=1,_&&(e=\"warning: \"+e),x(e))}},w:function(){return 4294901760},f:ge,S:function(e,t,n){r().copyWithin(e>>>0,t>>>0,t+n>>>0)},g:function(){return _?n(993).cpus().length:navigator.hardwareConcurrency},J:function(e,t,n){Ye.length=t,n>>=3;for(var r=0;r<t;r++)Ye[r]=i()[n+r>>>0];return(0>e?oe[-e-1]:tt[e]).apply(null,Ye)},v:function(e){var t=r().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a),o=o.min.call(o,4294901760,a+(65536-a%65536)%65536);e:{try{P.grow(o-D.byteLength+65535>>>16),G(P.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},U:function(){throw\"unwind\"},M:Ne,N:Ge,k:le,h:qe,o:$e,t:Ve,n:Qe,u:function e(r,a){e.Wa||(e.Wa=function(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var e=new Uint8Array(1);return()=>(crypto.getRandomValues(e),e[0])}if(_)try{var t=n(760);return()=>t.randomBytes(1)[0]}catch(e){}return()=>ne(\"randomDevice\")}());for(var o=0;o<a;o++)t()[r+o>>0>>>0]=e.Wa();return 0},a:P||s.wasmMemory,C:et,e:function(e,t,n,r){return et(e,t,n,r)}};!function(){function e(e,t){s.asm=e.exports,fe.$a.push(s.asm.wa),$=s.asm.za,J.unshift(s.asm._),k=t,O||(Z--,s.monitorRunDependencies&&s.monitorRunDependencies(Z),0==Z&&(null!==ee&&(clearInterval(ee),ee=null),te&&(e=te,te=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!M&&(b||w)){if(\"function\"==typeof fetch&&!K.startsWith(\"file://\"))return fetch(K,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at \\'\"+K+\"\\'\";return e.arrayBuffer()})).catch((function(){return ae()}));if(f)return new Promise((function(e,t){f(K,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return ae()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\"failed to asynchronously prepare wasm: \"+e),ne(e)}))}var r={a:nt};if(O||(Z++,s.monitorRunDependencies&&s.monitorRunDependencies(Z)),s.instantiateWasm)try{return s.instantiateWasm(r,e)}catch(e){return x(\"Module.instantiateWasm callback failed with error: \"+e),!1}(M||\"function\"!=typeof WebAssembly.instantiateStreaming||re()||K.startsWith(\"file://\")||_||\"function\"!=typeof fetch?n(t):fetch(K,{credentials:\"same-origin\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return x(\"wasm streaming compile failed: \"+e),x(\"falling back to ArrayBuffer instantiation\"),n(t)}))}))).catch(c)}(),s.___wasm_call_ctors=function(){return(s.___wasm_call_ctors=s.asm._).apply(null,arguments)},s._OrtInit=function(){return(s._OrtInit=s.asm.$).apply(null,arguments)},s._OrtCreateSessionOptions=function(){return(s._OrtCreateSessionOptions=s.asm.aa).apply(null,arguments)},s._OrtAppendExecutionProvider=function(){return(s._OrtAppendExecutionProvider=s.asm.ba).apply(null,arguments)},s._OrtAddSessionConfigEntry=function(){return(s._OrtAddSessionConfigEntry=s.asm.ca).apply(null,arguments)},s._OrtReleaseSessionOptions=function(){return(s._OrtReleaseSessionOptions=s.asm.da).apply(null,arguments)},s._OrtCreateSession=function(){return(s._OrtCreateSession=s.asm.ea).apply(null,arguments)},s._OrtReleaseSession=function(){return(s._OrtReleaseSession=s.asm.fa).apply(null,arguments)},s._OrtGetInputCount=function(){return(s._OrtGetInputCount=s.asm.ga).apply(null,arguments)},s._OrtGetOutputCount=function(){return(s._OrtGetOutputCount=s.asm.ha).apply(null,arguments)},s._OrtGetInputName=function(){return(s._OrtGetInputName=s.asm.ia).apply(null,arguments)},s._OrtGetOutputName=function(){return(s._OrtGetOutputName=s.asm.ja).apply(null,arguments)},s._OrtFree=function(){return(s._OrtFree=s.asm.ka).apply(null,arguments)},s._OrtCreateTensor=function(){return(s._OrtCreateTensor=s.asm.la).apply(null,arguments)},s._OrtGetTensorData=function(){return(s._OrtGetTensorData=s.asm.ma).apply(null,arguments)},s._OrtReleaseTensor=function(){return(s._OrtReleaseTensor=s.asm.na).apply(null,arguments)},s._OrtCreateRunOptions=function(){return(s._OrtCreateRunOptions=s.asm.oa).apply(null,arguments)},s._OrtAddRunConfigEntry=function(){return(s._OrtAddRunConfigEntry=s.asm.pa).apply(null,arguments)},s._OrtReleaseRunOptions=function(){return(s._OrtReleaseRunOptions=s.asm.qa).apply(null,arguments)},s._OrtRun=function(){return(s._OrtRun=s.asm.ra).apply(null,arguments)},s._OrtEndProfiling=function(){return(s._OrtEndProfiling=s.asm.sa).apply(null,arguments)};var rt=s._pthread_self=function(){return(rt=s._pthread_self=s.asm.ta).apply(null,arguments)},at=s._malloc=function(){return(at=s._malloc=s.asm.ua).apply(null,arguments)};s._free=function(){return(s._free=s.asm.va).apply(null,arguments)},s.__emscripten_tls_init=function(){return(s.__emscripten_tls_init=s.asm.wa).apply(null,arguments)};var ot=s.__emscripten_thread_init=function(){return(ot=s.__emscripten_thread_init=s.asm.xa).apply(null,arguments)};s.__emscripten_thread_crashed=function(){return(s.__emscripten_thread_crashed=s.asm.ya).apply(null,arguments)};var it,st=s._emscripten_run_in_main_runtime_thread_js=function(){return(st=s._emscripten_run_in_main_runtime_thread_js=s.asm.Aa).apply(null,arguments)},ut=s.__emscripten_proxy_execute_task_queue=function(){return(ut=s.__emscripten_proxy_execute_task_queue=s.asm.Ba).apply(null,arguments)},ct=s.__emscripten_thread_free_data=function(){return(ct=s.__emscripten_thread_free_data=s.asm.Ca).apply(null,arguments)},lt=s.__emscripten_thread_exit=function(){return(lt=s.__emscripten_thread_exit=s.asm.Da).apply(null,arguments)},ft=s._emscripten_stack_set_limits=function(){return(ft=s._emscripten_stack_set_limits=s.asm.Ea).apply(null,arguments)},pt=s.stackSave=function(){return(pt=s.stackSave=s.asm.Fa).apply(null,arguments)},dt=s.stackRestore=function(){return(dt=s.stackRestore=s.asm.Ga).apply(null,arguments)},mt=s.stackAlloc=function(){return(mt=s.stackAlloc=s.asm.Ha).apply(null,arguments)};function gt(){function e(){if(!it&&(it=!0,s.calledRun=!0,!H)&&(O||pe(J),u(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!O)){if(s.postRun)for(\"function\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();Q.unshift(e)}pe(Q)}}if(!(0<Z))if(O)u(s),O||pe(J),postMessage({cmd:\"loaded\"});else{if(s.preRun)for(\"function\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)X();pe(V),0<Z||(s.setStatus?(s.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){s.setStatus(\"\")}),1),e()}),1)):e())}}if(s.___cxa_is_pointer_type=function(){return(s.___cxa_is_pointer_type=s.asm.Ia).apply(null,arguments)},s.UTF8ToString=z,s.stringToUTF8=function(e,t,n){return B(e,r(),t,n)},s.lengthBytesUTF8=N,s.keepRuntimeAlive=function(){return C},s.wasmMemory=P,s.stackSave=pt,s.stackRestore=dt,s.stackAlloc=mt,s.ExitStatus=ie,s.PThread=fe,te=function e(){it||gt(),it||(te=e)},s.preInit)for(\"function\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return gt(),e.ready});e.exports=r},932:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\"/index.js\",function(e){var t,r,a;e=e||{},t||(t=void 0!==e?e:{}),t.ready=new Promise((function(e,t){r=e,a=t}));var o,i,s,u,c,l,f=Object.assign({},t),p=\"./this.program\",d=(e,t)=>{throw t},m=\"object\"==typeof window,g=\"function\"==typeof importScripts,h=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,y=\"\";h?(y=g?n(908).dirname(y)+\"/\":\"//\",l=()=>{c||(u=n(384),c=n(908))},o=function(e,t){return l(),e=c.normalize(e),u.readFileSync(e,t?void 0:\"utf8\")},s=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,n)=>{l(),e=c.normalize(e),u.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof $))throw e})),process.on(\"unhandledRejection\",(function(e){throw e})),d=(e,t)=>{if(_)throw process.exitCode=e,t;t instanceof $||w(\"exiting due to exception: \"+t),process.exit(e)},t.inspect=function(){return\"[Emscripten Module object]\"}):(m||g)&&(g?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),_scriptDir&&(y=_scriptDir),y=0!==y.indexOf(\"blob:\")?y.substr(0,y.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",o=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},g&&(s=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),i=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var v,b=t.print||console.log.bind(console),w=t.printErr||console.warn.bind(console);Object.assign(t,f),f=null,t.thisProgram&&(p=t.thisProgram),t.quit&&(d=t.quit),t.wasmBinary&&(v=t.wasmBinary);var _=t.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&B(\"no native wasm support detected\");var O,S,T,A,E,M,R=!1,x=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function C(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&x)return x.decode(e.subarray(t,n));for(r=\"\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function P(e,t){return(e>>>=0)?C(A,e,t):\"\"}function k(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function D(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function F(){var e=O.buffer;S=e,t.HEAP8=T=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=E=new Int32Array(e),t.HEAPU8=A=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=M=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e)}var U=[],I=[],W=[];function j(){var e=t.preRun.shift();U.unshift(e)}var H,L=0,Y=null,z=null;function B(e){throw t.onAbort&&t.onAbort(e),w(e=\"Aborted(\"+e+\")\"),R=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),a(e),e}function N(){return H.startsWith(\"data:application/octet-stream;base64,\")}if(H=\"ort-wasm.wasm\",!N()){var G=H;H=t.locateFile?t.locateFile(G,y):y+G}function q(){var e=H;try{if(e==H&&v)return new Uint8Array(v);if(s)return s(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){B(e)}}function $(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function V(e){for(;0<e.length;)e.shift()(t)}function J(e){this.sa=e-24,this.Ia=function(e){M[this.sa+4>>2>>>0]=e},this.Ba=function(e){M[this.sa+8>>2>>>0]=e},this.Ga=function(){E[this.sa>>2>>>0]=0},this.Aa=function(){T[this.sa+12>>0>>>0]=0},this.Ha=function(){T[this.sa+13>>0>>>0]=0},this.ya=function(e,t){this.za(),this.Ia(e),this.Ba(t),this.Ga(),this.Aa(),this.Ha()},this.za=function(){M[this.sa+16>>2>>>0]=0}}function Q(e){var t=D(e)+1,n=ie(t);return n&&k(e,T,n,t),n}var X={};function K(){if(!Z){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:p||\"./this.program\"};for(e in X)void 0===X[e]?delete t[e]:t[e]=X[e];var n=[];for(e in t)n.push(e+\"=\"+t[e]);Z=n}return Z}var Z,ee=[null,[],[]];function te(e){return 0==e%4&&(0!=e%100||0==e%400)}var ne=[31,29,31,30,31,30,31,31,30,31,30,31],re=[31,28,31,30,31,30,31,31,30,31,30,31];function ae(e,t,n,r){function a(e,t,n){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\"0\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.qa;for(e=new Date(new Date(e.ra+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(te(e.getFullYear())?ne:re)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),n=s(n),0>=i(t,e)?0>=i(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=E[r+40>>2>>>0];for(var l in r={Ea:E[r>>2>>>0],Da:E[r+4>>2>>>0],ta:E[r+8>>2>>>0],va:E[r+12>>2>>>0],ua:E[r+16>>2>>>0],ra:E[r+20>>2>>>0],la:E[r+24>>2>>>0],qa:E[r+28>>2>>>0],Ja:E[r+32>>2>>>0],Ca:E[r+36>>2>>>0],Fa:c?P(c):\"\"},n=P(n),c={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})n=n.replace(new RegExp(l,\"g\"),c[l]);var f=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),p=\"January February March April May June July August September October November December\".split(\" \");for(l in c={\"%a\":function(e){return f[e.la].substring(0,3)},\"%A\":function(e){return f[e.la]},\"%b\":function(e){return p[e.ua].substring(0,3)},\"%B\":function(e){return p[e.ua]},\"%C\":function(e){return o((e.ra+1900)/100|0,2)},\"%d\":function(e){return o(e.va,2)},\"%e\":function(e){return a(e.va,2,\" \")},\"%g\":function(e){return u(e).toString().substring(2)},\"%G\":function(e){return u(e)},\"%H\":function(e){return o(e.ta,2)},\"%I\":function(e){return 0==(e=e.ta)?e=12:12<e&&(e-=12),o(e,2)},\"%j\":function(e){for(var t=0,n=0;n<=e.ua-1;t+=(te(e.ra+1900)?ne:re)[n++]);return o(e.va+t,3)},\"%m\":function(e){return o(e.ua+1,2)},\"%M\":function(e){return o(e.Da,2)},\"%n\":function(){return\"\\\\n\"},\"%p\":function(e){return 0<=e.ta&&12>e.ta?\"AM\":\"PM\"},\"%S\":function(e){return o(e.Ea,2)},\"%t\":function(){return\"\\\\t\"},\"%u\":function(e){return e.la||7},\"%U\":function(e){return o(Math.floor((e.qa+7-e.la)/7),2)},\"%V\":function(e){var t=Math.floor((e.qa+7-(e.la+6)%7)/7);if(2>=(e.la+371-e.qa-2)%7&&t++,t)53==t&&(4==(n=(e.la+371-e.qa)%7)||3==n&&te(e.ra)||(t=1));else{t=52;var n=(e.la+7-e.qa-1)%7;(4==n||5==n&&te(e.ra%400-1))&&t++}return o(t,2)},\"%w\":function(e){return e.la},\"%W\":function(e){return o(Math.floor((e.qa+7-(e.la+6)%7)/7),2)},\"%y\":function(e){return(e.ra+1900).toString().substring(2)},\"%Y\":function(e){return e.ra+1900},\"%z\":function(e){var t=0<=(e=e.Ca);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.Fa},\"%%\":function(){return\"%\"}},n=n.replace(/%%/g,\"\\\\0\\\\0\"),c)n.includes(l)&&(n=n.replace(new RegExp(l,\"g\"),c[l](r)));return l=function(e){var t=Array(D(e)+1);return k(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\"%\")),l.length>t?0:(T.set(l,e>>>0),l.length-1)}var oe={a:function(e){return ie(e+24)+24},b:function(e,t,n){throw new J(e).ya(t,n),e},g:function(){return 0},I:function(){},w:function(){},y:function(){},K:function(){return 0},G:function(){},C:function(){},F:function(){},k:function(){},x:function(){},u:function(){},H:function(){},v:function(){},n:function(){},p:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},o:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(){return Date.now()},L:function(){return!0},M:function(e,t){e=new Date(1e3*(M[e>>>2]+4294967296*E[e+4>>>2])),E[t>>2>>>0]=e.getUTCSeconds(),E[t+4>>2>>>0]=e.getUTCMinutes(),E[t+8>>2>>>0]=e.getUTCHours(),E[t+12>>2>>>0]=e.getUTCDate(),E[t+16>>2>>>0]=e.getUTCMonth(),E[t+20>>2>>>0]=e.getUTCFullYear()-1900,E[t+24>>2>>>0]=e.getUTCDay(),E[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},N:function(e,t){e=new Date(1e3*(M[e>>>2]+4294967296*E[e+4>>>2])),E[t>>2>>>0]=e.getSeconds(),E[t+4>>2>>>0]=e.getMinutes(),E[t+8>>2>>>0]=e.getHours(),E[t+12>>2>>>0]=e.getDate(),E[t+16>>2>>>0]=e.getMonth(),E[t+20>>2>>>0]=e.getFullYear()-1900,E[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1);E[t+28>>2>>>0]=(e.getTime()-n.getTime())/864e5|0,E[t+36>>2>>>0]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),E[t+32>>2>>>0]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},O:function(e){var t=new Date(E[e+20>>2>>>0]+1900,E[e+16>>2>>>0],E[e+12>>2>>>0],E[e+8>>2>>>0],E[e+4>>2>>>0],E[e>>2>>>0],0),n=E[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=a.getTimezoneOffset(),s=Math.min(i,o);return 0>n?E[e+32>>2>>>0]=Number(o!=i&&s==r):0<n!=(s==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?s:o)-r))),E[e+24>>2>>>0]=t.getDay(),E[e+28>>2>>>0]=(t.getTime()-a.getTime())/864e5|0,E[e>>2>>>0]=t.getSeconds(),E[e+4>>2>>>0]=t.getMinutes(),E[e+8>>2>>>0]=t.getHours(),E[e+12>>2>>>0]=t.getDate(),E[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},z:function(){return-52},B:function(){},m:function e(t,n,r){e.xa||(e.xa=!0,function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\"GMT\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var s=i.getTimezoneOffset();E[e>>2>>>0]=60*Math.max(a,s),E[t>>2>>>0]=Number(a!=s),e=r(o),t=r(i),e=Q(e),t=Q(t),s<a?(M[n>>2>>>0]=e,M[n+4>>2>>>0]=t):(M[n>>2>>>0]=t,M[n+4>>2>>>0]=e)}(t,n,r))},d:function(){B(\"\")},t:function(){return 4294901760},h:h?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now(),J:function(e,t,n){A.copyWithin(e>>>0,t>>>0,t+n>>>0)},f:function(e){var t=A.length;if(4294901760<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);e:{try{O.grow(a-S.byteLength+65535>>>16),F();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},D:function(e,t){var n=0;return K().forEach((function(r,a){var o=t+n;for(a=M[e+4*a>>2>>>0]=o,o=0;o<r.length;++o)T[a++>>0>>>0]=r.charCodeAt(o);T[a>>0>>>0]=0,n+=r.length+1})),0},E:function(e,t){var n=K();M[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),M[t>>2>>>0]=r,0},r:function(e){_||(t.onExit&&t.onExit(e),R=!0),d(e,new $(e))},e:function(){return 52},j:function(){return 52},q:function(){return 70},i:function(e,t,n,r){for(var a=0,o=0;o<n;o++){var i=M[t>>2>>>0],s=M[t+4>>2>>>0];t+=8;for(var u=0;u<s;u++){var c=A[i+u>>>0],l=ee[e];0===c||10===c?((1===e?b:w)(C(l,0)),l.length=0):l.push(c)}a+=s}return M[r>>2>>>0]=a,0},s:function e(t,r){e.wa||(e.wa=function(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var e=new Uint8Array(1);return()=>(crypto.getRandomValues(e),e[0])}if(h)try{var t=n(760);return()=>t.randomBytes(1)[0]}catch(e){}return()=>B(\"randomDevice\")}());for(var a=0;a<r;a++)T[t+a>>0>>>0]=e.wa();return 0},A:ae,c:function(e,t,n,r){return ae(e,t,n,r)}};!function(){function e(e){t.asm=e.exports,O=t.asm.P,F(),I.unshift(t.asm.Q),L--,t.monitorRunDependencies&&t.monitorRunDependencies(L),0==L&&(null!==Y&&(clearInterval(Y),Y=null),z&&(e=z,z=null,e()))}function n(t){e(t.instance)}function r(e){return function(){if(!v&&(m||g)){if(\"function\"==typeof fetch&&!H.startsWith(\"file://\"))return fetch(H,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at \\'\"+H+\"\\'\";return e.arrayBuffer()})).catch((function(){return q()}));if(i)return new Promise((function(e,t){i(H,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return q()}))}().then((function(e){return WebAssembly.instantiate(e,o)})).then((function(e){return e})).then(e,(function(e){w(\"failed to asynchronously prepare wasm: \"+e),B(e)}))}var o={a:oe};if(L++,t.monitorRunDependencies&&t.monitorRunDependencies(L),t.instantiateWasm)try{return t.instantiateWasm(o,e)}catch(e){return w(\"Module.instantiateWasm callback failed with error: \"+e),!1}(v||\"function\"!=typeof WebAssembly.instantiateStreaming||N()||H.startsWith(\"file://\")||h||\"function\"!=typeof fetch?r(n):fetch(H,{credentials:\"same-origin\"}).then((function(e){return WebAssembly.instantiateStreaming(e,o).then(n,(function(e){return w(\"wasm streaming compile failed: \"+e),w(\"falling back to ArrayBuffer instantiation\"),r(n)}))}))).catch(a)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.Q).apply(null,arguments)},t._OrtInit=function(){return(t._OrtInit=t.asm.R).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.S).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.T).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.U).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.V).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.W).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.X).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.Y).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm.Z).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm._).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.$).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.aa).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.ba).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.ca).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.da).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.ea).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.fa).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.ga).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.ha).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.ia).apply(null,arguments)};var ie=t._malloc=function(){return(ie=t._malloc=t.asm.ja).apply(null,arguments)};t._free=function(){return(t._free=t.asm.ka).apply(null,arguments)};var se,ue=t.stackSave=function(){return(ue=t.stackSave=t.asm.ma).apply(null,arguments)},ce=t.stackRestore=function(){return(ce=t.stackRestore=t.asm.na).apply(null,arguments)},le=t.stackAlloc=function(){return(le=t.stackAlloc=t.asm.oa).apply(null,arguments)};function fe(){function e(){if(!se&&(se=!0,t.calledRun=!0,!R)){if(V(I),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\"function\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();W.unshift(e)}V(W)}}if(!(0<L)){if(t.preRun)for(\"function\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)j();V(U),0<L||(t.setStatus?(t.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){t.setStatus(\"\")}),1),e()}),1)):e())}}if(t.___cxa_is_pointer_type=function(){return(t.___cxa_is_pointer_type=t.asm.pa).apply(null,arguments)},t.UTF8ToString=P,t.stringToUTF8=function(e,t,n){return k(e,A,t,n)},t.lengthBytesUTF8=D,t.stackSave=ue,t.stackRestore=ce,t.stackAlloc=le,z=function e(){se||fe(),se||(z=e)},t.preInit)for(\"function\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return fe(),e.ready});e.exports=r},154:e=>{\"use strict\";e.exports=\\'\"use strict\";var e={},t=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;if(t){var r=require(\"worker_threads\"),a=r.parentPort;a.on(\"message\",(e=>onmessage({data:e})));var o=require(\"fs\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\"utf8\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\" \");t?o.writeSync(2,e+\"\\\\\\\\n\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\" \");postMessage({cmd:\"alert\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\"load\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\"string\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\"run\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\"unwind\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\"cancel\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\"setimmediate\"===t.data.target||(\"processProxyingQueue\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\"worker.js received unknown command \"+t.data.cmd),i(t.data)))}catch(t){throw i(\"worker.js onmessage() captured an uncaught exception: \"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\\\n\\'},760:()=>{},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.g=function(){if(\"object\"==typeof globalThis)return globalThis;try{return this||new Function(\"return this\")()}catch(e){if(\"object\"==typeof window)return window}}(),(()=>{\"use strict\";const e=n(259),t=n(263);self.onmessage=n=>{switch(n.data.type){case\"init-wasm\":(0,t.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:\"init-wasm\"})),(e=>postMessage({type:\"init-wasm\",err:e})));break;case\"init-ort\":try{const{numThreads:t,loggingLevel:r}=n.data.in;(0,e.initOrt)(t,r),postMessage({type:\"init-ort\"})}catch(e){postMessage({type:\"init-ort\",err:e})}break;case\"create_allocate\":try{const{model:t}=n.data.in,r=(0,e.createSessionAllocate)(t);postMessage({type:\"create_allocate\",out:r})}catch(e){postMessage({type:\"create_allocate\",err:e})}break;case\"create_finalize\":try{const{modeldata:t,options:r}=n.data.in,a=(0,e.createSessionFinalize)(t,r);postMessage({type:\"create_finalize\",out:a})}catch(e){postMessage({type:\"create_finalize\",err:e})}break;case\"create\":try{const{model:t,options:r}=n.data.in,a=(0,e.createSession)(t,r);postMessage({type:\"create\",out:a})}catch(e){postMessage({type:\"create\",err:e})}break;case\"release\":try{const t=n.data.in;(0,e.releaseSession)(t),postMessage({type:\"release\"})}catch(e){postMessage({type:\"release\",err:e})}break;case\"run\":try{const{sessionId:t,inputIndices:r,inputs:a,outputIndices:o,options:i}=n.data.in;(0,e.run)(t,r,a,o,i).then((t=>{postMessage({type:\"run\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\"run\",err:e})}))}catch(e){postMessage({type:\"run\",err:e})}break;case\"end-profiling\":try{const t=n.data.in;(0,e.endProfiling)(t),postMessage({type:\"end-profiling\"})}catch(e){postMessage({type:\"end-profiling\",err:e})}}}})()})();\\n',\"Worker\",void 0,void 0);}},6614:function _(e){\"use strict\";e.exports=function(e,t,n,r){var o=self||window;try{try{var i;try{i=new o.Blob([e]);}catch(t){(i=new(o.BlobBuilder||o.WebKitBlobBuilder||o.MozBlobBuilder||o.MSBlobBuilder)()).append(e),i=i.getBlob();}var a=o.URL||o.webkitURL,s=a.createObjectURL(i),u=new o[t](s,n);return a.revokeObjectURL(s),u;}catch(r){return new o[t](\"data:application/javascript,\".concat(encodeURIComponent(e)),n);}}catch(e){if(!r)throw Error(\"Inline worker is not supported\");return new o[t](r,n);}};},3474:function _(e,t,n){var _scriptDir,r=(_scriptDir=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\"/index.js\",function(e){function t(){return D.buffer!=C&&H(D.buffer),R;}function r(){return D.buffer!=C&&H(D.buffer),M;}function o(){return D.buffer!=C&&H(D.buffer),N;}function i(){return D.buffer!=C&&H(D.buffer),F;}function a(){return D.buffer!=C&&H(D.buffer),L;}var s,u,l;e=e||{},s||(s=void 0!==e?e:{}),s.ready=new Promise(function(e,t){u=e,l=t;});var c,p,d,f,h,g,m=Object.assign({},s),b=\"./this.program\",y=function y(e,t){throw t;},w=\"object\"==(typeof window===\"undefined\"?\"undefined\":_typeof2(window)),_=\"function\"==typeof importScripts,v=\"object\"==(typeof process===\"undefined\"?\"undefined\":_typeof2(process))&&\"object\"==_typeof2(process.versions)&&\"string\"==typeof process.versions.node,x=s.ENVIRONMENT_IS_PTHREAD||!1,T=\"\";function S(e){return s.locateFile?s.locateFile(e,T):T+e;}if(v){var _t101;T=_?n(908).dirname(T)+\"/\":\"//\",g=function g(){h||(f=n(1384),h=n(908));},c=function c(e,t){return g(),e=h.normalize(e),f.readFileSync(e,t?void 0:\"utf8\");},d=function d(e){return(e=c(e,!0)).buffer||(e=new Uint8Array(e)),e;},p=function p(e,t,n){g(),e=h.normalize(e),f.readFile(e,function(e,r){e?n(e):t(r.buffer);});},1<process.argv.length&&(b=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(e){if(!(e instanceof ae))throw e;}),process.on(\"unhandledRejection\",function(e){throw e;}),y=function y(e,t){if(P)throw process.exitCode=e,t;t instanceof ae||$(\"exiting due to exception: \"+t),process.exit(e);},s.inspect=function(){return\"[Emscripten Module object]\";};try{_t101=n(9925);}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e;}n.g.Worker=_t101.Worker;}else(w||_)&&(_?T=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(T=document.currentScript.src),_scriptDir&&(T=_scriptDir),T=0!==T.indexOf(\"blob:\")?T.substr(0,T.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(c=function c(e){var t=new XMLHttpRequest();return t.open(\"GET\",e,!1),t.send(null),t.responseText;},_&&(d=function d(e){var t=new XMLHttpRequest();return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response);}),p=function p(e,t,n){var r=new XMLHttpRequest();r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?t(r.response):n();},r.onerror=n,r.send(null);}));v&&\"undefined\"==typeof performance&&(n.g.performance=n(6953).performance);var O=console.log.bind(console),A=console.warn.bind(console);v&&(g(),O=function O(e){return f.writeSync(1,e+\"\\n\");},A=function A(e){return f.writeSync(2,e+\"\\n\");});var E,I=s.print||O,$=s.printErr||A;Object.assign(s,m),m=null,s.thisProgram&&(b=s.thisProgram),s.quit&&(y=s.quit),s.wasmBinary&&(E=s.wasmBinary);var P=s.noExitRuntime||!0;\"object\"!=(typeof WebAssembly===\"undefined\"?\"undefined\":_typeof2(WebAssembly))&&ne(\"no native wasm support detected\");var D,k,C,R,M,N,F,L,j=!1,U=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function B(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&U)return U.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\"\";t<n;){var o=e[t++];if(128&o){var i=63&e[t++];if(192==(224&o))r+=String.fromCharCode((31&o)<<6|i);else{var a=63&e[t++];65536>(o=224==(240&o)?(15&o)<<12|i<<6|a:(7&o)<<18|i<<12|a<<6|63&e[t++])?r+=String.fromCharCode(o):(o-=65536,r+=String.fromCharCode(55296|o>>10,56320|1023&o));}}else r+=String.fromCharCode(o);}return r;}function G(e,t){return(e>>>=0)?B(r(),e,t):\"\";}function V(e,t,n,r){if(!(0<r))return 0;var o=n>>>=0;r=n+r-1;for(var i=0;i<e.length;++i){var a=e.charCodeAt(i);if(55296<=a&&57343>=a&&(a=65536+((1023&a)<<10)|1023&e.charCodeAt(++i)),127>=a){if(n>=r)break;t[n++>>>0]=a;}else{if(2047>=a){if(n+1>=r)break;t[n++>>>0]=192|a>>6;}else{if(65535>=a){if(n+2>=r)break;t[n++>>>0]=224|a>>12;}else{if(n+3>=r)break;t[n++>>>0]=240|a>>18,t[n++>>>0]=128|a>>12&63;}t[n++>>>0]=128|a>>6&63;}t[n++>>>0]=128|63&a;}}return t[n>>>0]=0,n-o;}function z(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3;}return t;}function H(e){C=e,s.HEAP8=R=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=N=new Int32Array(e),s.HEAPU8=M=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=F=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=L=new Float64Array(e);}x&&(C=s.buffer);var W=s.INITIAL_MEMORY||16777216;if(x)D=s.wasmMemory,C=s.buffer;else if(s.wasmMemory)D=s.wasmMemory;else if(!((D=new WebAssembly.Memory({initial:W/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw $(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");D&&(C=D.buffer),W=C.byteLength,H(C);var q,K=[],X=[],Y=[];function J(){var e=s.preRun.shift();K.unshift(e);}var Z,Q=0,ee=null,te=null;function ne(e){throw x?postMessage({cmd:\"onAbort\",arg:e}):s.onAbort&&s.onAbort(e),$(e=\"Aborted(\"+e+\")\"),j=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),l(e),e;}function re(){return Z.startsWith(\"data:application/octet-stream;base64,\");}function oe(){var e=Z;try{if(e==Z&&E)return new Uint8Array(E);if(d)return d(e);throw\"both async and sync fetching of the wasm failed\";}catch(e){ne(e);}}Z=\"ort-wasm-threaded.wasm\",re()||(Z=S(Z));var ie={};function ae(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e;}function se(e){(e=pe.La[e])||ne(),pe.Xa(e);}function ue(e){var t=pe.lb();if(!t)return 6;pe.Ra.push(t),pe.La[e.Ka]=t,t.Ka=e.Ka;var n={cmd:\"run\",start_routine:e.pb,arg:e.ib,pthread_ptr:e.Ka};return t.Qa=function(){n.time=performance.now(),t.postMessage(n,e.vb);},t.loaded&&(t.Qa(),delete t.Qa),0;}function le(e){if(x)return je(1,1,e);P||(pe.qb(),s.onExit&&s.onExit(e),j=!0),y(e,new ae(e));}function ce(e,t){if(!t&&x)throw fe(e),\"unwind\";le(e);}var pe={Oa:[],Ra:[],$a:[],La:{},Ua:function Ua(){x&&pe.mb();},xb:function xb(){},mb:function mb(){pe.receiveObjectTransfer=pe.ob,pe.threadInitTLS=pe.Za,pe.setExitStatus=pe.Ya,P=!1;},Ya:function Ya(){},qb:function qb(){for(var _i45=0,_Object$values=Object.values(pe.La);_i45<_Object$values.length;_i45++){var e=_Object$values[_i45];pe.Xa(e);}var _iterator42=_createForOfIteratorHelper(pe.Oa),_step42;try{for(_iterator42.s();!(_step42=_iterator42.n()).done;){e=_step42.value;e.terminate();}}catch(err){_iterator42.e(err);}finally{_iterator42.f();}pe.Oa=[];},Xa:function Xa(e){var t=e.Ka;delete pe.La[t],pe.Oa.push(e),pe.Ra.splice(pe.Ra.indexOf(e),1),e.Ka=0,lt(t);},ob:function ob(){},Za:function Za(){pe.$a.forEach(function(e){return e();});},nb:function nb(e,t){e.onmessage=function(n){var r=(n=n.data).cmd;if(e.Ka&&(pe.kb=e.Ka),n.targetThread&&n.targetThread!=rt()){var o=pe.La[n.yb];o?o.postMessage(n,n.transferList):$('Internal error! Worker sent a message \"'+r+'\" to target pthread '+n.targetThread+\", but that thread no longer exists!\");}else\"processProxyingQueue\"===r?Ce(n.queue):\"spawnThread\"===r?ue(n):\"cleanupThread\"===r?se(n.thread):\"killThread\"===r?(n=n.thread,r=pe.La[n],delete pe.La[n],r.terminate(),lt(n),pe.Ra.splice(pe.Ra.indexOf(r),1),r.Ka=0):\"cancelThread\"===r?pe.La[n.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(e.loaded=!0,t&&t(e),e.Qa&&(e.Qa(),delete e.Qa)):\"print\"===r?I(\"Thread \"+n.threadId+\": \"+n.text):\"printErr\"===r?$(\"Thread \"+n.threadId+\": \"+n.text):\"alert\"===r?alert(\"Thread \"+n.threadId+\": \"+n.text):\"setimmediate\"===n.target?e.postMessage(n):\"onAbort\"===r?s.onAbort&&s.onAbort(n.arg):r&&$(\"worker sent an unknown command \"+r);pe.kb=void 0;},e.onerror=function(e){throw $(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e;},v&&(e.on(\"message\",function(t){e.onmessage({data:t});}),e.on(\"error\",function(t){e.onerror(t);}),e.on(\"detachedExit\",function(){})),e.postMessage({cmd:\"load\",urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:D,wasmModule:k});},hb:function hb(){var e=S(\"ort-wasm-threaded.worker.js\");pe.Oa.push(new Worker(e));},lb:function lb(){return 0==pe.Oa.length&&(pe.hb(),pe.nb(pe.Oa[0])),pe.Oa.pop();}};function de(e){for(;0<e.length;)e.shift()(s);}function fe(e){if(x)return je(2,0,e);try{ce(e);}catch(e){e instanceof ae||\"unwind\"==e||y(1,e);}}s.PThread=pe,s.establishStackSpace=function(){var e=rt(),t=o()[e+44>>2>>>0];e=o()[e+48>>2>>>0],pt(t,t-e),ft(t);};var he,ge,me=[];function be(e){this.Pa=e-24,this.gb=function(e){i()[this.Pa+4>>2>>>0]=e;},this.cb=function(e){i()[this.Pa+8>>2>>>0]=e;},this.eb=function(){o()[this.Pa>>2>>>0]=0;},this.bb=function(){t()[this.Pa+12>>0>>>0]=0;},this.fb=function(){t()[this.Pa+13>>0>>>0]=0;},this.Ua=function(e,t){this.ab(),this.gb(e),this.cb(t),this.eb(),this.bb(),this.fb();},this.ab=function(){i()[this.Pa+16>>2>>>0]=0;};}function ye(e,t,n,r){return x?je(3,1,e,t,n,r):we(e,t,n,r);}function we(e,t,n,r){if(\"undefined\"==typeof SharedArrayBuffer)return $(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var o=[];return x&&0===o.length?ye(e,t,n,r):(e={pb:n,Ka:e,ib:r,vb:o},x?(e.wb=\"spawnThread\",postMessage(e,o),0):ue(e));}function _e(e,t,n){return x?je(4,1,e,t,n):0;}function ve(e,t){if(x)return je(5,1,e,t);}function xe(e,t){if(x)return je(6,1,e,t);}function Te(e,t,n){if(x)return je(7,1,e,t,n);}function Se(e,t,n){return x?je(8,1,e,t,n):0;}function Oe(e,t){if(x)return je(9,1,e,t);}function Ae(e,t,n){if(x)return je(10,1,e,t,n);}function Ee(e,t,n,r){if(x)return je(11,1,e,t,n,r);}function Ie(e,t,n,r){if(x)return je(12,1,e,t,n,r);}function $e(e,t,n,r){if(x)return je(13,1,e,t,n,r);}function Pe(e){if(x)return je(14,1,e);}function De(e,t){if(x)return je(15,1,e,t);}function ke(e,t,n){if(x)return je(16,1,e,t,n);}function Ce(e){Atomics.store(o(),e>>2,1),rt()&&ut(e),Atomics.compareExchange(o(),e>>2,1,0);}function Re(e){return i()[e>>>2]+4294967296*o()[e+4>>>2];}function Me(e,t,n,r,o,i){return x?je(17,1,e,t,n,r,o,i):-52;}function Ne(e,t,n,r,o,i){if(x)return je(18,1,e,t,n,r,o,i);}function Fe(e){var n=z(e)+1,r=ot(n);return r&&V(e,t(),r,n),r;}function Le(e,t,n){function r(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\";}if(x)return je(19,1,e,t,n);var a=new Date().getFullYear(),s=new Date(a,0,1),u=new Date(a,6,1);a=s.getTimezoneOffset();var l=u.getTimezoneOffset(),c=Math.max(a,l);o()[e>>2>>>0]=60*c,o()[t>>2>>>0]=Number(a!=l),e=r(s),t=r(u),e=Fe(e),t=Fe(t),l<a?(i()[n>>2>>>0]=e,i()[n+4>>2>>>0]=t):(i()[n>>2>>>0]=t,i()[n+4>>2>>>0]=e);}function je(e,t){var n=arguments.length-2,r=arguments;return function(e){var t=dt();return e=e(),ft(t),e;}(function(){for(var o=ht(8*n),i=o>>3,s=0;s<n;s++){var u=r[2+s];a()[i+s>>>0]=u;}return st(e,n,o,t);});}s.invokeEntryPoint=function(e,t){var n=me[e];n||(e>=me.length&&(me.length=e+1),me[e]=n=q.get(e)),e=n(t),P?pe.Ya(e):ct(e);},s.executeNotifiedProxyingQueue=Ce,ge=v?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6;}:x?function(){return performance.now()-s.__performance_now_clock_drift;}:function(){return performance.now();};var Ue,Be=[],Ge={};function Ve(){if(!Ue){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==(typeof navigator===\"undefined\"?\"undefined\":_typeof2(navigator))&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:b||\"./this.program\"};for(e in Ge)void 0===Ge[e]?delete t[e]:t[e]=Ge[e];var n=[];for(e in t)n.push(e+\"=\"+t[e]);Ue=n;}return Ue;}function ze(e,n){if(x)return je(20,1,e,n);var r=0;return Ve().forEach(function(o,a){var s=n+r;for(a=i()[e+4*a>>2>>>0]=s,s=0;s<o.length;++s)t()[a++>>0>>>0]=o.charCodeAt(s);t()[a>>0>>>0]=0,r+=o.length+1;}),0;}function He(e,t){if(x)return je(21,1,e,t);var n=Ve();i()[e>>2>>>0]=n.length;var r=0;return n.forEach(function(e){r+=e.length+1;}),i()[t>>2>>>0]=r,0;}function We(e){return x?je(22,1,e):52;}function qe(e,t,n,r){return x?je(23,1,e,t,n,r):52;}function Ke(e,t,n,r,o){return x?je(24,1,e,t,n,r,o):70;}var Xe=[null,[],[]];function Ye(e,t,n,o){if(x)return je(25,1,e,t,n,o);for(var a=0,s=0;s<n;s++){var u=i()[t>>2>>>0],l=i()[t+4>>2>>>0];t+=8;for(var c=0;c<l;c++){var p=r()[u+c>>>0],d=Xe[e];0===p||10===p?((1===e?I:$)(B(d,0)),d.length=0):d.push(p);}a+=l;}return i()[o>>2>>>0]=a,0;}function Je(e){return 0==e%4&&(0!=e%100||0==e%400);}var Ze=[31,29,31,30,31,30,31,31,30,31,30,31],Qe=[31,28,31,30,31,30,31,31,30,31,30,31];function et(e,n,r,i){function a(e,t,n){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=n[0]+e;return e;}function s(e,t){return a(e,t,\"0\");}function u(e,t){function n(e){return 0>e?-1:0<e?1:0;}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r;}function l(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30);}}function c(e){var t=e.Ma;for(e=new Date(new Date(e.Na+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(Je(e.getFullYear())?Ze:Qe)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break;}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1));}return n=new Date(e.getFullYear()+1,0,4),t=l(new Date(e.getFullYear(),0,4)),n=l(n),0>=u(t,e)?0>=u(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1;}var p=o()[i+40>>2>>>0];for(var d in i={tb:o()[i>>2>>>0],sb:o()[i+4>>2>>>0],Sa:o()[i+8>>2>>>0],Va:o()[i+12>>2>>>0],Ta:o()[i+16>>2>>>0],Na:o()[i+20>>2>>>0],Ja:o()[i+24>>2>>>0],Ma:o()[i+28>>2>>>0],zb:o()[i+32>>2>>>0],rb:o()[i+36>>2>>>0],ub:p?G(p):\"\"},r=G(r),p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})r=r.replace(new RegExp(d,\"g\"),p[d]);var f=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(d in p={\"%a\":function a(e){return f[e.Ja].substring(0,3);},\"%A\":function A(e){return f[e.Ja];},\"%b\":function b(e){return h[e.Ta].substring(0,3);},\"%B\":function B(e){return h[e.Ta];},\"%C\":function C(e){return s((e.Na+1900)/100|0,2);},\"%d\":function d(e){return s(e.Va,2);},\"%e\":function e(_e144){return a(_e144.Va,2,\" \");},\"%g\":function g(e){return c(e).toString().substring(2);},\"%G\":function G(e){return c(e);},\"%H\":function H(e){return s(e.Sa,2);},\"%I\":function I(e){return 0==(e=e.Sa)?e=12:12<e&&(e-=12),s(e,2);},\"%j\":function j(e){for(var t=0,n=0;n<=e.Ta-1;t+=(Je(e.Na+1900)?Ze:Qe)[n++]);return s(e.Va+t,3);},\"%m\":function m(e){return s(e.Ta+1,2);},\"%M\":function M(e){return s(e.sb,2);},\"%n\":function n(){return\"\\n\";},\"%p\":function p(e){return 0<=e.Sa&&12>e.Sa?\"AM\":\"PM\";},\"%S\":function S(e){return s(e.tb,2);},\"%t\":function t(){return\"\\t\";},\"%u\":function u(e){return e.Ja||7;},\"%U\":function U(e){return s(Math.floor((e.Ma+7-e.Ja)/7),2);},\"%V\":function V(e){var t=Math.floor((e.Ma+7-(e.Ja+6)%7)/7);if(2>=(e.Ja+371-e.Ma-2)%7&&t++,t)53==t&&(4==(n=(e.Ja+371-e.Ma)%7)||3==n&&Je(e.Na)||(t=1));else{t=52;var n=(e.Ja+7-e.Ma-1)%7;(4==n||5==n&&Je(e.Na%400-1))&&t++;}return s(t,2);},\"%w\":function w(e){return e.Ja;},\"%W\":function W(e){return s(Math.floor((e.Ma+7-(e.Ja+6)%7)/7),2);},\"%y\":function y(e){return(e.Na+1900).toString().substring(2);},\"%Y\":function Y(e){return e.Na+1900;},\"%z\":function z(e){var t=0<=(e=e.rb);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4);},\"%Z\":function Z(e){return e.ub;},\"%%\":function _(){return\"%\";}},r=r.replace(/%%/g,\"\\0\\0\"),p)r.includes(d)&&(r=r.replace(new RegExp(d,\"g\"),p[d](i)));return d=function(e){var t=Array(z(e)+1);return V(e,t,0,t.length),t;}(r=r.replace(/\\0\\0/g,\"%\")),d.length>n?0:(function(e,n){t().set(e,n>>>0);}(d,e),d.length-1);}pe.Ua();var tt=[null,le,fe,ye,_e,ve,xe,Te,Se,Oe,Ae,Ee,Ie,$e,Pe,De,ke,Me,Ne,Le,ze,He,We,qe,Ke,Ye],nt={b:function b(e){return ot(e+24)+24;},c:function c(e,t,n){throw new be(e).Ua(t,n),e;},L:function L(e){it(e,!_,1,!w),pe.Za();},l:function l(e){x?postMessage({cmd:\"cleanupThread\",thread:e}):se(e);},D:we,i:_e,R:ve,z:xe,B:Te,T:Se,P:Oe,I:Ae,O:Ee,p:Ie,A:$e,x:Pe,Q:De,y:ke,r:function r(){},j:function j(){ne(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\");},s:function s(){ne(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\");},q:function q(){return Date.now();},E:function E(){return 2097152;},V:function V(){return!0;},F:function F(e,t,n,r){if(e==t)setTimeout(function(){return Ce(r);});else if(x)postMessage({targetThread:e,cmd:\"processProxyingQueue\",queue:r});else{if(!(e=pe.La[e]))return;e.postMessage({cmd:\"processProxyingQueue\",queue:r});}return 1;},K:function K(){return-1;},W:function W(e,t){e=new Date(1e3*Re(e)),o()[t>>2>>>0]=e.getUTCSeconds(),o()[t+4>>2>>>0]=e.getUTCMinutes(),o()[t+8>>2>>>0]=e.getUTCHours(),o()[t+12>>2>>>0]=e.getUTCDate(),o()[t+16>>2>>>0]=e.getUTCMonth(),o()[t+20>>2>>>0]=e.getUTCFullYear()-1900,o()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,o()[t+28>>2>>>0]=e;},X:function X(e,t){e=new Date(1e3*Re(e)),o()[t>>2>>>0]=e.getSeconds(),o()[t+4>>2>>>0]=e.getMinutes(),o()[t+8>>2>>>0]=e.getHours(),o()[t+12>>2>>>0]=e.getDate(),o()[t+16>>2>>>0]=e.getMonth(),o()[t+20>>2>>>0]=e.getFullYear()-1900,o()[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1),r=(e.getTime()-n.getTime())/864e5|0;o()[t+28>>2>>>0]=r,o()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),o()[t+32>>2>>>0]=e;},Y:function Y(e){var t=new Date(o()[e+20>>2>>>0]+1900,o()[e+16>>2>>>0],o()[e+12>>2>>>0],o()[e+8>>2>>>0],o()[e+4>>2>>>0],o()[e>>2>>>0],0),n=o()[e+32>>2>>>0],r=t.getTimezoneOffset(),i=new Date(t.getFullYear(),0,1),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),s=i.getTimezoneOffset(),u=Math.min(s,a);return 0>n?o()[e+32>>2>>>0]=Number(a!=s&&u==r):0<n!=(u==r)&&(a=Math.max(s,a),t.setTime(t.getTime()+6e4*((0<n?u:a)-r))),o()[e+24>>2>>>0]=t.getDay(),n=(t.getTime()-i.getTime())/864e5|0,o()[e+28>>2>>>0]=n,o()[e>>2>>>0]=t.getSeconds(),o()[e+4>>2>>>0]=t.getMinutes(),o()[e+8>>2>>>0]=t.getHours(),o()[e+12>>2>>>0]=t.getDate(),o()[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0;},G:Me,H:Ne,Z:function e(t,n,r){e.jb||(e.jb=!0,Le(t,n,r));},d:function d(){ne(\"\");},m:function m(){if(!v&&!_){var e=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";he||(he={}),he[e]||(he[e]=1,v&&(e=\"warning: \"+e),$(e));}},w:function w(){return 4294901760;},f:ge,S:function S(e,t,n){r().copyWithin(e>>>0,t>>>0,t+n>>>0);},g:function g(){return v?n(3993).cpus().length:navigator.hardwareConcurrency;},J:function J(e,t,n){Be.length=t,n>>=3;for(var r=0;r<t;r++)Be[r]=a()[n+r>>>0];return(0>e?ie[-e-1]:tt[e]).apply(null,Be);},v:function v(e){var t=r().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var o=t*(1+.2/n);o=Math.min(o,e+100663296);var i=Math;o=Math.max(e,o),i=i.min.call(i,4294901760,o+(65536-o%65536)%65536);e:{try{D.grow(i-C.byteLength+65535>>>16),H(D.buffer);var a=1;break e;}catch(e){}a=void 0;}if(a)return!0;}return!1;},U:function U(){throw\"unwind\";},M:ze,N:He,k:ce,h:We,o:qe,t:Ke,n:Ye,u:function e(r,o){e.Wa||(e.Wa=function(){if(\"object\"==(typeof crypto===\"undefined\"?\"undefined\":_typeof2(crypto))&&\"function\"==typeof crypto.getRandomValues){var e=new Uint8Array(1);return function(){return crypto.getRandomValues(e),e[0];};}if(v)try{var t=n(760);return function(){return t.randomBytes(1)[0];};}catch(e){}return function(){return ne(\"randomDevice\");};}());for(var i=0;i<o;i++)t()[r+i>>0>>>0]=e.Wa();return 0;},a:D||s.wasmMemory,C:et,e:function e(_e145,t,n,r){return et(_e145,t,n,r);}};!function(){function e(e,t){s.asm=e.exports,pe.$a.push(s.asm.wa),q=s.asm.za,X.unshift(s.asm._),k=t,x||(Q--,s.monitorRunDependencies&&s.monitorRunDependencies(Q),0==Q&&(null!==ee&&(clearInterval(ee),ee=null),te&&(e=te,te=null,e())));}function t(t){e(t.instance,t.module);}function n(e){return function(){if(!E&&(w||_)){if(\"function\"==typeof fetch&&!Z.startsWith(\"file://\"))return fetch(Z,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+Z+\"'\";return e.arrayBuffer();})[\"catch\"](function(){return oe();});if(p)return new Promise(function(e,t){p(Z,function(t){e(new Uint8Array(t));},t);});}return Promise.resolve().then(function(){return oe();});}().then(function(e){return WebAssembly.instantiate(e,r);}).then(function(e){return e;}).then(e,function(e){$(\"failed to asynchronously prepare wasm: \"+e),ne(e);});}var r={a:nt};if(x||(Q++,s.monitorRunDependencies&&s.monitorRunDependencies(Q)),s.instantiateWasm)try{return s.instantiateWasm(r,e);}catch(e){return $(\"Module.instantiateWasm callback failed with error: \"+e),!1;}(E||\"function\"!=typeof WebAssembly.instantiateStreaming||re()||Z.startsWith(\"file://\")||v||\"function\"!=typeof fetch?n(t):fetch(Z,{credentials:\"same-origin\"}).then(function(e){return WebAssembly.instantiateStreaming(e,r).then(t,function(e){return $(\"wasm streaming compile failed: \"+e),$(\"falling back to ArrayBuffer instantiation\"),n(t);});}))[\"catch\"](l);}(),s.___wasm_call_ctors=function(){return(s.___wasm_call_ctors=s.asm._).apply(null,arguments);},s._OrtInit=function(){return(s._OrtInit=s.asm.$).apply(null,arguments);},s._OrtCreateSessionOptions=function(){return(s._OrtCreateSessionOptions=s.asm.aa).apply(null,arguments);},s._OrtAppendExecutionProvider=function(){return(s._OrtAppendExecutionProvider=s.asm.ba).apply(null,arguments);},s._OrtAddSessionConfigEntry=function(){return(s._OrtAddSessionConfigEntry=s.asm.ca).apply(null,arguments);},s._OrtReleaseSessionOptions=function(){return(s._OrtReleaseSessionOptions=s.asm.da).apply(null,arguments);},s._OrtCreateSession=function(){return(s._OrtCreateSession=s.asm.ea).apply(null,arguments);},s._OrtReleaseSession=function(){return(s._OrtReleaseSession=s.asm.fa).apply(null,arguments);},s._OrtGetInputCount=function(){return(s._OrtGetInputCount=s.asm.ga).apply(null,arguments);},s._OrtGetOutputCount=function(){return(s._OrtGetOutputCount=s.asm.ha).apply(null,arguments);},s._OrtGetInputName=function(){return(s._OrtGetInputName=s.asm.ia).apply(null,arguments);},s._OrtGetOutputName=function(){return(s._OrtGetOutputName=s.asm.ja).apply(null,arguments);},s._OrtFree=function(){return(s._OrtFree=s.asm.ka).apply(null,arguments);},s._OrtCreateTensor=function(){return(s._OrtCreateTensor=s.asm.la).apply(null,arguments);},s._OrtGetTensorData=function(){return(s._OrtGetTensorData=s.asm.ma).apply(null,arguments);},s._OrtReleaseTensor=function(){return(s._OrtReleaseTensor=s.asm.na).apply(null,arguments);},s._OrtCreateRunOptions=function(){return(s._OrtCreateRunOptions=s.asm.oa).apply(null,arguments);},s._OrtAddRunConfigEntry=function(){return(s._OrtAddRunConfigEntry=s.asm.pa).apply(null,arguments);},s._OrtReleaseRunOptions=function(){return(s._OrtReleaseRunOptions=s.asm.qa).apply(null,arguments);},s._OrtRun=function(){return(s._OrtRun=s.asm.ra).apply(null,arguments);},s._OrtEndProfiling=function(){return(s._OrtEndProfiling=s.asm.sa).apply(null,arguments);};var rt=s._pthread_self=function(){return(rt=s._pthread_self=s.asm.ta).apply(null,arguments);},ot=s._malloc=function(){return(ot=s._malloc=s.asm.ua).apply(null,arguments);};s._free=function(){return(s._free=s.asm.va).apply(null,arguments);},s.__emscripten_tls_init=function(){return(s.__emscripten_tls_init=s.asm.wa).apply(null,arguments);};var it=s.__emscripten_thread_init=function(){return(it=s.__emscripten_thread_init=s.asm.xa).apply(null,arguments);};s.__emscripten_thread_crashed=function(){return(s.__emscripten_thread_crashed=s.asm.ya).apply(null,arguments);};var at,st=s._emscripten_run_in_main_runtime_thread_js=function(){return(st=s._emscripten_run_in_main_runtime_thread_js=s.asm.Aa).apply(null,arguments);},ut=s.__emscripten_proxy_execute_task_queue=function(){return(ut=s.__emscripten_proxy_execute_task_queue=s.asm.Ba).apply(null,arguments);},lt=s.__emscripten_thread_free_data=function(){return(lt=s.__emscripten_thread_free_data=s.asm.Ca).apply(null,arguments);},ct=s.__emscripten_thread_exit=function(){return(ct=s.__emscripten_thread_exit=s.asm.Da).apply(null,arguments);},pt=s._emscripten_stack_set_limits=function(){return(pt=s._emscripten_stack_set_limits=s.asm.Ea).apply(null,arguments);},dt=s.stackSave=function(){return(dt=s.stackSave=s.asm.Fa).apply(null,arguments);},ft=s.stackRestore=function(){return(ft=s.stackRestore=s.asm.Ga).apply(null,arguments);},ht=s.stackAlloc=function(){return(ht=s.stackAlloc=s.asm.Ha).apply(null,arguments);};function gt(){function e(){if(!at&&(at=!0,s.calledRun=!0,!j)&&(x||de(X),u(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!x)){if(s.postRun)for(\"function\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();Y.unshift(e);}de(Y);}}if(!(0<Q))if(x)u(s),x||de(X),postMessage({cmd:\"loaded\"});else{if(s.preRun)for(\"function\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)J();de(K),0<Q||(s.setStatus?(s.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){s.setStatus(\"\");},1),e();},1)):e());}}if(s.___cxa_is_pointer_type=function(){return(s.___cxa_is_pointer_type=s.asm.Ia).apply(null,arguments);},s.UTF8ToString=G,s.stringToUTF8=function(e,t,n){return V(e,r(),t,n);},s.lengthBytesUTF8=z,s.keepRuntimeAlive=function(){return P;},s.wasmMemory=D,s.stackSave=dt,s.stackRestore=ft,s.stackAlloc=ht,s.ExitStatus=ae,s.PThread=pe,te=function e(){at||gt(),at||(te=e);},s.preInit)for(\"function\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return gt(),e.ready;});e.exports=r;},932:function _(e,t,n){var _scriptDir,r=(_scriptDir=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\"/index.js\",function(e){var t,r,o;e=e||{},t||(t=void 0!==e?e:{}),t.ready=new Promise(function(e,t){r=e,o=t;});var i,a,s,u,l,c,p=Object.assign({},t),d=\"./this.program\",f=function f(e,t){throw t;},h=\"object\"==(typeof window===\"undefined\"?\"undefined\":_typeof2(window)),g=\"function\"==typeof importScripts,m=\"object\"==(typeof process===\"undefined\"?\"undefined\":_typeof2(process))&&\"object\"==_typeof2(process.versions)&&\"string\"==typeof process.versions.node,b=\"\";m?(b=g?n(908).dirname(b)+\"/\":\"//\",c=function c(){l||(u=n(1384),l=n(908));},i=function i(e,t){return c(),e=l.normalize(e),u.readFileSync(e,t?void 0:\"utf8\");},s=function s(e){return(e=i(e,!0)).buffer||(e=new Uint8Array(e)),e;},a=function a(e,t,n){c(),e=l.normalize(e),u.readFile(e,function(e,r){e?n(e):t(r.buffer);});},1<process.argv.length&&(d=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(e){if(!(e instanceof q))throw e;}),process.on(\"unhandledRejection\",function(e){throw e;}),f=function f(e,t){if(v)throw process.exitCode=e,t;t instanceof q||_(\"exiting due to exception: \"+t),process.exit(e);},t.inspect=function(){return\"[Emscripten Module object]\";}):(h||g)&&(g?b=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(b=document.currentScript.src),_scriptDir&&(b=_scriptDir),b=0!==b.indexOf(\"blob:\")?b.substr(0,b.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",i=function i(e){var t=new XMLHttpRequest();return t.open(\"GET\",e,!1),t.send(null),t.responseText;},g&&(s=function s(e){var t=new XMLHttpRequest();return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response);}),a=function a(e,t,n){var r=new XMLHttpRequest();r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=function(){200==r.status||0==r.status&&r.response?t(r.response):n();},r.onerror=n,r.send(null);});var y,w=t.print||console.log.bind(console),_=t.printErr||console.warn.bind(console);Object.assign(t,p),p=null,t.thisProgram&&(d=t.thisProgram),t.quit&&(f=t.quit),t.wasmBinary&&(y=t.wasmBinary);var v=t.noExitRuntime||!0;\"object\"!=(typeof WebAssembly===\"undefined\"?\"undefined\":_typeof2(WebAssembly))&&V(\"no native wasm support detected\");var x,T,S,O,A,_E,I=!1,$=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function P(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&$)return $.decode(e.subarray(t,n));for(r=\"\";t<n;){var o=e[t++];if(128&o){var i=63&e[t++];if(192==(224&o))r+=String.fromCharCode((31&o)<<6|i);else{var a=63&e[t++];65536>(o=224==(240&o)?(15&o)<<12|i<<6|a:(7&o)<<18|i<<12|a<<6|63&e[t++])?r+=String.fromCharCode(o):(o-=65536,r+=String.fromCharCode(55296|o>>10,56320|1023&o));}}else r+=String.fromCharCode(o);}return r;}function D(e,t){return(e>>>=0)?P(O,e,t):\"\";}function k(e,t,n,r){if(!(0<r))return 0;var o=n>>>=0;r=n+r-1;for(var i=0;i<e.length;++i){var a=e.charCodeAt(i);if(55296<=a&&57343>=a&&(a=65536+((1023&a)<<10)|1023&e.charCodeAt(++i)),127>=a){if(n>=r)break;t[n++>>>0]=a;}else{if(2047>=a){if(n+1>=r)break;t[n++>>>0]=192|a>>6;}else{if(65535>=a){if(n+2>=r)break;t[n++>>>0]=224|a>>12;}else{if(n+3>=r)break;t[n++>>>0]=240|a>>18,t[n++>>>0]=128|a>>12&63;}t[n++>>>0]=128|a>>6&63;}t[n++>>>0]=128|63&a;}}return t[n>>>0]=0,n-o;}function C(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3;}return t;}function R(){var e=x.buffer;T=e,t.HEAP8=S=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=A=new Int32Array(e),t.HEAPU8=O=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=_E=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e);}var M=[],N=[],F=[];function L(){var e=t.preRun.shift();M.unshift(e);}var j,U=0,B=null,G=null;function V(e){throw t.onAbort&&t.onAbort(e),_(e=\"Aborted(\"+e+\")\"),I=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),o(e),e;}function z(){return j.startsWith(\"data:application/octet-stream;base64,\");}if(j=\"ort-wasm.wasm\",!z()){var H=j;j=t.locateFile?t.locateFile(H,b):b+H;}function W(){var e=j;try{if(e==j&&y)return new Uint8Array(y);if(s)return s(e);throw\"both async and sync fetching of the wasm failed\";}catch(e){V(e);}}function q(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e;}function K(e){for(;0<e.length;)e.shift()(t);}function X(e){this.sa=e-24,this.Ia=function(e){_E[this.sa+4>>2>>>0]=e;},this.Ba=function(e){_E[this.sa+8>>2>>>0]=e;},this.Ga=function(){A[this.sa>>2>>>0]=0;},this.Aa=function(){S[this.sa+12>>0>>>0]=0;},this.Ha=function(){S[this.sa+13>>0>>>0]=0;},this.ya=function(e,t){this.za(),this.Ia(e),this.Ba(t),this.Ga(),this.Aa(),this.Ha();},this.za=function(){_E[this.sa+16>>2>>>0]=0;};}function Y(e){var t=C(e)+1,n=ae(t);return n&&k(e,S,n,t),n;}var J={};function Z(){if(!Q){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==(typeof navigator===\"undefined\"?\"undefined\":_typeof2(navigator))&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:d||\"./this.program\"};for(e in J)void 0===J[e]?delete t[e]:t[e]=J[e];var n=[];for(e in t)n.push(e+\"=\"+t[e]);Q=n;}return Q;}var Q,ee=[null,[],[]];function te(e){return 0==e%4&&(0!=e%100||0==e%400);}var ne=[31,29,31,30,31,30,31,31,30,31,30,31],re=[31,28,31,30,31,30,31,31,30,31,30,31];function oe(e,t,n,r){function o(e,t,n){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=n[0]+e;return e;}function i(e,t){return o(e,t,\"0\");}function a(e,t){function n(e){return 0>e?-1:0<e?1:0;}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r;}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30);}}function u(e){var t=e.qa;for(e=new Date(new Date(e.ra+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(te(e.getFullYear())?ne:re)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break;}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1));}return n=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),n=s(n),0>=a(t,e)?0>=a(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1;}var l=A[r+40>>2>>>0];for(var c in r={Ea:A[r>>2>>>0],Da:A[r+4>>2>>>0],ta:A[r+8>>2>>>0],va:A[r+12>>2>>>0],ua:A[r+16>>2>>>0],ra:A[r+20>>2>>>0],la:A[r+24>>2>>>0],qa:A[r+28>>2>>>0],Ja:A[r+32>>2>>>0],Ca:A[r+36>>2>>>0],Fa:l?D(l):\"\"},n=D(n),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})n=n.replace(new RegExp(c,\"g\"),l[c]);var p=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),d=\"January February March April May June July August September October November December\".split(\" \");for(c in l={\"%a\":function a(e){return p[e.la].substring(0,3);},\"%A\":function A(e){return p[e.la];},\"%b\":function b(e){return d[e.ua].substring(0,3);},\"%B\":function B(e){return d[e.ua];},\"%C\":function C(e){return i((e.ra+1900)/100|0,2);},\"%d\":function d(e){return i(e.va,2);},\"%e\":function e(_e146){return o(_e146.va,2,\" \");},\"%g\":function g(e){return u(e).toString().substring(2);},\"%G\":function G(e){return u(e);},\"%H\":function H(e){return i(e.ta,2);},\"%I\":function I(e){return 0==(e=e.ta)?e=12:12<e&&(e-=12),i(e,2);},\"%j\":function j(e){for(var t=0,n=0;n<=e.ua-1;t+=(te(e.ra+1900)?ne:re)[n++]);return i(e.va+t,3);},\"%m\":function m(e){return i(e.ua+1,2);},\"%M\":function M(e){return i(e.Da,2);},\"%n\":function n(){return\"\\n\";},\"%p\":function p(e){return 0<=e.ta&&12>e.ta?\"AM\":\"PM\";},\"%S\":function S(e){return i(e.Ea,2);},\"%t\":function t(){return\"\\t\";},\"%u\":function u(e){return e.la||7;},\"%U\":function U(e){return i(Math.floor((e.qa+7-e.la)/7),2);},\"%V\":function V(e){var t=Math.floor((e.qa+7-(e.la+6)%7)/7);if(2>=(e.la+371-e.qa-2)%7&&t++,t)53==t&&(4==(n=(e.la+371-e.qa)%7)||3==n&&te(e.ra)||(t=1));else{t=52;var n=(e.la+7-e.qa-1)%7;(4==n||5==n&&te(e.ra%400-1))&&t++;}return i(t,2);},\"%w\":function w(e){return e.la;},\"%W\":function W(e){return i(Math.floor((e.qa+7-(e.la+6)%7)/7),2);},\"%y\":function y(e){return(e.ra+1900).toString().substring(2);},\"%Y\":function Y(e){return e.ra+1900;},\"%z\":function z(e){var t=0<=(e=e.Ca);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4);},\"%Z\":function Z(e){return e.Fa;},\"%%\":function _(){return\"%\";}},n=n.replace(/%%/g,\"\\0\\0\"),l)n.includes(c)&&(n=n.replace(new RegExp(c,\"g\"),l[c](r)));return c=function(e){var t=Array(C(e)+1);return k(e,t,0,t.length),t;}(n=n.replace(/\\0\\0/g,\"%\")),c.length>t?0:(S.set(c,e>>>0),c.length-1);}var ie={a:function a(e){return ae(e+24)+24;},b:function b(e,t,n){throw new X(e).ya(t,n),e;},g:function g(){return 0;},I:function I(){},w:function w(){},y:function y(){},K:function K(){return 0;},G:function G(){},C:function C(){},F:function F(){},k:function k(){},x:function x(){},u:function u(){},H:function H(){},v:function v(){},n:function n(){},p:function p(){V(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\");},o:function o(){V(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\");},l:function l(){return Date.now();},L:function L(){return!0;},M:function M(e,t){e=new Date(1e3*(_E[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getUTCSeconds(),A[t+4>>2>>>0]=e.getUTCMinutes(),A[t+8>>2>>>0]=e.getUTCHours(),A[t+12>>2>>>0]=e.getUTCDate(),A[t+16>>2>>>0]=e.getUTCMonth(),A[t+20>>2>>>0]=e.getUTCFullYear()-1900,A[t+24>>2>>>0]=e.getUTCDay(),A[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0;},N:function N(e,t){e=new Date(1e3*(_E[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getSeconds(),A[t+4>>2>>>0]=e.getMinutes(),A[t+8>>2>>>0]=e.getHours(),A[t+12>>2>>>0]=e.getDate(),A[t+16>>2>>>0]=e.getMonth(),A[t+20>>2>>>0]=e.getFullYear()-1900,A[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1);A[t+28>>2>>>0]=(e.getTime()-n.getTime())/864e5|0,A[t+36>>2>>>0]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),A[t+32>>2>>>0]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r));},O:function O(e){var t=new Date(A[e+20>>2>>>0]+1900,A[e+16>>2>>>0],A[e+12>>2>>>0],A[e+8>>2>>>0],A[e+4>>2>>>0],A[e>>2>>>0],0),n=A[e+32>>2>>>0],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),a=o.getTimezoneOffset(),s=Math.min(a,i);return 0>n?A[e+32>>2>>>0]=Number(i!=a&&s==r):0<n!=(s==r)&&(i=Math.max(a,i),t.setTime(t.getTime()+6e4*((0<n?s:i)-r))),A[e+24>>2>>>0]=t.getDay(),A[e+28>>2>>>0]=(t.getTime()-o.getTime())/864e5|0,A[e>>2>>>0]=t.getSeconds(),A[e+4>>2>>>0]=t.getMinutes(),A[e+8>>2>>>0]=t.getHours(),A[e+12>>2>>>0]=t.getDate(),A[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0;},z:function z(){return-52;},B:function B(){},m:function e(t,n,r){e.xa||(e.xa=!0,function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\";}var o=new Date().getFullYear(),i=new Date(o,0,1),a=new Date(o,6,1);o=i.getTimezoneOffset();var s=a.getTimezoneOffset();A[e>>2>>>0]=60*Math.max(o,s),A[t>>2>>>0]=Number(o!=s),e=r(i),t=r(a),e=Y(e),t=Y(t),s<o?(_E[n>>2>>>0]=e,_E[n+4>>2>>>0]=t):(_E[n>>2>>>0]=t,_E[n+4>>2>>>0]=e);}(t,n,r));},d:function d(){V(\"\");},t:function t(){return 4294901760;},h:m?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6;}:function(){return performance.now();},J:function J(e,t,n){O.copyWithin(e>>>0,t>>>0,t+n>>>0);},f:function f(e){var t=O.length;if(4294901760<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var o=Math;r=Math.max(e,r),o=o.min.call(o,4294901760,r+(65536-r%65536)%65536);e:{try{x.grow(o-T.byteLength+65535>>>16),R();var i=1;break e;}catch(e){}i=void 0;}if(i)return!0;}return!1;},D:function D(e,t){var n=0;return Z().forEach(function(r,o){var i=t+n;for(o=_E[e+4*o>>2>>>0]=i,i=0;i<r.length;++i)S[o++>>0>>>0]=r.charCodeAt(i);S[o>>0>>>0]=0,n+=r.length+1;}),0;},E:function E(e,t){var n=Z();_E[e>>2>>>0]=n.length;var r=0;return n.forEach(function(e){r+=e.length+1;}),_E[t>>2>>>0]=r,0;},r:function r(e){v||(t.onExit&&t.onExit(e),I=!0),f(e,new q(e));},e:function e(){return 52;},j:function j(){return 52;},q:function q(){return 70;},i:function i(e,t,n,r){for(var o=0,i=0;i<n;i++){var a=_E[t>>2>>>0],s=_E[t+4>>2>>>0];t+=8;for(var u=0;u<s;u++){var l=O[a+u>>>0],c=ee[e];0===l||10===l?((1===e?w:_)(P(c,0)),c.length=0):c.push(l);}o+=s;}return _E[r>>2>>>0]=o,0;},s:function e(t,r){e.wa||(e.wa=function(){if(\"object\"==(typeof crypto===\"undefined\"?\"undefined\":_typeof2(crypto))&&\"function\"==typeof crypto.getRandomValues){var e=new Uint8Array(1);return function(){return crypto.getRandomValues(e),e[0];};}if(m)try{var t=n(760);return function(){return t.randomBytes(1)[0];};}catch(e){}return function(){return V(\"randomDevice\");};}());for(var o=0;o<r;o++)S[t+o>>0>>>0]=e.wa();return 0;},A:oe,c:function c(e,t,n,r){return oe(e,t,n,r);}};!function(){function e(e){t.asm=e.exports,x=t.asm.P,R(),N.unshift(t.asm.Q),U--,t.monitorRunDependencies&&t.monitorRunDependencies(U),0==U&&(null!==B&&(clearInterval(B),B=null),G&&(e=G,G=null,e()));}function n(t){e(t.instance);}function r(e){return function(){if(!y&&(h||g)){if(\"function\"==typeof fetch&&!j.startsWith(\"file://\"))return fetch(j,{credentials:\"same-origin\"}).then(function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+j+\"'\";return e.arrayBuffer();})[\"catch\"](function(){return W();});if(a)return new Promise(function(e,t){a(j,function(t){e(new Uint8Array(t));},t);});}return Promise.resolve().then(function(){return W();});}().then(function(e){return WebAssembly.instantiate(e,i);}).then(function(e){return e;}).then(e,function(e){_(\"failed to asynchronously prepare wasm: \"+e),V(e);});}var i={a:ie};if(U++,t.monitorRunDependencies&&t.monitorRunDependencies(U),t.instantiateWasm)try{return t.instantiateWasm(i,e);}catch(e){return _(\"Module.instantiateWasm callback failed with error: \"+e),!1;}(y||\"function\"!=typeof WebAssembly.instantiateStreaming||z()||j.startsWith(\"file://\")||m||\"function\"!=typeof fetch?r(n):fetch(j,{credentials:\"same-origin\"}).then(function(e){return WebAssembly.instantiateStreaming(e,i).then(n,function(e){return _(\"wasm streaming compile failed: \"+e),_(\"falling back to ArrayBuffer instantiation\"),r(n);});}))[\"catch\"](o);}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.Q).apply(null,arguments);},t._OrtInit=function(){return(t._OrtInit=t.asm.R).apply(null,arguments);},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.S).apply(null,arguments);},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.T).apply(null,arguments);},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.U).apply(null,arguments);},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.V).apply(null,arguments);},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.W).apply(null,arguments);},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.X).apply(null,arguments);},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.Y).apply(null,arguments);},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm.Z).apply(null,arguments);},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm._).apply(null,arguments);},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.$).apply(null,arguments);},t._OrtFree=function(){return(t._OrtFree=t.asm.aa).apply(null,arguments);},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.ba).apply(null,arguments);},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.ca).apply(null,arguments);},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.da).apply(null,arguments);},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.ea).apply(null,arguments);},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.fa).apply(null,arguments);},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.ga).apply(null,arguments);},t._OrtRun=function(){return(t._OrtRun=t.asm.ha).apply(null,arguments);},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.ia).apply(null,arguments);};var ae=t._malloc=function(){return(ae=t._malloc=t.asm.ja).apply(null,arguments);};t._free=function(){return(t._free=t.asm.ka).apply(null,arguments);};var se,ue=t.stackSave=function(){return(ue=t.stackSave=t.asm.ma).apply(null,arguments);},le=t.stackRestore=function(){return(le=t.stackRestore=t.asm.na).apply(null,arguments);},ce=t.stackAlloc=function(){return(ce=t.stackAlloc=t.asm.oa).apply(null,arguments);};function pe(){function e(){if(!se&&(se=!0,t.calledRun=!0,!I)){if(K(N),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\"function\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();F.unshift(e);}K(F);}}if(!(0<U)){if(t.preRun)for(\"function\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)L();K(M),0<U||(t.setStatus?(t.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){t.setStatus(\"\");},1),e();},1)):e());}}if(t.___cxa_is_pointer_type=function(){return(t.___cxa_is_pointer_type=t.asm.pa).apply(null,arguments);},t.UTF8ToString=D,t.stringToUTF8=function(e,t,n){return k(e,O,t,n);},t.lengthBytesUTF8=C,t.stackSave=ue,t.stackRestore=le,t.stackAlloc=ce,G=function e(){se||pe(),se||(G=e);},t.preInit)for(\"function\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return pe(),e.ready;});e.exports=r;},4537:function _(e){\"use strict\";e.exports=function(e,t){for(var n=new Array(arguments.length-1),r=0,o=2,i=!0;o<arguments.length;)n[r++]=arguments[o++];return new Promise(function(o,a){n[r]=function(e){if(i)if(i=!1,e)a(e);else{for(var t=new Array(arguments.length-1),n=0;n<t.length;)t[n++]=arguments[n];o.apply(null,t);}};try{e.apply(t||null,n);}catch(e){i&&(i=!1,a(e));}});};},7419:function _(e,t){\"use strict\";var n=t;n.length=function(e){var t=e.length;if(!t)return 0;for(var n=0;--t%4>1&&\"=\"===e.charAt(t);)++n;return Math.ceil(3*e.length)/4-n;};for(var r=new Array(64),o=new Array(123),i=0;i<64;)o[r[i]=i<26?i+65:i<52?i+71:i<62?i-4:i-59|43]=i++;n.encode=function(e,t,n){for(var o,i=null,a=[],s=0,u=0;t<n;){var l=e[t++];switch(u){case 0:a[s++]=r[l>>2],o=(3&l)<<4,u=1;break;case 1:a[s++]=r[o|l>>4],o=(15&l)<<2,u=2;break;case 2:a[s++]=r[o|l>>6],a[s++]=r[63&l],u=0;}s>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,a)),s=0);}return u&&(a[s++]=r[o],a[s++]=61,1===u&&(a[s++]=61)),i?(s&&i.push(String.fromCharCode.apply(String,a.slice(0,s))),i.join(\"\")):String.fromCharCode.apply(String,a.slice(0,s));};var a=\"invalid encoding\";n.decode=function(e,t,n){for(var r,i=n,s=0,u=0;u<e.length;){var l=e.charCodeAt(u++);if(61===l&&s>1)break;if(void 0===(l=o[l]))throw Error(a);switch(s){case 0:r=l,s=1;break;case 1:t[n++]=r<<2|(48&l)>>4,r=l,s=2;break;case 2:t[n++]=(15&r)<<4|(60&l)>>2,r=l,s=3;break;case 3:t[n++]=(3&r)<<6|l,s=0;}}if(1===s)throw Error(a);return n-i;},n.test=function(e){return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e);};},9211:function _(e){\"use strict\";function t(){this._listeners={};}e.exports=t,t.prototype.on=function(e,t,n){return(this._listeners[e]||(this._listeners[e]=[])).push({fn:t,ctx:n||this}),this;},t.prototype.off=function(e,t){if(void 0===e)this._listeners={};else if(void 0===t)this._listeners[e]=[];else for(var n=this._listeners[e],r=0;r<n.length;)n[r].fn===t?n.splice(r,1):++r;return this;},t.prototype.emit=function(e){var t=this._listeners[e];if(t){for(var n=[],r=1;r<arguments.length;)n.push(arguments[r++]);for(r=0;r<t.length;)t[r].fn.apply(t[r++].ctx,n);}return this;};},945:function _(e){\"use strict\";function t(e){return\"undefined\"!=typeof Float32Array?function(){var t=new Float32Array([-0]),n=new Uint8Array(t.buffer),r=128===n[3];function o(e,r,o){t[0]=e,r[o]=n[0],r[o+1]=n[1],r[o+2]=n[2],r[o+3]=n[3];}function i(e,r,o){t[0]=e,r[o]=n[3],r[o+1]=n[2],r[o+2]=n[1],r[o+3]=n[0];}function a(e,r){return n[0]=e[r],n[1]=e[r+1],n[2]=e[r+2],n[3]=e[r+3],t[0];}function s(e,r){return n[3]=e[r],n[2]=e[r+1],n[1]=e[r+2],n[0]=e[r+3],t[0];}e.writeFloatLE=r?o:i,e.writeFloatBE=r?i:o,e.readFloatLE=r?a:s,e.readFloatBE=r?s:a;}():function(){function t(e,t,n,r){var o=t<0?1:0;if(o&&(t=-t),0===t)e(1/t>0?0:2147483648,n,r);else if(isNaN(t))e(2143289344,n,r);else if(t>34028234663852886e22)e((o<<31|2139095040)>>>0,n,r);else if(t<11754943508222875e-54)e((o<<31|Math.round(t/1401298464324817e-60))>>>0,n,r);else{var i=Math.floor(Math.log(t)/Math.LN2);e((o<<31|i+127<<23|8388607&Math.round(t*Math.pow(2,-i)*8388608))>>>0,n,r);}}function a(e,t,n){var r=e(t,n),o=2*(r>>31)+1,i=r>>>23&255,a=8388607&r;return 255===i?a?NaN:o*(1/0):0===i?1401298464324817e-60*o*a:o*Math.pow(2,i-150)*(a+8388608);}e.writeFloatLE=t.bind(null,n),e.writeFloatBE=t.bind(null,r),e.readFloatLE=a.bind(null,o),e.readFloatBE=a.bind(null,i);}(),\"undefined\"!=typeof Float64Array?function(){var t=new Float64Array([-0]),n=new Uint8Array(t.buffer),r=128===n[7];function o(e,r,o){t[0]=e,r[o]=n[0],r[o+1]=n[1],r[o+2]=n[2],r[o+3]=n[3],r[o+4]=n[4],r[o+5]=n[5],r[o+6]=n[6],r[o+7]=n[7];}function i(e,r,o){t[0]=e,r[o]=n[7],r[o+1]=n[6],r[o+2]=n[5],r[o+3]=n[4],r[o+4]=n[3],r[o+5]=n[2],r[o+6]=n[1],r[o+7]=n[0];}function a(e,r){return n[0]=e[r],n[1]=e[r+1],n[2]=e[r+2],n[3]=e[r+3],n[4]=e[r+4],n[5]=e[r+5],n[6]=e[r+6],n[7]=e[r+7],t[0];}function s(e,r){return n[7]=e[r],n[6]=e[r+1],n[5]=e[r+2],n[4]=e[r+3],n[3]=e[r+4],n[2]=e[r+5],n[1]=e[r+6],n[0]=e[r+7],t[0];}e.writeDoubleLE=r?o:i,e.writeDoubleBE=r?i:o,e.readDoubleLE=r?a:s,e.readDoubleBE=r?s:a;}():function(){function t(e,t,n,r,o,i){var a=r<0?1:0;if(a&&(r=-r),0===r)e(0,o,i+t),e(1/r>0?0:2147483648,o,i+n);else if(isNaN(r))e(0,o,i+t),e(2146959360,o,i+n);else if(r>17976931348623157e292)e(0,o,i+t),e((a<<31|2146435072)>>>0,o,i+n);else{var s;if(r<22250738585072014e-324)e((s=r/5e-324)>>>0,o,i+t),e((a<<31|s/4294967296)>>>0,o,i+n);else{var u=Math.floor(Math.log(r)/Math.LN2);1024===u&&(u=1023),e(4503599627370496*(s=r*Math.pow(2,-u))>>>0,o,i+t),e((a<<31|u+1023<<20|1048576*s&1048575)>>>0,o,i+n);}}}function a(e,t,n,r,o){var i=e(r,o+t),a=e(r,o+n),s=2*(a>>31)+1,u=a>>>20&2047,l=4294967296*(1048575&a)+i;return 2047===u?l?NaN:s*(1/0):0===u?5e-324*s*l:s*Math.pow(2,u-1075)*(l+4503599627370496);}e.writeDoubleLE=t.bind(null,n,0,4),e.writeDoubleBE=t.bind(null,r,4,0),e.readDoubleLE=a.bind(null,o,0,4),e.readDoubleBE=a.bind(null,i,4,0);}(),e;}function n(e,t,n){t[n]=255&e,t[n+1]=e>>>8&255,t[n+2]=e>>>16&255,t[n+3]=e>>>24;}function r(e,t,n){t[n]=e>>>24,t[n+1]=e>>>16&255,t[n+2]=e>>>8&255,t[n+3]=255&e;}function o(e,t){return(e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24)>>>0;}function i(e,t){return(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0;}e.exports=t(t);},7199:function _(module){\"use strict\";function inquire(moduleName){try{var mod=eval(\"quire\".replace(/^/,\"re\"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod;}catch(e){}return null;}module.exports=inquire;},6662:function _(e){\"use strict\";e.exports=function(e,t,n){var r=n||8192,o=r>>>1,i=null,a=r;return function(n){if(n<1||n>o)return e(n);a+n>r&&(i=e(r),a=0);var s=t.call(i,a,a+=n);return 7&a&&(a=1+(7|a)),s;};};},4997:function _(e,t){\"use strict\";var n=t;n.length=function(e){for(var t=0,n=0,r=0;r<e.length;++r)(n=e.charCodeAt(r))<128?t+=1:n<2048?t+=2:55296==(64512&n)&&56320==(64512&e.charCodeAt(r+1))?(++r,t+=4):t+=3;return t;},n.read=function(e,t,n){if(n-t<1)return\"\";for(var r,o=null,i=[],a=0;t<n;)(r=e[t++])<128?i[a++]=r:r>191&&r<224?i[a++]=(31&r)<<6|63&e[t++]:r>239&&r<365?(r=((7&r)<<18|(63&e[t++])<<12|(63&e[t++])<<6|63&e[t++])-65536,i[a++]=55296+(r>>10),i[a++]=56320+(1023&r)):i[a++]=(15&r)<<12|(63&e[t++])<<6|63&e[t++],a>8191&&((o||(o=[])).push(String.fromCharCode.apply(String,i)),a=0);return o?(a&&o.push(String.fromCharCode.apply(String,i.slice(0,a))),o.join(\"\")):String.fromCharCode.apply(String,i.slice(0,a));},n.write=function(e,t,n){for(var r,o,i=n,a=0;a<e.length;++a)(r=e.charCodeAt(a))<128?t[n++]=r:r<2048?(t[n++]=r>>6|192,t[n++]=63&r|128):55296==(64512&r)&&56320==(64512&(o=e.charCodeAt(a+1)))?(r=65536+((1023&r)<<10)+(1023&o),++a,t[n++]=r>>18|240,t[n++]=r>>12&63|128,t[n++]=r>>6&63|128,t[n++]=63&r|128):(t[n++]=r>>12|224,t[n++]=r>>6&63|128,t[n++]=63&r|128);return n-i;};},3442:function _(e,t){\"use strict\";t.__esModule=!0;var n=function(){function e(t){if(!t)throw new TypeError(\"Invalid argument; `value` has no value.\");this.value=e.EMPTY,t&&e.isGuid(t)&&(this.value=t);}return e.isGuid=function(t){var n=t.toString();return t&&(t instanceof e||e.validator.test(n));},e.create=function(){return new e([e.gen(2),e.gen(1),e.gen(1),e.gen(1),e.gen(3)].join(\"-\"));},e.createEmpty=function(){return new e(\"emptyguid\");},e.parse=function(t){return new e(t);},e.raw=function(){return[e.gen(2),e.gen(1),e.gen(1),e.gen(1),e.gen(3)].join(\"-\");},e.gen=function(e){for(var t=\"\",n=0;n<e;n++)t+=(65536*(1+Math.random())|0).toString(16).substring(1);return t;},e.prototype.equals=function(t){return e.isGuid(t)&&this.value===t.toString();},e.prototype.isEmpty=function(){return this.value===e.EMPTY;},e.prototype.toString=function(){return this.value;},e.prototype.toJSON=function(){return{value:this.value};},e.validator=new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\",\"i\"),e.EMPTY=\"00000000-0000-0000-0000-000000000000\",e;}();t.Guid=n;},3720:function _(e){e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports;}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n;}function r(e){return!0===(e&&e.__isLong__);}n.prototype.__isLong__,Object.defineProperty(n.prototype,\"__isLong__\",{value:!0}),n.isLong=r;var o={},i={};function a(e,t){var n,r,a;return t?(a=0<=(e>>>=0)&&e<256)&&(r=i[e])?r:(n=u(e,(0|e)<0?-1:0,!0),a&&(i[e]=n),n):(a=-128<=(e|=0)&&e<128)&&(r=o[e])?r:(n=u(e,e<0?-1:0,!1),a&&(o[e]=n),n);}function s(e,t){if(isNaN(e))return t?b:m;if(t){if(e<0)return b;if(e>=f)return x;}else{if(e<=-h)return T;if(e+1>=h)return v;}return e<0?s(-e,t).neg():u(e%d|0,e/d|0,t);}function u(e,t,r){return new n(e,t,r);}n.fromInt=a,n.fromNumber=s,n.fromBits=u;var l=Math.pow;function c(e,t,n){if(0===e.length)throw Error(\"empty string\");if(\"NaN\"===e||\"Infinity\"===e||\"+Infinity\"===e||\"-Infinity\"===e)return m;if(\"number\"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError(\"radix\");var r;if((r=e.indexOf(\"-\"))>0)throw Error(\"interior hyphen\");if(0===r)return c(e.substring(1),t,n).neg();for(var o=s(l(n,8)),i=m,a=0;a<e.length;a+=8){var u=Math.min(8,e.length-a),p=parseInt(e.substring(a,a+u),n);if(u<8){var d=s(l(n,u));i=i.mul(d).add(s(p));}else i=(i=i.mul(o)).add(s(p));}return i.unsigned=t,i;}function p(e,t){return\"number\"==typeof e?s(e,t):\"string\"==typeof e?c(e,t):u(e.low,e.high,\"boolean\"==typeof t?t:e.unsigned);}n.fromString=c,n.fromValue=p;var d=4294967296,f=d*d,h=f/2,g=a(1<<24),m=a(0);n.ZERO=m;var b=a(0,!0);n.UZERO=b;var y=a(1);n.ONE=y;var w=a(1,!0);n.UONE=w;var _=a(-1);n.NEG_ONE=_;var v=u(-1,2147483647,!1);n.MAX_VALUE=v;var x=u(-1,-1,!0);n.MAX_UNSIGNED_VALUE=x;var T=u(0,-2147483648,!1);n.MIN_VALUE=T;var S=n.prototype;S.toInt=function(){return this.unsigned?this.low>>>0:this.low;},S.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0);},S.toString=function(e){if((e=e||10)<2||36<e)throw RangeError(\"radix\");if(this.isZero())return\"0\";if(this.isNegative()){if(this.eq(T)){var t=s(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e);}return\"-\"+this.neg().toString(e);}for(var o=s(l(e,6),this.unsigned),i=this,a=\"\";;){var u=i.div(o),c=(i.sub(u.mul(o)).toInt()>>>0).toString(e);if((i=u).isZero())return c+a;for(;c.length<6;)c=\"0\"+c;a=\"\"+c+a;}},S.getHighBits=function(){return this.high;},S.getHighBitsUnsigned=function(){return this.high>>>0;},S.getLowBits=function(){return this.low;},S.getLowBitsUnsigned=function(){return this.low>>>0;},S.getNumBitsAbs=function(){if(this.isNegative())return this.eq(T)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1;},S.isZero=function(){return 0===this.high&&0===this.low;},S.eqz=S.isZero,S.isNegative=function(){return!this.unsigned&&this.high<0;},S.isPositive=function(){return this.unsigned||this.high>=0;},S.isOdd=function(){return 1==(1&this.low);},S.isEven=function(){return 0==(1&this.low);},S.equals=function(e){return r(e)||(e=p(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low;},S.eq=S.equals,S.notEquals=function(e){return!this.eq(e);},S.neq=S.notEquals,S.ne=S.notEquals,S.lessThan=function(e){return this.comp(e)<0;},S.lt=S.lessThan,S.lessThanOrEqual=function(e){return this.comp(e)<=0;},S.lte=S.lessThanOrEqual,S.le=S.lessThanOrEqual,S.greaterThan=function(e){return this.comp(e)>0;},S.gt=S.greaterThan,S.greaterThanOrEqual=function(e){return this.comp(e)>=0;},S.gte=S.greaterThanOrEqual,S.ge=S.greaterThanOrEqual,S.compare=function(e){if(r(e)||(e=p(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1;},S.comp=S.compare,S.negate=function(){return!this.unsigned&&this.eq(T)?T:this.not().add(y);},S.neg=S.negate,S.add=function(e){r(e)||(e=p(e));var t=this.high>>>16,n=65535&this.high,o=this.low>>>16,i=65535&this.low,a=e.high>>>16,s=65535&e.high,l=e.low>>>16,c=0,d=0,f=0,h=0;return f+=(h+=i+(65535&e.low))>>>16,d+=(f+=o+l)>>>16,c+=(d+=n+s)>>>16,c+=t+a,u((f&=65535)<<16|(h&=65535),(c&=65535)<<16|(d&=65535),this.unsigned);},S.subtract=function(e){return r(e)||(e=p(e)),this.add(e.neg());},S.sub=S.subtract,S.multiply=function(e){if(this.isZero())return m;if(r(e)||(e=p(e)),t)return u(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return m;if(this.eq(T))return e.isOdd()?T:m;if(e.eq(T))return this.isOdd()?T:m;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(g)&&e.lt(g))return s(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,o=65535&this.high,i=this.low>>>16,a=65535&this.low,l=e.high>>>16,c=65535&e.high,d=e.low>>>16,f=65535&e.low,h=0,b=0,y=0,w=0;return y+=(w+=a*f)>>>16,b+=(y+=i*f)>>>16,y&=65535,b+=(y+=a*d)>>>16,h+=(b+=o*f)>>>16,b&=65535,h+=(b+=i*d)>>>16,b&=65535,h+=(b+=a*c)>>>16,h+=n*f+o*d+i*c+a*l,u((y&=65535)<<16|(w&=65535),(h&=65535)<<16|(b&=65535),this.unsigned);},S.mul=S.multiply,S.divide=function(e){if(r(e)||(e=p(e)),e.isZero())throw Error(\"division by zero\");var n,o,i;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?b:m;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return b;if(e.gt(this.shru(1)))return w;i=b;}else{if(this.eq(T))return e.eq(y)||e.eq(_)?T:e.eq(T)?y:(n=this.shr(1).div(e).shl(1)).eq(m)?e.isNegative()?y:_:(o=this.sub(e.mul(n)),i=n.add(o.div(e)));if(e.eq(T))return this.unsigned?b:m;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();i=m;}for(o=this;o.gte(e);){n=Math.max(1,Math.floor(o.toNumber()/e.toNumber()));for(var a=Math.ceil(Math.log(n)/Math.LN2),c=a<=48?1:l(2,a-48),d=s(n),f=d.mul(e);f.isNegative()||f.gt(o);)f=(d=s(n-=c,this.unsigned)).mul(e);d.isZero()&&(d=y),i=i.add(d),o=o.sub(f);}return i;},S.div=S.divide,S.modulo=function(e){return r(e)||(e=p(e)),t?u((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e));},S.mod=S.modulo,S.rem=S.modulo,S.not=function(){return u(~this.low,~this.high,this.unsigned);},S.and=function(e){return r(e)||(e=p(e)),u(this.low&e.low,this.high&e.high,this.unsigned);},S.or=function(e){return r(e)||(e=p(e)),u(this.low|e.low,this.high|e.high,this.unsigned);},S.xor=function(e){return r(e)||(e=p(e)),u(this.low^e.low,this.high^e.high,this.unsigned);},S.shiftLeft=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned);},S.shl=S.shiftLeft,S.shiftRight=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,this.high>=0?0:-1,this.unsigned);},S.shr=S.shiftRight,S.shiftRightUnsigned=function(e){if(r(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?u(this.low>>>e|t<<32-e,t>>>e,this.unsigned):u(32===e?t:t>>>e-32,0,this.unsigned);},S.shru=S.shiftRightUnsigned,S.shr_u=S.shiftRightUnsigned,S.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this;},S.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0);},S.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE();},S.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24];},S.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t];},n.fromBytes=function(e,t,r){return r?n.fromBytesLE(e,t):n.fromBytesBE(e,t);},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t);},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t);};},1446:function _(e,t,n){\"use strict\";var r,o,i,a=n(2100),s=a.Reader,u=a.Writer,l=a.util,c=a.roots[\"default\"]||(a.roots[\"default\"]={});c.onnx=((i={}).Version=(r={},(o=Object.create(r))[r[0]=\"_START_VERSION\"]=0,o[r[1]=\"IR_VERSION_2017_10_10\"]=1,o[r[2]=\"IR_VERSION_2017_10_30\"]=2,o[r[3]=\"IR_VERSION_2017_11_3\"]=3,o[r[4]=\"IR_VERSION_2019_1_22\"]=4,o[r[5]=\"IR_VERSION\"]=5,o),i.AttributeProto=function(){function e(e){if(this.floats=[],this.ints=[],this.strings=[],this.tensors=[],this.graphs=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}return e.prototype.name=\"\",e.prototype.refAttrName=\"\",e.prototype.docString=\"\",e.prototype.type=0,e.prototype.f=0,e.prototype.i=l.Long?l.Long.fromBits(0,0,!1):0,e.prototype.s=l.newBuffer([]),e.prototype.t=null,e.prototype.g=null,e.prototype.floats=l.emptyArray,e.prototype.ints=l.emptyArray,e.prototype.strings=l.emptyArray,e.prototype.tensors=l.emptyArray,e.prototype.graphs=l.emptyArray,e.create=function(t){return new e(t);},e.encode=function(e,t){if(t||(t=u.create()),null!=e.name&&e.hasOwnProperty(\"name\")&&t.uint32(10).string(e.name),null!=e.f&&e.hasOwnProperty(\"f\")&&t.uint32(21)[\"float\"](e.f),null!=e.i&&e.hasOwnProperty(\"i\")&&t.uint32(24).int64(e.i),null!=e.s&&e.hasOwnProperty(\"s\")&&t.uint32(34).bytes(e.s),null!=e.t&&e.hasOwnProperty(\"t\")&&c.onnx.TensorProto.encode(e.t,t.uint32(42).fork()).ldelim(),null!=e.g&&e.hasOwnProperty(\"g\")&&c.onnx.GraphProto.encode(e.g,t.uint32(50).fork()).ldelim(),null!=e.floats&&e.floats.length){t.uint32(58).fork();for(var n=0;n<e.floats.length;++n)t[\"float\"](e.floats[n]);t.ldelim();}if(null!=e.ints&&e.ints.length){for(t.uint32(66).fork(),n=0;n<e.ints.length;++n)t.int64(e.ints[n]);t.ldelim();}if(null!=e.strings&&e.strings.length)for(n=0;n<e.strings.length;++n)t.uint32(74).bytes(e.strings[n]);if(null!=e.tensors&&e.tensors.length)for(n=0;n<e.tensors.length;++n)c.onnx.TensorProto.encode(e.tensors[n],t.uint32(82).fork()).ldelim();if(null!=e.graphs&&e.graphs.length)for(n=0;n<e.graphs.length;++n)c.onnx.GraphProto.encode(e.graphs[n],t.uint32(90).fork()).ldelim();return null!=e.docString&&e.hasOwnProperty(\"docString\")&&t.uint32(106).string(e.docString),null!=e.type&&e.hasOwnProperty(\"type\")&&t.uint32(160).int32(e.type),null!=e.refAttrName&&e.hasOwnProperty(\"refAttrName\")&&t.uint32(170).string(e.refAttrName),t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.AttributeProto();e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.name=e.string();break;case 21:r.refAttrName=e.string();break;case 13:r.docString=e.string();break;case 20:r.type=e.int32();break;case 2:r.f=e[\"float\"]();break;case 3:r.i=e.int64();break;case 4:r.s=e.bytes();break;case 5:r.t=c.onnx.TensorProto.decode(e,e.uint32());break;case 6:r.g=c.onnx.GraphProto.decode(e,e.uint32());break;case 7:if(r.floats&&r.floats.length||(r.floats=[]),2==(7&o))for(var i=e.uint32()+e.pos;e.pos<i;)r.floats.push(e[\"float\"]());else r.floats.push(e[\"float\"]());break;case 8:if(r.ints&&r.ints.length||(r.ints=[]),2==(7&o))for(i=e.uint32()+e.pos;e.pos<i;)r.ints.push(e.int64());else r.ints.push(e.int64());break;case 9:r.strings&&r.strings.length||(r.strings=[]),r.strings.push(e.bytes());break;case 10:r.tensors&&r.tensors.length||(r.tensors=[]),r.tensors.push(c.onnx.TensorProto.decode(e,e.uint32()));break;case 11:r.graphs&&r.graphs.length||(r.graphs=[]),r.graphs.push(c.onnx.GraphProto.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){if(\"object\"!=_typeof2(e)||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!l.isString(e.name))return\"name: string expected\";if(null!=e.refAttrName&&e.hasOwnProperty(\"refAttrName\")&&!l.isString(e.refAttrName))return\"refAttrName: string expected\";if(null!=e.docString&&e.hasOwnProperty(\"docString\")&&!l.isString(e.docString))return\"docString: string expected\";if(null!=e.type&&e.hasOwnProperty(\"type\"))switch(e.type){default:return\"type: enum value expected\";case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:}if(null!=e.f&&e.hasOwnProperty(\"f\")&&\"number\"!=typeof e.f)return\"f: number expected\";if(null!=e.i&&e.hasOwnProperty(\"i\")&&!(l.isInteger(e.i)||e.i&&l.isInteger(e.i.low)&&l.isInteger(e.i.high)))return\"i: integer|Long expected\";if(null!=e.s&&e.hasOwnProperty(\"s\")&&!(e.s&&\"number\"==typeof e.s.length||l.isString(e.s)))return\"s: buffer expected\";if(null!=e.t&&e.hasOwnProperty(\"t\")&&(n=c.onnx.TensorProto.verify(e.t)))return\"t.\"+n;if(null!=e.g&&e.hasOwnProperty(\"g\")&&(n=c.onnx.GraphProto.verify(e.g)))return\"g.\"+n;if(null!=e.floats&&e.hasOwnProperty(\"floats\")){if(!Array.isArray(e.floats))return\"floats: array expected\";for(var t=0;t<e.floats.length;++t)if(\"number\"!=typeof e.floats[t])return\"floats: number[] expected\";}if(null!=e.ints&&e.hasOwnProperty(\"ints\")){if(!Array.isArray(e.ints))return\"ints: array expected\";for(t=0;t<e.ints.length;++t)if(!(l.isInteger(e.ints[t])||e.ints[t]&&l.isInteger(e.ints[t].low)&&l.isInteger(e.ints[t].high)))return\"ints: integer|Long[] expected\";}if(null!=e.strings&&e.hasOwnProperty(\"strings\")){if(!Array.isArray(e.strings))return\"strings: array expected\";for(t=0;t<e.strings.length;++t)if(!(e.strings[t]&&\"number\"==typeof e.strings[t].length||l.isString(e.strings[t])))return\"strings: buffer[] expected\";}if(null!=e.tensors&&e.hasOwnProperty(\"tensors\")){if(!Array.isArray(e.tensors))return\"tensors: array expected\";for(t=0;t<e.tensors.length;++t)if(n=c.onnx.TensorProto.verify(e.tensors[t]))return\"tensors.\"+n;}if(null!=e.graphs&&e.hasOwnProperty(\"graphs\")){if(!Array.isArray(e.graphs))return\"graphs: array expected\";for(t=0;t<e.graphs.length;++t){var n;if(n=c.onnx.GraphProto.verify(e.graphs[t]))return\"graphs.\"+n;}}return null;},e.fromObject=function(e){if(e instanceof c.onnx.AttributeProto)return e;var t=new c.onnx.AttributeProto();switch(null!=e.name&&(t.name=String(e.name)),null!=e.refAttrName&&(t.refAttrName=String(e.refAttrName)),null!=e.docString&&(t.docString=String(e.docString)),e.type){case\"UNDEFINED\":case 0:t.type=0;break;case\"FLOAT\":case 1:t.type=1;break;case\"INT\":case 2:t.type=2;break;case\"STRING\":case 3:t.type=3;break;case\"TENSOR\":case 4:t.type=4;break;case\"GRAPH\":case 5:t.type=5;break;case\"FLOATS\":case 6:t.type=6;break;case\"INTS\":case 7:t.type=7;break;case\"STRINGS\":case 8:t.type=8;break;case\"TENSORS\":case 9:t.type=9;break;case\"GRAPHS\":case 10:t.type=10;}if(null!=e.f&&(t.f=Number(e.f)),null!=e.i&&(l.Long?(t.i=l.Long.fromValue(e.i)).unsigned=!1:\"string\"==typeof e.i?t.i=parseInt(e.i,10):\"number\"==typeof e.i?t.i=e.i:\"object\"==_typeof2(e.i)&&(t.i=new l.LongBits(e.i.low>>>0,e.i.high>>>0).toNumber())),null!=e.s&&(\"string\"==typeof e.s?l.base64.decode(e.s,t.s=l.newBuffer(l.base64.length(e.s)),0):e.s.length&&(t.s=e.s)),null!=e.t){if(\"object\"!=_typeof2(e.t))throw TypeError(\".onnx.AttributeProto.t: object expected\");t.t=c.onnx.TensorProto.fromObject(e.t);}if(null!=e.g){if(\"object\"!=_typeof2(e.g))throw TypeError(\".onnx.AttributeProto.g: object expected\");t.g=c.onnx.GraphProto.fromObject(e.g);}if(e.floats){if(!Array.isArray(e.floats))throw TypeError(\".onnx.AttributeProto.floats: array expected\");t.floats=[];for(var n=0;n<e.floats.length;++n)t.floats[n]=Number(e.floats[n]);}if(e.ints){if(!Array.isArray(e.ints))throw TypeError(\".onnx.AttributeProto.ints: array expected\");for(t.ints=[],n=0;n<e.ints.length;++n)l.Long?(t.ints[n]=l.Long.fromValue(e.ints[n])).unsigned=!1:\"string\"==typeof e.ints[n]?t.ints[n]=parseInt(e.ints[n],10):\"number\"==typeof e.ints[n]?t.ints[n]=e.ints[n]:\"object\"==_typeof2(e.ints[n])&&(t.ints[n]=new l.LongBits(e.ints[n].low>>>0,e.ints[n].high>>>0).toNumber());}if(e.strings){if(!Array.isArray(e.strings))throw TypeError(\".onnx.AttributeProto.strings: array expected\");for(t.strings=[],n=0;n<e.strings.length;++n)\"string\"==typeof e.strings[n]?l.base64.decode(e.strings[n],t.strings[n]=l.newBuffer(l.base64.length(e.strings[n])),0):e.strings[n].length&&(t.strings[n]=e.strings[n]);}if(e.tensors){if(!Array.isArray(e.tensors))throw TypeError(\".onnx.AttributeProto.tensors: array expected\");for(t.tensors=[],n=0;n<e.tensors.length;++n){if(\"object\"!=_typeof2(e.tensors[n]))throw TypeError(\".onnx.AttributeProto.tensors: object expected\");t.tensors[n]=c.onnx.TensorProto.fromObject(e.tensors[n]);}}if(e.graphs){if(!Array.isArray(e.graphs))throw TypeError(\".onnx.AttributeProto.graphs: array expected\");for(t.graphs=[],n=0;n<e.graphs.length;++n){if(\"object\"!=_typeof2(e.graphs[n]))throw TypeError(\".onnx.AttributeProto.graphs: object expected\");t.graphs[n]=c.onnx.GraphProto.fromObject(e.graphs[n]);}}return t;},e.toObject=function(e,t){t||(t={});var n={};if((t.arrays||t.defaults)&&(n.floats=[],n.ints=[],n.strings=[],n.tensors=[],n.graphs=[]),t.defaults){if(n.name=\"\",n.f=0,l.Long){var r=new l.Long(0,0,!1);n.i=t.longs===String?r.toString():t.longs===Number?r.toNumber():r;}else n.i=t.longs===String?\"0\":0;t.bytes===String?n.s=\"\":(n.s=[],t.bytes!==Array&&(n.s=l.newBuffer(n.s))),n.t=null,n.g=null,n.docString=\"\",n.type=t.enums===String?\"UNDEFINED\":0,n.refAttrName=\"\";}if(null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.f&&e.hasOwnProperty(\"f\")&&(n.f=t.json&&!isFinite(e.f)?String(e.f):e.f),null!=e.i&&e.hasOwnProperty(\"i\")&&(\"number\"==typeof e.i?n.i=t.longs===String?String(e.i):e.i:n.i=t.longs===String?l.Long.prototype.toString.call(e.i):t.longs===Number?new l.LongBits(e.i.low>>>0,e.i.high>>>0).toNumber():e.i),null!=e.s&&e.hasOwnProperty(\"s\")&&(n.s=t.bytes===String?l.base64.encode(e.s,0,e.s.length):t.bytes===Array?Array.prototype.slice.call(e.s):e.s),null!=e.t&&e.hasOwnProperty(\"t\")&&(n.t=c.onnx.TensorProto.toObject(e.t,t)),null!=e.g&&e.hasOwnProperty(\"g\")&&(n.g=c.onnx.GraphProto.toObject(e.g,t)),e.floats&&e.floats.length){n.floats=[];for(var o=0;o<e.floats.length;++o)n.floats[o]=t.json&&!isFinite(e.floats[o])?String(e.floats[o]):e.floats[o];}if(e.ints&&e.ints.length)for(n.ints=[],o=0;o<e.ints.length;++o)\"number\"==typeof e.ints[o]?n.ints[o]=t.longs===String?String(e.ints[o]):e.ints[o]:n.ints[o]=t.longs===String?l.Long.prototype.toString.call(e.ints[o]):t.longs===Number?new l.LongBits(e.ints[o].low>>>0,e.ints[o].high>>>0).toNumber():e.ints[o];if(e.strings&&e.strings.length)for(n.strings=[],o=0;o<e.strings.length;++o)n.strings[o]=t.bytes===String?l.base64.encode(e.strings[o],0,e.strings[o].length):t.bytes===Array?Array.prototype.slice.call(e.strings[o]):e.strings[o];if(e.tensors&&e.tensors.length)for(n.tensors=[],o=0;o<e.tensors.length;++o)n.tensors[o]=c.onnx.TensorProto.toObject(e.tensors[o],t);if(e.graphs&&e.graphs.length)for(n.graphs=[],o=0;o<e.graphs.length;++o)n.graphs[o]=c.onnx.GraphProto.toObject(e.graphs[o],t);return null!=e.docString&&e.hasOwnProperty(\"docString\")&&(n.docString=e.docString),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=t.enums===String?c.onnx.AttributeProto.AttributeType[e.type]:e.type),null!=e.refAttrName&&e.hasOwnProperty(\"refAttrName\")&&(n.refAttrName=e.refAttrName),n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e.AttributeType=function(){var e={},t=Object.create(e);return t[e[0]=\"UNDEFINED\"]=0,t[e[1]=\"FLOAT\"]=1,t[e[2]=\"INT\"]=2,t[e[3]=\"STRING\"]=3,t[e[4]=\"TENSOR\"]=4,t[e[5]=\"GRAPH\"]=5,t[e[6]=\"FLOATS\"]=6,t[e[7]=\"INTS\"]=7,t[e[8]=\"STRINGS\"]=8,t[e[9]=\"TENSORS\"]=9,t[e[10]=\"GRAPHS\"]=10,t;}(),e;}(),i.ValueInfoProto=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}return e.prototype.name=\"\",e.prototype.type=null,e.prototype.docString=\"\",e.create=function(t){return new e(t);},e.encode=function(e,t){return t||(t=u.create()),null!=e.name&&e.hasOwnProperty(\"name\")&&t.uint32(10).string(e.name),null!=e.type&&e.hasOwnProperty(\"type\")&&c.onnx.TypeProto.encode(e.type,t.uint32(18).fork()).ldelim(),null!=e.docString&&e.hasOwnProperty(\"docString\")&&t.uint32(26).string(e.docString),t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.ValueInfoProto();e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.name=e.string();break;case 2:r.type=c.onnx.TypeProto.decode(e,e.uint32());break;case 3:r.docString=e.string();break;default:e.skipType(7&o);}}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){if(\"object\"!=_typeof2(e)||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!l.isString(e.name))return\"name: string expected\";if(null!=e.type&&e.hasOwnProperty(\"type\")){var t=c.onnx.TypeProto.verify(e.type);if(t)return\"type.\"+t;}return null!=e.docString&&e.hasOwnProperty(\"docString\")&&!l.isString(e.docString)?\"docString: string expected\":null;},e.fromObject=function(e){if(e instanceof c.onnx.ValueInfoProto)return e;var t=new c.onnx.ValueInfoProto();if(null!=e.name&&(t.name=String(e.name)),null!=e.type){if(\"object\"!=_typeof2(e.type))throw TypeError(\".onnx.ValueInfoProto.type: object expected\");t.type=c.onnx.TypeProto.fromObject(e.type);}return null!=e.docString&&(t.docString=String(e.docString)),t;},e.toObject=function(e,t){t||(t={});var n={};return t.defaults&&(n.name=\"\",n.type=null,n.docString=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=c.onnx.TypeProto.toObject(e.type,t)),null!=e.docString&&e.hasOwnProperty(\"docString\")&&(n.docString=e.docString),n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e;}(),i.NodeProto=function(){function e(e){if(this.input=[],this.output=[],this.attribute=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}return e.prototype.input=l.emptyArray,e.prototype.output=l.emptyArray,e.prototype.name=\"\",e.prototype.opType=\"\",e.prototype.domain=\"\",e.prototype.attribute=l.emptyArray,e.prototype.docString=\"\",e.create=function(t){return new e(t);},e.encode=function(e,t){if(t||(t=u.create()),null!=e.input&&e.input.length)for(var n=0;n<e.input.length;++n)t.uint32(10).string(e.input[n]);if(null!=e.output&&e.output.length)for(n=0;n<e.output.length;++n)t.uint32(18).string(e.output[n]);if(null!=e.name&&e.hasOwnProperty(\"name\")&&t.uint32(26).string(e.name),null!=e.opType&&e.hasOwnProperty(\"opType\")&&t.uint32(34).string(e.opType),null!=e.attribute&&e.attribute.length)for(n=0;n<e.attribute.length;++n)c.onnx.AttributeProto.encode(e.attribute[n],t.uint32(42).fork()).ldelim();return null!=e.docString&&e.hasOwnProperty(\"docString\")&&t.uint32(50).string(e.docString),null!=e.domain&&e.hasOwnProperty(\"domain\")&&t.uint32(58).string(e.domain),t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.NodeProto();e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.input&&r.input.length||(r.input=[]),r.input.push(e.string());break;case 2:r.output&&r.output.length||(r.output=[]),r.output.push(e.string());break;case 3:r.name=e.string();break;case 4:r.opType=e.string();break;case 7:r.domain=e.string();break;case 5:r.attribute&&r.attribute.length||(r.attribute=[]),r.attribute.push(c.onnx.AttributeProto.decode(e,e.uint32()));break;case 6:r.docString=e.string();break;default:e.skipType(7&o);}}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){if(\"object\"!=_typeof2(e)||null===e)return\"object expected\";if(null!=e.input&&e.hasOwnProperty(\"input\")){if(!Array.isArray(e.input))return\"input: array expected\";for(var t=0;t<e.input.length;++t)if(!l.isString(e.input[t]))return\"input: string[] expected\";}if(null!=e.output&&e.hasOwnProperty(\"output\")){if(!Array.isArray(e.output))return\"output: array expected\";for(t=0;t<e.output.length;++t)if(!l.isString(e.output[t]))return\"output: string[] expected\";}if(null!=e.name&&e.hasOwnProperty(\"name\")&&!l.isString(e.name))return\"name: string expected\";if(null!=e.opType&&e.hasOwnProperty(\"opType\")&&!l.isString(e.opType))return\"opType: string expected\";if(null!=e.domain&&e.hasOwnProperty(\"domain\")&&!l.isString(e.domain))return\"domain: string expected\";if(null!=e.attribute&&e.hasOwnProperty(\"attribute\")){if(!Array.isArray(e.attribute))return\"attribute: array expected\";for(t=0;t<e.attribute.length;++t){var n=c.onnx.AttributeProto.verify(e.attribute[t]);if(n)return\"attribute.\"+n;}}return null!=e.docString&&e.hasOwnProperty(\"docString\")&&!l.isString(e.docString)?\"docString: string expected\":null;},e.fromObject=function(e){if(e instanceof c.onnx.NodeProto)return e;var t=new c.onnx.NodeProto();if(e.input){if(!Array.isArray(e.input))throw TypeError(\".onnx.NodeProto.input: array expected\");t.input=[];for(var n=0;n<e.input.length;++n)t.input[n]=String(e.input[n]);}if(e.output){if(!Array.isArray(e.output))throw TypeError(\".onnx.NodeProto.output: array expected\");for(t.output=[],n=0;n<e.output.length;++n)t.output[n]=String(e.output[n]);}if(null!=e.name&&(t.name=String(e.name)),null!=e.opType&&(t.opType=String(e.opType)),null!=e.domain&&(t.domain=String(e.domain)),e.attribute){if(!Array.isArray(e.attribute))throw TypeError(\".onnx.NodeProto.attribute: array expected\");for(t.attribute=[],n=0;n<e.attribute.length;++n){if(\"object\"!=_typeof2(e.attribute[n]))throw TypeError(\".onnx.NodeProto.attribute: object expected\");t.attribute[n]=c.onnx.AttributeProto.fromObject(e.attribute[n]);}}return null!=e.docString&&(t.docString=String(e.docString)),t;},e.toObject=function(e,t){t||(t={});var n={};if((t.arrays||t.defaults)&&(n.input=[],n.output=[],n.attribute=[]),t.defaults&&(n.name=\"\",n.opType=\"\",n.docString=\"\",n.domain=\"\"),e.input&&e.input.length){n.input=[];for(var r=0;r<e.input.length;++r)n.input[r]=e.input[r];}if(e.output&&e.output.length)for(n.output=[],r=0;r<e.output.length;++r)n.output[r]=e.output[r];if(null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.opType&&e.hasOwnProperty(\"opType\")&&(n.opType=e.opType),e.attribute&&e.attribute.length)for(n.attribute=[],r=0;r<e.attribute.length;++r)n.attribute[r]=c.onnx.AttributeProto.toObject(e.attribute[r],t);return null!=e.docString&&e.hasOwnProperty(\"docString\")&&(n.docString=e.docString),null!=e.domain&&e.hasOwnProperty(\"domain\")&&(n.domain=e.domain),n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e;}(),i.ModelProto=function(){function e(e){if(this.opsetImport=[],this.metadataProps=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}return e.prototype.irVersion=l.Long?l.Long.fromBits(0,0,!1):0,e.prototype.opsetImport=l.emptyArray,e.prototype.producerName=\"\",e.prototype.producerVersion=\"\",e.prototype.domain=\"\",e.prototype.modelVersion=l.Long?l.Long.fromBits(0,0,!1):0,e.prototype.docString=\"\",e.prototype.graph=null,e.prototype.metadataProps=l.emptyArray,e.create=function(t){return new e(t);},e.encode=function(e,t){if(t||(t=u.create()),null!=e.irVersion&&e.hasOwnProperty(\"irVersion\")&&t.uint32(8).int64(e.irVersion),null!=e.producerName&&e.hasOwnProperty(\"producerName\")&&t.uint32(18).string(e.producerName),null!=e.producerVersion&&e.hasOwnProperty(\"producerVersion\")&&t.uint32(26).string(e.producerVersion),null!=e.domain&&e.hasOwnProperty(\"domain\")&&t.uint32(34).string(e.domain),null!=e.modelVersion&&e.hasOwnProperty(\"modelVersion\")&&t.uint32(40).int64(e.modelVersion),null!=e.docString&&e.hasOwnProperty(\"docString\")&&t.uint32(50).string(e.docString),null!=e.graph&&e.hasOwnProperty(\"graph\")&&c.onnx.GraphProto.encode(e.graph,t.uint32(58).fork()).ldelim(),null!=e.opsetImport&&e.opsetImport.length)for(var n=0;n<e.opsetImport.length;++n)c.onnx.OperatorSetIdProto.encode(e.opsetImport[n],t.uint32(66).fork()).ldelim();if(null!=e.metadataProps&&e.metadataProps.length)for(n=0;n<e.metadataProps.length;++n)c.onnx.StringStringEntryProto.encode(e.metadataProps[n],t.uint32(114).fork()).ldelim();return t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.ModelProto();e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.irVersion=e.int64();break;case 8:r.opsetImport&&r.opsetImport.length||(r.opsetImport=[]),r.opsetImport.push(c.onnx.OperatorSetIdProto.decode(e,e.uint32()));break;case 2:r.producerName=e.string();break;case 3:r.producerVersion=e.string();break;case 4:r.domain=e.string();break;case 5:r.modelVersion=e.int64();break;case 6:r.docString=e.string();break;case 7:r.graph=c.onnx.GraphProto.decode(e,e.uint32());break;case 14:r.metadataProps&&r.metadataProps.length||(r.metadataProps=[]),r.metadataProps.push(c.onnx.StringStringEntryProto.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){if(\"object\"!=_typeof2(e)||null===e)return\"object expected\";if(null!=e.irVersion&&e.hasOwnProperty(\"irVersion\")&&!(l.isInteger(e.irVersion)||e.irVersion&&l.isInteger(e.irVersion.low)&&l.isInteger(e.irVersion.high)))return\"irVersion: integer|Long expected\";if(null!=e.opsetImport&&e.hasOwnProperty(\"opsetImport\")){if(!Array.isArray(e.opsetImport))return\"opsetImport: array expected\";for(var t=0;t<e.opsetImport.length;++t)if(n=c.onnx.OperatorSetIdProto.verify(e.opsetImport[t]))return\"opsetImport.\"+n;}if(null!=e.producerName&&e.hasOwnProperty(\"producerName\")&&!l.isString(e.producerName))return\"producerName: string expected\";if(null!=e.producerVersion&&e.hasOwnProperty(\"producerVersion\")&&!l.isString(e.producerVersion))return\"producerVersion: string expected\";if(null!=e.domain&&e.hasOwnProperty(\"domain\")&&!l.isString(e.domain))return\"domain: string expected\";if(null!=e.modelVersion&&e.hasOwnProperty(\"modelVersion\")&&!(l.isInteger(e.modelVersion)||e.modelVersion&&l.isInteger(e.modelVersion.low)&&l.isInteger(e.modelVersion.high)))return\"modelVersion: integer|Long expected\";if(null!=e.docString&&e.hasOwnProperty(\"docString\")&&!l.isString(e.docString))return\"docString: string expected\";if(null!=e.graph&&e.hasOwnProperty(\"graph\")&&(n=c.onnx.GraphProto.verify(e.graph)))return\"graph.\"+n;if(null!=e.metadataProps&&e.hasOwnProperty(\"metadataProps\")){if(!Array.isArray(e.metadataProps))return\"metadataProps: array expected\";for(t=0;t<e.metadataProps.length;++t){var n;if(n=c.onnx.StringStringEntryProto.verify(e.metadataProps[t]))return\"metadataProps.\"+n;}}return null;},e.fromObject=function(e){if(e instanceof c.onnx.ModelProto)return e;var t=new c.onnx.ModelProto();if(null!=e.irVersion&&(l.Long?(t.irVersion=l.Long.fromValue(e.irVersion)).unsigned=!1:\"string\"==typeof e.irVersion?t.irVersion=parseInt(e.irVersion,10):\"number\"==typeof e.irVersion?t.irVersion=e.irVersion:\"object\"==_typeof2(e.irVersion)&&(t.irVersion=new l.LongBits(e.irVersion.low>>>0,e.irVersion.high>>>0).toNumber())),e.opsetImport){if(!Array.isArray(e.opsetImport))throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");t.opsetImport=[];for(var n=0;n<e.opsetImport.length;++n){if(\"object\"!=_typeof2(e.opsetImport[n]))throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");t.opsetImport[n]=c.onnx.OperatorSetIdProto.fromObject(e.opsetImport[n]);}}if(null!=e.producerName&&(t.producerName=String(e.producerName)),null!=e.producerVersion&&(t.producerVersion=String(e.producerVersion)),null!=e.domain&&(t.domain=String(e.domain)),null!=e.modelVersion&&(l.Long?(t.modelVersion=l.Long.fromValue(e.modelVersion)).unsigned=!1:\"string\"==typeof e.modelVersion?t.modelVersion=parseInt(e.modelVersion,10):\"number\"==typeof e.modelVersion?t.modelVersion=e.modelVersion:\"object\"==_typeof2(e.modelVersion)&&(t.modelVersion=new l.LongBits(e.modelVersion.low>>>0,e.modelVersion.high>>>0).toNumber())),null!=e.docString&&(t.docString=String(e.docString)),null!=e.graph){if(\"object\"!=_typeof2(e.graph))throw TypeError(\".onnx.ModelProto.graph: object expected\");t.graph=c.onnx.GraphProto.fromObject(e.graph);}if(e.metadataProps){if(!Array.isArray(e.metadataProps))throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");for(t.metadataProps=[],n=0;n<e.metadataProps.length;++n){if(\"object\"!=_typeof2(e.metadataProps[n]))throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");t.metadataProps[n]=c.onnx.StringStringEntryProto.fromObject(e.metadataProps[n]);}}return t;},e.toObject=function(e,t){t||(t={});var n={};if((t.arrays||t.defaults)&&(n.opsetImport=[],n.metadataProps=[]),t.defaults){if(l.Long){var r=new l.Long(0,0,!1);n.irVersion=t.longs===String?r.toString():t.longs===Number?r.toNumber():r;}else n.irVersion=t.longs===String?\"0\":0;n.producerName=\"\",n.producerVersion=\"\",n.domain=\"\",l.Long?(r=new l.Long(0,0,!1),n.modelVersion=t.longs===String?r.toString():t.longs===Number?r.toNumber():r):n.modelVersion=t.longs===String?\"0\":0,n.docString=\"\",n.graph=null;}if(null!=e.irVersion&&e.hasOwnProperty(\"irVersion\")&&(\"number\"==typeof e.irVersion?n.irVersion=t.longs===String?String(e.irVersion):e.irVersion:n.irVersion=t.longs===String?l.Long.prototype.toString.call(e.irVersion):t.longs===Number?new l.LongBits(e.irVersion.low>>>0,e.irVersion.high>>>0).toNumber():e.irVersion),null!=e.producerName&&e.hasOwnProperty(\"producerName\")&&(n.producerName=e.producerName),null!=e.producerVersion&&e.hasOwnProperty(\"producerVersion\")&&(n.producerVersion=e.producerVersion),null!=e.domain&&e.hasOwnProperty(\"domain\")&&(n.domain=e.domain),null!=e.modelVersion&&e.hasOwnProperty(\"modelVersion\")&&(\"number\"==typeof e.modelVersion?n.modelVersion=t.longs===String?String(e.modelVersion):e.modelVersion:n.modelVersion=t.longs===String?l.Long.prototype.toString.call(e.modelVersion):t.longs===Number?new l.LongBits(e.modelVersion.low>>>0,e.modelVersion.high>>>0).toNumber():e.modelVersion),null!=e.docString&&e.hasOwnProperty(\"docString\")&&(n.docString=e.docString),null!=e.graph&&e.hasOwnProperty(\"graph\")&&(n.graph=c.onnx.GraphProto.toObject(e.graph,t)),e.opsetImport&&e.opsetImport.length){n.opsetImport=[];for(var o=0;o<e.opsetImport.length;++o)n.opsetImport[o]=c.onnx.OperatorSetIdProto.toObject(e.opsetImport[o],t);}if(e.metadataProps&&e.metadataProps.length)for(n.metadataProps=[],o=0;o<e.metadataProps.length;++o)n.metadataProps[o]=c.onnx.StringStringEntryProto.toObject(e.metadataProps[o],t);return n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e;}(),i.StringStringEntryProto=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}return e.prototype.key=\"\",e.prototype.value=\"\",e.create=function(t){return new e(t);},e.encode=function(e,t){return t||(t=u.create()),null!=e.key&&e.hasOwnProperty(\"key\")&&t.uint32(10).string(e.key),null!=e.value&&e.hasOwnProperty(\"value\")&&t.uint32(18).string(e.value),t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.StringStringEntryProto();e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.key=e.string();break;case 2:r.value=e.string();break;default:e.skipType(7&o);}}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){return\"object\"!=_typeof2(e)||null===e?\"object expected\":null!=e.key&&e.hasOwnProperty(\"key\")&&!l.isString(e.key)?\"key: string expected\":null!=e.value&&e.hasOwnProperty(\"value\")&&!l.isString(e.value)?\"value: string expected\":null;},e.fromObject=function(e){if(e instanceof c.onnx.StringStringEntryProto)return e;var t=new c.onnx.StringStringEntryProto();return null!=e.key&&(t.key=String(e.key)),null!=e.value&&(t.value=String(e.value)),t;},e.toObject=function(e,t){t||(t={});var n={};return t.defaults&&(n.key=\"\",n.value=\"\"),null!=e.key&&e.hasOwnProperty(\"key\")&&(n.key=e.key),null!=e.value&&e.hasOwnProperty(\"value\")&&(n.value=e.value),n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e;}(),i.TensorAnnotation=function(){function e(e){if(this.quantParameterTensorNames=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}return e.prototype.tensorName=\"\",e.prototype.quantParameterTensorNames=l.emptyArray,e.create=function(t){return new e(t);},e.encode=function(e,t){if(t||(t=u.create()),null!=e.tensorName&&e.hasOwnProperty(\"tensorName\")&&t.uint32(10).string(e.tensorName),null!=e.quantParameterTensorNames&&e.quantParameterTensorNames.length)for(var n=0;n<e.quantParameterTensorNames.length;++n)c.onnx.StringStringEntryProto.encode(e.quantParameterTensorNames[n],t.uint32(18).fork()).ldelim();return t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.TensorAnnotation();e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.tensorName=e.string();break;case 2:r.quantParameterTensorNames&&r.quantParameterTensorNames.length||(r.quantParameterTensorNames=[]),r.quantParameterTensorNames.push(c.onnx.StringStringEntryProto.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){if(\"object\"!=_typeof2(e)||null===e)return\"object expected\";if(null!=e.tensorName&&e.hasOwnProperty(\"tensorName\")&&!l.isString(e.tensorName))return\"tensorName: string expected\";if(null!=e.quantParameterTensorNames&&e.hasOwnProperty(\"quantParameterTensorNames\")){if(!Array.isArray(e.quantParameterTensorNames))return\"quantParameterTensorNames: array expected\";for(var t=0;t<e.quantParameterTensorNames.length;++t){var n=c.onnx.StringStringEntryProto.verify(e.quantParameterTensorNames[t]);if(n)return\"quantParameterTensorNames.\"+n;}}return null;},e.fromObject=function(e){if(e instanceof c.onnx.TensorAnnotation)return e;var t=new c.onnx.TensorAnnotation();if(null!=e.tensorName&&(t.tensorName=String(e.tensorName)),e.quantParameterTensorNames){if(!Array.isArray(e.quantParameterTensorNames))throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");t.quantParameterTensorNames=[];for(var n=0;n<e.quantParameterTensorNames.length;++n){if(\"object\"!=_typeof2(e.quantParameterTensorNames[n]))throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");t.quantParameterTensorNames[n]=c.onnx.StringStringEntryProto.fromObject(e.quantParameterTensorNames[n]);}}return t;},e.toObject=function(e,t){t||(t={});var n={};if((t.arrays||t.defaults)&&(n.quantParameterTensorNames=[]),t.defaults&&(n.tensorName=\"\"),null!=e.tensorName&&e.hasOwnProperty(\"tensorName\")&&(n.tensorName=e.tensorName),e.quantParameterTensorNames&&e.quantParameterTensorNames.length){n.quantParameterTensorNames=[];for(var r=0;r<e.quantParameterTensorNames.length;++r)n.quantParameterTensorNames[r]=c.onnx.StringStringEntryProto.toObject(e.quantParameterTensorNames[r],t);}return n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e;}(),i.GraphProto=function(){function e(e){if(this.node=[],this.initializer=[],this.input=[],this.output=[],this.valueInfo=[],this.quantizationAnnotation=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}return e.prototype.node=l.emptyArray,e.prototype.name=\"\",e.prototype.initializer=l.emptyArray,e.prototype.docString=\"\",e.prototype.input=l.emptyArray,e.prototype.output=l.emptyArray,e.prototype.valueInfo=l.emptyArray,e.prototype.quantizationAnnotation=l.emptyArray,e.create=function(t){return new e(t);},e.encode=function(e,t){if(t||(t=u.create()),null!=e.node&&e.node.length)for(var n=0;n<e.node.length;++n)c.onnx.NodeProto.encode(e.node[n],t.uint32(10).fork()).ldelim();if(null!=e.name&&e.hasOwnProperty(\"name\")&&t.uint32(18).string(e.name),null!=e.initializer&&e.initializer.length)for(n=0;n<e.initializer.length;++n)c.onnx.TensorProto.encode(e.initializer[n],t.uint32(42).fork()).ldelim();if(null!=e.docString&&e.hasOwnProperty(\"docString\")&&t.uint32(82).string(e.docString),null!=e.input&&e.input.length)for(n=0;n<e.input.length;++n)c.onnx.ValueInfoProto.encode(e.input[n],t.uint32(90).fork()).ldelim();if(null!=e.output&&e.output.length)for(n=0;n<e.output.length;++n)c.onnx.ValueInfoProto.encode(e.output[n],t.uint32(98).fork()).ldelim();if(null!=e.valueInfo&&e.valueInfo.length)for(n=0;n<e.valueInfo.length;++n)c.onnx.ValueInfoProto.encode(e.valueInfo[n],t.uint32(106).fork()).ldelim();if(null!=e.quantizationAnnotation&&e.quantizationAnnotation.length)for(n=0;n<e.quantizationAnnotation.length;++n)c.onnx.TensorAnnotation.encode(e.quantizationAnnotation[n],t.uint32(114).fork()).ldelim();return t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.GraphProto();e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.node&&r.node.length||(r.node=[]),r.node.push(c.onnx.NodeProto.decode(e,e.uint32()));break;case 2:r.name=e.string();break;case 5:r.initializer&&r.initializer.length||(r.initializer=[]),r.initializer.push(c.onnx.TensorProto.decode(e,e.uint32()));break;case 10:r.docString=e.string();break;case 11:r.input&&r.input.length||(r.input=[]),r.input.push(c.onnx.ValueInfoProto.decode(e,e.uint32()));break;case 12:r.output&&r.output.length||(r.output=[]),r.output.push(c.onnx.ValueInfoProto.decode(e,e.uint32()));break;case 13:r.valueInfo&&r.valueInfo.length||(r.valueInfo=[]),r.valueInfo.push(c.onnx.ValueInfoProto.decode(e,e.uint32()));break;case 14:r.quantizationAnnotation&&r.quantizationAnnotation.length||(r.quantizationAnnotation=[]),r.quantizationAnnotation.push(c.onnx.TensorAnnotation.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){if(\"object\"!=_typeof2(e)||null===e)return\"object expected\";if(null!=e.node&&e.hasOwnProperty(\"node\")){if(!Array.isArray(e.node))return\"node: array expected\";for(var t=0;t<e.node.length;++t)if(n=c.onnx.NodeProto.verify(e.node[t]))return\"node.\"+n;}if(null!=e.name&&e.hasOwnProperty(\"name\")&&!l.isString(e.name))return\"name: string expected\";if(null!=e.initializer&&e.hasOwnProperty(\"initializer\")){if(!Array.isArray(e.initializer))return\"initializer: array expected\";for(t=0;t<e.initializer.length;++t)if(n=c.onnx.TensorProto.verify(e.initializer[t]))return\"initializer.\"+n;}if(null!=e.docString&&e.hasOwnProperty(\"docString\")&&!l.isString(e.docString))return\"docString: string expected\";if(null!=e.input&&e.hasOwnProperty(\"input\")){if(!Array.isArray(e.input))return\"input: array expected\";for(t=0;t<e.input.length;++t)if(n=c.onnx.ValueInfoProto.verify(e.input[t]))return\"input.\"+n;}if(null!=e.output&&e.hasOwnProperty(\"output\")){if(!Array.isArray(e.output))return\"output: array expected\";for(t=0;t<e.output.length;++t)if(n=c.onnx.ValueInfoProto.verify(e.output[t]))return\"output.\"+n;}if(null!=e.valueInfo&&e.hasOwnProperty(\"valueInfo\")){if(!Array.isArray(e.valueInfo))return\"valueInfo: array expected\";for(t=0;t<e.valueInfo.length;++t)if(n=c.onnx.ValueInfoProto.verify(e.valueInfo[t]))return\"valueInfo.\"+n;}if(null!=e.quantizationAnnotation&&e.hasOwnProperty(\"quantizationAnnotation\")){if(!Array.isArray(e.quantizationAnnotation))return\"quantizationAnnotation: array expected\";for(t=0;t<e.quantizationAnnotation.length;++t){var n;if(n=c.onnx.TensorAnnotation.verify(e.quantizationAnnotation[t]))return\"quantizationAnnotation.\"+n;}}return null;},e.fromObject=function(e){if(e instanceof c.onnx.GraphProto)return e;var t=new c.onnx.GraphProto();if(e.node){if(!Array.isArray(e.node))throw TypeError(\".onnx.GraphProto.node: array expected\");t.node=[];for(var n=0;n<e.node.length;++n){if(\"object\"!=_typeof2(e.node[n]))throw TypeError(\".onnx.GraphProto.node: object expected\");t.node[n]=c.onnx.NodeProto.fromObject(e.node[n]);}}if(null!=e.name&&(t.name=String(e.name)),e.initializer){if(!Array.isArray(e.initializer))throw TypeError(\".onnx.GraphProto.initializer: array expected\");for(t.initializer=[],n=0;n<e.initializer.length;++n){if(\"object\"!=_typeof2(e.initializer[n]))throw TypeError(\".onnx.GraphProto.initializer: object expected\");t.initializer[n]=c.onnx.TensorProto.fromObject(e.initializer[n]);}}if(null!=e.docString&&(t.docString=String(e.docString)),e.input){if(!Array.isArray(e.input))throw TypeError(\".onnx.GraphProto.input: array expected\");for(t.input=[],n=0;n<e.input.length;++n){if(\"object\"!=_typeof2(e.input[n]))throw TypeError(\".onnx.GraphProto.input: object expected\");t.input[n]=c.onnx.ValueInfoProto.fromObject(e.input[n]);}}if(e.output){if(!Array.isArray(e.output))throw TypeError(\".onnx.GraphProto.output: array expected\");for(t.output=[],n=0;n<e.output.length;++n){if(\"object\"!=_typeof2(e.output[n]))throw TypeError(\".onnx.GraphProto.output: object expected\");t.output[n]=c.onnx.ValueInfoProto.fromObject(e.output[n]);}}if(e.valueInfo){if(!Array.isArray(e.valueInfo))throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");for(t.valueInfo=[],n=0;n<e.valueInfo.length;++n){if(\"object\"!=_typeof2(e.valueInfo[n]))throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");t.valueInfo[n]=c.onnx.ValueInfoProto.fromObject(e.valueInfo[n]);}}if(e.quantizationAnnotation){if(!Array.isArray(e.quantizationAnnotation))throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");for(t.quantizationAnnotation=[],n=0;n<e.quantizationAnnotation.length;++n){if(\"object\"!=_typeof2(e.quantizationAnnotation[n]))throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");t.quantizationAnnotation[n]=c.onnx.TensorAnnotation.fromObject(e.quantizationAnnotation[n]);}}return t;},e.toObject=function(e,t){t||(t={});var n={};if((t.arrays||t.defaults)&&(n.node=[],n.initializer=[],n.input=[],n.output=[],n.valueInfo=[],n.quantizationAnnotation=[]),t.defaults&&(n.name=\"\",n.docString=\"\"),e.node&&e.node.length){n.node=[];for(var r=0;r<e.node.length;++r)n.node[r]=c.onnx.NodeProto.toObject(e.node[r],t);}if(null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.initializer&&e.initializer.length)for(n.initializer=[],r=0;r<e.initializer.length;++r)n.initializer[r]=c.onnx.TensorProto.toObject(e.initializer[r],t);if(null!=e.docString&&e.hasOwnProperty(\"docString\")&&(n.docString=e.docString),e.input&&e.input.length)for(n.input=[],r=0;r<e.input.length;++r)n.input[r]=c.onnx.ValueInfoProto.toObject(e.input[r],t);if(e.output&&e.output.length)for(n.output=[],r=0;r<e.output.length;++r)n.output[r]=c.onnx.ValueInfoProto.toObject(e.output[r],t);if(e.valueInfo&&e.valueInfo.length)for(n.valueInfo=[],r=0;r<e.valueInfo.length;++r)n.valueInfo[r]=c.onnx.ValueInfoProto.toObject(e.valueInfo[r],t);if(e.quantizationAnnotation&&e.quantizationAnnotation.length)for(n.quantizationAnnotation=[],r=0;r<e.quantizationAnnotation.length;++r)n.quantizationAnnotation[r]=c.onnx.TensorAnnotation.toObject(e.quantizationAnnotation[r],t);return n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e;}(),i.TensorProto=function(){function e(e){if(this.dims=[],this.floatData=[],this.int32Data=[],this.stringData=[],this.int64Data=[],this.externalData=[],this.doubleData=[],this.uint64Data=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}return e.prototype.dims=l.emptyArray,e.prototype.dataType=0,e.prototype.segment=null,e.prototype.floatData=l.emptyArray,e.prototype.int32Data=l.emptyArray,e.prototype.stringData=l.emptyArray,e.prototype.int64Data=l.emptyArray,e.prototype.name=\"\",e.prototype.docString=\"\",e.prototype.rawData=l.newBuffer([]),e.prototype.externalData=l.emptyArray,e.prototype.dataLocation=0,e.prototype.doubleData=l.emptyArray,e.prototype.uint64Data=l.emptyArray,e.create=function(t){return new e(t);},e.encode=function(e,t){if(t||(t=u.create()),null!=e.dims&&e.dims.length){t.uint32(10).fork();for(var n=0;n<e.dims.length;++n)t.int64(e.dims[n]);t.ldelim();}if(null!=e.dataType&&e.hasOwnProperty(\"dataType\")&&t.uint32(16).int32(e.dataType),null!=e.segment&&e.hasOwnProperty(\"segment\")&&c.onnx.TensorProto.Segment.encode(e.segment,t.uint32(26).fork()).ldelim(),null!=e.floatData&&e.floatData.length){for(t.uint32(34).fork(),n=0;n<e.floatData.length;++n)t[\"float\"](e.floatData[n]);t.ldelim();}if(null!=e.int32Data&&e.int32Data.length){for(t.uint32(42).fork(),n=0;n<e.int32Data.length;++n)t.int32(e.int32Data[n]);t.ldelim();}if(null!=e.stringData&&e.stringData.length)for(n=0;n<e.stringData.length;++n)t.uint32(50).bytes(e.stringData[n]);if(null!=e.int64Data&&e.int64Data.length){for(t.uint32(58).fork(),n=0;n<e.int64Data.length;++n)t.int64(e.int64Data[n]);t.ldelim();}if(null!=e.name&&e.hasOwnProperty(\"name\")&&t.uint32(66).string(e.name),null!=e.rawData&&e.hasOwnProperty(\"rawData\")&&t.uint32(74).bytes(e.rawData),null!=e.doubleData&&e.doubleData.length){for(t.uint32(82).fork(),n=0;n<e.doubleData.length;++n)t[\"double\"](e.doubleData[n]);t.ldelim();}if(null!=e.uint64Data&&e.uint64Data.length){for(t.uint32(90).fork(),n=0;n<e.uint64Data.length;++n)t.uint64(e.uint64Data[n]);t.ldelim();}if(null!=e.docString&&e.hasOwnProperty(\"docString\")&&t.uint32(98).string(e.docString),null!=e.externalData&&e.externalData.length)for(n=0;n<e.externalData.length;++n)c.onnx.StringStringEntryProto.encode(e.externalData[n],t.uint32(106).fork()).ldelim();return null!=e.dataLocation&&e.hasOwnProperty(\"dataLocation\")&&t.uint32(112).int32(e.dataLocation),t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.TensorProto();e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:if(r.dims&&r.dims.length||(r.dims=[]),2==(7&o))for(var i=e.uint32()+e.pos;e.pos<i;)r.dims.push(e.int64());else r.dims.push(e.int64());break;case 2:r.dataType=e.int32();break;case 3:r.segment=c.onnx.TensorProto.Segment.decode(e,e.uint32());break;case 4:if(r.floatData&&r.floatData.length||(r.floatData=[]),2==(7&o))for(i=e.uint32()+e.pos;e.pos<i;)r.floatData.push(e[\"float\"]());else r.floatData.push(e[\"float\"]());break;case 5:if(r.int32Data&&r.int32Data.length||(r.int32Data=[]),2==(7&o))for(i=e.uint32()+e.pos;e.pos<i;)r.int32Data.push(e.int32());else r.int32Data.push(e.int32());break;case 6:r.stringData&&r.stringData.length||(r.stringData=[]),r.stringData.push(e.bytes());break;case 7:if(r.int64Data&&r.int64Data.length||(r.int64Data=[]),2==(7&o))for(i=e.uint32()+e.pos;e.pos<i;)r.int64Data.push(e.int64());else r.int64Data.push(e.int64());break;case 8:r.name=e.string();break;case 12:r.docString=e.string();break;case 9:r.rawData=e.bytes();break;case 13:r.externalData&&r.externalData.length||(r.externalData=[]),r.externalData.push(c.onnx.StringStringEntryProto.decode(e,e.uint32()));break;case 14:r.dataLocation=e.int32();break;case 10:if(r.doubleData&&r.doubleData.length||(r.doubleData=[]),2==(7&o))for(i=e.uint32()+e.pos;e.pos<i;)r.doubleData.push(e[\"double\"]());else r.doubleData.push(e[\"double\"]());break;case 11:if(r.uint64Data&&r.uint64Data.length||(r.uint64Data=[]),2==(7&o))for(i=e.uint32()+e.pos;e.pos<i;)r.uint64Data.push(e.uint64());else r.uint64Data.push(e.uint64());break;default:e.skipType(7&o);}}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){if(\"object\"!=_typeof2(e)||null===e)return\"object expected\";if(null!=e.dims&&e.hasOwnProperty(\"dims\")){if(!Array.isArray(e.dims))return\"dims: array expected\";for(var t=0;t<e.dims.length;++t)if(!(l.isInteger(e.dims[t])||e.dims[t]&&l.isInteger(e.dims[t].low)&&l.isInteger(e.dims[t].high)))return\"dims: integer|Long[] expected\";}if(null!=e.dataType&&e.hasOwnProperty(\"dataType\")&&!l.isInteger(e.dataType))return\"dataType: integer expected\";if(null!=e.segment&&e.hasOwnProperty(\"segment\")&&(n=c.onnx.TensorProto.Segment.verify(e.segment)))return\"segment.\"+n;if(null!=e.floatData&&e.hasOwnProperty(\"floatData\")){if(!Array.isArray(e.floatData))return\"floatData: array expected\";for(t=0;t<e.floatData.length;++t)if(\"number\"!=typeof e.floatData[t])return\"floatData: number[] expected\";}if(null!=e.int32Data&&e.hasOwnProperty(\"int32Data\")){if(!Array.isArray(e.int32Data))return\"int32Data: array expected\";for(t=0;t<e.int32Data.length;++t)if(!l.isInteger(e.int32Data[t]))return\"int32Data: integer[] expected\";}if(null!=e.stringData&&e.hasOwnProperty(\"stringData\")){if(!Array.isArray(e.stringData))return\"stringData: array expected\";for(t=0;t<e.stringData.length;++t)if(!(e.stringData[t]&&\"number\"==typeof e.stringData[t].length||l.isString(e.stringData[t])))return\"stringData: buffer[] expected\";}if(null!=e.int64Data&&e.hasOwnProperty(\"int64Data\")){if(!Array.isArray(e.int64Data))return\"int64Data: array expected\";for(t=0;t<e.int64Data.length;++t)if(!(l.isInteger(e.int64Data[t])||e.int64Data[t]&&l.isInteger(e.int64Data[t].low)&&l.isInteger(e.int64Data[t].high)))return\"int64Data: integer|Long[] expected\";}if(null!=e.name&&e.hasOwnProperty(\"name\")&&!l.isString(e.name))return\"name: string expected\";if(null!=e.docString&&e.hasOwnProperty(\"docString\")&&!l.isString(e.docString))return\"docString: string expected\";if(null!=e.rawData&&e.hasOwnProperty(\"rawData\")&&!(e.rawData&&\"number\"==typeof e.rawData.length||l.isString(e.rawData)))return\"rawData: buffer expected\";if(null!=e.externalData&&e.hasOwnProperty(\"externalData\")){if(!Array.isArray(e.externalData))return\"externalData: array expected\";for(t=0;t<e.externalData.length;++t){var n;if(n=c.onnx.StringStringEntryProto.verify(e.externalData[t]))return\"externalData.\"+n;}}if(null!=e.dataLocation&&e.hasOwnProperty(\"dataLocation\"))switch(e.dataLocation){default:return\"dataLocation: enum value expected\";case 0:case 1:}if(null!=e.doubleData&&e.hasOwnProperty(\"doubleData\")){if(!Array.isArray(e.doubleData))return\"doubleData: array expected\";for(t=0;t<e.doubleData.length;++t)if(\"number\"!=typeof e.doubleData[t])return\"doubleData: number[] expected\";}if(null!=e.uint64Data&&e.hasOwnProperty(\"uint64Data\")){if(!Array.isArray(e.uint64Data))return\"uint64Data: array expected\";for(t=0;t<e.uint64Data.length;++t)if(!(l.isInteger(e.uint64Data[t])||e.uint64Data[t]&&l.isInteger(e.uint64Data[t].low)&&l.isInteger(e.uint64Data[t].high)))return\"uint64Data: integer|Long[] expected\";}return null;},e.fromObject=function(e){if(e instanceof c.onnx.TensorProto)return e;var t=new c.onnx.TensorProto();if(e.dims){if(!Array.isArray(e.dims))throw TypeError(\".onnx.TensorProto.dims: array expected\");t.dims=[];for(var n=0;n<e.dims.length;++n)l.Long?(t.dims[n]=l.Long.fromValue(e.dims[n])).unsigned=!1:\"string\"==typeof e.dims[n]?t.dims[n]=parseInt(e.dims[n],10):\"number\"==typeof e.dims[n]?t.dims[n]=e.dims[n]:\"object\"==_typeof2(e.dims[n])&&(t.dims[n]=new l.LongBits(e.dims[n].low>>>0,e.dims[n].high>>>0).toNumber());}if(null!=e.dataType&&(t.dataType=0|e.dataType),null!=e.segment){if(\"object\"!=_typeof2(e.segment))throw TypeError(\".onnx.TensorProto.segment: object expected\");t.segment=c.onnx.TensorProto.Segment.fromObject(e.segment);}if(e.floatData){if(!Array.isArray(e.floatData))throw TypeError(\".onnx.TensorProto.floatData: array expected\");for(t.floatData=[],n=0;n<e.floatData.length;++n)t.floatData[n]=Number(e.floatData[n]);}if(e.int32Data){if(!Array.isArray(e.int32Data))throw TypeError(\".onnx.TensorProto.int32Data: array expected\");for(t.int32Data=[],n=0;n<e.int32Data.length;++n)t.int32Data[n]=0|e.int32Data[n];}if(e.stringData){if(!Array.isArray(e.stringData))throw TypeError(\".onnx.TensorProto.stringData: array expected\");for(t.stringData=[],n=0;n<e.stringData.length;++n)\"string\"==typeof e.stringData[n]?l.base64.decode(e.stringData[n],t.stringData[n]=l.newBuffer(l.base64.length(e.stringData[n])),0):e.stringData[n].length&&(t.stringData[n]=e.stringData[n]);}if(e.int64Data){if(!Array.isArray(e.int64Data))throw TypeError(\".onnx.TensorProto.int64Data: array expected\");for(t.int64Data=[],n=0;n<e.int64Data.length;++n)l.Long?(t.int64Data[n]=l.Long.fromValue(e.int64Data[n])).unsigned=!1:\"string\"==typeof e.int64Data[n]?t.int64Data[n]=parseInt(e.int64Data[n],10):\"number\"==typeof e.int64Data[n]?t.int64Data[n]=e.int64Data[n]:\"object\"==_typeof2(e.int64Data[n])&&(t.int64Data[n]=new l.LongBits(e.int64Data[n].low>>>0,e.int64Data[n].high>>>0).toNumber());}if(null!=e.name&&(t.name=String(e.name)),null!=e.docString&&(t.docString=String(e.docString)),null!=e.rawData&&(\"string\"==typeof e.rawData?l.base64.decode(e.rawData,t.rawData=l.newBuffer(l.base64.length(e.rawData)),0):e.rawData.length&&(t.rawData=e.rawData)),e.externalData){if(!Array.isArray(e.externalData))throw TypeError(\".onnx.TensorProto.externalData: array expected\");for(t.externalData=[],n=0;n<e.externalData.length;++n){if(\"object\"!=_typeof2(e.externalData[n]))throw TypeError(\".onnx.TensorProto.externalData: object expected\");t.externalData[n]=c.onnx.StringStringEntryProto.fromObject(e.externalData[n]);}}switch(e.dataLocation){case\"DEFAULT\":case 0:t.dataLocation=0;break;case\"EXTERNAL\":case 1:t.dataLocation=1;}if(e.doubleData){if(!Array.isArray(e.doubleData))throw TypeError(\".onnx.TensorProto.doubleData: array expected\");for(t.doubleData=[],n=0;n<e.doubleData.length;++n)t.doubleData[n]=Number(e.doubleData[n]);}if(e.uint64Data){if(!Array.isArray(e.uint64Data))throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");for(t.uint64Data=[],n=0;n<e.uint64Data.length;++n)l.Long?(t.uint64Data[n]=l.Long.fromValue(e.uint64Data[n])).unsigned=!0:\"string\"==typeof e.uint64Data[n]?t.uint64Data[n]=parseInt(e.uint64Data[n],10):\"number\"==typeof e.uint64Data[n]?t.uint64Data[n]=e.uint64Data[n]:\"object\"==_typeof2(e.uint64Data[n])&&(t.uint64Data[n]=new l.LongBits(e.uint64Data[n].low>>>0,e.uint64Data[n].high>>>0).toNumber(!0));}return t;},e.toObject=function(e,t){t||(t={});var n={};if((t.arrays||t.defaults)&&(n.dims=[],n.floatData=[],n.int32Data=[],n.stringData=[],n.int64Data=[],n.doubleData=[],n.uint64Data=[],n.externalData=[]),t.defaults&&(n.dataType=0,n.segment=null,n.name=\"\",t.bytes===String?n.rawData=\"\":(n.rawData=[],t.bytes!==Array&&(n.rawData=l.newBuffer(n.rawData))),n.docString=\"\",n.dataLocation=t.enums===String?\"DEFAULT\":0),e.dims&&e.dims.length){n.dims=[];for(var r=0;r<e.dims.length;++r)\"number\"==typeof e.dims[r]?n.dims[r]=t.longs===String?String(e.dims[r]):e.dims[r]:n.dims[r]=t.longs===String?l.Long.prototype.toString.call(e.dims[r]):t.longs===Number?new l.LongBits(e.dims[r].low>>>0,e.dims[r].high>>>0).toNumber():e.dims[r];}if(null!=e.dataType&&e.hasOwnProperty(\"dataType\")&&(n.dataType=e.dataType),null!=e.segment&&e.hasOwnProperty(\"segment\")&&(n.segment=c.onnx.TensorProto.Segment.toObject(e.segment,t)),e.floatData&&e.floatData.length)for(n.floatData=[],r=0;r<e.floatData.length;++r)n.floatData[r]=t.json&&!isFinite(e.floatData[r])?String(e.floatData[r]):e.floatData[r];if(e.int32Data&&e.int32Data.length)for(n.int32Data=[],r=0;r<e.int32Data.length;++r)n.int32Data[r]=e.int32Data[r];if(e.stringData&&e.stringData.length)for(n.stringData=[],r=0;r<e.stringData.length;++r)n.stringData[r]=t.bytes===String?l.base64.encode(e.stringData[r],0,e.stringData[r].length):t.bytes===Array?Array.prototype.slice.call(e.stringData[r]):e.stringData[r];if(e.int64Data&&e.int64Data.length)for(n.int64Data=[],r=0;r<e.int64Data.length;++r)\"number\"==typeof e.int64Data[r]?n.int64Data[r]=t.longs===String?String(e.int64Data[r]):e.int64Data[r]:n.int64Data[r]=t.longs===String?l.Long.prototype.toString.call(e.int64Data[r]):t.longs===Number?new l.LongBits(e.int64Data[r].low>>>0,e.int64Data[r].high>>>0).toNumber():e.int64Data[r];if(null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.rawData&&e.hasOwnProperty(\"rawData\")&&(n.rawData=t.bytes===String?l.base64.encode(e.rawData,0,e.rawData.length):t.bytes===Array?Array.prototype.slice.call(e.rawData):e.rawData),e.doubleData&&e.doubleData.length)for(n.doubleData=[],r=0;r<e.doubleData.length;++r)n.doubleData[r]=t.json&&!isFinite(e.doubleData[r])?String(e.doubleData[r]):e.doubleData[r];if(e.uint64Data&&e.uint64Data.length)for(n.uint64Data=[],r=0;r<e.uint64Data.length;++r)\"number\"==typeof e.uint64Data[r]?n.uint64Data[r]=t.longs===String?String(e.uint64Data[r]):e.uint64Data[r]:n.uint64Data[r]=t.longs===String?l.Long.prototype.toString.call(e.uint64Data[r]):t.longs===Number?new l.LongBits(e.uint64Data[r].low>>>0,e.uint64Data[r].high>>>0).toNumber(!0):e.uint64Data[r];if(null!=e.docString&&e.hasOwnProperty(\"docString\")&&(n.docString=e.docString),e.externalData&&e.externalData.length)for(n.externalData=[],r=0;r<e.externalData.length;++r)n.externalData[r]=c.onnx.StringStringEntryProto.toObject(e.externalData[r],t);return null!=e.dataLocation&&e.hasOwnProperty(\"dataLocation\")&&(n.dataLocation=t.enums===String?c.onnx.TensorProto.DataLocation[e.dataLocation]:e.dataLocation),n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e.DataType=function(){var e={},t=Object.create(e);return t[e[0]=\"UNDEFINED\"]=0,t[e[1]=\"FLOAT\"]=1,t[e[2]=\"UINT8\"]=2,t[e[3]=\"INT8\"]=3,t[e[4]=\"UINT16\"]=4,t[e[5]=\"INT16\"]=5,t[e[6]=\"INT32\"]=6,t[e[7]=\"INT64\"]=7,t[e[8]=\"STRING\"]=8,t[e[9]=\"BOOL\"]=9,t[e[10]=\"FLOAT16\"]=10,t[e[11]=\"DOUBLE\"]=11,t[e[12]=\"UINT32\"]=12,t[e[13]=\"UINT64\"]=13,t[e[14]=\"COMPLEX64\"]=14,t[e[15]=\"COMPLEX128\"]=15,t[e[16]=\"BFLOAT16\"]=16,t;}(),e.Segment=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}return e.prototype.begin=l.Long?l.Long.fromBits(0,0,!1):0,e.prototype.end=l.Long?l.Long.fromBits(0,0,!1):0,e.create=function(t){return new e(t);},e.encode=function(e,t){return t||(t=u.create()),null!=e.begin&&e.hasOwnProperty(\"begin\")&&t.uint32(8).int64(e.begin),null!=e.end&&e.hasOwnProperty(\"end\")&&t.uint32(16).int64(e.end),t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.TensorProto.Segment();e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.begin=e.int64();break;case 2:r.end=e.int64();break;default:e.skipType(7&o);}}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){return\"object\"!=_typeof2(e)||null===e?\"object expected\":null!=e.begin&&e.hasOwnProperty(\"begin\")&&!(l.isInteger(e.begin)||e.begin&&l.isInteger(e.begin.low)&&l.isInteger(e.begin.high))?\"begin: integer|Long expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!(l.isInteger(e.end)||e.end&&l.isInteger(e.end.low)&&l.isInteger(e.end.high))?\"end: integer|Long expected\":null;},e.fromObject=function(e){if(e instanceof c.onnx.TensorProto.Segment)return e;var t=new c.onnx.TensorProto.Segment();return null!=e.begin&&(l.Long?(t.begin=l.Long.fromValue(e.begin)).unsigned=!1:\"string\"==typeof e.begin?t.begin=parseInt(e.begin,10):\"number\"==typeof e.begin?t.begin=e.begin:\"object\"==_typeof2(e.begin)&&(t.begin=new l.LongBits(e.begin.low>>>0,e.begin.high>>>0).toNumber())),null!=e.end&&(l.Long?(t.end=l.Long.fromValue(e.end)).unsigned=!1:\"string\"==typeof e.end?t.end=parseInt(e.end,10):\"number\"==typeof e.end?t.end=e.end:\"object\"==_typeof2(e.end)&&(t.end=new l.LongBits(e.end.low>>>0,e.end.high>>>0).toNumber())),t;},e.toObject=function(e,t){t||(t={});var n={};if(t.defaults){if(l.Long){var r=new l.Long(0,0,!1);n.begin=t.longs===String?r.toString():t.longs===Number?r.toNumber():r;}else n.begin=t.longs===String?\"0\":0;l.Long?(r=new l.Long(0,0,!1),n.end=t.longs===String?r.toString():t.longs===Number?r.toNumber():r):n.end=t.longs===String?\"0\":0;}return null!=e.begin&&e.hasOwnProperty(\"begin\")&&(\"number\"==typeof e.begin?n.begin=t.longs===String?String(e.begin):e.begin:n.begin=t.longs===String?l.Long.prototype.toString.call(e.begin):t.longs===Number?new l.LongBits(e.begin.low>>>0,e.begin.high>>>0).toNumber():e.begin),null!=e.end&&e.hasOwnProperty(\"end\")&&(\"number\"==typeof e.end?n.end=t.longs===String?String(e.end):e.end:n.end=t.longs===String?l.Long.prototype.toString.call(e.end):t.longs===Number?new l.LongBits(e.end.low>>>0,e.end.high>>>0).toNumber():e.end),n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e;}(),e.DataLocation=function(){var e={},t=Object.create(e);return t[e[0]=\"DEFAULT\"]=0,t[e[1]=\"EXTERNAL\"]=1,t;}(),e;}(),i.TensorShapeProto=function(){function e(e){if(this.dim=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}return e.prototype.dim=l.emptyArray,e.create=function(t){return new e(t);},e.encode=function(e,t){if(t||(t=u.create()),null!=e.dim&&e.dim.length)for(var n=0;n<e.dim.length;++n)c.onnx.TensorShapeProto.Dimension.encode(e.dim[n],t.uint32(10).fork()).ldelim();return t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.TensorShapeProto();e.pos<n;){var o=e.uint32();o>>>3==1?(r.dim&&r.dim.length||(r.dim=[]),r.dim.push(c.onnx.TensorShapeProto.Dimension.decode(e,e.uint32()))):e.skipType(7&o);}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){if(\"object\"!=_typeof2(e)||null===e)return\"object expected\";if(null!=e.dim&&e.hasOwnProperty(\"dim\")){if(!Array.isArray(e.dim))return\"dim: array expected\";for(var t=0;t<e.dim.length;++t){var n=c.onnx.TensorShapeProto.Dimension.verify(e.dim[t]);if(n)return\"dim.\"+n;}}return null;},e.fromObject=function(e){if(e instanceof c.onnx.TensorShapeProto)return e;var t=new c.onnx.TensorShapeProto();if(e.dim){if(!Array.isArray(e.dim))throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");t.dim=[];for(var n=0;n<e.dim.length;++n){if(\"object\"!=_typeof2(e.dim[n]))throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");t.dim[n]=c.onnx.TensorShapeProto.Dimension.fromObject(e.dim[n]);}}return t;},e.toObject=function(e,t){t||(t={});var n={};if((t.arrays||t.defaults)&&(n.dim=[]),e.dim&&e.dim.length){n.dim=[];for(var r=0;r<e.dim.length;++r)n.dim[r]=c.onnx.TensorShapeProto.Dimension.toObject(e.dim[r],t);}return n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e.Dimension=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}var t;return e.prototype.dimValue=l.Long?l.Long.fromBits(0,0,!1):0,e.prototype.dimParam=\"\",e.prototype.denotation=\"\",Object.defineProperty(e.prototype,\"value\",{get:l.oneOfGetter(t=[\"dimValue\",\"dimParam\"]),set:l.oneOfSetter(t)}),e.create=function(t){return new e(t);},e.encode=function(e,t){return t||(t=u.create()),null!=e.dimValue&&e.hasOwnProperty(\"dimValue\")&&t.uint32(8).int64(e.dimValue),null!=e.dimParam&&e.hasOwnProperty(\"dimParam\")&&t.uint32(18).string(e.dimParam),null!=e.denotation&&e.hasOwnProperty(\"denotation\")&&t.uint32(26).string(e.denotation),t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.TensorShapeProto.Dimension();e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.dimValue=e.int64();break;case 2:r.dimParam=e.string();break;case 3:r.denotation=e.string();break;default:e.skipType(7&o);}}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){if(\"object\"!=_typeof2(e)||null===e)return\"object expected\";var t={};if(null!=e.dimValue&&e.hasOwnProperty(\"dimValue\")&&(t.value=1,!(l.isInteger(e.dimValue)||e.dimValue&&l.isInteger(e.dimValue.low)&&l.isInteger(e.dimValue.high))))return\"dimValue: integer|Long expected\";if(null!=e.dimParam&&e.hasOwnProperty(\"dimParam\")){if(1===t.value)return\"value: multiple values\";if(t.value=1,!l.isString(e.dimParam))return\"dimParam: string expected\";}return null!=e.denotation&&e.hasOwnProperty(\"denotation\")&&!l.isString(e.denotation)?\"denotation: string expected\":null;},e.fromObject=function(e){if(e instanceof c.onnx.TensorShapeProto.Dimension)return e;var t=new c.onnx.TensorShapeProto.Dimension();return null!=e.dimValue&&(l.Long?(t.dimValue=l.Long.fromValue(e.dimValue)).unsigned=!1:\"string\"==typeof e.dimValue?t.dimValue=parseInt(e.dimValue,10):\"number\"==typeof e.dimValue?t.dimValue=e.dimValue:\"object\"==_typeof2(e.dimValue)&&(t.dimValue=new l.LongBits(e.dimValue.low>>>0,e.dimValue.high>>>0).toNumber())),null!=e.dimParam&&(t.dimParam=String(e.dimParam)),null!=e.denotation&&(t.denotation=String(e.denotation)),t;},e.toObject=function(e,t){t||(t={});var n={};return t.defaults&&(n.denotation=\"\"),null!=e.dimValue&&e.hasOwnProperty(\"dimValue\")&&(\"number\"==typeof e.dimValue?n.dimValue=t.longs===String?String(e.dimValue):e.dimValue:n.dimValue=t.longs===String?l.Long.prototype.toString.call(e.dimValue):t.longs===Number?new l.LongBits(e.dimValue.low>>>0,e.dimValue.high>>>0).toNumber():e.dimValue,t.oneofs&&(n.value=\"dimValue\")),null!=e.dimParam&&e.hasOwnProperty(\"dimParam\")&&(n.dimParam=e.dimParam,t.oneofs&&(n.value=\"dimParam\")),null!=e.denotation&&e.hasOwnProperty(\"denotation\")&&(n.denotation=e.denotation),n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e;}(),e;}(),i.TypeProto=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}var t;return e.prototype.tensorType=null,e.prototype.denotation=\"\",Object.defineProperty(e.prototype,\"value\",{get:l.oneOfGetter(t=[\"tensorType\"]),set:l.oneOfSetter(t)}),e.create=function(t){return new e(t);},e.encode=function(e,t){return t||(t=u.create()),null!=e.tensorType&&e.hasOwnProperty(\"tensorType\")&&c.onnx.TypeProto.Tensor.encode(e.tensorType,t.uint32(10).fork()).ldelim(),null!=e.denotation&&e.hasOwnProperty(\"denotation\")&&t.uint32(50).string(e.denotation),t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.TypeProto();e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.tensorType=c.onnx.TypeProto.Tensor.decode(e,e.uint32());break;case 6:r.denotation=e.string();break;default:e.skipType(7&o);}}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){if(\"object\"!=_typeof2(e)||null===e)return\"object expected\";if(null!=e.tensorType&&e.hasOwnProperty(\"tensorType\")){var t=c.onnx.TypeProto.Tensor.verify(e.tensorType);if(t)return\"tensorType.\"+t;}return null!=e.denotation&&e.hasOwnProperty(\"denotation\")&&!l.isString(e.denotation)?\"denotation: string expected\":null;},e.fromObject=function(e){if(e instanceof c.onnx.TypeProto)return e;var t=new c.onnx.TypeProto();if(null!=e.tensorType){if(\"object\"!=_typeof2(e.tensorType))throw TypeError(\".onnx.TypeProto.tensorType: object expected\");t.tensorType=c.onnx.TypeProto.Tensor.fromObject(e.tensorType);}return null!=e.denotation&&(t.denotation=String(e.denotation)),t;},e.toObject=function(e,t){t||(t={});var n={};return t.defaults&&(n.denotation=\"\"),null!=e.tensorType&&e.hasOwnProperty(\"tensorType\")&&(n.tensorType=c.onnx.TypeProto.Tensor.toObject(e.tensorType,t),t.oneofs&&(n.value=\"tensorType\")),null!=e.denotation&&e.hasOwnProperty(\"denotation\")&&(n.denotation=e.denotation),n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e.Tensor=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}return e.prototype.elemType=0,e.prototype.shape=null,e.create=function(t){return new e(t);},e.encode=function(e,t){return t||(t=u.create()),null!=e.elemType&&e.hasOwnProperty(\"elemType\")&&t.uint32(8).int32(e.elemType),null!=e.shape&&e.hasOwnProperty(\"shape\")&&c.onnx.TensorShapeProto.encode(e.shape,t.uint32(18).fork()).ldelim(),t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.TypeProto.Tensor();e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.elemType=e.int32();break;case 2:r.shape=c.onnx.TensorShapeProto.decode(e,e.uint32());break;default:e.skipType(7&o);}}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){if(\"object\"!=_typeof2(e)||null===e)return\"object expected\";if(null!=e.elemType&&e.hasOwnProperty(\"elemType\")&&!l.isInteger(e.elemType))return\"elemType: integer expected\";if(null!=e.shape&&e.hasOwnProperty(\"shape\")){var t=c.onnx.TensorShapeProto.verify(e.shape);if(t)return\"shape.\"+t;}return null;},e.fromObject=function(e){if(e instanceof c.onnx.TypeProto.Tensor)return e;var t=new c.onnx.TypeProto.Tensor();if(null!=e.elemType&&(t.elemType=0|e.elemType),null!=e.shape){if(\"object\"!=_typeof2(e.shape))throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");t.shape=c.onnx.TensorShapeProto.fromObject(e.shape);}return t;},e.toObject=function(e,t){t||(t={});var n={};return t.defaults&&(n.elemType=0,n.shape=null),null!=e.elemType&&e.hasOwnProperty(\"elemType\")&&(n.elemType=e.elemType),null!=e.shape&&e.hasOwnProperty(\"shape\")&&(n.shape=c.onnx.TensorShapeProto.toObject(e.shape,t)),n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e;}(),e;}(),i.OperatorSetIdProto=function(){function e(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]]);}return e.prototype.domain=\"\",e.prototype.version=l.Long?l.Long.fromBits(0,0,!1):0,e.create=function(t){return new e(t);},e.encode=function(e,t){return t||(t=u.create()),null!=e.domain&&e.hasOwnProperty(\"domain\")&&t.uint32(10).string(e.domain),null!=e.version&&e.hasOwnProperty(\"version\")&&t.uint32(16).int64(e.version),t;},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim();},e.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,r=new c.onnx.OperatorSetIdProto();e.pos<n;){var o=e.uint32();switch(o>>>3){case 1:r.domain=e.string();break;case 2:r.version=e.int64();break;default:e.skipType(7&o);}}return r;},e.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32());},e.verify=function(e){return\"object\"!=_typeof2(e)||null===e?\"object expected\":null!=e.domain&&e.hasOwnProperty(\"domain\")&&!l.isString(e.domain)?\"domain: string expected\":null!=e.version&&e.hasOwnProperty(\"version\")&&!(l.isInteger(e.version)||e.version&&l.isInteger(e.version.low)&&l.isInteger(e.version.high))?\"version: integer|Long expected\":null;},e.fromObject=function(e){if(e instanceof c.onnx.OperatorSetIdProto)return e;var t=new c.onnx.OperatorSetIdProto();return null!=e.domain&&(t.domain=String(e.domain)),null!=e.version&&(l.Long?(t.version=l.Long.fromValue(e.version)).unsigned=!1:\"string\"==typeof e.version?t.version=parseInt(e.version,10):\"number\"==typeof e.version?t.version=e.version:\"object\"==_typeof2(e.version)&&(t.version=new l.LongBits(e.version.low>>>0,e.version.high>>>0).toNumber())),t;},e.toObject=function(e,t){t||(t={});var n={};if(t.defaults)if(n.domain=\"\",l.Long){var r=new l.Long(0,0,!1);n.version=t.longs===String?r.toString():t.longs===Number?r.toNumber():r;}else n.version=t.longs===String?\"0\":0;return null!=e.domain&&e.hasOwnProperty(\"domain\")&&(n.domain=e.domain),null!=e.version&&e.hasOwnProperty(\"version\")&&(\"number\"==typeof e.version?n.version=t.longs===String?String(e.version):e.version:n.version=t.longs===String?l.Long.prototype.toString.call(e.version):t.longs===Number?new l.LongBits(e.version.low>>>0,e.version.high>>>0).toNumber():e.version),n;},e.prototype.toJSON=function(){return this.constructor.toObject(this,a.util.toJSONOptions);},e;}(),i),e.exports=c;},2100:function _(e,t,n){\"use strict\";e.exports=n(9482);},9482:function _(e,t,n){\"use strict\";var r=t;function o(){r.util._configure(),r.Writer._configure(r.BufferWriter),r.Reader._configure(r.BufferReader);}r.build=\"minimal\",r.Writer=n(1173),r.BufferWriter=n(3155),r.Reader=n(1408),r.BufferReader=n(593),r.util=n(9693),r.rpc=n(5994),r.roots=n(5054),r.configure=o,o();},1408:function _(e,t,n){\"use strict\";e.exports=u;var r,o=n(9693),i=o.LongBits,a=o.utf8;function s(e,t){return RangeError(\"index out of range: \"+e.pos+\" + \"+(t||1)+\" > \"+e.len);}function u(e){this.buf=e,this.pos=0,this.len=e.length;}var l,c=\"undefined\"!=typeof Uint8Array?function(e){if(e instanceof Uint8Array||Array.isArray(e))return new u(e);throw Error(\"illegal buffer\");}:function(e){if(Array.isArray(e))return new u(e);throw Error(\"illegal buffer\");},p=function p(){return o.Buffer?function(e){return(u.create=function(e){return o.Buffer.isBuffer(e)?new r(e):c(e);})(e);}:c;};function d(){var e=new i(0,0),t=0;if(!(this.len-this.pos>4)){for(;t<3;++t){if(this.pos>=this.len)throw s(this);if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e;}return e.lo=(e.lo|(127&this.buf[this.pos++])<<7*t)>>>0,e;}for(;t<4;++t)if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e;if(e.lo=(e.lo|(127&this.buf[this.pos])<<28)>>>0,e.hi=(e.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return e;if(t=0,this.len-this.pos>4){for(;t<5;++t)if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e;}else for(;t<5;++t){if(this.pos>=this.len)throw s(this);if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e;}throw Error(\"invalid varint encoding\");}function f(e,t){return(e[t-4]|e[t-3]<<8|e[t-2]<<16|e[t-1]<<24)>>>0;}function h(){if(this.pos+8>this.len)throw s(this,8);return new i(f(this.buf,this.pos+=4),f(this.buf,this.pos+=4));}u.create=p(),u.prototype._slice=o.Array.prototype.subarray||o.Array.prototype.slice,u.prototype.uint32=(l=4294967295,function(){if(l=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return l;if(l=(l|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return l;if(l=(l|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return l;if(l=(l|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return l;if(l=(l|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return l;if((this.pos+=5)>this.len)throw this.pos=this.len,s(this,10);return l;}),u.prototype.int32=function(){return 0|this.uint32();},u.prototype.sint32=function(){var e=this.uint32();return e>>>1^-(1&e)|0;},u.prototype.bool=function(){return 0!==this.uint32();},u.prototype.fixed32=function(){if(this.pos+4>this.len)throw s(this,4);return f(this.buf,this.pos+=4);},u.prototype.sfixed32=function(){if(this.pos+4>this.len)throw s(this,4);return 0|f(this.buf,this.pos+=4);},u.prototype[\"float\"]=function(){if(this.pos+4>this.len)throw s(this,4);var e=o[\"float\"].readFloatLE(this.buf,this.pos);return this.pos+=4,e;},u.prototype[\"double\"]=function(){if(this.pos+8>this.len)throw s(this,4);var e=o[\"float\"].readDoubleLE(this.buf,this.pos);return this.pos+=8,e;},u.prototype.bytes=function(){var e=this.uint32(),t=this.pos,n=this.pos+e;if(n>this.len)throw s(this,e);return this.pos+=e,Array.isArray(this.buf)?this.buf.slice(t,n):t===n?new this.buf.constructor(0):this._slice.call(this.buf,t,n);},u.prototype.string=function(){var e=this.bytes();return a.read(e,0,e.length);},u.prototype.skip=function(e){if(\"number\"==typeof e){if(this.pos+e>this.len)throw s(this,e);this.pos+=e;}else do{if(this.pos>=this.len)throw s(this);}while(128&this.buf[this.pos++]);return this;},u.prototype.skipType=function(e){switch(e){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(e=7&this.uint32());)this.skipType(e);break;case 5:this.skip(4);break;default:throw Error(\"invalid wire type \"+e+\" at offset \"+this.pos);}return this;},u._configure=function(e){r=e,u.create=p(),r._configure();var t=o.Long?\"toLong\":\"toNumber\";o.merge(u.prototype,{int64:function int64(){return d.call(this)[t](!1);},uint64:function uint64(){return d.call(this)[t](!0);},sint64:function sint64(){return d.call(this).zzDecode()[t](!1);},fixed64:function fixed64(){return h.call(this)[t](!0);},sfixed64:function sfixed64(){return h.call(this)[t](!1);}});};},593:function _(e,t,n){\"use strict\";e.exports=i;var r=n(1408);(i.prototype=Object.create(r.prototype)).constructor=i;var o=n(9693);function i(e){r.call(this,e);}i._configure=function(){o.Buffer&&(i.prototype._slice=o.Buffer.prototype.slice);},i.prototype.string=function(){var e=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+e,this.len)):this.buf.toString(\"utf-8\",this.pos,this.pos=Math.min(this.pos+e,this.len));},i._configure();},5054:function _(e){\"use strict\";e.exports={};},5994:function _(e,t,n){\"use strict\";t.Service=n(7948);},7948:function _(e,t,n){\"use strict\";e.exports=o;var r=n(9693);function o(e,t,n){if(\"function\"!=typeof e)throw TypeError(\"rpcImpl must be a function\");r.EventEmitter.call(this),this.rpcImpl=e,this.requestDelimited=Boolean(t),this.responseDelimited=Boolean(n);}(o.prototype=Object.create(r.EventEmitter.prototype)).constructor=o,o.prototype.rpcCall=function e(t,n,o,i,a){if(!i)throw TypeError(\"request must be specified\");var s=this;if(!a)return r.asPromise(e,s,t,n,o,i);if(s.rpcImpl)try{return s.rpcImpl(t,n[s.requestDelimited?\"encodeDelimited\":\"encode\"](i).finish(),function(e,n){if(e)return s.emit(\"error\",e,t),a(e);if(null!==n){if(!(n instanceof o))try{n=o[s.responseDelimited?\"decodeDelimited\":\"decode\"](n);}catch(e){return s.emit(\"error\",e,t),a(e);}return s.emit(\"data\",n,t),a(null,n);}s.end(!0);});}catch(e){return s.emit(\"error\",e,t),void setTimeout(function(){a(e);},0);}else setTimeout(function(){a(Error(\"already ended\"));},0);},o.prototype.end=function(e){return this.rpcImpl&&(e||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit(\"end\").off()),this;};},1945:function _(e,t,n){\"use strict\";e.exports=o;var r=n(9693);function o(e,t){this.lo=e>>>0,this.hi=t>>>0;}var i=o.zero=new o(0,0);i.toNumber=function(){return 0;},i.zzEncode=i.zzDecode=function(){return this;},i.length=function(){return 1;};var a=o.zeroHash=\"\\0\\0\\0\\0\\0\\0\\0\\0\";o.fromNumber=function(e){if(0===e)return i;var t=e<0;t&&(e=-e);var n=e>>>0,r=(e-n)/4294967296>>>0;return t&&(r=~r>>>0,n=~n>>>0,++n>4294967295&&(n=0,++r>4294967295&&(r=0))),new o(n,r);},o.from=function(e){if(\"number\"==typeof e)return o.fromNumber(e);if(r.isString(e)){if(!r.Long)return o.fromNumber(parseInt(e,10));e=r.Long.fromString(e);}return e.low||e.high?new o(e.low>>>0,e.high>>>0):i;},o.prototype.toNumber=function(e){if(!e&&this.hi>>>31){var t=1+~this.lo>>>0,n=~this.hi>>>0;return t||(n=n+1>>>0),-(t+4294967296*n);}return this.lo+4294967296*this.hi;},o.prototype.toLong=function(e){return r.Long?new r.Long(0|this.lo,0|this.hi,Boolean(e)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(e)};};var s=String.prototype.charCodeAt;o.fromHash=function(e){return e===a?i:new o((s.call(e,0)|s.call(e,1)<<8|s.call(e,2)<<16|s.call(e,3)<<24)>>>0,(s.call(e,4)|s.call(e,5)<<8|s.call(e,6)<<16|s.call(e,7)<<24)>>>0);},o.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24);},o.prototype.zzEncode=function(){var e=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^e)>>>0,this.lo=(this.lo<<1^e)>>>0,this;},o.prototype.zzDecode=function(){var e=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^e)>>>0,this.hi=(this.hi>>>1^e)>>>0,this;},o.prototype.length=function(){var e=this.lo,t=(this.lo>>>28|this.hi<<4)>>>0,n=this.hi>>>24;return 0===n?0===t?e<16384?e<128?1:2:e<2097152?3:4:t<16384?t<128?5:6:t<2097152?7:8:n<128?9:10;};},9693:function _(e,t,n){\"use strict\";var r=t;function o(e,t,n){for(var r=Object.keys(t),o=0;o<r.length;++o)void 0!==e[r[o]]&&n||(e[r[o]]=t[r[o]]);return e;}function i(e){function t(e,n){if(!(this instanceof t))return new t(e,n);Object.defineProperty(this,\"message\",{get:function get(){return e;}}),Error.captureStackTrace?Error.captureStackTrace(this,t):Object.defineProperty(this,\"stack\",{value:new Error().stack||\"\"}),n&&o(this,n);}return(t.prototype=Object.create(Error.prototype)).constructor=t,Object.defineProperty(t.prototype,\"name\",{get:function get(){return e;}}),t.prototype.toString=function(){return this.name+\": \"+this.message;},t;}r.asPromise=n(4537),r.base64=n(7419),r.EventEmitter=n(9211),r[\"float\"]=n(945),r.inquire=n(7199),r.utf8=n(4997),r.pool=n(6662),r.LongBits=n(1945),r.isNode=Boolean(void 0!==n.g&&n.g&&n.g.process&&n.g.process.versions&&n.g.process.versions.node),r.global=r.isNode&&n.g||\"undefined\"!=typeof window&&window||\"undefined\"!=typeof self&&self||this,r.emptyArray=Object.freeze?Object.freeze([]):[],r.emptyObject=Object.freeze?Object.freeze({}):{},r.isInteger=Number.isInteger||function(e){return\"number\"==typeof e&&isFinite(e)&&Math.floor(e)===e;},r.isString=function(e){return\"string\"==typeof e||e instanceof String;},r.isObject=function(e){return e&&\"object\"==_typeof2(e);},r.isset=r.isSet=function(e,t){var n=e[t];return!(null==n||!e.hasOwnProperty(t))&&(\"object\"!=_typeof2(n)||(Array.isArray(n)?n.length:Object.keys(n).length)>0);},r.Buffer=function(){try{var e=r.inquire(\"buffer\").Buffer;return e.prototype.utf8Write?e:null;}catch(e){return null;}}(),r._Buffer_from=null,r._Buffer_allocUnsafe=null,r.newBuffer=function(e){return\"number\"==typeof e?r.Buffer?r._Buffer_allocUnsafe(e):new r.Array(e):r.Buffer?r._Buffer_from(e):\"undefined\"==typeof Uint8Array?e:new Uint8Array(e);},r.Array=\"undefined\"!=typeof Uint8Array?Uint8Array:Array,r.Long=r.global.dcodeIO&&r.global.dcodeIO.Long||r.global.Long||r.inquire(\"long\"),r.key2Re=/^true|false|0|1$/,r.key32Re=/^-?(?:0|[1-9][0-9]*)$/,r.key64Re=/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,r.longToHash=function(e){return e?r.LongBits.from(e).toHash():r.LongBits.zeroHash;},r.longFromHash=function(e,t){var n=r.LongBits.fromHash(e);return r.Long?r.Long.fromBits(n.lo,n.hi,t):n.toNumber(Boolean(t));},r.merge=o,r.lcFirst=function(e){return e.charAt(0).toLowerCase()+e.substring(1);},r.newError=i,r.ProtocolError=i(\"ProtocolError\"),r.oneOfGetter=function(e){for(var t={},n=0;n<e.length;++n)t[e[n]]=1;return function(){for(var e=Object.keys(this),n=e.length-1;n>-1;--n)if(1===t[e[n]]&&void 0!==this[e[n]]&&null!==this[e[n]])return e[n];};},r.oneOfSetter=function(e){return function(t){for(var n=0;n<e.length;++n)e[n]!==t&&delete this[e[n]];};},r.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},r._configure=function(){var e=r.Buffer;e?(r._Buffer_from=e.from!==Uint8Array.from&&e.from||function(t,n){return new e(t,n);},r._Buffer_allocUnsafe=e.allocUnsafe||function(t){return new e(t);}):r._Buffer_from=r._Buffer_allocUnsafe=null;};},1173:function _(e,t,n){\"use strict\";e.exports=p;var r,o=n(9693),i=o.LongBits,a=o.base64,s=o.utf8;function u(e,t,n){this.fn=e,this.len=t,this.next=void 0,this.val=n;}function l(){}function c(e){this.head=e.head,this.tail=e.tail,this.len=e.len,this.next=e.states;}function p(){this.len=0,this.head=new u(l,0,0),this.tail=this.head,this.states=null;}var d=function d(){return o.Buffer?function(){return(p.create=function(){return new r();})();}:function(){return new p();};};function f(e,t,n){t[n]=255&e;}function h(e,t){this.len=e,this.next=void 0,this.val=t;}function g(e,t,n){for(;e.hi;)t[n++]=127&e.lo|128,e.lo=(e.lo>>>7|e.hi<<25)>>>0,e.hi>>>=7;for(;e.lo>127;)t[n++]=127&e.lo|128,e.lo=e.lo>>>7;t[n++]=e.lo;}function m(e,t,n){t[n]=255&e,t[n+1]=e>>>8&255,t[n+2]=e>>>16&255,t[n+3]=e>>>24;}p.create=d(),p.alloc=function(e){return new o.Array(e);},o.Array!==Array&&(p.alloc=o.pool(p.alloc,o.Array.prototype.subarray)),p.prototype._push=function(e,t,n){return this.tail=this.tail.next=new u(e,t,n),this.len+=t,this;},h.prototype=Object.create(u.prototype),h.prototype.fn=function(e,t,n){for(;e>127;)t[n++]=127&e|128,e>>>=7;t[n]=e;},p.prototype.uint32=function(e){return this.len+=(this.tail=this.tail.next=new h((e>>>=0)<128?1:e<16384?2:e<2097152?3:e<268435456?4:5,e)).len,this;},p.prototype.int32=function(e){return e<0?this._push(g,10,i.fromNumber(e)):this.uint32(e);},p.prototype.sint32=function(e){return this.uint32((e<<1^e>>31)>>>0);},p.prototype.uint64=function(e){var t=i.from(e);return this._push(g,t.length(),t);},p.prototype.int64=p.prototype.uint64,p.prototype.sint64=function(e){var t=i.from(e).zzEncode();return this._push(g,t.length(),t);},p.prototype.bool=function(e){return this._push(f,1,e?1:0);},p.prototype.fixed32=function(e){return this._push(m,4,e>>>0);},p.prototype.sfixed32=p.prototype.fixed32,p.prototype.fixed64=function(e){var t=i.from(e);return this._push(m,4,t.lo)._push(m,4,t.hi);},p.prototype.sfixed64=p.prototype.fixed64,p.prototype[\"float\"]=function(e){return this._push(o[\"float\"].writeFloatLE,4,e);},p.prototype[\"double\"]=function(e){return this._push(o[\"float\"].writeDoubleLE,8,e);};var b=o.Array.prototype.set?function(e,t,n){t.set(e,n);}:function(e,t,n){for(var r=0;r<e.length;++r)t[n+r]=e[r];};p.prototype.bytes=function(e){var t=e.length>>>0;if(!t)return this._push(f,1,0);if(o.isString(e)){var n=p.alloc(t=a.length(e));a.decode(e,n,0),e=n;}return this.uint32(t)._push(b,t,e);},p.prototype.string=function(e){var t=s.length(e);return t?this.uint32(t)._push(s.write,t,e):this._push(f,1,0);},p.prototype.fork=function(){return this.states=new c(this),this.head=this.tail=new u(l,0,0),this.len=0,this;},p.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new u(l,0,0),this.len=0),this;},p.prototype.ldelim=function(){var e=this.head,t=this.tail,n=this.len;return this.reset().uint32(n),n&&(this.tail.next=e.next,this.tail=t,this.len+=n),this;},p.prototype.finish=function(){for(var e=this.head.next,t=this.constructor.alloc(this.len),n=0;e;)e.fn(e.val,t,n),n+=e.len,e=e.next;return t;},p._configure=function(e){r=e,p.create=d(),r._configure();};},3155:function _(e,t,n){\"use strict\";e.exports=i;var r=n(1173);(i.prototype=Object.create(r.prototype)).constructor=i;var o=n(9693);function i(){r.call(this);}function a(e,t,n){e.length<40?o.utf8.write(e,t,n):t.utf8Write?t.utf8Write(e,n):t.write(e,n);}i._configure=function(){i.alloc=o._Buffer_allocUnsafe,i.writeBytesBuffer=o.Buffer&&o.Buffer.prototype instanceof Uint8Array&&\"set\"===o.Buffer.prototype.set.name?function(e,t,n){t.set(e,n);}:function(e,t,n){if(e.copy)e.copy(t,n,0,e.length);else for(var r=0;r<e.length;)t[n++]=e[r++];};},i.prototype.bytes=function(e){o.isString(e)&&(e=o._Buffer_from(e,\"base64\"));var t=e.length>>>0;return this.uint32(t),t&&this._push(i.writeBytesBuffer,t,e),this;},i.prototype.string=function(e){var t=o.Buffer.byteLength(e);return this.uint32(t),t&&this._push(a,t,e),this;},i._configure();},4154:function _(e){\"use strict\";e.exports='\"use strict\";var e={},t=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node;if(t){var r=require(\"worker_threads\"),a=r.parentPort;a.on(\"message\",(e=>onmessage({data:e})));var o=require(\"fs\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\"utf8\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\" \");t?o.writeSync(2,e+\"\\\\n\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\" \");postMessage({cmd:\"alert\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\"load\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\"string\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\"run\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\"unwind\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\"cancel\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\"setimmediate\"===t.data.target||(\"processProxyingQueue\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\"worker.js received unknown command \"+t.data.cmd),i(t.data)))}catch(t){throw i(\"worker.js onmessage() captured an uncaught exception: \"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\n';},7067:function _(){},1296:function _(){},760:function _(){},1384:function _(){},3993:function _(){},908:function _(){},6953:function _(){},9925:function _(){},2806:function _(){},6449:function _(){},2850:function _(){},5381:function _(){},5686:function _(e,t,n){\"use strict\";n.r(t),n.d(t,{flatbuffers:function flatbuffers(){return r;}});var r={};r.Offset,r.Table,r.SIZEOF_SHORT=2,r.SIZEOF_INT=4,r.FILE_IDENTIFIER_LENGTH=4,r.SIZE_PREFIX_LENGTH=4,r.Encoding={UTF8_BYTES:1,UTF16_STRING:2},r.int32=new Int32Array(2),r.float32=new Float32Array(r.int32.buffer),r.float64=new Float64Array(r.int32.buffer),r.isLittleEndian=1===new Uint16Array(new Uint8Array([1,0]).buffer)[0],r.Long=function(e,t){this.low=0|e,this.high=0|t;},r.Long.create=function(e,t){return 0==e&&0==t?r.Long.ZERO:new r.Long(e,t);},r.Long.prototype.toFloat64=function(){return(this.low>>>0)+4294967296*this.high;},r.Long.prototype.equals=function(e){return this.low==e.low&&this.high==e.high;},r.Long.ZERO=new r.Long(0,0),r.Builder=function(e){if(e)t=e;else var t=1024;this.bb=r.ByteBuffer.allocate(t),this.space=t,this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1;},r.Builder.prototype.clear=function(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1;},r.Builder.prototype.forceDefaults=function(e){this.force_defaults=e;},r.Builder.prototype.dataBuffer=function(){return this.bb;},r.Builder.prototype.asUint8Array=function(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset());},r.Builder.prototype.prep=function(e,t){e>this.minalign&&(this.minalign=e);for(var n=1+~(this.bb.capacity()-this.space+t)&e-1;this.space<n+e+t;){var o=this.bb.capacity();this.bb=r.Builder.growByteBuffer(this.bb),this.space+=this.bb.capacity()-o;}this.pad(n);},r.Builder.prototype.pad=function(e){for(var t=0;t<e;t++)this.bb.writeInt8(--this.space,0);},r.Builder.prototype.writeInt8=function(e){this.bb.writeInt8(this.space-=1,e);},r.Builder.prototype.writeInt16=function(e){this.bb.writeInt16(this.space-=2,e);},r.Builder.prototype.writeInt32=function(e){this.bb.writeInt32(this.space-=4,e);},r.Builder.prototype.writeInt64=function(e){this.bb.writeInt64(this.space-=8,e);},r.Builder.prototype.writeFloat32=function(e){this.bb.writeFloat32(this.space-=4,e);},r.Builder.prototype.writeFloat64=function(e){this.bb.writeFloat64(this.space-=8,e);},r.Builder.prototype.addInt8=function(e){this.prep(1,0),this.writeInt8(e);},r.Builder.prototype.addInt16=function(e){this.prep(2,0),this.writeInt16(e);},r.Builder.prototype.addInt32=function(e){this.prep(4,0),this.writeInt32(e);},r.Builder.prototype.addInt64=function(e){this.prep(8,0),this.writeInt64(e);},r.Builder.prototype.addFloat32=function(e){this.prep(4,0),this.writeFloat32(e);},r.Builder.prototype.addFloat64=function(e){this.prep(8,0),this.writeFloat64(e);},r.Builder.prototype.addFieldInt8=function(e,t,n){(this.force_defaults||t!=n)&&(this.addInt8(t),this.slot(e));},r.Builder.prototype.addFieldInt16=function(e,t,n){(this.force_defaults||t!=n)&&(this.addInt16(t),this.slot(e));},r.Builder.prototype.addFieldInt32=function(e,t,n){(this.force_defaults||t!=n)&&(this.addInt32(t),this.slot(e));},r.Builder.prototype.addFieldInt64=function(e,t,n){!this.force_defaults&&t.equals(n)||(this.addInt64(t),this.slot(e));},r.Builder.prototype.addFieldFloat32=function(e,t,n){(this.force_defaults||t!=n)&&(this.addFloat32(t),this.slot(e));},r.Builder.prototype.addFieldFloat64=function(e,t,n){(this.force_defaults||t!=n)&&(this.addFloat64(t),this.slot(e));},r.Builder.prototype.addFieldOffset=function(e,t,n){(this.force_defaults||t!=n)&&(this.addOffset(t),this.slot(e));},r.Builder.prototype.addFieldStruct=function(e,t,n){t!=n&&(this.nested(t),this.slot(e));},r.Builder.prototype.nested=function(e){if(e!=this.offset())throw new Error(\"FlatBuffers: struct must be serialized inline.\");},r.Builder.prototype.notNested=function(){if(this.isNested)throw new Error(\"FlatBuffers: object serialization must not be nested.\");},r.Builder.prototype.slot=function(e){this.vtable[e]=this.offset();},r.Builder.prototype.offset=function(){return this.bb.capacity()-this.space;},r.Builder.growByteBuffer=function(e){var t=e.capacity();if(3221225472&t)throw new Error(\"FlatBuffers: cannot grow buffer beyond 2 gigabytes.\");var n=t<<1,o=r.ByteBuffer.allocate(n);return o.setPosition(n-t),o.bytes().set(e.bytes(),n-t),o;},r.Builder.prototype.addOffset=function(e){this.prep(r.SIZEOF_INT,0),this.writeInt32(this.offset()-e+r.SIZEOF_INT);},r.Builder.prototype.startObject=function(e){this.notNested(),null==this.vtable&&(this.vtable=[]),this.vtable_in_use=e;for(var t=0;t<e;t++)this.vtable[t]=0;this.isNested=!0,this.object_start=this.offset();},r.Builder.prototype.endObject=function(){if(null==this.vtable||!this.isNested)throw new Error(\"FlatBuffers: endObject called without startObject\");this.addInt32(0);for(var e=this.offset(),t=this.vtable_in_use-1;t>=0&&0==this.vtable[t];t--);for(var n=t+1;t>=0;t--)this.addInt16(0!=this.vtable[t]?e-this.vtable[t]:0);this.addInt16(e-this.object_start);var o=(n+2)*r.SIZEOF_SHORT;this.addInt16(o);var i=0,a=this.space;e:for(t=0;t<this.vtables.length;t++){var s=this.bb.capacity()-this.vtables[t];if(o==this.bb.readInt16(s)){for(var u=r.SIZEOF_SHORT;u<o;u+=r.SIZEOF_SHORT)if(this.bb.readInt16(a+u)!=this.bb.readInt16(s+u))continue e;i=this.vtables[t];break;}}return i?(this.space=this.bb.capacity()-e,this.bb.writeInt32(this.space,i-e)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-e,this.offset()-e)),this.isNested=!1,e;},r.Builder.prototype.finish=function(e,t,n){var o=n?r.SIZE_PREFIX_LENGTH:0;if(t){var i=t;if(this.prep(this.minalign,r.SIZEOF_INT+r.FILE_IDENTIFIER_LENGTH+o),i.length!=r.FILE_IDENTIFIER_LENGTH)throw new Error(\"FlatBuffers: file identifier must be length \"+r.FILE_IDENTIFIER_LENGTH);for(var a=r.FILE_IDENTIFIER_LENGTH-1;a>=0;a--)this.writeInt8(i.charCodeAt(a));}this.prep(this.minalign,r.SIZEOF_INT+o),this.addOffset(e),o&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space);},r.Builder.prototype.finishSizePrefixed=function(e,t){this.finish(e,t,!0);},r.Builder.prototype.requiredField=function(e,t){var n=this.bb.capacity()-e,r=n-this.bb.readInt32(n);if(0==this.bb.readInt16(r+t))throw new Error(\"FlatBuffers: field \"+t+\" must be set\");},r.Builder.prototype.startVector=function(e,t,n){this.notNested(),this.vector_num_elems=t,this.prep(r.SIZEOF_INT,e*t),this.prep(n,e*t);},r.Builder.prototype.endVector=function(){return this.writeInt32(this.vector_num_elems),this.offset();},r.Builder.prototype.createString=function(e){if(e instanceof Uint8Array)var t=e;else{t=[];for(var n=0;n<e.length;){var r,o=e.charCodeAt(n++);(r=o<55296||o>=56320?o:(o<<10)+e.charCodeAt(n++)+-56613888)<128?t.push(r):(r<2048?t.push(r>>6&31|192):(r<65536?t.push(r>>12&15|224):t.push(r>>18&7|240,r>>12&63|128),t.push(r>>6&63|128)),t.push(63&r|128));}}this.addInt8(0),this.startVector(1,t.length,1),this.bb.setPosition(this.space-=t.length),n=0;for(var i=this.space,a=this.bb.bytes();n<t.length;n++)a[i++]=t[n];return this.endVector();},r.Builder.prototype.createLong=function(e,t){return r.Long.create(e,t);},r.ByteBuffer=function(e){this.bytes_=e,this.position_=0;},r.ByteBuffer.allocate=function(e){return new r.ByteBuffer(new Uint8Array(e));},r.ByteBuffer.prototype.clear=function(){this.position_=0;},r.ByteBuffer.prototype.bytes=function(){return this.bytes_;},r.ByteBuffer.prototype.position=function(){return this.position_;},r.ByteBuffer.prototype.setPosition=function(e){this.position_=e;},r.ByteBuffer.prototype.capacity=function(){return this.bytes_.length;},r.ByteBuffer.prototype.readInt8=function(e){return this.readUint8(e)<<24>>24;},r.ByteBuffer.prototype.readUint8=function(e){return this.bytes_[e];},r.ByteBuffer.prototype.readInt16=function(e){return this.readUint16(e)<<16>>16;},r.ByteBuffer.prototype.readUint16=function(e){return this.bytes_[e]|this.bytes_[e+1]<<8;},r.ByteBuffer.prototype.readInt32=function(e){return this.bytes_[e]|this.bytes_[e+1]<<8|this.bytes_[e+2]<<16|this.bytes_[e+3]<<24;},r.ByteBuffer.prototype.readUint32=function(e){return this.readInt32(e)>>>0;},r.ByteBuffer.prototype.readInt64=function(e){return new r.Long(this.readInt32(e),this.readInt32(e+4));},r.ByteBuffer.prototype.readUint64=function(e){return new r.Long(this.readUint32(e),this.readUint32(e+4));},r.ByteBuffer.prototype.readFloat32=function(e){return r.int32[0]=this.readInt32(e),r.float32[0];},r.ByteBuffer.prototype.readFloat64=function(e){return r.int32[r.isLittleEndian?0:1]=this.readInt32(e),r.int32[r.isLittleEndian?1:0]=this.readInt32(e+4),r.float64[0];},r.ByteBuffer.prototype.writeInt8=function(e,t){this.bytes_[e]=t;},r.ByteBuffer.prototype.writeUint8=function(e,t){this.bytes_[e]=t;},r.ByteBuffer.prototype.writeInt16=function(e,t){this.bytes_[e]=t,this.bytes_[e+1]=t>>8;},r.ByteBuffer.prototype.writeUint16=function(e,t){this.bytes_[e]=t,this.bytes_[e+1]=t>>8;},r.ByteBuffer.prototype.writeInt32=function(e,t){this.bytes_[e]=t,this.bytes_[e+1]=t>>8,this.bytes_[e+2]=t>>16,this.bytes_[e+3]=t>>24;},r.ByteBuffer.prototype.writeUint32=function(e,t){this.bytes_[e]=t,this.bytes_[e+1]=t>>8,this.bytes_[e+2]=t>>16,this.bytes_[e+3]=t>>24;},r.ByteBuffer.prototype.writeInt64=function(e,t){this.writeInt32(e,t.low),this.writeInt32(e+4,t.high);},r.ByteBuffer.prototype.writeUint64=function(e,t){this.writeUint32(e,t.low),this.writeUint32(e+4,t.high);},r.ByteBuffer.prototype.writeFloat32=function(e,t){r.float32[0]=t,this.writeInt32(e,r.int32[0]);},r.ByteBuffer.prototype.writeFloat64=function(e,t){r.float64[0]=t,this.writeInt32(e,r.int32[r.isLittleEndian?0:1]),this.writeInt32(e+4,r.int32[r.isLittleEndian?1:0]);},r.ByteBuffer.prototype.getBufferIdentifier=function(){if(this.bytes_.length<this.position_+r.SIZEOF_INT+r.FILE_IDENTIFIER_LENGTH)throw new Error(\"FlatBuffers: ByteBuffer is too short to contain an identifier.\");for(var e=\"\",t=0;t<r.FILE_IDENTIFIER_LENGTH;t++)e+=String.fromCharCode(this.readInt8(this.position_+r.SIZEOF_INT+t));return e;},r.ByteBuffer.prototype.__offset=function(e,t){var n=e-this.readInt32(e);return t<this.readInt16(n)?this.readInt16(n+t):0;},r.ByteBuffer.prototype.__union=function(e,t){return e.bb_pos=t+this.readInt32(t),e.bb=this,e;},r.ByteBuffer.prototype.__string=function(e,t){e+=this.readInt32(e);var n=this.readInt32(e),o=\"\",i=0;if(e+=r.SIZEOF_INT,t===r.Encoding.UTF8_BYTES)return this.bytes_.subarray(e,e+n);for(;i<n;){var a,s=this.readUint8(e+i++);if(s<192)a=s;else{var u=this.readUint8(e+i++);if(s<224)a=(31&s)<<6|63&u;else{var l=this.readUint8(e+i++);a=s<240?(15&s)<<12|(63&u)<<6|63&l:(7&s)<<18|(63&u)<<12|(63&l)<<6|63&this.readUint8(e+i++);}}a<65536?o+=String.fromCharCode(a):(a-=65536,o+=String.fromCharCode(55296+(a>>10),56320+(1023&a)));}return o;},r.ByteBuffer.prototype.__indirect=function(e){return e+this.readInt32(e);},r.ByteBuffer.prototype.__vector=function(e){return e+this.readInt32(e)+r.SIZEOF_INT;},r.ByteBuffer.prototype.__vector_len=function(e){return this.readInt32(e+this.readInt32(e));},r.ByteBuffer.prototype.__has_identifier=function(e){if(e.length!=r.FILE_IDENTIFIER_LENGTH)throw new Error(\"FlatBuffers: file identifier must be length \"+r.FILE_IDENTIFIER_LENGTH);for(var t=0;t<r.FILE_IDENTIFIER_LENGTH;t++)if(e.charCodeAt(t)!=this.readInt8(this.position_+r.SIZEOF_INT+t))return!1;return!0;},r.ByteBuffer.prototype.createLong=function(e,t){return r.Long.create(e,t);};}},__webpack_module_cache__={};function __nested_webpack_require_606622__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(n.exports,n,n.exports,__nested_webpack_require_606622__),n.exports;}__nested_webpack_require_606622__.n=function(e){var t=e&&e.__esModule?function(){return e[\"default\"];}:function(){return e;};return __nested_webpack_require_606622__.d(t,{a:t}),t;},__nested_webpack_require_606622__.d=function(e,t){for(var n in t)__nested_webpack_require_606622__.o(t,n)&&!__nested_webpack_require_606622__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]});},__nested_webpack_require_606622__.g=function(){if(\"object\"==(typeof globalThis===\"undefined\"?\"undefined\":_typeof2(globalThis)))return globalThis;try{return this||new Function(\"return this\")();}catch(e){if(\"object\"==(typeof window===\"undefined\"?\"undefined\":_typeof2(window)))return window;}}(),__nested_webpack_require_606622__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t);},__nested_webpack_require_606622__.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0});};var __nested_webpack_exports__=__nested_webpack_require_606622__(1057);return __nested_webpack_exports__;}();});//# sourceMappingURL=ort.min.js.map\n/***/},/***/\"./src/WavEncoder.ts\":/*!***************************!*\\\n  !*** ./src/WavEncoder.ts ***!\n  \\***************************/ /***/function srcWavEncoderTs(__unused_webpack_module,exports){\"use strict\";// Most of the code here come from ricky0123/vad-web\n// Who in turn copied it from linto-ai/WebVoiceSDK\nObject.defineProperty(exports,\"__esModule\",{value:true});exports.encodeWAV=exports.arrayBufferToBase64=exports.minFramesForTargetMS=void 0;function minFramesForTargetMS(targetDuration,frameSamples){var sr=arguments.length>2&&arguments[2]!==undefined?arguments[2]:16000;return Math.ceil(targetDuration*sr/1000/frameSamples);}exports.minFramesForTargetMS=minFramesForTargetMS;function arrayBufferToBase64(buffer){var binary=\"\";var bytes=new Uint8Array(buffer);var len=bytes.byteLength;for(var i=0;i<len;i++){binary+=String.fromCharCode(bytes[i]);}return btoa(binary);}exports.arrayBufferToBase64=arrayBufferToBase64;/*\n  This rest of this was mostly copied from https://github.com/linto-ai/WebVoiceSDK\n  */ // this function is used to encode the Float32Array audio data produced from a MicVAD\n// as a WAV file audio buffer\nfunction encodeWAV(samples){var format=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;var sampleRate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:16000;var numChannels=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;var bitDepth=arguments.length>4&&arguments[4]!==undefined?arguments[4]:32;var bytesPerSample=bitDepth/8;var blockAlign=numChannels*bytesPerSample;var buffer=new ArrayBuffer(44+samples.length*bytesPerSample);var view=new DataView(buffer);/* RIFF identifier */writeString(view,0,\"RIFF\");/* RIFF chunk length */view.setUint32(4,36+samples.length*bytesPerSample,true);/* RIFF type */writeString(view,8,\"WAVE\");/* format chunk identifier */writeString(view,12,\"fmt \");/* format chunk length */view.setUint32(16,16,true);/* sample format (raw) */view.setUint16(20,format,true);/* channel count */view.setUint16(22,numChannels,true);/* sample rate */view.setUint32(24,sampleRate,true);/* byte rate (sample rate * block align) */view.setUint32(28,sampleRate*blockAlign,true);/* block align (channel count * bytes per sample) */view.setUint16(32,blockAlign,true);/* bits per sample */view.setUint16(34,bitDepth,true);/* data chunk identifier */writeString(view,36,\"data\");/* data chunk length */view.setUint32(40,samples.length*bytesPerSample,true);if(format===1){// Raw PCM\nfloatTo16BitPCM(view,44,samples);}else{writeFloat32(view,44,samples);}return buffer;}exports.encodeWAV=encodeWAV;function interleave(inputL,inputR){var length=inputL.length+inputR.length;var result=new Float32Array(length);var index=0;var inputIndex=0;while(index<length){result[index++]=inputL[inputIndex];result[index++]=inputR[inputIndex];inputIndex++;}return result;}function writeFloat32(output,offset,input){for(var i=0;i<input.length;i++,offset+=4){output.setFloat32(offset,input[i],true);}}function floatTo16BitPCM(output,offset,input){for(var i=0;i<input.length;i++,offset+=2){var s=Math.max(-1,Math.min(1,input[i]));output.setInt16(offset,s<0?s*0x8000:s*0x7fff,true);}}function writeString(view,offset,string){for(var i=0;i<string.length;i++){view.setUint8(offset+i,string.charCodeAt(i));}}/***/},/***/\"./node_modules/xstate/es/Actor.js\":/*!*****************************************!*\\\n  !*** ./node_modules/xstate/es/Actor.js ***!\n  \\*****************************************/ /***/function node_modulesXstateEsActorJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */createDeferredActor:function createDeferredActor(){return(/* binding */_createDeferredActor);},/* harmony export */createInvocableActor:function createInvocableActor(){return(/* binding */_createInvocableActor);},/* harmony export */createNullActor:function createNullActor(){return(/* binding */_createNullActor);},/* harmony export */isActor:function isActor(){return(/* binding */_isActor);},/* harmony export */isSpawnedActor:function isSpawnedActor(){return(/* binding */_isSpawnedActor);},/* harmony export */toActorRef:function toActorRef(){return(/* binding */_toActorRef);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");/* harmony import */var _serviceScope_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./serviceScope.js */\"./node_modules/xstate/es/serviceScope.js\");function _createNullActor(id){var _a;return _a={id:id,send:function send(){return void 0;},subscribe:function subscribe(){return{unsubscribe:function unsubscribe(){return void 0;}};},getSnapshot:function getSnapshot(){return undefined;},toJSON:function toJSON(){return{id:id};}},_a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;},_a;}/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */function _createInvocableActor(invokeDefinition,machine,context,_event){var _a;var invokeSrc=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(invokeDefinition.src);var serviceCreator=(_a=machine===null||machine===void 0?void 0:machine.options.services)===null||_a===void 0?void 0:_a[invokeSrc.type];var resolvedData=invokeDefinition.data?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(invokeDefinition.data,context,_event):undefined;var tempActor=serviceCreator?_createDeferredActor(serviceCreator,invokeDefinition.id,resolvedData):_createNullActor(invokeDefinition.id);// @ts-ignore\ntempActor.meta=invokeDefinition;return tempActor;}function _createDeferredActor(entity,id,data){var tempActor=_createNullActor(id);// @ts-ignore\ntempActor.deferred=true;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)){// \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\nvar initialState_1=tempActor.state=(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_1__.provide)(undefined,function(){return(data?entity.withContext(data):entity).initialState;});tempActor.getSnapshot=function(){return initialState_1;};}return tempActor;}function _isActor(item){try{return typeof item.send==='function';}catch(e){return false;}}function _isSpawnedActor(item){return _isActor(item)&&'id'in item;}// TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now\nfunction _toActorRef(actorRefLike){var _a;return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a={subscribe:function subscribe(){return{unsubscribe:function unsubscribe(){return void 0;}};},id:'anonymous',getSnapshot:function getSnapshot(){return undefined;}},_a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;},_a),actorRefLike);}/***/},/***/\"./node_modules/xstate/es/Machine.js\":/*!*******************************************!*\\\n  !*** ./node_modules/xstate/es/Machine.js ***!\n  \\*******************************************/ /***/function node_modulesXstateEsMachineJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */Machine:function Machine(){return(/* binding */_Machine);},/* harmony export */createMachine:function createMachine(){return(/* binding */_createMachine);}/* harmony export */});/* harmony import */var _StateNode_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./StateNode.js */\"./node_modules/xstate/es/StateNode.js\");/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");var warned=false;function _Machine(config,options,initialContext){if(initialContext===void 0){initialContext=config.context;}return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config,options,initialContext);}function _createMachine(config,options){if(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION&&!('predictableActionArguments'in config)&&!warned){warned=true;console.warn('It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html');}return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config,options);}/***/},/***/\"./node_modules/xstate/es/State.js\":/*!*****************************************!*\\\n  !*** ./node_modules/xstate/es/State.js ***!\n  \\*****************************************/ /***/function node_modulesXstateEsStateJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */State:function State(){return(/* binding */_State);},/* harmony export */bindActionToState:function bindActionToState(){return(/* binding */_bindActionToState);},/* harmony export */isState:function isState(){return(/* binding */_isState);},/* harmony export */isStateConfig:function isStateConfig(){return(/* binding */_isStateConfig);},/* harmony export */stateValuesEqual:function stateValuesEqual(){return(/* binding */_stateValuesEqual);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _constants_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./constants.js */\"./node_modules/xstate/es/constants.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");/* harmony import */var _stateUtils_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(/*! ./stateUtils.js */\"./node_modules/xstate/es/stateUtils.js\");/* harmony import */var _actions_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(/*! ./actions.js */\"./node_modules/xstate/es/actions.js\");/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");function _stateValuesEqual(a,b){if(a===b){return true;}if(a===undefined||b===undefined){return false;}if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(a)||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(b)){return a===b;}var aKeys=Object.keys(a);var bKeys=Object.keys(b);return aKeys.length===bKeys.length&&aKeys.every(function(key){return _stateValuesEqual(a[key],b[key]);});}function _isStateConfig(state){if(_typeof2(state)!=='object'||state===null){return false;}return'value'in state&&'_event'in state;}/**\r\n * @deprecated Use `isStateConfig(object)` or `state instanceof State` instead.\r\n */var _isState=_isStateConfig;function _bindActionToState(action,state){var exec=action.exec;var boundAction=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({},action),{exec:exec!==undefined?function(){return exec(state.context,state.event,{action:action,state:state,_event:state._event});}:undefined});return boundAction;}var _State=/*#__PURE__*/ /** @class */function(){/**\r\n   * Creates a new State instance.\r\n   * @param value The state value\r\n   * @param context The extended state\r\n   * @param historyValue The tree representing historical values of the state nodes\r\n   * @param history The previous state\r\n   * @param actions An array of action objects to execute as side-effects\r\n   * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).\r\n   * @param meta\r\n   * @param events Internal event queue. Should be empty with run-to-completion semantics.\r\n   * @param configuration\r\n   */function State(config){var _this=this;var _a;this.actions=[];this.activities=_constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;this.meta={};this.events=[];this.value=config.value;this.context=config.context;this._event=config._event;this._sessionid=config._sessionid;this.event=this._event.data;this.historyValue=config.historyValue;this.history=config.history;this.actions=config.actions||[];this.activities=config.activities||_constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;this.meta=(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.getMeta)(config.configuration);this.events=config.events||[];this.matches=this.matches.bind(this);this.toStrings=this.toStrings.bind(this);this.configuration=config.configuration;this.transitions=config.transitions;this.children=config.children;this.done=!!config.done;this.tags=(_a=Array.isArray(config.tags)?new Set(config.tags):config.tags)!==null&&_a!==void 0?_a:new Set();this.machine=config.machine;Object.defineProperty(this,'nextEvents',{get:function get(){return(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.nextEvents)(_this.configuration);}});}/**\r\n   * Creates a new State instance for the given `stateValue` and `context`.\r\n   * @param stateValue\r\n   * @param context\r\n   */State.from=function(stateValue,context){if(stateValue instanceof State){if(stateValue.context!==context){return new State({value:stateValue.value,context:context,_event:stateValue._event,_sessionid:null,historyValue:stateValue.historyValue,history:stateValue.history,actions:[],activities:stateValue.activities,meta:{},events:[],configuration:[],transitions:[],children:{}});}return stateValue;}var _event=_actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;return new State({value:stateValue,context:context,_event:_event,_sessionid:null,historyValue:undefined,history:undefined,actions:[],activities:undefined,meta:undefined,events:[],configuration:[],transitions:[],children:{}});};/**\r\n   * Creates a new State instance for the given `config`.\r\n   * @param config The state config\r\n   */State.create=function(config){return new State(config);};/**\r\n   * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).\r\n   * @param stateValue\r\n   * @param context\r\n   */State.inert=function(stateValue,context){if(stateValue instanceof State){if(!stateValue.actions.length){return stateValue;}var _event=_actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;return new State({value:stateValue.value,context:context,_event:_event,_sessionid:null,historyValue:stateValue.historyValue,history:stateValue.history,activities:stateValue.activities,configuration:stateValue.configuration,transitions:[],children:{}});}return State.from(stateValue,context);};/**\r\n   * Returns an array of all the string leaf state node paths.\r\n   * @param stateValue\r\n   * @param delimiter The character(s) that separate each subpath in the string state node path.\r\n   */State.prototype.toStrings=function(stateValue,delimiter){var _this=this;if(stateValue===void 0){stateValue=this.value;}if(delimiter===void 0){delimiter='.';}if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)){return[stateValue];}var valueKeys=Object.keys(stateValue);return valueKeys.concat.apply(valueKeys,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(valueKeys.map(function(key){return _this.toStrings(stateValue[key],delimiter).map(function(s){return key+delimiter+s;});})),false));};State.prototype.toJSON=function(){var _a=this;_a.configuration;_a.transitions;var tags=_a.tags;_a.machine;var jsonValues=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a,[\"configuration\",\"transitions\",\"tags\",\"machine\"]);return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({},jsonValues),{tags:Array.from(tags)});};State.prototype.matches=function(parentStateValue){return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)(parentStateValue,this.value);};/**\r\n   * Whether the current state configuration has a state node with the specified `tag`.\r\n   * @param tag\r\n   */State.prototype.hasTag=function(tag){return this.tags.has(tag);};/**\r\n   * Determines whether sending the `event` will cause a non-forbidden transition\r\n   * to be selected, even if the transitions have no actions nor\r\n   * change the state value.\r\n   *\r\n   * @param event The event to test\r\n   * @returns Whether the event will cause a transition\r\n   */State.prototype.can=function(event){var _a;if(_environment_js__WEBPACK_IMPORTED_MODULE_5__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!this.machine,\"state.can(...) used outside of a machine-created State object; this will always return false.\");}var transitionData=(_a=this.machine)===null||_a===void 0?void 0:_a.getTransitionData(this,event);return!!(transitionData===null||transitionData===void 0?void 0:transitionData.transitions.length)&&// Check that at least one transition is not forbidden\ntransitionData.transitions.some(function(t){return t.target!==undefined||t.actions.length;});};return State;}();/***/},/***/\"./node_modules/xstate/es/StateNode.js\":/*!*********************************************!*\\\n  !*** ./node_modules/xstate/es/StateNode.js ***!\n  \\*********************************************/ /***/function node_modulesXstateEsStateNodeJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */StateNode:function StateNode(){return(/* binding */_StateNode);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");/* harmony import */var _State_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(/*! ./State.js */\"./node_modules/xstate/es/State.js\");/* harmony import */var _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(/*! ./actionTypes.js */\"./node_modules/xstate/es/actionTypes.js\");/* harmony import */var _actions_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(/*! ./actions.js */\"./node_modules/xstate/es/actions.js\");/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");/* harmony import */var _constants_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./constants.js */\"./node_modules/xstate/es/constants.js\");/* harmony import */var _stateUtils_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(/*! ./stateUtils.js */\"./node_modules/xstate/es/stateUtils.js\");/* harmony import */var _Actor_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(/*! ./Actor.js */\"./node_modules/xstate/es/Actor.js\");/* harmony import */var _invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(/*! ./invokeUtils.js */\"./node_modules/xstate/es/invokeUtils.js\");var NULL_EVENT='';var STATE_IDENTIFIER='#';var WILDCARD='*';var EMPTY_OBJECT={};var isStateId=function isStateId(str){return str[0]===STATE_IDENTIFIER;};var createDefaultOptions=function createDefaultOptions(){return{actions:{},guards:{},services:{},activities:{},delays:{}};};var validateArrayifiedTransitions=function validateArrayifiedTransitions(stateNode,event,transitions){var hasNonLastUnguardedTarget=transitions.slice(0,-1).some(function(transition){return!('cond'in transition)&&!('in'in transition)&&((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(transition.target)||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(transition.target));});var eventText=event===NULL_EVENT?'the transient event':\"event '\".concat(event,\"'\");(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!hasNonLastUnguardedTarget,\"One or more transitions for \".concat(eventText,\" on state '\").concat(stateNode.id,\"' are unreachable. \")+\"Make sure that the default transition is the last one defined.\");};var _StateNode=/*#__PURE__*/ /** @class */function(){function StateNode(/**\r\n   * The raw config used to create the machine.\r\n   */config,options,/**\r\n   * The initial extended state\r\n   */_context,// TODO: this is unsafe, but we're removing it in v5 anyway\n_stateInfo){if(_context===void 0){_context='context'in config?config.context:undefined;}var _this=this;var _a;this.config=config;this._context=_context;/**\r\n     * The order this state node appears. Corresponds to the implicit SCXML document order.\r\n     */this.order=-1;this.__xstatenode=true;this.__cache={events:undefined,relativeValue:new Map(),initialStateValue:undefined,initialState:undefined,on:undefined,transitions:undefined,candidates:{},delayedTransitions:undefined};this.idMap={};this.tags=[];this.options=Object.assign(createDefaultOptions(),options);this.parent=_stateInfo===null||_stateInfo===void 0?void 0:_stateInfo.parent;this.key=this.config.key||(_stateInfo===null||_stateInfo===void 0?void 0:_stateInfo.key)||this.config.id||'(machine)';this.machine=this.parent?this.parent.machine:this;this.path=this.parent?this.parent.path.concat(this.key):[];this.delimiter=this.config.delimiter||(this.parent?this.parent.delimiter:_constants_js__WEBPACK_IMPORTED_MODULE_1__.STATE_DELIMITER);this.id=this.config.id||(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([this.machine.key],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(this.path),false).join(this.delimiter);this.version=this.parent?this.parent.version:this.config.version;this.type=this.config.type||(this.config.parallel?'parallel':this.config.states&&Object.keys(this.config.states).length?'compound':this.config.history?'history':'atomic');this.schema=this.parent?this.machine.schema:(_a=this.config.schema)!==null&&_a!==void 0?_a:{};this.description=this.config.description;if(!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!('parallel'in this.config),\"The \\\"parallel\\\" property is deprecated and will be removed in version 4.1. \".concat(this.config.parallel?\"Replace with `type: 'parallel'`\":\"Use `type: '\".concat(this.type,\"'`\"),\" in the config for state node '\").concat(this.id,\"' instead.\"));}this.initial=this.config.initial;this.states=this.config.states?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.config.states,function(stateConfig,key){var _a;var stateNode=new StateNode(stateConfig,{},undefined,{parent:_this,key:key});Object.assign(_this.idMap,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a={},_a[stateNode.id]=stateNode,_a),stateNode.idMap));return stateNode;}):EMPTY_OBJECT;// Document order\nvar order=0;function dfs(stateNode){var e_1,_a;stateNode.order=order++;try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllChildren)(stateNode)),_c=_b.next();!_c.done;_c=_b.next()){var child=_c.value;dfs(child);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_1)throw e_1.error;}}}dfs(this);// History config\nthis.history=this.config.history===true?'shallow':this.config.history||false;this._transient=!!this.config.always||(!this.config.on?false:Array.isArray(this.config.on)?this.config.on.some(function(_a){var event=_a.event;return event===NULL_EVENT;}):NULL_EVENT in this.config.on);this.strict=!!this.config.strict;// TODO: deprecate (entry)\nthis.onEntry=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.entry||this.config.onEntry).map(function(action){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);});// TODO: deprecate (exit)\nthis.onExit=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.exit||this.config.onExit).map(function(action){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);});this.meta=this.config.meta;this.doneData=this.type==='final'?this.config.data:undefined;this.invoke=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.invoke).map(function(invokeConfig,i){var _a,_b;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig)){var invokeId=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id,i);_this.machine.options.services=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a={},_a[invokeId]=invokeConfig,_a),_this.machine.options.services);return(0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)({src:invokeId,id:invokeId});}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(invokeConfig.src)){var invokeId=invokeConfig.id||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id,i);return(0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},invokeConfig),{id:invokeId,src:invokeConfig.src}));}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig.src)||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(invokeConfig.src)){var invokeId=invokeConfig.id||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id,i);_this.machine.options.services=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_b={},_b[invokeId]=invokeConfig.src,_b),_this.machine.options.services);return(0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({id:invokeId},invokeConfig),{src:invokeId}));}else{var invokeSource=invokeConfig.src;return(0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({id:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id,i)},invokeConfig),{src:invokeSource}));}});this.activities=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.activities).concat(this.invoke).map(function(activity){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActivityDefinition)(activity);});this.transition=this.transition.bind(this);this.tags=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.tags);// TODO: this is the real fix for initialization once\n// state node getters are deprecated\n// if (!this.parent) {\n//   this._init();\n// }\n}StateNode.prototype._init=function(){if(this.__cache.transitions){return;}(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllStateNodes)(this).forEach(function(stateNode){return stateNode.on;});};/**\r\n   * Clones this state machine with custom options and context.\r\n   *\r\n   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.\r\n   * @param context Custom context (will override predefined context)\r\n   */StateNode.prototype.withConfig=function(options,context){var _a=this.options,actions=_a.actions,activities=_a.activities,guards=_a.guards,services=_a.services,delays=_a.delays;return new StateNode(this.config,{actions:(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},actions),options.actions),activities:(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},activities),options.activities),guards:(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},guards),options.guards),services:(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},services),options.services),delays:(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},delays),options.delays)},context!==null&&context!==void 0?context:this.context);};/**\r\n   * Clones this state machine with custom context.\r\n   *\r\n   * @param context Custom context (will override predefined context, not recursive)\r\n   */StateNode.prototype.withContext=function(context){return new StateNode(this.config,this.options,context);};Object.defineProperty(StateNode.prototype,\"context\",{get:function get(){return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(this._context)?this._context():this._context;},enumerable:false,configurable:true});Object.defineProperty(StateNode.prototype,\"definition\",{/**\r\n     * The well-structured state node definition.\r\n     */get:function get(){return{id:this.id,key:this.key,version:this.version,context:this.context,type:this.type,initial:this.initial,history:this.history,states:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.states,function(state){return state.definition;}),on:this.on,transitions:this.transitions,entry:this.onEntry,exit:this.onExit,activities:this.activities||[],meta:this.meta,order:this.order||-1,data:this.doneData,invoke:this.invoke,description:this.description,tags:this.tags};},enumerable:false,configurable:true});StateNode.prototype.toJSON=function(){return this.definition;};Object.defineProperty(StateNode.prototype,\"on\",{/**\r\n     * The mapping of events to transitions.\r\n     */get:function get(){if(this.__cache.on){return this.__cache.on;}var transitions=this.transitions;return this.__cache.on=transitions.reduce(function(map,transition){map[transition.eventType]=map[transition.eventType]||[];map[transition.eventType].push(transition);return map;},{});},enumerable:false,configurable:true});Object.defineProperty(StateNode.prototype,\"after\",{get:function get(){return this.__cache.delayedTransitions||(this.__cache.delayedTransitions=this.getDelayedTransitions(),this.__cache.delayedTransitions);},enumerable:false,configurable:true});Object.defineProperty(StateNode.prototype,\"transitions\",{/**\r\n     * All the transitions that can be taken from this state node.\r\n     */get:function get(){return this.__cache.transitions||(this.__cache.transitions=this.formatTransitions(),this.__cache.transitions);},enumerable:false,configurable:true});StateNode.prototype.getCandidates=function(eventName){if(this.__cache.candidates[eventName]){return this.__cache.candidates[eventName];}var _transient=eventName===NULL_EVENT;var candidates=this.transitions.filter(function(transition){var sameEventType=transition.eventType===eventName;// null events should only match against eventless transitions\nreturn _transient?sameEventType:sameEventType||transition.eventType===WILDCARD;});this.__cache.candidates[eventName]=candidates;return candidates;};/**\r\n   * All delayed transitions from the config.\r\n   */StateNode.prototype.getDelayedTransitions=function(){var _this=this;var afterConfig=this.config.after;if(!afterConfig){return[];}var mutateEntryExit=function mutateEntryExit(delay,i){var delayRef=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(delay)?\"\".concat(_this.id,\":delay[\").concat(i,\"]\"):delay;var eventType=(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.after)(delayRef,_this.id);_this.onEntry.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.send)(eventType,{delay:delay}));_this.onExit.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.cancel)(eventType));return eventType;};var delayedTransitions=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(afterConfig)?afterConfig.map(function(transition,i){var eventType=mutateEntryExit(transition.delay,i);return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},transition),{event:eventType});}):(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(afterConfig).map(function(delay,i){var configTransition=afterConfig[delay];var resolvedTransition=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(configTransition)?{target:configTransition}:configTransition;var resolvedDelay=!isNaN(+delay)?+delay:delay;var eventType=mutateEntryExit(resolvedDelay,i);return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(resolvedTransition).map(function(transition){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},transition),{event:eventType,delay:resolvedDelay});});}));return delayedTransitions.map(function(delayedTransition){var delay=delayedTransition.delay;return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},_this.formatTransition(delayedTransition)),{delay:delay});});};/**\r\n   * Returns the state nodes represented by the current state value.\r\n   *\r\n   * @param state The state value or State instance\r\n   */StateNode.prototype.getStateNodes=function(state){var _a;var _this=this;if(!state){return[];}var stateValue=state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State?state.value:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(state,this.delimiter);if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)){var initialStateValue=this.getStateNode(stateValue).initial;return initialStateValue!==undefined?this.getStateNodes((_a={},_a[stateValue]=initialStateValue,_a)):[this,this.states[stateValue]];}var subStateKeys=Object.keys(stateValue);var subStateNodes=[this];subStateNodes.push.apply(subStateNodes,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(subStateKeys.map(function(subStateKey){return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);}))),false));return subStateNodes;};/**\r\n   * Returns `true` if this state node explicitly handles the given event.\r\n   *\r\n   * @param event The event in question\r\n   */StateNode.prototype.handles=function(event){var eventType=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getEventType)(event);return this.events.includes(eventType);};/**\r\n   * Resolves the given `state` to a new `State` instance relative to this machine.\r\n   *\r\n   * This ensures that `.events` and `.nextEvents` represent the correct values.\r\n   *\r\n   * @param state The state to resolve\r\n   */StateNode.prototype.resolveState=function(state){var stateFromConfig=state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State?state:_State_js__WEBPACK_IMPORTED_MODULE_7__.State.create(state);var configuration=Array.from((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([],this.getStateNodes(stateFromConfig.value)));return new _State_js__WEBPACK_IMPORTED_MODULE_7__.State((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},stateFromConfig),{value:this.resolve(stateFromConfig.value),configuration:configuration,done:(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(configuration,this),tags:(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(configuration),machine:this.machine}));};StateNode.prototype.transitionLeafNode=function(stateValue,state,_event){var stateNode=this.getStateNode(stateValue);var next=stateNode.next(state,_event);if(!next||!next.transitions.length){return this.next(state,_event);}return next;};StateNode.prototype.transitionCompoundNode=function(stateValue,state,_event){var subStateKeys=Object.keys(stateValue);var stateNode=this.getStateNode(subStateKeys[0]);var next=stateNode._transition(stateValue[subStateKeys[0]],state,_event);if(!next||!next.transitions.length){return this.next(state,_event);}return next;};StateNode.prototype.transitionParallelNode=function(stateValue,state,_event){var e_2,_a;var transitionMap={};try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(stateValue)),_c=_b.next();!_c.done;_c=_b.next()){var subStateKey=_c.value;var subStateValue=stateValue[subStateKey];if(!subStateValue){continue;}var subStateNode=this.getStateNode(subStateKey);var next=subStateNode._transition(subStateValue,state,_event);if(next){transitionMap[subStateKey]=next;}}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_2)throw e_2.error;}}var stateTransitions=Object.keys(transitionMap).map(function(key){return transitionMap[key];});var enabledTransitions=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function(st){return st.transitions;}));var willTransition=stateTransitions.some(function(st){return st.transitions.length>0;});if(!willTransition){return this.next(state,_event);}var configuration=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function(key){return transitionMap[key].configuration;}));return{transitions:enabledTransitions,exitSet:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function(t){return t.exitSet;})),configuration:configuration,source:state,actions:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function(key){return transitionMap[key].actions;}))};};StateNode.prototype._transition=function(stateValue,state,_event){// leaf node\nif((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)){return this.transitionLeafNode(stateValue,state,_event);}// hierarchical node\nif(Object.keys(stateValue).length===1){return this.transitionCompoundNode(stateValue,state,_event);}// orthogonal node\nreturn this.transitionParallelNode(stateValue,state,_event);};StateNode.prototype.getTransitionData=function(state,event){return this._transition(state.value,state,(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event));};StateNode.prototype.next=function(state,_event){var e_3,_a;var _this=this;var eventName=_event.name;var actions=[];var nextStateNodes=[];var selectedTransition;try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(this.getCandidates(eventName)),_c=_b.next();!_c.done;_c=_b.next()){var candidate=_c.value;var cond=candidate.cond,stateIn=candidate[\"in\"];var resolvedContext=state.context;var isInState=stateIn?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateIn)&&isStateId(stateIn)?// Check if in state by ID\nstate.matches((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(this.getStateNodeById(stateIn).path,this.delimiter)):// Check if in state by relative grandparent\n(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(stateIn,this.delimiter),(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.path)(this.path.slice(0,-2))(state.value)):true;var guardPassed=false;try{guardPassed=!cond||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.evaluateGuard)(this.machine,cond,resolvedContext,_event,state);}catch(err){throw new Error(\"Unable to evaluate guard '\".concat(cond.name||cond.type,\"' in transition for event '\").concat(eventName,\"' in state node '\").concat(this.id,\"':\\n\").concat(err.message));}if(guardPassed&&isInState){if(candidate.target!==undefined){nextStateNodes=candidate.target;}actions.push.apply(actions,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(candidate.actions),false));selectedTransition=candidate;break;}}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_3)throw e_3.error;}}if(!selectedTransition){return undefined;}if(!nextStateNodes.length){return{transitions:[selectedTransition],exitSet:[],configuration:state.value?[this]:[],source:state,actions:actions};}var allNextStateNodes=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function(stateNode){return _this.getRelativeStateNodes(stateNode,state.historyValue);}));var isInternal=!!selectedTransition.internal;return{transitions:[selectedTransition],exitSet:isInternal?[]:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function(targetNode){return _this.getPotentiallyReenteringNodes(targetNode);})),configuration:allNextStateNodes,source:state,actions:actions};};// even though the name of this function mentions reentry nodes\n// we are pushing its result into `exitSet`\n// that's because what we exit might be reentered (it's an invariant of reentrancy)\nStateNode.prototype.getPotentiallyReenteringNodes=function(targetNode){if(this.order<targetNode.order){return[this];}var nodes=[];var marker=this;var possibleAncestor=targetNode;while(marker&&marker!==possibleAncestor){nodes.push(marker);marker=marker.parent;}if(marker!==possibleAncestor){// we never got to `possibleAncestor`, therefore the initial `marker` \"escapes\" it\n// it's in a different part of the tree so no states will be reentered for such an external transition\nreturn[];}nodes.push(possibleAncestor);return nodes;};StateNode.prototype.getActions=function(resolvedConfig,isDone,transition,currentContext,_event,prevState,predictableExec){var e_4,_a,e_5,_b;var _this=this;var prevConfig=prevState?(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([],this.getStateNodes(prevState.value)):[];var entrySet=new Set();try{for(var _c=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Array.from(resolvedConfig).sort(function(a,b){return a.order-b.order;})),_d=_c.next();!_d.done;_d=_c.next()){var sn=_d.value;if(!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(prevConfig,sn)||(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet,sn)||sn.parent&&entrySet.has(sn.parent)){entrySet.add(sn);}}}catch(e_4_1){e_4={error:e_4_1};}finally{try{if(_d&&!_d.done&&(_a=_c[\"return\"]))_a.call(_c);}finally{if(e_4)throw e_4.error;}}try{for(var prevConfig_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(prevConfig),prevConfig_1_1=prevConfig_1.next();!prevConfig_1_1.done;prevConfig_1_1=prevConfig_1.next()){var sn=prevConfig_1_1.value;if(!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(resolvedConfig,sn)||(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet,sn.parent)){transition.exitSet.push(sn);}}}catch(e_5_1){e_5={error:e_5_1};}finally{try{if(prevConfig_1_1&&!prevConfig_1_1.done&&(_b=prevConfig_1[\"return\"]))_b.call(prevConfig_1);}finally{if(e_5)throw e_5.error;}}transition.exitSet.sort(function(a,b){return b.order-a.order;});var entryStates=Array.from(entrySet).sort(function(a,b){return a.order-b.order;});var exitStates=new Set(transition.exitSet);var doneEvents=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(entryStates.map(function(sn){var events=[];if(sn.type!=='final'){return events;}var parent=sn.parent;if(!parent.parent){return events;}events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(sn.id,sn.doneData),// TODO: deprecate - final states should not emit done events for their own state.\n(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(parent.id,sn.doneData?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(sn.doneData,currentContext,_event):undefined));var grandparent=parent.parent;if(grandparent.type==='parallel'){if((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getChildren)(grandparent).every(function(parentNode){return(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(transition.configuration,parentNode);})){events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(grandparent.id));}}return events;}));var entryActions=entryStates.map(function(stateNode){var entryActions=stateNode.onEntry;var invokeActions=stateNode.activities.map(function(activity){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.start)(activity);});return{type:'entry',actions:(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(predictableExec?(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions),false),(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions),false):(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions),false),(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions),false),_this.machine.options.actions)};}).concat({type:'state_done',actions:doneEvents.map(function(event){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.raise)(event);})});var exitActions=Array.from(exitStates).map(function(stateNode){return{type:'exit',actions:(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.onExit),false),(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.activities.map(function(activity){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.stop)(activity);})),false),_this.machine.options.actions)};});var actions=exitActions.concat({type:'transition',actions:(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(transition.actions,this.machine.options.actions)}).concat(entryActions);if(isDone){var stopActions=(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig),false).sort(function(a,b){return b.order-a.order;}).map(function(stateNode){return stateNode.onExit;})),this.machine.options.actions).filter(function(action){return!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);});return actions.concat({type:'stop',actions:stopActions});}return actions;};/**\r\n   * Determines the next state given the current `state` and sent `event`.\r\n   *\r\n   * @param state The current State instance or state value\r\n   * @param event The event that was sent at the current state\r\n   * @param context The current context (extended state) of the current state\r\n   */StateNode.prototype.transition=function(state,event,context,exec){if(state===void 0){state=this.initialState;}var _event=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event);var currentState;if(state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State){currentState=context===undefined?state:this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(state,context));}else{var resolvedStateValue=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(state)?this.resolve((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.getResolvedPath(state))):this.resolve(state);var resolvedContext=context!==null&&context!==void 0?context:this.machine.context;currentState=this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(resolvedStateValue,resolvedContext));}if(!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION&&_event.name===WILDCARD){throw new Error(\"An event cannot have the wildcard type ('\".concat(WILDCARD,\"')\"));}if(this.strict){if(!this.events.includes(_event.name)&&!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBuiltInEvent)(_event.name)){throw new Error(\"Machine '\".concat(this.id,\"' does not accept event '\").concat(_event.name,\"'\"));}}var stateTransition=this._transition(currentState.value,currentState,_event)||{transitions:[],configuration:[],exitSet:[],source:currentState,actions:[]};var prevConfig=(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([],this.getStateNodes(currentState.value));var resolvedConfig=stateTransition.configuration.length?(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)(prevConfig,stateTransition.configuration):prevConfig;stateTransition.configuration=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig),false);return this.resolveTransition(stateTransition,currentState,currentState.context,exec,_event);};StateNode.prototype.resolveRaisedTransition=function(state,_event,originalEvent,predictableExec){var _a;var currentActions=state.actions;state=this.transition(state,_event,undefined,predictableExec);// Save original event to state\n// TODO: this should be the raised event! Delete in V5 (breaking)\nstate._event=originalEvent;state.event=originalEvent.data;(_a=state.actions).unshift.apply(_a,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(currentActions),false));return state;};StateNode.prototype.resolveTransition=function(stateTransition,currentState,context,predictableExec,_event){var e_6,_a,e_7,_b;var _this=this;if(_event===void 0){_event=_actions_js__WEBPACK_IMPORTED_MODULE_5__.initEvent;}var configuration=stateTransition.configuration;// Transition will \"apply\" if:\n// - this is the initial state (there is no current state)\n// - OR there are transitions\nvar willTransition=!currentState||stateTransition.transitions.length>0;var resolvedConfiguration=willTransition?stateTransition.configuration:currentState?currentState.configuration:[];var isDone=(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(resolvedConfiguration,this);var resolvedStateValue=willTransition?(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getValue)(this.machine,configuration):undefined;var historyValue=currentState?currentState.historyValue?currentState.historyValue:stateTransition.source?this.machine.historyValue(currentState.value):undefined:undefined;var actionBlocks=this.getActions(new Set(resolvedConfiguration),isDone,stateTransition,context,_event,currentState,predictableExec);var activities=currentState?(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},currentState.activities):{};try{for(var actionBlocks_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks),actionBlocks_1_1=actionBlocks_1.next();!actionBlocks_1_1.done;actionBlocks_1_1=actionBlocks_1.next()){var block=actionBlocks_1_1.value;try{for(var _c=(e_7=void 0,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions)),_d=_c.next();!_d.done;_d=_c.next()){var action=_d.value;if(action.type===_actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start){activities[action.activity.id||action.activity.type]=action;}else if(action.type===_actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.stop){activities[action.activity.id||action.activity.type]=false;}}}catch(e_7_1){e_7={error:e_7_1};}finally{try{if(_d&&!_d.done&&(_b=_c[\"return\"]))_b.call(_c);}finally{if(e_7)throw e_7.error;}}}}catch(e_6_1){e_6={error:e_6_1};}finally{try{if(actionBlocks_1_1&&!actionBlocks_1_1.done&&(_a=actionBlocks_1[\"return\"]))_a.call(actionBlocks_1);}finally{if(e_6)throw e_6.error;}}var _e=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.resolveActions)(this,currentState,context,_event,actionBlocks,predictableExec,this.machine.config.predictableActionArguments||this.machine.config.preserveActionOrder),2),resolvedActions=_e[0],updatedContext=_e[1];var _f=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.partition)(resolvedActions,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction),2),raisedEvents=_f[0],nonRaisedActions=_f[1];var invokeActions=resolvedActions.filter(function(action){var _a;return action.type===_actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start&&((_a=action.activity)===null||_a===void 0?void 0:_a.type)===_actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.invoke;});var children=invokeActions.reduce(function(acc,action){acc[action.activity.id]=(0,_Actor_js__WEBPACK_IMPORTED_MODULE_9__.createInvocableActor)(action.activity,_this.machine,updatedContext,_event);return acc;},currentState?(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},currentState.children):{});var nextState=new _State_js__WEBPACK_IMPORTED_MODULE_7__.State({value:resolvedStateValue||currentState.value,context:updatedContext,_event:_event,// Persist _sessionid between states\n_sessionid:currentState?currentState._sessionid:null,historyValue:resolvedStateValue?historyValue?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.updateHistoryValue)(historyValue,resolvedStateValue):undefined:currentState?currentState.historyValue:undefined,history:!resolvedStateValue||stateTransition.source?currentState:undefined,actions:resolvedStateValue?nonRaisedActions:[],activities:resolvedStateValue?activities:currentState?currentState.activities:{},events:[],configuration:resolvedConfiguration,transitions:stateTransition.transitions,children:children,done:isDone,tags:(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(resolvedConfiguration),machine:this});var didUpdateContext=context!==updatedContext;nextState.changed=_event.name===_actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.update||didUpdateContext;// Dispose of penultimate histories to prevent memory leaks\nvar history=nextState.history;if(history){delete history.history;}// There are transient transitions if the machine is not in a final state\n// and if some of the state nodes have transient (\"always\") transitions.\nvar hasAlwaysTransitions=!isDone&&(this._transient||configuration.some(function(stateNode){return stateNode._transient;}));// If there are no enabled transitions, check if there are transient transitions.\n// If there are transient transitions, continue checking for more transitions\n// because an transient transition should be triggered even if there are no\n// enabled transitions.\n//\n// If we're already working on an transient transition then stop to prevent an infinite loop.\n//\n// Otherwise, if there are no enabled nor transient transitions, we are done.\nif(!willTransition&&(!hasAlwaysTransitions||_event.name===NULL_EVENT)){return nextState;}var maybeNextState=nextState;if(!isDone){if(hasAlwaysTransitions){maybeNextState=this.resolveRaisedTransition(maybeNextState,{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.nullEvent},_event,predictableExec);}while(raisedEvents.length){var raisedEvent=raisedEvents.shift();maybeNextState=this.resolveRaisedTransition(maybeNextState,raisedEvent._event,_event,predictableExec);}}// Detect if state changed\nvar changed=maybeNextState.changed||(history?!!maybeNextState.actions.length||didUpdateContext||_typeof2(history.value)!==_typeof2(maybeNextState.value)||!(0,_State_js__WEBPACK_IMPORTED_MODULE_7__.stateValuesEqual)(maybeNextState.value,history.value):undefined);maybeNextState.changed=changed;// Preserve original history after raised events\nmaybeNextState.history=history;return maybeNextState;};/**\r\n   * Returns the child state node from its relative `stateKey`, or throws.\r\n   */StateNode.prototype.getStateNode=function(stateKey){if(isStateId(stateKey)){return this.machine.getStateNodeById(stateKey);}if(!this.states){throw new Error(\"Unable to retrieve child state '\".concat(stateKey,\"' from '\").concat(this.id,\"'; no child states exist.\"));}var result=this.states[stateKey];if(!result){throw new Error(\"Child state '\".concat(stateKey,\"' does not exist on '\").concat(this.id,\"'\"));}return result;};/**\r\n   * Returns the state node with the given `stateId`, or throws.\r\n   *\r\n   * @param stateId The state ID. The prefix \"#\" is removed.\r\n   */StateNode.prototype.getStateNodeById=function(stateId){var resolvedStateId=isStateId(stateId)?stateId.slice(STATE_IDENTIFIER.length):stateId;if(resolvedStateId===this.id){return this;}var stateNode=this.machine.idMap[resolvedStateId];if(!stateNode){throw new Error(\"Child state node '#\".concat(resolvedStateId,\"' does not exist on machine '\").concat(this.id,\"'\"));}return stateNode;};/**\r\n   * Returns the relative state node from the given `statePath`, or throws.\r\n   *\r\n   * @param statePath The string or string array relative path to the state node.\r\n   */StateNode.prototype.getStateNodeByPath=function(statePath){if(typeof statePath==='string'&&isStateId(statePath)){try{return this.getStateNodeById(statePath.slice(1));}catch(e){// try individual paths\n// throw e;\n}}var arrayStatePath=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(statePath,this.delimiter).slice();var currentStateNode=this;while(arrayStatePath.length){var key=arrayStatePath.shift();if(!key.length){break;}currentStateNode=currentStateNode.getStateNode(key);}return currentStateNode;};/**\r\n   * Resolves a partial state value with its full representation in this machine.\r\n   *\r\n   * @param stateValue The partial state value to resolve.\r\n   */StateNode.prototype.resolve=function(stateValue){var _a;var _this=this;if(!stateValue){return this.initialStateValue||EMPTY_OBJECT;// TODO: type-specific properties\n}switch(this.type){case'parallel':return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.initialStateValue,function(subStateValue,subStateKey){return subStateValue?_this.getStateNode(subStateKey).resolve(stateValue[subStateKey]||subStateValue):EMPTY_OBJECT;});case'compound':if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)){var subStateNode=this.getStateNode(stateValue);if(subStateNode.type==='parallel'||subStateNode.type==='compound'){return _a={},_a[stateValue]=subStateNode.initialStateValue,_a;}return stateValue;}if(!Object.keys(stateValue).length){return this.initialStateValue||{};}return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(stateValue,function(subStateValue,subStateKey){return subStateValue?_this.getStateNode(subStateKey).resolve(subStateValue):EMPTY_OBJECT;});default:return stateValue||EMPTY_OBJECT;}};StateNode.prototype.getResolvedPath=function(stateIdentifier){if(isStateId(stateIdentifier)){var stateNode=this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];if(!stateNode){throw new Error(\"Unable to find state node '\".concat(stateIdentifier,\"'\"));}return stateNode.path;}return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(stateIdentifier,this.delimiter);};Object.defineProperty(StateNode.prototype,\"initialStateValue\",{get:function get(){var _a;if(this.__cache.initialStateValue){return this.__cache.initialStateValue;}var initialStateValue;if(this.type==='parallel'){initialStateValue=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states,function(state){return state.initialStateValue||EMPTY_OBJECT;},function(stateNode){return!(stateNode.type==='history');});}else if(this.initial!==undefined){if(!this.states[this.initial]){throw new Error(\"Initial state '\".concat(this.initial,\"' not found on '\").concat(this.key,\"'\"));}initialStateValue=(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this.states[this.initial])?this.initial:(_a={},_a[this.initial]=this.states[this.initial].initialStateValue,_a);}else{// The finite state value of a machine without child states is just an empty object\ninitialStateValue={};}this.__cache.initialStateValue=initialStateValue;return this.__cache.initialStateValue;},enumerable:false,configurable:true});StateNode.prototype.getInitialState=function(stateValue,context){this._init();// TODO: this should be in the constructor (see note in constructor)\nvar configuration=this.getStateNodes(stateValue);return this.resolveTransition({configuration:configuration,exitSet:[],transitions:[],source:undefined,actions:[]},undefined,context!==null&&context!==void 0?context:this.machine.context,undefined);};Object.defineProperty(StateNode.prototype,\"initialState\",{/**\r\n     * The initial State instance, which includes all actions to be executed from\r\n     * entering the initial state.\r\n     */get:function get(){var initialStateValue=this.initialStateValue;if(!initialStateValue){throw new Error(\"Cannot retrieve initial state from simple state '\".concat(this.id,\"'.\"));}return this.getInitialState(initialStateValue);},enumerable:false,configurable:true});Object.defineProperty(StateNode.prototype,\"target\",{/**\r\n     * The target state value of the history state node, if it exists. This represents the\r\n     * default state value to transition to if no history value exists yet.\r\n     */get:function get(){var target;if(this.type==='history'){var historyConfig=this.config;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(historyConfig.target)){target=isStateId(historyConfig.target)?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length-1)):historyConfig.target;}else{target=historyConfig.target;}}return target;},enumerable:false,configurable:true});/**\r\n   * Returns the leaf nodes from a state path relative to this state node.\r\n   *\r\n   * @param relativeStateId The relative state path to retrieve the state nodes\r\n   * @param history The previous state to retrieve history\r\n   * @param resolve Whether state nodes should resolve to initial child state nodes\r\n   */StateNode.prototype.getRelativeStateNodes=function(relativeStateId,historyValue,resolve){if(resolve===void 0){resolve=true;}return resolve?relativeStateId.type==='history'?relativeStateId.resolveHistory(historyValue):relativeStateId.initialStateNodes:[relativeStateId];};Object.defineProperty(StateNode.prototype,\"initialStateNodes\",{get:function get(){var _this=this;if((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this)){return[this];}// Case when state node is compound but no initial state is defined\nif(this.type==='compound'&&!this.initial){if(!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"Compound state node '\".concat(this.id,\"' has no initial state.\"));}return[this];}var initialStateNodePaths=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(this.initialStateValue);return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(initialStateNodePaths.map(function(initialPath){return _this.getFromRelativePath(initialPath);}));},enumerable:false,configurable:true});/**\r\n   * Retrieves state nodes from a relative path to this state node.\r\n   *\r\n   * @param relativePath The relative path from this state node\r\n   * @param historyValue\r\n   */StateNode.prototype.getFromRelativePath=function(relativePath){if(!relativePath.length){return[this];}var _a=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(relativePath),stateKey=_a[0],childStatePath=_a.slice(1);if(!this.states){throw new Error(\"Cannot retrieve subPath '\".concat(stateKey,\"' from node with no states\"));}var childStateNode=this.getStateNode(stateKey);if(childStateNode.type==='history'){return childStateNode.resolveHistory();}if(!this.states[stateKey]){throw new Error(\"Child state '\".concat(stateKey,\"' does not exist on '\").concat(this.id,\"'\"));}return this.states[stateKey].getFromRelativePath(childStatePath);};StateNode.prototype.historyValue=function(relativeStateValue){if(!Object.keys(this.states).length){return undefined;}return{current:relativeStateValue||this.initialStateValue,states:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states,function(stateNode,key){if(!relativeStateValue){return stateNode.historyValue();}var subStateValue=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(relativeStateValue)?undefined:relativeStateValue[key];return stateNode.historyValue(subStateValue||stateNode.initialStateValue);},function(stateNode){return!stateNode.history;})};};/**\r\n   * Resolves to the historical value(s) of the parent state node,\r\n   * represented by state nodes.\r\n   *\r\n   * @param historyValue\r\n   */StateNode.prototype.resolveHistory=function(historyValue){var _this=this;if(this.type!=='history'){return[this];}var parent=this.parent;if(!historyValue){var historyTarget=this.target;return historyTarget?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(historyTarget).map(function(relativeChildPath){return parent.getFromRelativePath(relativeChildPath);})):parent.initialStateNodes;}var subHistoryValue=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.nestedPath)(parent.path,'states')(historyValue).current;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(subHistoryValue)){return[parent.getStateNode(subHistoryValue)];}return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(subHistoryValue).map(function(subStatePath){return _this.history==='deep'?parent.getFromRelativePath(subStatePath):[parent.states[subStatePath[0]]];}));};Object.defineProperty(StateNode.prototype,\"stateIds\",{/**\r\n     * All the state node IDs of this state node and its descendant state nodes.\r\n     */get:function get(){var _this=this;var childStateIds=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(this.states).map(function(stateKey){return _this.states[stateKey].stateIds;}));return[this.id].concat(childStateIds);},enumerable:false,configurable:true});Object.defineProperty(StateNode.prototype,\"events\",{/**\r\n     * All the event types accepted by this state node and its descendants.\r\n     */get:function get(){var e_8,_a,e_9,_b;if(this.__cache.events){return this.__cache.events;}var states=this.states;var events=new Set(this.ownEvents);if(states){try{for(var _c=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(states)),_d=_c.next();!_d.done;_d=_c.next()){var stateId=_d.value;var state=states[stateId];if(state.states){try{for(var _e=(e_9=void 0,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(state.events)),_f=_e.next();!_f.done;_f=_e.next()){var event_1=_f.value;events.add(\"\".concat(event_1));}}catch(e_9_1){e_9={error:e_9_1};}finally{try{if(_f&&!_f.done&&(_b=_e[\"return\"]))_b.call(_e);}finally{if(e_9)throw e_9.error;}}}}}catch(e_8_1){e_8={error:e_8_1};}finally{try{if(_d&&!_d.done&&(_a=_c[\"return\"]))_a.call(_c);}finally{if(e_8)throw e_8.error;}}}return this.__cache.events=Array.from(events);},enumerable:false,configurable:true});Object.defineProperty(StateNode.prototype,\"ownEvents\",{/**\r\n     * All the events that have transitions directly from this state node.\r\n     *\r\n     * Excludes any inert events.\r\n     */get:function get(){var events=new Set(this.transitions.filter(function(transition){return!(!transition.target&&!transition.actions.length&&transition.internal);}).map(function(transition){return transition.eventType;}));return Array.from(events);},enumerable:false,configurable:true});StateNode.prototype.resolveTarget=function(_target){var _this=this;if(_target===undefined){// an undefined target signals that the state node should not transition from that state when receiving that event\nreturn undefined;}return _target.map(function(target){if(!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(target)){return target;}var isInternalTarget=target[0]===_this.delimiter;// If internal target is defined on machine,\n// do not include machine key on target\nif(isInternalTarget&&!_this.parent){return _this.getStateNodeByPath(target.slice(1));}var resolvedTarget=isInternalTarget?_this.key+target:target;if(_this.parent){try{var targetStateNode=_this.parent.getStateNodeByPath(resolvedTarget);return targetStateNode;}catch(err){throw new Error(\"Invalid transition definition for state node '\".concat(_this.id,\"':\\n\").concat(err.message));}}else{return _this.getStateNodeByPath(resolvedTarget);}});};StateNode.prototype.formatTransition=function(transitionConfig){var _this=this;var normalizedTarget=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.normalizeTarget)(transitionConfig.target);var internal='internal'in transitionConfig?transitionConfig.internal:normalizedTarget?normalizedTarget.some(function(_target){return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(_target)&&_target[0]===_this.delimiter;}):true;var guards=this.machine.options.guards;var target=this.resolveTarget(normalizedTarget);var transition=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},transitionConfig),{actions:(0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig.actions)),cond:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toGuard)(transitionConfig.cond,guards),target:target,source:this,internal:internal,eventType:transitionConfig.event,toJSON:function toJSON(){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},transition),{target:transition.target?transition.target.map(function(t){return\"#\".concat(t.id);}):undefined,source:\"#\".concat(_this.id)});}});return transition;};StateNode.prototype.formatTransitions=function(){var e_10,_a;var _this=this;var onConfig;if(!this.config.on){onConfig=[];}else if(Array.isArray(this.config.on)){onConfig=this.config.on;}else{var _b=this.config.on,_c=WILDCARD,_d=_b[_c],wildcardConfigs=_d===void 0?[]:_d,strictTransitionConfigs_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__rest)(_b,[_typeof2(_c)===\"symbol\"?_c:_c+\"\"]);onConfig=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(strictTransitionConfigs_1).map(function(key){if(!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION&&key===NULL_EVENT){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. \"+\"Please check the `on` configuration for \\\"#\".concat(_this.id,\"\\\".\"));}var transitionConfigArray=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(key,strictTransitionConfigs_1[key]);if(!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION){validateArrayifiedTransitions(_this,key,transitionConfigArray);}return transitionConfigArray;}).concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(WILDCARD,wildcardConfigs)));}var eventlessConfig=this.config.always?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)('',this.config.always):[];var doneConfig=this.config.onDone?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(this.id)),this.config.onDone):[];if(!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!(this.config.onDone&&!this.parent),\"Root nodes cannot have an \\\".onDone\\\" transition. Please check the config of \\\"\".concat(this.id,\"\\\".\"));}var invokeConfig=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(this.invoke.map(function(invokeDef){var settleTransitions=[];if(invokeDef.onDone){settleTransitions.push.apply(settleTransitions,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.doneInvoke)(invokeDef.id)),invokeDef.onDone)),false));}if(invokeDef.onError){settleTransitions.push.apply(settleTransitions,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.error)(invokeDef.id)),invokeDef.onError)),false));}return settleTransitions;}));var delayedTransitions=this.after;var formattedTransitions=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(doneConfig),false),(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeConfig),false),(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(onConfig),false),(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(eventlessConfig),false).map(function(transitionConfig){return(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig).map(function(transition){return _this.formatTransition(transition);});}));try{for(var delayedTransitions_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(delayedTransitions),delayedTransitions_1_1=delayedTransitions_1.next();!delayedTransitions_1_1.done;delayedTransitions_1_1=delayedTransitions_1.next()){var delayedTransition=delayedTransitions_1_1.value;formattedTransitions.push(delayedTransition);}}catch(e_10_1){e_10={error:e_10_1};}finally{try{if(delayedTransitions_1_1&&!delayedTransitions_1_1.done&&(_a=delayedTransitions_1[\"return\"]))_a.call(delayedTransitions_1);}finally{if(e_10)throw e_10.error;}}return formattedTransitions;};return StateNode;}();/***/},/***/\"./node_modules/xstate/es/_virtual/_tslib.js\":/*!***************************************************!*\\\n  !*** ./node_modules/xstate/es/_virtual/_tslib.js ***!\n  \\***************************************************/ /***/function node_modulesXstateEs_virtual_tslibJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */__assign:function __assign(){return(/* binding */_assign2);},/* harmony export */__read:function __read(){return(/* binding */_read);},/* harmony export */__rest:function __rest(){return(/* binding */_rest);},/* harmony export */__spreadArray:function __spreadArray(){return(/* binding */_spreadArray);},/* harmony export */__values:function __values(){return(/* binding */_values);}/* harmony export */});/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */var _assign2=function _assign(){_assign2=Object.assign||function __assign(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p];}return t;};return _assign2.apply(this,arguments);};function _rest(s,e){var t={};for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0)t[p]=s[p];if(s!=null&&typeof Object.getOwnPropertySymbols===\"function\")for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++){if(e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i]))t[p[i]]=s[p[i]];}return t;}function _values(o){var s=typeof Symbol===\"function\"&&Symbol.iterator,m=s&&o[s],i=0;if(m)return m.call(o);if(o&&typeof o.length===\"number\")return{next:function next(){if(o&&i>=o.length)o=void 0;return{value:o&&o[i++],done:!o};}};throw new TypeError(s?\"Object is not iterable.\":\"Symbol.iterator is not defined.\");}function _read(o,n){var m=typeof Symbol===\"function\"&&o[Symbol.iterator];if(!m)return o;var i=m.call(o),r,ar=[],e;try{while((n===void 0||n-->0)&&!(r=i.next()).done)ar.push(r.value);}catch(error){e={error:error};}finally{try{if(r&&!r.done&&(m=i[\"return\"]))m.call(i);}finally{if(e)throw e.error;}}return ar;}function _spreadArray(to,from,pack){if(pack||arguments.length===2)for(var i=0,l=from.length,ar;i<l;i++){if(ar||!(i in from)){if(!ar)ar=Array.prototype.slice.call(from,0,i);ar[i]=from[i];}}return to.concat(ar||Array.prototype.slice.call(from));}/***/},/***/\"./node_modules/xstate/es/actionTypes.js\":/*!***********************************************!*\\\n  !*** ./node_modules/xstate/es/actionTypes.js ***!\n  \\***********************************************/ /***/function node_modulesXstateEsActionTypesJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */after:function after(){return(/* binding */_after);},/* harmony export */assign:function assign(){return(/* binding */_assign3);},/* harmony export */cancel:function cancel(){return(/* binding */_cancel);},/* harmony export */choose:function choose(){return(/* binding */_choose);},/* harmony export */doneState:function doneState(){return(/* binding */_doneState);},/* harmony export */error:function error(){return(/* binding */_error);},/* harmony export */errorExecution:function errorExecution(){return(/* binding */_errorExecution);},/* harmony export */errorPlatform:function errorPlatform(){return(/* binding */_errorPlatform);},/* harmony export */init:function init(){return(/* binding */_init3);},/* harmony export */invoke:function invoke(){return(/* binding */_invoke);},/* harmony export */log:function log(){return(/* binding */_log2);},/* harmony export */nullEvent:function nullEvent(){return(/* binding */_nullEvent);},/* harmony export */pure:function pure(){return(/* binding */_pure);},/* harmony export */raise:function raise(){return(/* binding */_raise);},/* harmony export */send:function send(){return(/* binding */_send);},/* harmony export */start:function start(){return(/* binding */_start);},/* harmony export */stop:function stop(){return(/* binding */_stop);},/* harmony export */update:function update(){return(/* binding */_update);}/* harmony export */});/* harmony import */var _types_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./types.js */\"./node_modules/xstate/es/types.js\");var _start=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Start;var _stop=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Stop;var _raise=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Raise;var _send=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Send;var _cancel=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Cancel;var _nullEvent=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.NullEvent;var _assign3=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Assign;var _after=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.After;var _doneState=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.DoneState;var _log2=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Log;var _init3=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Init;var _invoke=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Invoke;var _errorExecution=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorExecution;var _errorPlatform=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorPlatform;var _error=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorCustom;var _update=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Update;var _choose=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Choose;var _pure=_types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Pure;/***/},/***/\"./node_modules/xstate/es/actions.js\":/*!*******************************************!*\\\n  !*** ./node_modules/xstate/es/actions.js ***!\n  \\*******************************************/ /***/function node_modulesXstateEsActionsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */actionTypes:function actionTypes(){return(/* reexport module object */_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__);},/* harmony export */after:function after(){return(/* binding */_after2);},/* harmony export */assign:function assign(){return(/* binding */_assign4);},/* harmony export */cancel:function cancel(){return(/* binding */_cancel2);},/* harmony export */choose:function choose(){return(/* binding */_choose2);},/* harmony export */done:function done(){return(/* binding */_done);},/* harmony export */doneInvoke:function doneInvoke(){return(/* binding */_doneInvoke);},/* harmony export */error:function error(){return(/* binding */_error2);},/* harmony export */escalate:function escalate(){return(/* binding */_escalate);},/* harmony export */forwardTo:function forwardTo(){return(/* binding */_forwardTo);},/* harmony export */getActionFunction:function getActionFunction(){return(/* binding */_getActionFunction);},/* harmony export */initEvent:function initEvent(){return(/* binding */_initEvent);},/* harmony export */isActionObject:function isActionObject(){return(/* binding */_isActionObject);},/* harmony export */log:function log(){return(/* binding */_log3);},/* harmony export */pure:function pure(){return(/* binding */_pure2);},/* harmony export */raise:function raise(){return(/* binding */_raise2);},/* harmony export */resolveActions:function resolveActions(){return(/* binding */_resolveActions);},/* harmony export */resolveLog:function resolveLog(){return(/* binding */_resolveLog);},/* harmony export */resolveRaise:function resolveRaise(){return(/* binding */_resolveRaise);},/* harmony export */resolveSend:function resolveSend(){return(/* binding */_resolveSend);},/* harmony export */resolveStop:function resolveStop(){return(/* binding */_resolveStop);},/* harmony export */respond:function respond(){return(/* binding */_respond);},/* harmony export */send:function send(){return(/* binding */_send2);},/* harmony export */sendParent:function sendParent(){return(/* binding */_sendParent);},/* harmony export */sendTo:function sendTo(){return(/* binding */_sendTo);},/* harmony export */sendUpdate:function sendUpdate(){return(/* binding */_sendUpdate);},/* harmony export */start:function start(){return(/* binding */_start2);},/* harmony export */stop:function stop(){return(/* binding */_stop2);},/* harmony export */toActionObject:function toActionObject(){return(/* binding */_toActionObject);},/* harmony export */toActionObjects:function toActionObjects(){return(/* binding */_toActionObjects);},/* harmony export */toActivityDefinition:function toActivityDefinition(){return(/* binding */_toActivityDefinition);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _types_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(/*! ./types.js */\"./node_modules/xstate/es/types.js\");/* harmony import */var _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./actionTypes.js */\"./node_modules/xstate/es/actionTypes.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");var _initEvent=/*#__PURE__*/(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)({type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.init});function _getActionFunction(actionType,actionFunctionMap){return actionFunctionMap?actionFunctionMap[actionType]||undefined:undefined;}function _toActionObject(action,actionFunctionMap){var actionObject;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action)||typeof action==='number'){var exec=_getActionFunction(action,actionFunctionMap);if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)){actionObject={type:action,exec:exec};}else if(exec){actionObject=exec;}else{actionObject={type:action,exec:undefined};}}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action)){actionObject={// Convert action to string if unnamed\ntype:action.name||action.toString(),exec:action};}else{var exec=_getActionFunction(action.type,actionFunctionMap);if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)){actionObject=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},action),{exec:exec});}else if(exec){var actionType=exec.type||action.type;actionObject=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},exec),action),{type:actionType});}else{actionObject=action;}}return actionObject;}var _toActionObjects=function _toActionObjects(action,actionFunctionMap){if(!action){return[];}var actions=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(action)?action:[action];return actions.map(function(subAction){return _toActionObject(subAction,actionFunctionMap);});};function _toActivityDefinition(action){var actionObject=_toActionObject(action);return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({id:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action)?action:actionObject.id},actionObject),{type:actionObject.type});}/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */function _raise2(event,options){return{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,event:typeof event==='function'?event:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),delay:options?options.delay:undefined,id:options===null||options===void 0?void 0:options.id};}function _resolveRaise(action,ctx,_event,delaysMap){var meta={_event:_event};var resolvedEvent=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event)?action.event(ctx,_event.data,meta):action.event);var resolvedDelay;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)){var configDelay=delaysMap&&delaysMap[action.delay];resolvedDelay=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay)?configDelay(ctx,_event.data,meta):configDelay;}else{resolvedDelay=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay)?action.delay(ctx,_event.data,meta):action.delay;}return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},action),{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,_event:resolvedEvent,delay:resolvedDelay});}/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @deprecated Use the `sendTo(...)` action creator instead.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */function _send2(event,options){return{to:options?options.to:undefined,type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send,event:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event)?event:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),delay:options?options.delay:undefined,// TODO: don't auto-generate IDs here like that\n// there is too big chance of the ID collision\nid:options&&options.id!==undefined?options.id:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event)?event.name:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getEventType)(event)};}function _resolveSend(action,ctx,_event,delaysMap){var meta={_event:_event};// TODO: helper function for resolving Expr\nvar resolvedEvent=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event)?action.event(ctx,_event.data,meta):action.event);var resolvedDelay;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)){var configDelay=delaysMap&&delaysMap[action.delay];resolvedDelay=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay)?configDelay(ctx,_event.data,meta):configDelay;}else{resolvedDelay=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay)?action.delay(ctx,_event.data,meta):action.delay;}var resolvedTarget=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.to)?action.to(ctx,_event.data,meta):action.to;return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},action),{to:resolvedTarget,_event:resolvedEvent,event:resolvedEvent.data,delay:resolvedDelay});}/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */function _sendParent(event,options){return _send2(event,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},options),{to:_types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent}));}/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */function _sendTo(actor,event,options){return _send2(event,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},options),{to:actor}));}/**\r\n * Sends an update event to this machine's parent.\r\n */function _sendUpdate(){return _sendParent(_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.update);}/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */function _respond(event,options){return _send2(event,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},options),{to:function to(_,__,_a){var _event=_a._event;return _event.origin;// TODO: handle when _event.origin is undefined\n}}));}var defaultLogExpr=function defaultLogExpr(context,event){return{context:context,event:event};};/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */function _log3(expr,label){if(expr===void 0){expr=defaultLogExpr;}return{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log,label:label,expr:expr};}var _resolveLog=function _resolveLog(action,ctx,_event){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},action),{value:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.expr)?action.expr:action.expr(ctx,_event.data,{_event:_event})});};/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */var _cancel2=function _cancel2(sendId){return{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.cancel,sendId:sendId};};/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */function _start2(activity){var activityDef=_toActivityDefinition(activity);return{type:_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Start,activity:activityDef,exec:undefined};}/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */function _stop2(actorRef){var activity=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(actorRef)?actorRef:_toActivityDefinition(actorRef);return{type:_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,activity:activity,exec:undefined};}function _resolveStop(action,context,_event){var actorRefOrString=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.activity)?action.activity(context,_event.data):action.activity;var resolvedActorRef=typeof actorRefOrString==='string'?{id:actorRefOrString}:actorRefOrString;var actionObject={type:_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,activity:resolvedActorRef};return actionObject;}/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */var _assign4=function _assign4(assignment){return{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign,assignment:assignment};};function _isActionObject(action){return _typeof2(action)==='object'&&'type'in action;}/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */function _after2(delayRef,id){var idSuffix=id?\"#\".concat(id):'';return\"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.After,\"(\").concat(delayRef,\")\").concat(idSuffix);}/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */function _done(id,data){var type=\"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneState,\".\").concat(id);var eventObject={type:type,data:data};eventObject.toString=function(){return type;};return eventObject;}/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */function _doneInvoke(id,data){var type=\"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneInvoke,\".\").concat(id);var eventObject={type:type,data:data};eventObject.toString=function(){return type;};return eventObject;}function _error2(id,data){var type=\"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.ErrorPlatform,\".\").concat(id);var eventObject={type:type,data:data};eventObject.toString=function(){return type;};return eventObject;}function _pure2(getActions){return{type:_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Pure,get:getActions};}/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */function _forwardTo(target,options){if(!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION&&(!target||typeof target==='function')){var originalTarget_1=target;target=function target(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i];}var resolvedTarget=typeof originalTarget_1==='function'?originalTarget_1.apply(void 0,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args),false)):originalTarget_1;if(!resolvedTarget){throw new Error(\"Attempted to forward event to undefined actor. This risks an infinite loop in the sender.\");}return resolvedTarget;};}return _send2(function(_,event){return event;},(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},options),{to:target}));}/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */function _escalate(errorData,options){return _sendParent(function(context,event,meta){return{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.error,data:(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(errorData)?errorData(context,event,meta):errorData};},(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},options),{to:_types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent}));}function _choose2(conds){return{type:_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Choose,conds:conds};}var pluckAssigns=function pluckAssigns(actionBlocks){var e_1,_a;var assignActions=[];try{for(var actionBlocks_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks),actionBlocks_1_1=actionBlocks_1.next();!actionBlocks_1_1.done;actionBlocks_1_1=actionBlocks_1.next()){var block=actionBlocks_1_1.value;var i=0;while(i<block.actions.length){if(block.actions[i].type===_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign){assignActions.push(block.actions[i]);block.actions.splice(i,1);continue;}i++;}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(actionBlocks_1_1&&!actionBlocks_1_1.done&&(_a=actionBlocks_1[\"return\"]))_a.call(actionBlocks_1);}finally{if(e_1)throw e_1.error;}}return assignActions;};function _resolveActions(machine,currentState,currentContext,_event,actionBlocks,predictableExec,preserveActionOrder){if(preserveActionOrder===void 0){preserveActionOrder=false;}var assignActions=preserveActionOrder?[]:pluckAssigns(actionBlocks);var updatedContext=assignActions.length?(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(currentContext,_event,assignActions,currentState):currentContext;var preservedContexts=preserveActionOrder?[currentContext]:undefined;var deferredToBlockEnd=[];function handleAction(blockType,actionObject){var _a;switch(actionObject.type){case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise:{var raisedAction=_resolveRaise(actionObject,updatedContext,_event,machine.options.delays);if(predictableExec&&typeof raisedAction.delay==='number'){predictableExec(raisedAction,updatedContext,_event);}return raisedAction;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send:var sendAction=_resolveSend(actionObject,updatedContext,_event,machine.options.delays);// TODO: fix ActionTypes.Init\nif(!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION){var configuredDelay=actionObject.delay;// warn after resolving as we can create better contextual message here\n(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.warn)(!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(configuredDelay)||typeof sendAction.delay==='number',// tslint:disable-next-line:max-line-length\n\"No delay reference for delay expression '\".concat(configuredDelay,\"' was found on machine '\").concat(machine.id,\"'\"));}if(predictableExec&&sendAction.to!==_types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Internal){if(blockType==='entry'){deferredToBlockEnd.push(sendAction);}else{predictableExec(sendAction,updatedContext,_event);}}return sendAction;case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log:{var resolved=_resolveLog(actionObject,updatedContext,_event);predictableExec===null||predictableExec===void 0?void 0:predictableExec(resolved,updatedContext,_event);return resolved;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.choose:{var chooseAction=actionObject;var matchedActions=(_a=chooseAction.conds.find(function(condition){var guard=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toGuard)(condition.cond,machine.options.guards);return!guard||(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.evaluateGuard)(machine,guard,updatedContext,_event,!predictableExec?currentState:undefined);}))===null||_a===void 0?void 0:_a.actions;if(!matchedActions){return[];}var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(_resolveActions(machine,currentState,updatedContext,_event,[{type:blockType,actions:_toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions),machine.options.actions)}],predictableExec,preserveActionOrder),2),resolvedActionsFromChoose=_b[0],resolvedContextFromChoose=_b[1];updatedContext=resolvedContextFromChoose;preservedContexts===null||preservedContexts===void 0?void 0:preservedContexts.push(updatedContext);return resolvedActionsFromChoose;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.pure:{var matchedActions=actionObject.get(updatedContext,_event.data);if(!matchedActions){return[];}var _c=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(_resolveActions(machine,currentState,updatedContext,_event,[{type:blockType,actions:_toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions),machine.options.actions)}],predictableExec,preserveActionOrder),2),resolvedActionsFromPure=_c[0],resolvedContext=_c[1];updatedContext=resolvedContext;preservedContexts===null||preservedContexts===void 0?void 0:preservedContexts.push(updatedContext);return resolvedActionsFromPure;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.stop:{var resolved=_resolveStop(actionObject,updatedContext,_event);predictableExec===null||predictableExec===void 0?void 0:predictableExec(resolved,currentContext,_event);return resolved;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign:{updatedContext=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(updatedContext,_event,[actionObject],!predictableExec?currentState:undefined);preservedContexts===null||preservedContexts===void 0?void 0:preservedContexts.push(updatedContext);break;}default:var resolvedActionObject=_toActionObject(actionObject,machine.options.actions);var exec_1=resolvedActionObject.exec;if(predictableExec){predictableExec(resolvedActionObject,updatedContext,_event);}else if(exec_1&&preservedContexts){var contextIndex_1=preservedContexts.length-1;var wrapped=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({},resolvedActionObject),{exec:function exec(_ctx){var args=[];for(var _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i];}exec_1.apply(void 0,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([preservedContexts[contextIndex_1]],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args),false));}});resolvedActionObject=wrapped;}return resolvedActionObject;}}function processBlock(block){var e_2,_a;var resolvedActions=[];try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions),_c=_b.next();!_c.done;_c=_b.next()){var action=_c.value;var resolved=handleAction(block.type,action);if(resolved){resolvedActions=resolvedActions.concat(resolved);}}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_2)throw e_2.error;}}deferredToBlockEnd.forEach(function(action){predictableExec(action,updatedContext,_event);});deferredToBlockEnd.length=0;return resolvedActions;}var resolvedActions=(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(actionBlocks.map(processBlock));return[resolvedActions,updatedContext];}/***/},/***/\"./node_modules/xstate/es/behaviors.js\":/*!*********************************************!*\\\n  !*** ./node_modules/xstate/es/behaviors.js ***!\n  \\*********************************************/ /***/function node_modulesXstateEsBehaviorsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */fromPromise:function fromPromise(){return(/* binding */_fromPromise);},/* harmony export */fromReducer:function fromReducer(){return(/* binding */_fromReducer);},/* harmony export */spawnBehavior:function spawnBehavior(){return(/* binding */_spawnBehavior);}/* harmony export */});/* harmony import */var _actions_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./actions.js */\"./node_modules/xstate/es/actions.js\");/* harmony import */var _Actor_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./Actor.js */\"./node_modules/xstate/es/Actor.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");/**\r\n * Returns an actor behavior from a reducer and its initial state.\r\n *\r\n * @param transition The pure reducer that returns the next state given the current state and event.\r\n * @param initialState The initial state of the reducer.\r\n * @returns An actor behavior\r\n */function _fromReducer(transition,initialState){return{transition:transition,initialState:initialState};}function _fromPromise(promiseFn){var initialState={error:undefined,data:undefined,status:'pending'};return{transition:function transition(state,event,_a){var parent=_a.parent,id=_a.id,observers=_a.observers;switch(event.type){case'fulfill':parent===null||parent===void 0?void 0:parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.doneInvoke)(id,event.data));return{error:undefined,data:event.data,status:'fulfilled'};case'reject':parent===null||parent===void 0?void 0:parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.error)(id,event.error));observers.forEach(function(observer){observer.error(event.error);});return{error:event.error,data:undefined,status:'rejected'};default:return state;}},initialState:initialState,start:function start(_a){var self=_a.self;promiseFn().then(function(data){self.send({type:'fulfill',data:data});},function(reason){self.send({type:'reject',error:reason});});return initialState;}};}function _spawnBehavior(behavior,options){if(options===void 0){options={};}var state=behavior.initialState;var observers=new Set();var mailbox=[];var flushing=false;var flush=function flush(){if(flushing){return;}flushing=true;while(mailbox.length>0){var event_1=mailbox.shift();state=behavior.transition(state,event_1,actorCtx);observers.forEach(function(observer){return observer.next(state);});}flushing=false;};var actor=(0,_Actor_js__WEBPACK_IMPORTED_MODULE_1__.toActorRef)({id:options.id,send:function send(event){mailbox.push(event);flush();},getSnapshot:function getSnapshot(){return state;},subscribe:function subscribe(next,handleError,complete){var observer=(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toObserver)(next,handleError,complete);observers.add(observer);observer.next(state);return{unsubscribe:function unsubscribe(){observers[\"delete\"](observer);}};}});var actorCtx={parent:options.parent,self:actor,id:options.id||'anonymous',observers:observers};state=behavior.start?behavior.start(actorCtx):state;return actor;}/***/},/***/\"./node_modules/xstate/es/constants.js\":/*!*********************************************!*\\\n  !*** ./node_modules/xstate/es/constants.js ***!\n  \\*********************************************/ /***/function node_modulesXstateEsConstantsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */DEFAULT_GUARD_TYPE:function DEFAULT_GUARD_TYPE(){return(/* binding */_DEFAULT_GUARD_TYPE);},/* harmony export */EMPTY_ACTIVITY_MAP:function EMPTY_ACTIVITY_MAP(){return(/* binding */_EMPTY_ACTIVITY_MAP);},/* harmony export */STATE_DELIMITER:function STATE_DELIMITER(){return(/* binding */_STATE_DELIMITER);},/* harmony export */TARGETLESS_KEY:function TARGETLESS_KEY(){return(/* binding */_TARGETLESS_KEY);}/* harmony export */});var _STATE_DELIMITER='.';var _EMPTY_ACTIVITY_MAP={};var _DEFAULT_GUARD_TYPE='xstate.guard';var _TARGETLESS_KEY='';/***/},/***/\"./node_modules/xstate/es/devTools.js\":/*!********************************************!*\\\n  !*** ./node_modules/xstate/es/devTools.js ***!\n  \\********************************************/ /***/function node_modulesXstateEsDevToolsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */getGlobal:function getGlobal(){return(/* binding */_getGlobal);},/* harmony export */registerService:function registerService(){return(/* binding */_registerService);}/* harmony export */});/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");function _getGlobal(){if(typeof globalThis!=='undefined'){return globalThis;}if(typeof self!=='undefined'){return self;}if(typeof window!=='undefined'){return window;}if(typeof __webpack_require__.g!=='undefined'){return __webpack_require__.g;}if(!_environment_js__WEBPACK_IMPORTED_MODULE_0__.IS_PRODUCTION){console.warn('XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues');}}function getDevTools(){var global=_getGlobal();if(global&&'__xstate__'in global){return global.__xstate__;}return undefined;}function _registerService(service){if(!_getGlobal()){return;}var devTools=getDevTools();if(devTools){devTools.register(service);}}/***/},/***/\"./node_modules/xstate/es/environment.js\":/*!***********************************************!*\\\n  !*** ./node_modules/xstate/es/environment.js ***!\n  \\***********************************************/ /***/function node_modulesXstateEsEnvironmentJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */IS_PRODUCTION:function IS_PRODUCTION(){return(/* binding */_IS_PRODUCTION);}/* harmony export */});var _IS_PRODUCTION=\"development\"==='production';/***/},/***/\"./node_modules/xstate/es/index.js\":/*!*****************************************!*\\\n  !*** ./node_modules/xstate/es/index.js ***!\n  \\*****************************************/ /***/function node_modulesXstateEsIndexJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */ActionTypes:function ActionTypes(){return(/* reexport safe */_types_js__WEBPACK_IMPORTED_MODULE_10__.ActionTypes);},/* harmony export */Interpreter:function Interpreter(){return(/* reexport safe */_interpreter_js__WEBPACK_IMPORTED_MODULE_2__.Interpreter);},/* harmony export */InterpreterStatus:function InterpreterStatus(){return(/* reexport safe */_interpreter_js__WEBPACK_IMPORTED_MODULE_2__.InterpreterStatus);},/* harmony export */Machine:function Machine(){return(/* reexport safe */_Machine_js__WEBPACK_IMPORTED_MODULE_3__.Machine);},/* harmony export */SpecialTargets:function SpecialTargets(){return(/* reexport safe */_types_js__WEBPACK_IMPORTED_MODULE_10__.SpecialTargets);},/* harmony export */State:function State(){return(/* reexport safe */_State_js__WEBPACK_IMPORTED_MODULE_7__.State);},/* harmony export */StateNode:function StateNode(){return(/* reexport safe */_StateNode_js__WEBPACK_IMPORTED_MODULE_8__.StateNode);},/* harmony export */actions:function actions(){return(/* reexport module object */_actions_js__WEBPACK_IMPORTED_MODULE_0__);},/* harmony export */assign:function assign(){return(/* binding */_assign5);},/* harmony export */cancel:function cancel(){return(/* binding */_cancel3);},/* harmony export */choose:function choose(){return(/* binding */_choose3);},/* harmony export */createMachine:function createMachine(){return(/* reexport safe */_Machine_js__WEBPACK_IMPORTED_MODULE_3__.createMachine);},/* harmony export */createSchema:function createSchema(){return(/* reexport safe */_schema_js__WEBPACK_IMPORTED_MODULE_6__.createSchema);},/* harmony export */doneInvoke:function doneInvoke(){return(/* binding */_doneInvoke2);},/* harmony export */forwardTo:function forwardTo(){return(/* binding */_forwardTo2);},/* harmony export */interpret:function interpret(){return(/* reexport safe */_interpreter_js__WEBPACK_IMPORTED_MODULE_2__.interpret);},/* harmony export */log:function log(){return(/* binding */_log4);},/* harmony export */mapState:function mapState(){return(/* reexport safe */_mapState_js__WEBPACK_IMPORTED_MODULE_4__.mapState);},/* harmony export */matchState:function matchState(){return(/* reexport safe */_match_js__WEBPACK_IMPORTED_MODULE_5__.matchState);},/* harmony export */matchesState:function matchesState(){return(/* reexport safe */_utils_js__WEBPACK_IMPORTED_MODULE_11__.matchesState);},/* harmony export */pure:function pure(){return(/* binding */_pure3);},/* harmony export */raise:function raise(){return(/* binding */_raise3);},/* harmony export */send:function send(){return(/* binding */_send3);},/* harmony export */sendParent:function sendParent(){return(/* binding */_sendParent2);},/* harmony export */sendTo:function sendTo(){return(/* binding */_sendTo2);},/* harmony export */sendUpdate:function sendUpdate(){return(/* binding */_sendUpdate2);},/* harmony export */spawn:function spawn(){return(/* reexport safe */_interpreter_js__WEBPACK_IMPORTED_MODULE_2__.spawn);},/* harmony export */spawnBehavior:function spawnBehavior(){return(/* reexport safe */_behaviors_js__WEBPACK_IMPORTED_MODULE_9__.spawnBehavior);},/* harmony export */stop:function stop(){return(/* binding */_stop3);},/* harmony export */t:function t(){return(/* reexport safe */_schema_js__WEBPACK_IMPORTED_MODULE_6__.t);},/* harmony export */toActorRef:function toActorRef(){return(/* reexport safe */_Actor_js__WEBPACK_IMPORTED_MODULE_1__.toActorRef);},/* harmony export */toEventObject:function toEventObject(){return(/* reexport safe */_utils_js__WEBPACK_IMPORTED_MODULE_11__.toEventObject);},/* harmony export */toObserver:function toObserver(){return(/* reexport safe */_utils_js__WEBPACK_IMPORTED_MODULE_11__.toObserver);},/* harmony export */toSCXMLEvent:function toSCXMLEvent(){return(/* reexport safe */_utils_js__WEBPACK_IMPORTED_MODULE_11__.toSCXMLEvent);}/* harmony export */});/* harmony import */var _actions_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./actions.js */\"./node_modules/xstate/es/actions.js\");/* harmony import */var _Actor_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./Actor.js */\"./node_modules/xstate/es/Actor.js\");/* harmony import */var _interpreter_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./interpreter.js */\"./node_modules/xstate/es/interpreter.js\");/* harmony import */var _Machine_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(/*! ./Machine.js */\"./node_modules/xstate/es/Machine.js\");/* harmony import */var _mapState_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(/*! ./mapState.js */\"./node_modules/xstate/es/mapState.js\");/* harmony import */var _match_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(/*! ./match.js */\"./node_modules/xstate/es/match.js\");/* harmony import */var _schema_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(/*! ./schema.js */\"./node_modules/xstate/es/schema.js\");/* harmony import */var _State_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(/*! ./State.js */\"./node_modules/xstate/es/State.js\");/* harmony import */var _StateNode_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(/*! ./StateNode.js */\"./node_modules/xstate/es/StateNode.js\");/* harmony import */var _behaviors_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(/*! ./behaviors.js */\"./node_modules/xstate/es/behaviors.js\");/* harmony import */var _types_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(/*! ./types.js */\"./node_modules/xstate/es/types.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");var _assign5=_actions_js__WEBPACK_IMPORTED_MODULE_0__.assign,_cancel3=_actions_js__WEBPACK_IMPORTED_MODULE_0__.cancel,_send3=_actions_js__WEBPACK_IMPORTED_MODULE_0__.send,_sendTo2=_actions_js__WEBPACK_IMPORTED_MODULE_0__.sendTo,_sendParent2=_actions_js__WEBPACK_IMPORTED_MODULE_0__.sendParent,_sendUpdate2=_actions_js__WEBPACK_IMPORTED_MODULE_0__.sendUpdate,_forwardTo2=_actions_js__WEBPACK_IMPORTED_MODULE_0__.forwardTo,_doneInvoke2=_actions_js__WEBPACK_IMPORTED_MODULE_0__.doneInvoke,_raise3=_actions_js__WEBPACK_IMPORTED_MODULE_0__.raise,_log4=_actions_js__WEBPACK_IMPORTED_MODULE_0__.log,_pure3=_actions_js__WEBPACK_IMPORTED_MODULE_0__.pure,_choose3=_actions_js__WEBPACK_IMPORTED_MODULE_0__.choose,_stop3=_actions_js__WEBPACK_IMPORTED_MODULE_0__.stop;/***/},/***/\"./node_modules/xstate/es/interpreter.js\":/*!***********************************************!*\\\n  !*** ./node_modules/xstate/es/interpreter.js ***!\n  \\***********************************************/ /***/function node_modulesXstateEsInterpreterJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */Interpreter:function Interpreter(){return(/* binding */_Interpreter);},/* harmony export */InterpreterStatus:function InterpreterStatus(){return(/* binding */_InterpreterStatus);},/* harmony export */interpret:function interpret(){return(/* binding */_interpret);},/* harmony export */spawn:function spawn(){return(/* binding */_spawn);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _types_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./types.js */\"./node_modules/xstate/es/types.js\");/* harmony import */var _State_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(/*! ./State.js */\"./node_modules/xstate/es/State.js\");/* harmony import */var _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(/*! ./actionTypes.js */\"./node_modules/xstate/es/actionTypes.js\");/* harmony import */var _actions_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(/*! ./actions.js */\"./node_modules/xstate/es/actions.js\");/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");/* harmony import */var _scheduler_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(/*! ./scheduler.js */\"./node_modules/xstate/es/scheduler.js\");/* harmony import */var _Actor_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(/*! ./Actor.js */\"./node_modules/xstate/es/Actor.js\");/* harmony import */var _registry_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(/*! ./registry.js */\"./node_modules/xstate/es/registry.js\");/* harmony import */var _devTools_js__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(/*! ./devTools.js */\"./node_modules/xstate/es/devTools.js\");/* harmony import */var _serviceScope_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(/*! ./serviceScope.js */\"./node_modules/xstate/es/serviceScope.js\");/* harmony import */var _behaviors_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(/*! ./behaviors.js */\"./node_modules/xstate/es/behaviors.js\");var DEFAULT_SPAWN_OPTIONS={sync:false,autoForward:false};var _InterpreterStatus;(function(InterpreterStatus){InterpreterStatus[InterpreterStatus[\"NotStarted\"]=0]=\"NotStarted\";InterpreterStatus[InterpreterStatus[\"Running\"]=1]=\"Running\";InterpreterStatus[InterpreterStatus[\"Stopped\"]=2]=\"Stopped\";})(_InterpreterStatus||(_InterpreterStatus={}));var _Interpreter=/*#__PURE__*/ /** @class */function(){/**\r\n   * Creates a new Interpreter instance (i.e., service) for the given machine with the provided options, if any.\r\n   *\r\n   * @param machine The machine to be interpreted\r\n   * @param options Interpreter options\r\n   */function Interpreter(machine,options){if(options===void 0){options=Interpreter.defaultOptions;}var _this=this;this.machine=machine;this.delayedEventsMap={};this.listeners=new Set();this.contextListeners=new Set();this.stopListeners=new Set();this.doneListeners=new Set();this.eventListeners=new Set();this.sendListeners=new Set();/**\r\n     * Whether the service is started.\r\n     */this.initialized=false;this.status=_InterpreterStatus.NotStarted;this.children=new Map();this.forwardTo=new Set();this._outgoingQueue=[];/**\r\n     * Alias for Interpreter.prototype.start\r\n     */this.init=this.start;/**\r\n     * Sends an event to the running interpreter to trigger a transition.\r\n     *\r\n     * An array of events (batched) can be sent as well, which will send all\r\n     * batched events to the running interpreter. The listeners will be\r\n     * notified only **once** when all events are processed.\r\n     *\r\n     * @param event The event(s) to send\r\n     */this.send=function(event,payload){if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(event)){_this.batch(event);return _this.state;}var _event=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toEventObject)(event,payload));if(_this.status===_InterpreterStatus.Stopped){// do nothing\nif(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"Event \\\"\".concat(_event.name,\"\\\" was sent to stopped service \\\"\").concat(_this.machine.id,\"\\\". This service has already reached its final state, and will not transition.\\nEvent: \").concat(JSON.stringify(_event.data)));}return _this.state;}if(_this.status!==_InterpreterStatus.Running&&!_this.options.deferEvents){throw new Error(\"Event \\\"\".concat(_event.name,\"\\\" was sent to uninitialized service \\\"\").concat(_this.machine.id// tslint:disable-next-line:max-line-length\n,\"\\\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\\nEvent: \").concat(JSON.stringify(_event.data)));}_this.scheduler.schedule(function(){// Forward copy of event to child actors\n_this.forward(_event);var nextState=_this._nextState(_event);_this.update(nextState,_event);});return _this._state;// TODO: deprecate (should return void)\n// tslint:disable-next-line:semicolon\n};this.sendTo=function(event,to,immediate){var isParent=_this.parent&&(to===_types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Parent||_this.parent.id===to);var target=isParent?_this.parent:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(to)?to===_types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Internal?_this:_this.children.get(to)||_registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.get(to):(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isActor)(to)?to:undefined;if(!target){if(!isParent){throw new Error(\"Unable to send event to child '\".concat(to,\"' from service '\").concat(_this.id,\"'.\"));}// tslint:disable-next-line:no-console\nif(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"Service '\".concat(_this.id,\"' has no parent: unable to send event \").concat(event.type));}return;}if('machine'in target){// perhaps those events should be rejected in the parent\n// but atm it doesn't have easy access to all of the information that is required to do it reliably\nif(_this.status!==_InterpreterStatus.Stopped||_this.parent!==target||// we need to send events to the parent from exit handlers of a machine that reached its final state\n_this.state.done){// Send SCXML events to machines\nvar scxmlEvent=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},event),{name:event.name===_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.error?\"\".concat((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(_this.id)):event.name,origin:_this.sessionId});if(!immediate&&_this.machine.config.predictableActionArguments){_this._outgoingQueue.push([target,scxmlEvent]);}else{target.send(scxmlEvent);}}}else{// Send normal events to other targets\nif(!immediate&&_this.machine.config.predictableActionArguments){_this._outgoingQueue.push([target,event.data]);}else{target.send(event.data);}}};this._exec=function(action,context,_event,actionFunctionMap){if(actionFunctionMap===void 0){actionFunctionMap=_this.machine.options.actions;}var actionOrExec=action.exec||(0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.getActionFunction)(action.type,actionFunctionMap);var exec=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(actionOrExec)?actionOrExec:actionOrExec?actionOrExec.exec:action.exec;if(exec){try{return exec(context,_event.data,!_this.machine.config.predictableActionArguments?{action:action,state:_this.state,_event:_event}:{action:action,_event:_event});}catch(err){if(_this.parent){_this.parent.send({type:'xstate.error',data:err});}throw err;}}switch(action.type){case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.raise:{// if raise action reached the interpreter then it's a delayed one\nvar sendAction_1=action;_this.defer(sendAction_1);break;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.send:var sendAction=action;if(typeof sendAction.delay==='number'){_this.defer(sendAction);return;}else{if(sendAction.to){_this.sendTo(sendAction._event,sendAction.to,_event===_actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);}else{_this.send(sendAction._event);}}break;case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.cancel:_this.cancel(action.sendId);break;case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.start:{if(_this.status!==_InterpreterStatus.Running){return;}var activity=action.activity;// If the activity will be stopped right after it's started\n// (such as in transient states)\n// don't bother starting the activity.\nif(// in v4 with `predictableActionArguments` invokes are called eagerly when the `this.state` still points to the previous state\n!_this.machine.config.predictableActionArguments&&!_this.state.activities[activity.id||activity.type]){break;}// Invoked services\nif(activity.type===_types_js__WEBPACK_IMPORTED_MODULE_2__.ActionTypes.Invoke){var invokeSource=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(activity.src);var serviceCreator=_this.machine.options.services?_this.machine.options.services[invokeSource.type]:undefined;var id=activity.id,data=activity.data;if(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!('forward'in activity),// tslint:disable-next-line:max-line-length\n\"`forward` property is deprecated (found in invocation of '\".concat(activity.src,\"' in in machine '\").concat(_this.machine.id,\"'). \")+\"Please use `autoForward` instead.\");}var autoForward='autoForward'in activity?activity.autoForward:!!activity.forward;if(!serviceCreator){// tslint:disable-next-line:no-console\nif(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"No service found for invocation '\".concat(activity.src,\"' in machine '\").concat(_this.machine.id,\"'.\"));}return;}var resolvedData=data?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(data,context,_event):undefined;if(typeof serviceCreator==='string'){// TODO: warn\nreturn;}var source=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(serviceCreator)?serviceCreator(context,_event.data,{data:resolvedData,src:invokeSource,meta:activity.meta}):serviceCreator;if(!source){// TODO: warn?\nreturn;}var options=void 0;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(source)){source=resolvedData?source.withContext(resolvedData):source;options={autoForward:autoForward};}_this.spawn(source,id,options);}else{_this.spawnActivity(activity);}break;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.stop:{_this.stopChild(action.activity.id);break;}case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.log:var _a=action,label=_a.label,value=_a.value;if(label){_this.logger(label,value);}else{_this.logger(value);}break;default:if(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"No implementation found for action type '\".concat(action.type,\"'\"));}break;}};var resolvedOptions=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},Interpreter.defaultOptions),options);var clock=resolvedOptions.clock,logger=resolvedOptions.logger,parent=resolvedOptions.parent,id=resolvedOptions.id;var resolvedId=id!==undefined?id:machine.id;this.id=resolvedId;this.logger=logger;this.clock=clock;this.parent=parent;this.options=resolvedOptions;this.scheduler=new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({deferEvents:this.options.deferEvents});this.sessionId=_registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.bookId();}Object.defineProperty(Interpreter.prototype,\"initialState\",{get:function get(){var _this=this;if(this._initialState){return this._initialState;}return(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this,function(){_this._initialState=_this.machine.initialState;return _this._initialState;});},enumerable:false,configurable:true});Object.defineProperty(Interpreter.prototype,\"state\",{/**\r\n     * @deprecated Use `.getSnapshot()` instead.\r\n     */get:function get(){if(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(this.status!==_InterpreterStatus.NotStarted,\"Attempted to read state from uninitialized service '\".concat(this.id,\"'. Make sure the service is started first.\"));}return this._state;},enumerable:false,configurable:true});/**\r\n   * Executes the actions of the given state, with that state's `context` and `event`.\r\n   *\r\n   * @param state The state whose actions will be executed\r\n   * @param actionsConfig The action implementations to use\r\n   */Interpreter.prototype.execute=function(state,actionsConfig){var e_1,_a;try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(state.actions),_c=_b.next();!_c.done;_c=_b.next()){var action=_c.value;this.exec(action,state,actionsConfig);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_1)throw e_1.error;}}};Interpreter.prototype.update=function(state,_event){var e_2,_a,e_3,_b,e_4,_c,e_5,_d;var _this=this;// Attach session ID to state\nstate._sessionid=this.sessionId;// Update state\nthis._state=state;// Execute actions\nif((!this.machine.config.predictableActionArguments||// this is currently required to execute initial actions as the `initialState` gets cached\n// we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns\n_event===_actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent)&&this.options.execute){this.execute(this.state);}else{var item=void 0;while(item=this._outgoingQueue.shift()){item[0].send(item[1]);}}// Update children\nthis.children.forEach(function(child){_this.state.children[child.id]=child;});// Dev tools\nif(this.devTools){this.devTools.send(_event.data,state);}// Execute listeners\nif(state.event){try{for(var _e=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.eventListeners),_f=_e.next();!_f.done;_f=_e.next()){var listener=_f.value;listener(state.event);}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(_f&&!_f.done&&(_a=_e[\"return\"]))_a.call(_e);}finally{if(e_2)throw e_2.error;}}}try{for(var _g=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners),_h=_g.next();!_h.done;_h=_g.next()){var listener=_h.value;listener(state,state.event);}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(_h&&!_h.done&&(_b=_g[\"return\"]))_b.call(_g);}finally{if(e_3)throw e_3.error;}}try{for(var _j=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners),_k=_j.next();!_k.done;_k=_j.next()){var contextListener=_k.value;contextListener(this.state.context,this.state.history?this.state.history.context:undefined);}}catch(e_4_1){e_4={error:e_4_1};}finally{try{if(_k&&!_k.done&&(_c=_j[\"return\"]))_c.call(_j);}finally{if(e_4)throw e_4.error;}}if(this.state.done){// get final child state node\nvar finalChildStateNode=state.configuration.find(function(sn){return sn.type==='final'&&sn.parent===_this.machine;});var doneData=finalChildStateNode&&finalChildStateNode.doneData?(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(finalChildStateNode.doneData,state.context,_event):undefined;this._doneEvent=(0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(this.id,doneData);try{for(var _l=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners),_m=_l.next();!_m.done;_m=_l.next()){var listener=_m.value;listener(this._doneEvent);}}catch(e_5_1){e_5={error:e_5_1};}finally{try{if(_m&&!_m.done&&(_d=_l[\"return\"]))_d.call(_l);}finally{if(e_5)throw e_5.error;}}this._stop();this._stopChildren();_registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(this.sessionId);}};/*\r\n   * Adds a listener that is notified whenever a state transition happens. The listener is called with\r\n   * the next state and the event object that caused the state transition.\r\n   *\r\n   * @param listener The state listener\r\n   */Interpreter.prototype.onTransition=function(listener){this.listeners.add(listener);// Send current state to listener\nif(this.status===_InterpreterStatus.Running){listener(this.state,this.state.event);}return this;};Interpreter.prototype.subscribe=function(nextListenerOrObserver,_,// TODO: error listener\ncompleteListener){var _this=this;var observer=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(nextListenerOrObserver,_,completeListener);this.listeners.add(observer.next);// Send current state to listener\nif(this.status!==_InterpreterStatus.NotStarted){observer.next(this.state);}var completeOnce=function completeOnce(){_this.doneListeners[\"delete\"](completeOnce);_this.stopListeners[\"delete\"](completeOnce);observer.complete();};if(this.status===_InterpreterStatus.Stopped){observer.complete();}else{this.onDone(completeOnce);this.onStop(completeOnce);}return{unsubscribe:function unsubscribe(){_this.listeners[\"delete\"](observer.next);_this.doneListeners[\"delete\"](completeOnce);_this.stopListeners[\"delete\"](completeOnce);}};};/**\r\n   * Adds an event listener that is notified whenever an event is sent to the running interpreter.\r\n   * @param listener The event listener\r\n   */Interpreter.prototype.onEvent=function(listener){this.eventListeners.add(listener);return this;};/**\r\n   * Adds an event listener that is notified whenever a `send` event occurs.\r\n   * @param listener The event listener\r\n   */Interpreter.prototype.onSend=function(listener){this.sendListeners.add(listener);return this;};/**\r\n   * Adds a context listener that is notified whenever the state context changes.\r\n   * @param listener The context listener\r\n   */Interpreter.prototype.onChange=function(listener){this.contextListeners.add(listener);return this;};/**\r\n   * Adds a listener that is notified when the machine is stopped.\r\n   * @param listener The listener\r\n   */Interpreter.prototype.onStop=function(listener){this.stopListeners.add(listener);return this;};/**\r\n   * Adds a state listener that is notified when the statechart has reached its final state.\r\n   * @param listener The state listener\r\n   */Interpreter.prototype.onDone=function(listener){if(this.status===_InterpreterStatus.Stopped&&this._doneEvent){listener(this._doneEvent);}else{this.doneListeners.add(listener);}return this;};/**\r\n   * Removes a listener.\r\n   * @param listener The listener to remove\r\n   */Interpreter.prototype.off=function(listener){this.listeners[\"delete\"](listener);this.eventListeners[\"delete\"](listener);this.sendListeners[\"delete\"](listener);this.stopListeners[\"delete\"](listener);this.doneListeners[\"delete\"](listener);this.contextListeners[\"delete\"](listener);return this;};/**\r\n   * Starts the interpreter from the given state, or the initial state.\r\n   * @param initialState The state to start the statechart from\r\n   */Interpreter.prototype.start=function(initialState){var _this=this;if(this.status===_InterpreterStatus.Running){// Do not restart the service if it is already started\nreturn this;}// yes, it's a hack but we need the related cache to be populated for some things to work (like delayed transitions)\n// this is usually called by `machine.getInitialState` but if we rehydrate from a state we might bypass this call\n// we also don't want to call this method here as it resolves the full initial state which might involve calling assign actions\n// and that could potentially lead to some unwanted side-effects (even such as creating some rogue actors)\nthis.machine._init();_registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.register(this.sessionId,this);this.initialized=true;this.status=_InterpreterStatus.Running;var resolvedState=initialState===undefined?this.initialState:(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this,function(){return(0,_State_js__WEBPACK_IMPORTED_MODULE_9__.isStateConfig)(initialState)?_this.machine.resolveState(initialState):_this.machine.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_9__.State.from(initialState,_this.machine.context));});if(this.options.devTools){this.attachDev();}this.scheduler.initialize(function(){_this.update(resolvedState,_actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);});return this;};Interpreter.prototype._stopChildren=function(){// TODO: think about converting those to actions\nthis.children.forEach(function(child){if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)){child.stop();}});this.children.clear();};Interpreter.prototype._stop=function(){var e_6,_a,e_7,_b,e_8,_c,e_9,_d,e_10,_e;try{for(var _f=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners),_g=_f.next();!_g.done;_g=_f.next()){var listener=_g.value;this.listeners[\"delete\"](listener);}}catch(e_6_1){e_6={error:e_6_1};}finally{try{if(_g&&!_g.done&&(_a=_f[\"return\"]))_a.call(_f);}finally{if(e_6)throw e_6.error;}}try{for(var _h=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.stopListeners),_j=_h.next();!_j.done;_j=_h.next()){var listener=_j.value;// call listener, then remove\nlistener();this.stopListeners[\"delete\"](listener);}}catch(e_7_1){e_7={error:e_7_1};}finally{try{if(_j&&!_j.done&&(_b=_h[\"return\"]))_b.call(_h);}finally{if(e_7)throw e_7.error;}}try{for(var _k=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners),_l=_k.next();!_l.done;_l=_k.next()){var listener=_l.value;this.contextListeners[\"delete\"](listener);}}catch(e_8_1){e_8={error:e_8_1};}finally{try{if(_l&&!_l.done&&(_c=_k[\"return\"]))_c.call(_k);}finally{if(e_8)throw e_8.error;}}try{for(var _m=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners),_o=_m.next();!_o.done;_o=_m.next()){var listener=_o.value;this.doneListeners[\"delete\"](listener);}}catch(e_9_1){e_9={error:e_9_1};}finally{try{if(_o&&!_o.done&&(_d=_m[\"return\"]))_d.call(_m);}finally{if(e_9)throw e_9.error;}}if(!this.initialized){// Interpreter already stopped; do nothing\nreturn this;}this.initialized=false;this.status=_InterpreterStatus.Stopped;this._initialState=undefined;try{// we are going to stop within the current sync frame\n// so we can safely just cancel this here as nothing async should be fired anyway\nfor(var _p=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(Object.keys(this.delayedEventsMap)),_q=_p.next();!_q.done;_q=_p.next()){var key=_q.value;this.clock.clearTimeout(this.delayedEventsMap[key]);}}catch(e_10_1){e_10={error:e_10_1};}finally{try{if(_q&&!_q.done&&(_e=_p[\"return\"]))_e.call(_p);}finally{if(e_10)throw e_10.error;}}// clear everything that might be enqueued\nthis.scheduler.clear();this.scheduler=new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({deferEvents:this.options.deferEvents});};/**\r\n   * Stops the interpreter and unsubscribe all listeners.\r\n   *\r\n   * This will also notify the `onStop` listeners.\r\n   */Interpreter.prototype.stop=function(){// TODO: add warning for stopping non-root interpreters\nvar _this=this;// grab the current scheduler as it will be replaced in _stop\nvar scheduler=this.scheduler;this._stop();// let what is currently processed to be finished\nscheduler.schedule(function(){// it feels weird to handle this here but we need to handle this even slightly \"out of band\"\nvar _event=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)({type:'xstate.stop'});var nextState=(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this,function(){var exitActions=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.state.configuration),false).sort(function(a,b){return b.order-a.order;}).map(function(stateNode){return(0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.toActionObjects)(stateNode.onExit,_this.machine.options.actions);}));var _a=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.resolveActions)(_this.machine,_this.state,_this.state.context,_event,[{type:'exit',actions:exitActions}],_this.machine.config.predictableActionArguments?_this._exec:undefined,_this.machine.config.predictableActionArguments||_this.machine.config.preserveActionOrder),2),resolvedActions=_a[0],updatedContext=_a[1];var newState=new _State_js__WEBPACK_IMPORTED_MODULE_9__.State({value:_this.state.value,context:updatedContext,_event:_event,_sessionid:_this.sessionId,historyValue:undefined,history:_this.state,actions:resolvedActions.filter(function(action){return!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);}),activities:{},events:[],configuration:[],transitions:[],children:{},done:_this.state.done,tags:_this.state.tags,machine:_this.machine});newState.changed=true;return newState;});_this.update(nextState,_event);_this._stopChildren();_registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(_this.sessionId);});return this;};Interpreter.prototype.batch=function(events){var _this=this;if(this.status===_InterpreterStatus.NotStarted&&this.options.deferEvents){// tslint:disable-next-line:no-console\nif(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"\".concat(events.length,\" event(s) were sent to uninitialized service \\\"\").concat(this.machine.id,\"\\\" and are deferred. Make sure .start() is called for this service.\\nEvent: \").concat(JSON.stringify(event)));}}else if(this.status!==_InterpreterStatus.Running){throw new Error(// tslint:disable-next-line:max-line-length\n\"\".concat(events.length,\" event(s) were sent to uninitialized service \\\"\").concat(this.machine.id,\"\\\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\"));}if(!events.length){return;}var exec=!!this.machine.config.predictableActionArguments&&this._exec;this.scheduler.schedule(function(){var e_11,_a;var nextState=_this.state;var batchChanged=false;var batchedActions=[];var _loop_1=function _loop_1(event_1){var _event=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event_1);_this.forward(_event);nextState=(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this,function(){return _this.machine.transition(nextState,_event,undefined,exec||undefined);});batchedActions.push.apply(batchedActions,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.machine.config.predictableActionArguments?nextState.actions:nextState.actions.map(function(a){return(0,_State_js__WEBPACK_IMPORTED_MODULE_9__.bindActionToState)(a,nextState);})),false));batchChanged=batchChanged||!!nextState.changed;};try{for(var events_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(events),events_1_1=events_1.next();!events_1_1.done;events_1_1=events_1.next()){var event_1=events_1_1.value;_loop_1(event_1);}}catch(e_11_1){e_11={error:e_11_1};}finally{try{if(events_1_1&&!events_1_1.done&&(_a=events_1[\"return\"]))_a.call(events_1);}finally{if(e_11)throw e_11.error;}}nextState.changed=batchChanged;nextState.actions=batchedActions;_this.update(nextState,(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(events[events.length-1]));});};/**\r\n   * Returns a send function bound to this interpreter instance.\r\n   *\r\n   * @param event The event to be sent by the sender.\r\n   */Interpreter.prototype.sender=function(event){return this.send.bind(this,event);};Interpreter.prototype._nextState=function(event,exec){var _this=this;if(exec===void 0){exec=!!this.machine.config.predictableActionArguments&&this._exec;}var _event=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event);if(_event.name.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform)===0&&!this.state.nextEvents.some(function(nextEvent){return nextEvent.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform)===0;})){throw _event.data.data;}var nextState=(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this,function(){return _this.machine.transition(_this.state,_event,undefined,exec||undefined);});return nextState;};/**\r\n   * Returns the next state given the interpreter's current state and the event.\r\n   *\r\n   * This is a pure method that does _not_ update the interpreter's state.\r\n   *\r\n   * @param event The event to determine the next state\r\n   */Interpreter.prototype.nextState=function(event){return this._nextState(event,false);};Interpreter.prototype.forward=function(event){var e_12,_a;try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.forwardTo),_c=_b.next();!_c.done;_c=_b.next()){var id=_c.value;var child=this.children.get(id);if(!child){throw new Error(\"Unable to forward event '\".concat(event,\"' from interpreter '\").concat(this.id,\"' to nonexistant child '\").concat(id,\"'.\"));}child.send(event);}}catch(e_12_1){e_12={error:e_12_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_12)throw e_12.error;}}};Interpreter.prototype.defer=function(sendAction){var _this=this;var timerId=this.clock.setTimeout(function(){if('to'in sendAction&&sendAction.to){_this.sendTo(sendAction._event,sendAction.to,true);}else{_this.send(sendAction._event);}},sendAction.delay);if(sendAction.id){this.delayedEventsMap[sendAction.id]=timerId;}};Interpreter.prototype.cancel=function(sendId){this.clock.clearTimeout(this.delayedEventsMap[sendId]);delete this.delayedEventsMap[sendId];};Interpreter.prototype.exec=function(action,state,actionFunctionMap){if(actionFunctionMap===void 0){actionFunctionMap=this.machine.options.actions;}this._exec(action,state.context,state._event,actionFunctionMap);};Interpreter.prototype.removeChild=function(childId){var _a;this.children[\"delete\"](childId);this.forwardTo[\"delete\"](childId);// this.state might not exist at the time this is called,\n// such as when a child is added then removed while initializing the state\n(_a=this.state)===null||_a===void 0?true:delete _a.children[childId];};Interpreter.prototype.stopChild=function(childId){var child=this.children.get(childId);if(!child){return;}this.removeChild(childId);if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)){child.stop();}};Interpreter.prototype.spawn=function(entity,name,options){if(this.status!==_InterpreterStatus.Running){return(0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity,name);}if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(entity)){return this.spawnPromise(Promise.resolve(entity),name);}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity)){return this.spawnCallback(entity,name);}else if((0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.isSpawnedActor)(entity)){return this.spawnActor(entity,name);}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isObservable)(entity)){return this.spawnObservable(entity,name);}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)){return this.spawnMachine(entity,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},options),{id:name}));}else if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBehavior)(entity)){return this.spawnBehavior(entity,name);}else{throw new Error(\"Unable to spawn entity \\\"\".concat(name,\"\\\" of type \\\"\").concat(_typeof2(entity),\"\\\".\"));}};Interpreter.prototype.spawnMachine=function(machine,options){var _this=this;if(options===void 0){options={};}var childService=new Interpreter(machine,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},this.options),{parent:this,id:options.id||machine.id}));var resolvedOptions=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},DEFAULT_SPAWN_OPTIONS),options);if(resolvedOptions.sync){childService.onTransition(function(state){_this.send(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.update,{state:state,id:childService.id});});}var actor=childService;this.children.set(childService.id,actor);if(resolvedOptions.autoForward){this.forwardTo.add(childService.id);}childService.onDone(function(doneEvent){_this.removeChild(childService.id);_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(doneEvent,{origin:childService.id}));}).start();return actor;};Interpreter.prototype.spawnBehavior=function(behavior,id){var actorRef=(0,_behaviors_js__WEBPACK_IMPORTED_MODULE_11__.spawnBehavior)(behavior,{id:id,parent:this});this.children.set(id,actorRef);return actorRef;};Interpreter.prototype.spawnPromise=function(promise,id){var _a;var _this=this;var canceled=false;var resolvedData;promise.then(function(response){if(!canceled){resolvedData=response;_this.removeChild(id);_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id,response),{origin:id}));}},function(errorData){if(!canceled){_this.removeChild(id);var errorEvent=(0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id,errorData);try{// Send \"error.platform.id\" to this (parent).\n_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(errorEvent,{origin:id}));}catch(error){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.reportUnhandledExceptionOnInvocation)(errorData,error,id);if(_this.devTools){_this.devTools.send(errorEvent,_this.state);}if(_this.machine.strict){// it would be better to always stop the state machine if unhandled\n// exception/promise rejection happens but because we don't want to\n// break existing code so enforce it on strict mode only especially so\n// because documentation says that onError is optional\n_this.stop();}}}});var actor=(_a={id:id,send:function send(){return void 0;},subscribe:function subscribe(next,handleError,complete){var observer=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next,handleError,complete);var unsubscribed=false;promise.then(function(response){if(unsubscribed){return;}observer.next(response);if(unsubscribed){return;}observer.complete();},function(err){if(unsubscribed){return;}observer.error(err);});return{unsubscribe:function unsubscribe(){return unsubscribed=true;}};},stop:function stop(){canceled=true;},toJSON:function toJSON(){return{id:id};},getSnapshot:function getSnapshot(){return resolvedData;}},_a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;},_a);this.children.set(id,actor);return actor;};Interpreter.prototype.spawnCallback=function(callback,id){var _a;var _this=this;var canceled=false;var receivers=new Set();var listeners=new Set();var emitted;var receive=function receive(e){emitted=e;listeners.forEach(function(listener){return listener(e);});if(canceled){return;}_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(e,{origin:id}));};var callbackStop;try{callbackStop=callback(receive,function(newListener){receivers.add(newListener);});}catch(err){this.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id,err));}if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(callbackStop)){// it turned out to be an async function, can't reliably check this before calling `callback`\n// because transpiled async functions are not recognizable\nreturn this.spawnPromise(callbackStop,id);}var actor=(_a={id:id,send:function send(event){return receivers.forEach(function(receiver){return receiver(event);});},subscribe:function subscribe(next){var observer=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next);listeners.add(observer.next);return{unsubscribe:function unsubscribe(){listeners[\"delete\"](observer.next);}};},stop:function stop(){canceled=true;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(callbackStop)){callbackStop();}},toJSON:function toJSON(){return{id:id};},getSnapshot:function getSnapshot(){return emitted;}},_a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;},_a);this.children.set(id,actor);return actor;};Interpreter.prototype.spawnObservable=function(source,id){var _a;var _this=this;var emitted;var subscription=source.subscribe(function(value){emitted=value;_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(value,{origin:id}));},function(err){_this.removeChild(id);_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id,err),{origin:id}));},function(){_this.removeChild(id);_this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id),{origin:id}));});var actor=(_a={id:id,send:function send(){return void 0;},subscribe:function subscribe(next,handleError,complete){return source.subscribe(next,handleError,complete);},stop:function stop(){return subscription.unsubscribe();},getSnapshot:function getSnapshot(){return emitted;},toJSON:function toJSON(){return{id:id};}},_a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;},_a);this.children.set(id,actor);return actor;};Interpreter.prototype.spawnActor=function(actor,name){this.children.set(name,actor);return actor;};Interpreter.prototype.spawnActivity=function(activity){var implementation=this.machine.options&&this.machine.options.activities?this.machine.options.activities[activity.type]:undefined;if(!implementation){if(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false,\"No implementation found for activity '\".concat(activity.type,\"'\"));}// tslint:disable-next-line:no-console\nreturn;}// Start implementation\nvar dispose=implementation(this.state.context,activity);this.spawnEffect(activity.id,dispose);};Interpreter.prototype.spawnEffect=function(id,dispose){var _a;this.children.set(id,(_a={id:id,send:function send(){return void 0;},subscribe:function subscribe(){return{unsubscribe:function unsubscribe(){return void 0;}};},stop:dispose||undefined,getSnapshot:function getSnapshot(){return undefined;},toJSON:function toJSON(){return{id:id};}},_a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;},_a));};Interpreter.prototype.attachDev=function(){var global=(0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.getGlobal)();if(this.options.devTools&&global){if(global.__REDUX_DEVTOOLS_EXTENSION__){var devToolsOptions=_typeof2(this.options.devTools)==='object'?this.options.devTools:undefined;this.devTools=global.__REDUX_DEVTOOLS_EXTENSION__.connect((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({name:this.id,autoPause:true,stateSanitizer:function stateSanitizer(state){return{value:state.value,context:state.context,actions:state.actions};}},devToolsOptions),{features:(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({jump:false,skip:false},devToolsOptions?devToolsOptions.features:undefined)}),this.machine);this.devTools.init(this.state);}// add XState-specific dev tooling hook\n(0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.registerService)(this);}};Interpreter.prototype.toJSON=function(){return{id:this.id};};Interpreter.prototype[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable]=function(){return this;};Interpreter.prototype.getSnapshot=function(){if(this.status===_InterpreterStatus.NotStarted){return this.initialState;}return this._state;};/**\r\n   * The default interpreter options:\r\n   *\r\n   * - `clock` uses the global `setTimeout` and `clearTimeout` functions\r\n   * - `logger` uses the global `console.log()` method\r\n   */Interpreter.defaultOptions={execute:true,deferEvents:true,clock:{setTimeout:function(_setTimeout){function setTimeout(_x86,_x87){return _setTimeout.apply(this,arguments);}setTimeout.toString=function(){return _setTimeout.toString();};return setTimeout;}(function(fn,ms){return setTimeout(fn,ms);}),clearTimeout:function(_clearTimeout){function clearTimeout(_x88){return _clearTimeout.apply(this,arguments);}clearTimeout.toString=function(){return _clearTimeout.toString();};return clearTimeout;}(function(id){return clearTimeout(id);})},logger:/*#__PURE__*/console.log.bind(console),devTools:false};Interpreter.interpret=_interpret;return Interpreter;}();var resolveSpawnOptions=function resolveSpawnOptions(nameOrOptions){if((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(nameOrOptions)){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},DEFAULT_SPAWN_OPTIONS),{name:nameOrOptions});}return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({},DEFAULT_SPAWN_OPTIONS),{name:(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.uniqueId)()}),nameOrOptions);};function _spawn(entity,nameOrOptions){var resolvedOptions=resolveSpawnOptions(nameOrOptions);return(0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.consume)(function(service){if(!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION){var isLazyEntity=(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)||(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity);(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!service||isLazyEntity,\"Attempted to spawn an Actor (ID: \\\"\".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)?entity.id:'undefined',\"\\\") outside of a service. This will have no effect.\"));}if(service){return service.spawn(entity,resolvedOptions.name,resolvedOptions);}else{return(0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity,resolvedOptions.name);}});}/**\r\n * Creates a new Interpreter instance for the given machine with the provided options, if any.\r\n *\r\n * @param machine The machine to interpret\r\n * @param options Interpreter options\r\n */function _interpret(machine,options){var interpreter=new _Interpreter(machine,options);return interpreter;}/***/},/***/\"./node_modules/xstate/es/invokeUtils.js\":/*!***********************************************!*\\\n  !*** ./node_modules/xstate/es/invokeUtils.js ***!\n  \\***********************************************/ /***/function node_modulesXstateEsInvokeUtilsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */toInvokeDefinition:function toInvokeDefinition(){return(/* binding */_toInvokeDefinition);},/* harmony export */toInvokeSource:function toInvokeSource(){return(/* binding */_toInvokeSource);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./actionTypes.js */\"./node_modules/xstate/es/actionTypes.js\");function _toInvokeSource(src){if(typeof src==='string'){var simpleSrc={type:src};simpleSrc.toString=function(){return src;};// v4 compat - TODO: remove in v5\nreturn simpleSrc;}return src;}function _toInvokeDefinition(invokeConfig){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke},invokeConfig),{toJSON:function toJSON(){invokeConfig.onDone;invokeConfig.onError;var invokeDef=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__rest)(invokeConfig,[\"onDone\",\"onError\"]);return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({},invokeDef),{type:_actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke,src:_toInvokeSource(invokeConfig.src)});}});}/***/},/***/\"./node_modules/xstate/es/mapState.js\":/*!********************************************!*\\\n  !*** ./node_modules/xstate/es/mapState.js ***!\n  \\********************************************/ /***/function node_modulesXstateEsMapStateJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */mapState:function mapState(){return(/* binding */_mapState);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");function _mapState(stateMap,stateId){var e_1,_a;var foundStateId;try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__values)(Object.keys(stateMap)),_c=_b.next();!_c.done;_c=_b.next()){var mappedStateId=_c.value;if((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.matchesState)(mappedStateId,stateId)&&(!foundStateId||stateId.length>foundStateId.length)){foundStateId=mappedStateId;}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_1)throw e_1.error;}}return stateMap[foundStateId];}/***/},/***/\"./node_modules/xstate/es/match.js\":/*!*****************************************!*\\\n  !*** ./node_modules/xstate/es/match.js ***!\n  \\*****************************************/ /***/function node_modulesXstateEsMatchJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */matchState:function matchState(){return(/* binding */_matchState);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _State_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./State.js */\"./node_modules/xstate/es/State.js\");function _matchState(state,patterns,defaultValue){var e_1,_a;var resolvedState=_State_js__WEBPACK_IMPORTED_MODULE_0__.State.from(state,state instanceof _State_js__WEBPACK_IMPORTED_MODULE_0__.State?state.context:undefined);try{for(var patterns_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(patterns),patterns_1_1=patterns_1.next();!patterns_1_1.done;patterns_1_1=patterns_1.next()){var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(patterns_1_1.value,2),stateValue=_b[0],getValue=_b[1];if(resolvedState.matches(stateValue)){return getValue(resolvedState);}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(patterns_1_1&&!patterns_1_1.done&&(_a=patterns_1[\"return\"]))_a.call(patterns_1);}finally{if(e_1)throw e_1.error;}}return defaultValue(resolvedState);}/***/},/***/\"./node_modules/xstate/es/registry.js\":/*!********************************************!*\\\n  !*** ./node_modules/xstate/es/registry.js ***!\n  \\********************************************/ /***/function node_modulesXstateEsRegistryJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */registry:function registry(){return(/* binding */_registry);}/* harmony export */});var children=/*#__PURE__*/new Map();var sessionIdIndex=0;var _registry={bookId:function bookId(){return\"x:\".concat(sessionIdIndex++);},register:function register(id,actor){children.set(id,actor);return id;},get:function get(id){return children.get(id);},free:function free(id){children[\"delete\"](id);}};/***/},/***/\"./node_modules/xstate/es/scheduler.js\":/*!*********************************************!*\\\n  !*** ./node_modules/xstate/es/scheduler.js ***!\n  \\*********************************************/ /***/function node_modulesXstateEsSchedulerJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */Scheduler:function Scheduler(){return(/* binding */_Scheduler);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");var defaultOptions={deferEvents:false};var _Scheduler=/*#__PURE__*/ /** @class */function(){function Scheduler(options){this.processingEvent=false;this.queue=[];this.initialized=false;this.options=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({},defaultOptions),options);}Scheduler.prototype.initialize=function(callback){this.initialized=true;if(callback){if(!this.options.deferEvents){this.schedule(callback);return;}this.process(callback);}this.flushEvents();};Scheduler.prototype.schedule=function(task){if(!this.initialized||this.processingEvent){this.queue.push(task);return;}if(this.queue.length!==0){throw new Error('Event queue should be empty when it is not processing events');}this.process(task);this.flushEvents();};Scheduler.prototype.clear=function(){this.queue=[];};Scheduler.prototype.flushEvents=function(){var nextCallback=this.queue.shift();while(nextCallback){this.process(nextCallback);nextCallback=this.queue.shift();}};Scheduler.prototype.process=function(callback){this.processingEvent=true;try{callback();}catch(e){// there is no use to keep the future events\n// as the situation is not anymore the same\nthis.clear();throw e;}finally{this.processingEvent=false;}};return Scheduler;}();/***/},/***/\"./node_modules/xstate/es/schema.js\":/*!******************************************!*\\\n  !*** ./node_modules/xstate/es/schema.js ***!\n  \\******************************************/ /***/function node_modulesXstateEsSchemaJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */createSchema:function createSchema(){return(/* binding */_createSchema);},/* harmony export */t:function t(){return(/* binding */_t102);}/* harmony export */});function _createSchema(schema){return schema;}var _t102=_createSchema;/***/},/***/\"./node_modules/xstate/es/serviceScope.js\":/*!************************************************!*\\\n  !*** ./node_modules/xstate/es/serviceScope.js ***!\n  \\************************************************/ /***/function node_modulesXstateEsServiceScopeJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */consume:function consume(){return(/* binding */_consume);},/* harmony export */provide:function provide(){return(/* binding */_provide);}/* harmony export */});/**\r\n * Maintains a stack of the current service in scope.\r\n * This is used to provide the correct service to spawn().\r\n */var serviceStack=[];var _provide=function _provide(service,fn){serviceStack.push(service);var result=fn(service);serviceStack.pop();return result;};var _consume=function _consume(fn){return fn(serviceStack[serviceStack.length-1]);};/***/},/***/\"./node_modules/xstate/es/stateUtils.js\":/*!**********************************************!*\\\n  !*** ./node_modules/xstate/es/stateUtils.js ***!\n  \\**********************************************/ /***/function node_modulesXstateEsStateUtilsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */getAdjList:function getAdjList(){return(/* binding */_getAdjList);},/* harmony export */getAllChildren:function getAllChildren(){return(/* binding */_getAllChildren);},/* harmony export */getAllStateNodes:function getAllStateNodes(){return(/* binding */_getAllStateNodes);},/* harmony export */getChildren:function getChildren(){return(/* binding */_getChildren);},/* harmony export */getConfiguration:function getConfiguration(){return(/* binding */_getConfiguration);},/* harmony export */getMeta:function getMeta(){return(/* binding */_getMeta);},/* harmony export */getTagsFromConfiguration:function getTagsFromConfiguration(){return(/* binding */_getTagsFromConfiguration);},/* harmony export */getValue:function getValue(){return(/* binding */_getValue);},/* harmony export */has:function has(){return(/* binding */_has);},/* harmony export */isInFinalState:function isInFinalState(){return(/* binding */_isInFinalState);},/* harmony export */isLeafNode:function isLeafNode(){return(/* binding */_isLeafNode);},/* harmony export */nextEvents:function nextEvents(){return(/* binding */_nextEvents);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _utils_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./utils.js */\"./node_modules/xstate/es/utils.js\");var _isLeafNode=function _isLeafNode(stateNode){return stateNode.type==='atomic'||stateNode.type==='final';};function _getAllChildren(stateNode){return Object.keys(stateNode.states).map(function(key){return stateNode.states[key];});}function _getChildren(stateNode){return _getAllChildren(stateNode).filter(function(sn){return sn.type!=='history';});}function _getAllStateNodes(stateNode){var stateNodes=[stateNode];if(_isLeafNode(stateNode)){return stateNodes;}return stateNodes.concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(_getChildren(stateNode).map(_getAllStateNodes)));}function _getConfiguration(prevStateNodes,stateNodes){var e_1,_a,e_2,_b,e_3,_c,e_4,_d;var prevConfiguration=new Set(prevStateNodes);var prevAdjList=_getAdjList(prevConfiguration);var configuration=new Set(stateNodes);try{// add all ancestors\nfor(var configuration_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration),configuration_1_1=configuration_1.next();!configuration_1_1.done;configuration_1_1=configuration_1.next()){var s=configuration_1_1.value;var m=s.parent;while(m&&!configuration.has(m)){configuration.add(m);m=m.parent;}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(configuration_1_1&&!configuration_1_1.done&&(_a=configuration_1[\"return\"]))_a.call(configuration_1);}finally{if(e_1)throw e_1.error;}}var adjList=_getAdjList(configuration);try{// add descendants\nfor(var configuration_2=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration),configuration_2_1=configuration_2.next();!configuration_2_1.done;configuration_2_1=configuration_2.next()){var s=configuration_2_1.value;// if previously active, add existing child nodes\nif(s.type==='compound'&&(!adjList.get(s)||!adjList.get(s).length)){if(prevAdjList.get(s)){prevAdjList.get(s).forEach(function(sn){return configuration.add(sn);});}else{s.initialStateNodes.forEach(function(sn){return configuration.add(sn);});}}else{if(s.type==='parallel'){try{for(var _e=(e_3=void 0,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(_getChildren(s))),_f=_e.next();!_f.done;_f=_e.next()){var child=_f.value;if(!configuration.has(child)){configuration.add(child);if(prevAdjList.get(child)){prevAdjList.get(child).forEach(function(sn){return configuration.add(sn);});}else{child.initialStateNodes.forEach(function(sn){return configuration.add(sn);});}}}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(_f&&!_f.done&&(_c=_e[\"return\"]))_c.call(_e);}finally{if(e_3)throw e_3.error;}}}}}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(configuration_2_1&&!configuration_2_1.done&&(_b=configuration_2[\"return\"]))_b.call(configuration_2);}finally{if(e_2)throw e_2.error;}}try{// add all ancestors\nfor(var configuration_3=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration),configuration_3_1=configuration_3.next();!configuration_3_1.done;configuration_3_1=configuration_3.next()){var s=configuration_3_1.value;var m=s.parent;while(m&&!configuration.has(m)){configuration.add(m);m=m.parent;}}}catch(e_4_1){e_4={error:e_4_1};}finally{try{if(configuration_3_1&&!configuration_3_1.done&&(_d=configuration_3[\"return\"]))_d.call(configuration_3);}finally{if(e_4)throw e_4.error;}}return configuration;}function getValueFromAdj(baseNode,adjList){var childStateNodes=adjList.get(baseNode);if(!childStateNodes){return{};// todo: fix?\n}if(baseNode.type==='compound'){var childStateNode=childStateNodes[0];if(childStateNode){if(_isLeafNode(childStateNode)){return childStateNode.key;}}else{return{};}}var stateValue={};childStateNodes.forEach(function(csn){stateValue[csn.key]=getValueFromAdj(csn,adjList);});return stateValue;}function _getAdjList(configuration){var e_5,_a;var adjList=new Map();try{for(var configuration_4=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration),configuration_4_1=configuration_4.next();!configuration_4_1.done;configuration_4_1=configuration_4.next()){var s=configuration_4_1.value;if(!adjList.has(s)){adjList.set(s,[]);}if(s.parent){if(!adjList.has(s.parent)){adjList.set(s.parent,[]);}adjList.get(s.parent).push(s);}}}catch(e_5_1){e_5={error:e_5_1};}finally{try{if(configuration_4_1&&!configuration_4_1.done&&(_a=configuration_4[\"return\"]))_a.call(configuration_4);}finally{if(e_5)throw e_5.error;}}return adjList;}function _getValue(rootNode,configuration){var config=_getConfiguration([rootNode],configuration);return getValueFromAdj(rootNode,_getAdjList(config));}function _has(iterable,item){if(Array.isArray(iterable)){return iterable.some(function(member){return member===item;});}if(iterable instanceof Set){return iterable.has(item);}return false;// TODO: fix\n}function _nextEvents(configuration){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(configuration.map(function(sn){return sn.ownEvents;})),false)))),false);}function _isInFinalState(configuration,stateNode){if(stateNode.type==='compound'){return _getChildren(stateNode).some(function(s){return s.type==='final'&&_has(configuration,s);});}if(stateNode.type==='parallel'){return _getChildren(stateNode).every(function(sn){return _isInFinalState(configuration,sn);});}return false;}function _getMeta(configuration){if(configuration===void 0){configuration=[];}return configuration.reduce(function(acc,stateNode){if(stateNode.meta!==undefined){acc[stateNode.id]=stateNode.meta;}return acc;},{});}function _getTagsFromConfiguration(configuration){return new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(configuration.map(function(sn){return sn.tags;})));}/***/},/***/\"./node_modules/xstate/es/types.js\":/*!*****************************************!*\\\n  !*** ./node_modules/xstate/es/types.js ***!\n  \\*****************************************/ /***/function node_modulesXstateEsTypesJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */ActionTypes:function ActionTypes(){return(/* binding */_ActionTypes);},/* harmony export */SpecialTargets:function SpecialTargets(){return(/* binding */_SpecialTargets);}/* harmony export */});var _ActionTypes;(function(ActionTypes){ActionTypes[\"Start\"]=\"xstate.start\";ActionTypes[\"Stop\"]=\"xstate.stop\";ActionTypes[\"Raise\"]=\"xstate.raise\";ActionTypes[\"Send\"]=\"xstate.send\";ActionTypes[\"Cancel\"]=\"xstate.cancel\";ActionTypes[\"NullEvent\"]=\"\";ActionTypes[\"Assign\"]=\"xstate.assign\";ActionTypes[\"After\"]=\"xstate.after\";ActionTypes[\"DoneState\"]=\"done.state\";ActionTypes[\"DoneInvoke\"]=\"done.invoke\";ActionTypes[\"Log\"]=\"xstate.log\";ActionTypes[\"Init\"]=\"xstate.init\";ActionTypes[\"Invoke\"]=\"xstate.invoke\";ActionTypes[\"ErrorExecution\"]=\"error.execution\";ActionTypes[\"ErrorCommunication\"]=\"error.communication\";ActionTypes[\"ErrorPlatform\"]=\"error.platform\";ActionTypes[\"ErrorCustom\"]=\"xstate.error\";ActionTypes[\"Update\"]=\"xstate.update\";ActionTypes[\"Pure\"]=\"xstate.pure\";ActionTypes[\"Choose\"]=\"xstate.choose\";})(_ActionTypes||(_ActionTypes={}));var _SpecialTargets;(function(SpecialTargets){SpecialTargets[\"Parent\"]=\"#_parent\";SpecialTargets[\"Internal\"]=\"#_internal\";})(_SpecialTargets||(_SpecialTargets={}));/***/},/***/\"./node_modules/xstate/es/utils.js\":/*!*****************************************!*\\\n  !*** ./node_modules/xstate/es/utils.js ***!\n  \\*****************************************/ /***/function node_modulesXstateEsUtilsJs(__unused_webpack_module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__);/* harmony export */__webpack_require__.d(__webpack_exports__,{/* harmony export */createInvokeId:function createInvokeId(){return(/* binding */_createInvokeId);},/* harmony export */evaluateGuard:function evaluateGuard(){return(/* binding */_evaluateGuard);},/* harmony export */flatten:function flatten(){return(/* binding */_flatten);},/* harmony export */getActionType:function getActionType(){return(/* binding */_getActionType);},/* harmony export */getEventType:function getEventType(){return(/* binding */_getEventType);},/* harmony export */interopSymbols:function interopSymbols(){return(/* binding */_interopSymbols);},/* harmony export */isActor:function isActor(){return(/* binding */_isActor2);},/* harmony export */isArray:function isArray(){return(/* binding */_isArray);},/* harmony export */isBehavior:function isBehavior(){return(/* binding */_isBehavior);},/* harmony export */isBuiltInEvent:function isBuiltInEvent(){return(/* binding */_isBuiltInEvent);},/* harmony export */isFunction:function isFunction(){return(/* binding */_isFunction);},/* harmony export */isMachine:function isMachine(){return(/* binding */_isMachine);},/* harmony export */isObservable:function isObservable(){return(/* binding */_isObservable);},/* harmony export */isPromiseLike:function isPromiseLike(){return(/* binding */_isPromiseLike);},/* harmony export */isRaisableAction:function isRaisableAction(){return(/* binding */_isRaisableAction);},/* harmony export */isStateLike:function isStateLike(){return(/* binding */_isStateLike);},/* harmony export */isString:function isString(){return(/* binding */_isString);},/* harmony export */keys:function keys(){return(/* binding */_keys);},/* harmony export */mapContext:function mapContext(){return(/* binding */_mapContext);},/* harmony export */mapFilterValues:function mapFilterValues(){return(/* binding */_mapFilterValues);},/* harmony export */mapValues:function mapValues(){return(/* binding */_mapValues);},/* harmony export */matchesState:function matchesState(){return(/* binding */_matchesState);},/* harmony export */nestedPath:function nestedPath(){return(/* binding */_nestedPath);},/* harmony export */normalizeTarget:function normalizeTarget(){return(/* binding */_normalizeTarget);},/* harmony export */partition:function partition(){return(/* binding */_partition);},/* harmony export */path:function path(){return(/* binding */_path);},/* harmony export */pathToStateValue:function pathToStateValue(){return(/* binding */_pathToStateValue);},/* harmony export */pathsToStateValue:function pathsToStateValue(){return(/* binding */_pathsToStateValue);},/* harmony export */reportUnhandledExceptionOnInvocation:function reportUnhandledExceptionOnInvocation(){return(/* binding */_reportUnhandledExceptionOnInvocation);},/* harmony export */symbolObservable:function symbolObservable(){return(/* binding */_symbolObservable);},/* harmony export */toArray:function toArray(){return(/* binding */_toArray);},/* harmony export */toArrayStrict:function toArrayStrict(){return(/* binding */_toArrayStrict);},/* harmony export */toEventObject:function toEventObject(){return(/* binding */_toEventObject);},/* harmony export */toGuard:function toGuard(){return(/* binding */_toGuard);},/* harmony export */toInvokeSource:function toInvokeSource(){return(/* binding */_toInvokeSource2);},/* harmony export */toObserver:function toObserver(){return(/* binding */_toObserver);},/* harmony export */toSCXMLEvent:function toSCXMLEvent(){return(/* binding */_toSCXMLEvent);},/* harmony export */toStatePath:function toStatePath(){return(/* binding */_toStatePath);},/* harmony export */toStatePaths:function toStatePaths(){return(/* binding */_toStatePaths);},/* harmony export */toStateValue:function toStateValue(){return(/* binding */_toStateValue);},/* harmony export */toTransitionConfigArray:function toTransitionConfigArray(){return(/* binding */_toTransitionConfigArray);},/* harmony export */uniqueId:function uniqueId(){return(/* binding */_uniqueId);},/* harmony export */updateContext:function updateContext(){return(/* binding */_updateContext);},/* harmony export */updateHistoryStates:function updateHistoryStates(){return(/* binding */_updateHistoryStates);},/* harmony export */updateHistoryValue:function updateHistoryValue(){return(/* binding */_updateHistoryValue);},/* harmony export */warn:function warn(){return(/* binding */_warn);}/* harmony export */});/* harmony import */var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(/*! ./_virtual/_tslib.js */\"./node_modules/xstate/es/_virtual/_tslib.js\");/* harmony import */var _types_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(/*! ./types.js */\"./node_modules/xstate/es/types.js\");/* harmony import */var _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(/*! ./actionTypes.js */\"./node_modules/xstate/es/actionTypes.js\");/* harmony import */var _constants_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(/*! ./constants.js */\"./node_modules/xstate/es/constants.js\");/* harmony import */var _environment_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(/*! ./environment.js */\"./node_modules/xstate/es/environment.js\");var _a;function _keys(value){return Object.keys(value);}function _matchesState(parentStateId,childStateId,delimiter){if(delimiter===void 0){delimiter=_constants_js__WEBPACK_IMPORTED_MODULE_0__.STATE_DELIMITER;}var parentStateValue=_toStateValue(parentStateId,delimiter);var childStateValue=_toStateValue(childStateId,delimiter);if(_isString(childStateValue)){if(_isString(parentStateValue)){return childStateValue===parentStateValue;}// Parent more specific than child\nreturn false;}if(_isString(parentStateValue)){return parentStateValue in childStateValue;}return Object.keys(parentStateValue).every(function(key){if(!(key in childStateValue)){return false;}return _matchesState(parentStateValue[key],childStateValue[key]);});}function _getEventType(event){try{return _isString(event)||typeof event==='number'?\"\".concat(event):event.type;}catch(e){throw new Error('Events must be strings or objects with a string event.type property.');}}function _getActionType(action){try{return _isString(action)||typeof action==='number'?\"\".concat(action):_isFunction(action)?action.name:action.type;}catch(e){throw new Error('Actions must be strings or objects with a string action.type property.');}}function _toStatePath(stateId,delimiter){try{if(_isArray(stateId)){return stateId;}return stateId.toString().split(delimiter);}catch(e){throw new Error(\"'\".concat(stateId,\"' is not a valid state path.\"));}}function _isStateLike(state){return _typeof2(state)==='object'&&'value'in state&&'context'in state&&'event'in state&&'_event'in state;}function _toStateValue(stateValue,delimiter){if(_isStateLike(stateValue)){return stateValue.value;}if(_isArray(stateValue)){return _pathToStateValue(stateValue);}if(typeof stateValue!=='string'){return stateValue;}var statePath=_toStatePath(stateValue,delimiter);return _pathToStateValue(statePath);}function _pathToStateValue(statePath){if(statePath.length===1){return statePath[0];}var value={};var marker=value;for(var i=0;i<statePath.length-1;i++){if(i===statePath.length-2){marker[statePath[i]]=statePath[i+1];}else{marker[statePath[i]]={};marker=marker[statePath[i]];}}return value;}function _mapValues(collection,iteratee){var result={};var collectionKeys=Object.keys(collection);for(var i=0;i<collectionKeys.length;i++){var key=collectionKeys[i];result[key]=iteratee(collection[key],key,collection,i);}return result;}function _mapFilterValues(collection,iteratee,predicate){var e_1,_a;var result={};try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(collection)),_c=_b.next();!_c.done;_c=_b.next()){var key=_c.value;var item=collection[key];if(!predicate(item)){continue;}result[key]=iteratee(item,key,collection);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_1)throw e_1.error;}}return result;}/**\r\n * Retrieves a value at the given path.\r\n * @param props The deep path to the prop of the desired value\r\n */var _path=function _path(props){return function(object){var e_2,_a;var result=object;try{for(var props_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props),props_1_1=props_1.next();!props_1_1.done;props_1_1=props_1.next()){var prop=props_1_1.value;result=result[prop];}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(props_1_1&&!props_1_1.done&&(_a=props_1[\"return\"]))_a.call(props_1);}finally{if(e_2)throw e_2.error;}}return result;};};/**\r\n * Retrieves a value at the given path via the nested accessor prop.\r\n * @param props The deep path to the prop of the desired value\r\n */function _nestedPath(props,accessorProp){return function(object){var e_3,_a;var result=object;try{for(var props_2=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props),props_2_1=props_2.next();!props_2_1.done;props_2_1=props_2.next()){var prop=props_2_1.value;result=result[accessorProp][prop];}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(props_2_1&&!props_2_1.done&&(_a=props_2[\"return\"]))_a.call(props_2);}finally{if(e_3)throw e_3.error;}}return result;};}function _toStatePaths(stateValue){if(!stateValue){return[[]];}if(_isString(stateValue)){return[[stateValue]];}var result=_flatten(Object.keys(stateValue).map(function(key){var subStateValue=stateValue[key];if(typeof subStateValue!=='string'&&(!subStateValue||!Object.keys(subStateValue).length)){return[[key]];}return _toStatePaths(stateValue[key]).map(function(subPath){return[key].concat(subPath);});}));return result;}function _pathsToStateValue(paths){var e_4,_a;var result={};if(paths&&paths.length===1&&paths[0].length===1){return paths[0][0];}try{for(var paths_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(paths),paths_1_1=paths_1.next();!paths_1_1.done;paths_1_1=paths_1.next()){var currentPath=paths_1_1.value;var marker=result;// tslint:disable-next-line:prefer-for-of\nfor(var i=0;i<currentPath.length;i++){var subPath=currentPath[i];if(i===currentPath.length-2){marker[subPath]=currentPath[i+1];break;}marker[subPath]=marker[subPath]||{};marker=marker[subPath];}}}catch(e_4_1){e_4={error:e_4_1};}finally{try{if(paths_1_1&&!paths_1_1.done&&(_a=paths_1[\"return\"]))_a.call(paths_1);}finally{if(e_4)throw e_4.error;}}return result;}function _flatten(array){var _a;return(_a=[]).concat.apply(_a,(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([],(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(array),false));}function _toArrayStrict(value){if(_isArray(value)){return value;}return[value];}function _toArray(value){if(value===undefined){return[];}return _toArrayStrict(value);}function _mapContext(mapper,context,_event){var e_5,_a;if(_isFunction(mapper)){return mapper(context,_event.data);}var result={};try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(mapper)),_c=_b.next();!_c.done;_c=_b.next()){var key=_c.value;var subMapper=mapper[key];if(_isFunction(subMapper)){result[key]=subMapper(context,_event.data);}else{result[key]=subMapper;}}}catch(e_5_1){e_5={error:e_5_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_5)throw e_5.error;}}return result;}function _isBuiltInEvent(eventType){return /^(done|error)\\./.test(eventType);}function _isPromiseLike(value){if(value instanceof Promise){return true;}// Check if shape matches the Promise/A+ specification for a \"thenable\".\nif(value!==null&&(_isFunction(value)||_typeof2(value)==='object')&&_isFunction(value.then)){return true;}return false;}function _isBehavior(value){return value!==null&&_typeof2(value)==='object'&&'transition'in value&&typeof value.transition==='function';}function _partition(items,predicate){var e_6,_a;var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)([[],[]],2),truthy=_b[0],falsy=_b[1];try{for(var items_1=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(items),items_1_1=items_1.next();!items_1_1.done;items_1_1=items_1.next()){var item=items_1_1.value;if(predicate(item)){truthy.push(item);}else{falsy.push(item);}}}catch(e_6_1){e_6={error:e_6_1};}finally{try{if(items_1_1&&!items_1_1.done&&(_a=items_1[\"return\"]))_a.call(items_1);}finally{if(e_6)throw e_6.error;}}return[truthy,falsy];}function _updateHistoryStates(hist,stateValue){return _mapValues(hist.states,function(subHist,key){if(!subHist){return undefined;}var subStateValue=(_isString(stateValue)?undefined:stateValue[key])||(subHist?subHist.current:undefined);if(!subStateValue){return undefined;}return{current:subStateValue,states:_updateHistoryStates(subHist,subStateValue)};});}function _updateHistoryValue(hist,stateValue){return{current:stateValue,states:_updateHistoryStates(hist,stateValue)};}function _updateContext(context,_event,assignActions,state){if(!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION){_warn(!!context,'Attempting to update undefined context');}var updatedContext=context?assignActions.reduce(function(acc,assignAction){var e_7,_a;var assignment=assignAction.assignment;var meta={state:state,action:assignAction,_event:_event};var partialUpdate={};if(_isFunction(assignment)){partialUpdate=assignment(acc,_event.data,meta);}else{try{for(var _b=(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(assignment)),_c=_b.next();!_c.done;_c=_b.next()){var key=_c.value;var propAssignment=assignment[key];partialUpdate[key]=_isFunction(propAssignment)?propAssignment(acc,_event.data,meta):propAssignment;}}catch(e_7_1){e_7={error:e_7_1};}finally{try{if(_c&&!_c.done&&(_a=_b[\"return\"]))_a.call(_b);}finally{if(e_7)throw e_7.error;}}}return Object.assign({},acc,partialUpdate);},context):context;return updatedContext;}// tslint:disable-next-line:no-empty\nvar _warn=function _warn(){};if(!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION){_warn=function _warn(condition,message){var error=condition instanceof Error?condition:undefined;if(!error&&condition){return;}if(console!==undefined){var args=[\"Warning: \".concat(message)];if(error){args.push(error);}// tslint:disable-next-line:no-console\nconsole.warn.apply(console,args);}};}function _isArray(value){return Array.isArray(value);}// tslint:disable-next-line:ban-types\nfunction _isFunction(value){return typeof value==='function';}function _isString(value){return typeof value==='string';}function _toGuard(condition,guardMap){if(!condition){return undefined;}if(_isString(condition)){return{type:_constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,name:condition,predicate:guardMap?guardMap[condition]:undefined};}if(_isFunction(condition)){return{type:_constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,name:condition.name,predicate:condition};}return condition;}function _isObservable(value){try{return'subscribe'in value&&_isFunction(value.subscribe);}catch(e){return false;}}var _symbolObservable=/*#__PURE__*/function(){return typeof Symbol==='function'&&Symbol.observable||'@@observable';}();// TODO: to be removed in v5, left it out just to minimize the scope of the change and maintain compatibility with older versions of integration paackages\nvar _interopSymbols=(_a={},_a[_symbolObservable]=function(){return this;},_a[Symbol.observable]=function(){return this;},_a);function _isMachine(value){return!!value&&'__xstatenode'in value;}function _isActor2(value){return!!value&&typeof value.send==='function';}var _uniqueId=/*#__PURE__*/function(){var currentId=0;return function(){currentId++;return currentId.toString(16);};}();function _toEventObject(event,payload// id?: TEvent['type']\n){if(_isString(event)||typeof event==='number'){return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({type:event},payload);}return event;}function _toSCXMLEvent(event,scxmlEvent){if(!_isString(event)&&'$$type'in event&&event.$$type==='scxml'){return event;}var eventObject=_toEventObject(event);return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({name:eventObject.type,data:eventObject,$$type:'scxml',type:'external'},scxmlEvent);}function _toTransitionConfigArray(event,configLike){var transitions=_toArrayStrict(configLike).map(function(transitionLike){if(typeof transitionLike==='undefined'||typeof transitionLike==='string'||_isMachine(transitionLike)){return{target:transitionLike,event:event};}return(0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({},transitionLike),{event:event});});return transitions;}function _normalizeTarget(target){if(target===undefined||target===_constants_js__WEBPACK_IMPORTED_MODULE_0__.TARGETLESS_KEY){return undefined;}return _toArray(target);}function _reportUnhandledExceptionOnInvocation(originalError,currentError,id){if(!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION){var originalStackTrace=originalError.stack?\" Stacktrace was '\".concat(originalError.stack,\"'\"):'';if(originalError===currentError){// tslint:disable-next-line:no-console\nconsole.error(\"Missing onError handler for invocation '\".concat(id,\"', error was '\").concat(originalError,\"'.\").concat(originalStackTrace));}else{var stackTrace=currentError.stack?\" Stacktrace was '\".concat(currentError.stack,\"'\"):'';// tslint:disable-next-line:no-console\nconsole.error(\"Missing onError handler and/or unhandled exception/promise rejection for invocation '\".concat(id,\"'. \")+\"Original error: '\".concat(originalError,\"'. \").concat(originalStackTrace,\" Current error is '\").concat(currentError,\"'.\").concat(stackTrace));}}}function _evaluateGuard(machine,guard,context,_event,state){var guards=machine.options.guards;var guardMeta={state:state,cond:guard,_event:_event};// TODO: do not hardcode!\nif(guard.type===_constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE){return((guards===null||guards===void 0?void 0:guards[guard.name])||guard.predicate)(context,_event.data,guardMeta);}var condFn=guards===null||guards===void 0?void 0:guards[guard.type];if(!condFn){throw new Error(\"Guard '\".concat(guard.type,\"' is not implemented on machine '\").concat(machine.id,\"'.\"));}return condFn(context,_event.data,guardMeta);}function _toInvokeSource2(src){if(typeof src==='string'){return{type:src};}return src;}function _toObserver(nextHandler,errorHandler,completionHandler){var noop=function noop(){};var isObserver=_typeof2(nextHandler)==='object';var self=isObserver?nextHandler:null;return{next:((isObserver?nextHandler.next:nextHandler)||noop).bind(self),error:((isObserver?nextHandler.error:errorHandler)||noop).bind(self),complete:((isObserver?nextHandler.complete:completionHandler)||noop).bind(self)};}function _createInvokeId(stateNodeId,index){return\"\".concat(stateNodeId,\":invocation[\").concat(index,\"]\");}function _isRaisableAction(action){return(action.type===_actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.raise||action.type===_actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.send&&action.to===_types_js__WEBPACK_IMPORTED_MODULE_4__.SpecialTargets.Internal)&&typeof action.delay!=='number';}/***/}/******/};/************************************************************************/ /******/ // The module cache\n/******/var __webpack_module_cache__={};/******/ /******/ // The require function\n/******/function __webpack_require__(moduleId){/******/ // Check if module is in cache\n/******/var cachedModule=__webpack_module_cache__[moduleId];/******/if(cachedModule!==undefined){/******/return cachedModule.exports;/******/}/******/ // Create a new module (and put it into the cache)\n/******/var module=__webpack_module_cache__[moduleId]={/******/ // no module.id needed\n/******/ // no module.loaded needed\n/******/exports:{}/******/};/******/ /******/ // Execute the module function\n/******/__webpack_modules__[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******/ /******/ // Return the exports of the module\n/******/return module.exports;/******/}/******/ /************************************************************************/ /******/ /* webpack/runtime/compat get default export */ /******/(function(){/******/ // getDefaultExport function for compatibility with non-harmony modules\n/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function(){return module['default'];}:/******/function(){return module;};/******/__webpack_require__.d(getter,{a:getter});/******/return getter;/******/};/******/})();/******/ /******/ /* webpack/runtime/define property getters */ /******/(function(){/******/ // define getter functions for harmony exports\n/******/__webpack_require__.d=function(exports,definition){/******/for(var key in definition){/******/if(__webpack_require__.o(definition,key)&&!__webpack_require__.o(exports,key)){/******/Object.defineProperty(exports,key,{enumerable:true,get:definition[key]});/******/}/******/}/******/};/******/})();/******/ /******/ /* webpack/runtime/global */ /******/(function(){/******/__webpack_require__.g=function(){/******/if((typeof globalThis===\"undefined\"?\"undefined\":_typeof2(globalThis))==='object')return globalThis;/******/try{/******/return this||new Function('return this')();/******/}catch(e){/******/if((typeof window===\"undefined\"?\"undefined\":_typeof2(window))==='object')return window;/******/}/******/}();/******/})();/******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/(function(){/******/__webpack_require__.o=function(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);};/******/})();/******/ /******/ /* webpack/runtime/make namespace object */ /******/(function(){/******/ // define __esModule on exports\n/******/__webpack_require__.r=function(exports){/******/if(typeof Symbol!=='undefined'&&Symbol.toStringTag){/******/Object.defineProperty(exports,Symbol.toStringTag,{value:'Module'});/******/}/******/Object.defineProperty(exports,'__esModule',{value:true});/******/};/******/})();/******/ /************************************************************************/var __webpack_exports__={};// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n(function(){/*!****************************!*\\\n  !*** ./src/AudioModule.js ***!\n  \\****************************/function _typeof(obj){\"@babel/helpers - typeof\";return _typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&\"function\"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;},_typeof(obj);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _defineProperty(obj,key,value){key=_toPropertyKey(key);if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _toPropertyKey(arg){var key=_toPrimitive(arg,\"string\");return _typeof(key)===\"symbol\"?key:String(key);}function _toPrimitive(input,hint){if(_typeof(input)!==\"object\"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||\"default\");if(_typeof(res)!==\"object\")return res;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(hint===\"string\"?String:Number)(input);}// import state machines for audio input and output\nvar _require=__webpack_require__(/*! xstate */\"./node_modules/xstate/es/index.js\"),interpret=_require.interpret;var _require2=__webpack_require__(/*! ./state-machines/AudioInputMachine */\"./src/state-machines/AudioInputMachine.js\"),audioInputMachine=_require2.audioInputMachine;var _require3=__webpack_require__(/*! ./state-machines/AudioOutputMachine */\"./src/state-machines/AudioOutputMachine.js\"),audioOutputMachine=_require3.audioOutputMachine;var _require4=__webpack_require__(/*! ./LoggingModule */\"./src/LoggingModule.js\"),serializeStateValue=_require4.serializeStateValue;// depends on the injecting script (saypi.index.js) declaring the EventBus as a global variable\nvar EventBus=window.EventBus;// audio output (Pi)\nvar audioElement=document.querySelector(\"audio\");if(!audioElement){console.error(\"Audio element not found!\");}else{audioElement.preload=\"auto\";// enable aggressive preloading of audio\n}var audioOutputActor=interpret(audioOutputMachine).onTransition(function(state){if(state.changed){var fromState=state.history?serializeStateValue(state.history.value):\"N/A\";var toState=serializeStateValue(state.value);console.log(\"Audio Output Machine transitioned from \".concat(fromState,\" to \").concat(toState,\" with \").concat(state.event.type));console.log(state.context);}}).start();function registerAudioPlaybackEvents(audio,actor){var events=[\"loadstart\",\"loadedmetadata\",\"canplaythrough\",\"play\",\"pause\",\"ended\",\"seeked\",\"emptied\"];events.forEach(function(event){audio.addEventListener(event,function(){return actor.send(event);});});audio.addEventListener(\"playing\",function(){actor.send(\"play\");});}registerAudioPlaybackEvents(audioElement,audioOutputActor);// audio input (user)\nvar audioInputActor=interpret(audioInputMachine).onTransition(function(state){if(state.changed){var fromState=state.history?serializeStateValue(state.history.value):\"N/A\";var toState=serializeStateValue(state.value);console.log(\"Audio Input Machine transitioned from \".concat(fromState,\" to \").concat(toState,\" with \").concat(state.event.type));console.log(state.context);}}).start();/* These events are used to control/pass requests to the audio module from other modules */function registerAudioCommands(){// audio input (recording) commands\nEventBus.on(\"audio:setupRecording\",function(e){audioInputActor.send(\"acquire\");});EventBus.on(\"audio:tearDownRecording\",function(e){audioInputActor.send(\"release\");});EventBus.on(\"audio:startRecording\",function(e){// Check if Pi is currently speaking and stop her audio\naudioOutputActor.send(\"pause\");// Check if the MediaRecorder is acquired before starting?\naudioInputActor.send([\"acquire\",\"start\"]);});EventBus.on(\"audio:stopRecording\",function(e){audioInputActor.send(\"stopRequested\");/* resume or cancel Pi's audio */ /* TODO: reassess how to handle interruptions\n    audioOutputActor.send(\"play\"); // resume Pi's audio\n    audioOutputActor.send(\"stop\"); // cancel Pi's audio\n    */});// audio input (recording) events (pass media recorder events -> audio input machine actor)\nEventBus.on(\"audio:dataavailable\",function(detail){audioInputActor.send(_objectSpread({type:\"dataAvailable\"},detail));});EventBus.on(\"audio:input:stop\",function(e){audioInputActor.send(\"stop\");});// audio output (playback) commands\nEventBus.on(\"audio:reload\",function(e){audioOutputActor.send(\"reload\");});}registerAudioCommands();})();/******/})();");

/***/ }),

/***/ "./src/icons/exit.svg":
/*!****************************!*\
  !*** ./src/icons/exit.svg ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64.06 64.33\">\n  <defs>\n    <style>\n      .cls-1 {\n        fill: #24381b;\n      }\n\n      .cls-1, .cls-2 {\n        stroke-width: 0px;\n      }\n\n      .cls-2 {\n        fill: #dfd7c2;\n      }\n    </style>\n  </defs>\n  <path class=\"cls-2\" d=\"m31.71,64.32C14.77,64.46-.44,49.93,0,31.33.41,14.47,14.29-.32,32.7,0c16.91.3,31.8,14.32,31.36,33.14-.39,16.76-14.49,31.55-32.34,31.18Zm10.67-23.19c.06-.7-.41-1.12-.84-1.55-2-2-3.94-4.07-6.02-5.97-1.14-1.04-1.32-1.68-.06-2.82,2.13-1.93,4.07-4.08,6.1-6.12.78-.79,1.31-1.64.34-2.56-.92-.87-1.72-.28-2.43.45-2.17,2.21-4.39,4.39-6.52,6.65-.72.77-1.16.7-1.84-.02-2.06-2.17-4.19-4.28-6.29-6.41-.76-.77-1.59-1.68-2.66-.63-1.14,1.12-.19,1.98.62,2.79,2.07,2.09,4.09,4.22,6.2,6.26.77.75.82,1.2.02,1.97-2.21,2.1-4.33,4.3-6.49,6.45-.79.78-1.3,1.65-.32,2.56.92.85,1.71.26,2.43-.47,2.11-2.12,4.28-4.19,6.33-6.38.88-.94,1.37-.86,2.21.03,2.13,2.26,4.37,4.41,6.57,6.6.51.51,1.09.78,1.8.48.56-.24.85-.68.87-1.3Z\"/>\n  <path class=\"cls-1\" d=\"m42.47,41.27c-.02.62-.32,1.06-.87,1.3-.71.31-1.29.03-1.8-.48-2.2-2.2-4.44-4.35-6.57-6.6-.84-.89-1.33-.96-2.21-.03-2.04,2.19-4.22,4.25-6.33,6.38-.72.72-1.51,1.32-2.43.47-.98-.91-.47-1.78.32-2.56,2.16-2.15,4.28-4.35,6.49-6.45.81-.77.76-1.22-.02-1.97-2.11-2.04-4.13-4.17-6.2-6.26-.8-.81-1.75-1.67-.62-2.79,1.07-1.05,1.9-.14,2.66.63,2.1,2.13,4.23,4.24,6.29,6.41.69.73,1.12.79,1.84.02,2.13-2.26,4.35-4.43,6.52-6.65.72-.73,1.51-1.31,2.43-.45.97.92.44,1.78-.34,2.56-2.03,2.04-3.97,4.19-6.1,6.12-1.25,1.14-1.08,1.78.06,2.82,2.09,1.91,4.02,3.97,6.02,5.97.43.43.9.85.84,1.55Z\"/>\n</svg>");

/***/ }),

/***/ "./src/icons/maximize.svg":
/*!********************************!*\
  !*** ./src/icons/maximize.svg ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" zoomAndPan=\"magnify\" viewBox=\"0 0 768 767.999994\" preserveAspectRatio=\"xMidYMid meet\" version=\"1.0\"><path fill=\"#e4d8c1\" d=\"M 768.132812 379.535156 C 768.132812 169.089844 597.523438 -1.496094 387.050781 -1.496094 C 176.609375 -1.496094 5.996094 169.089844 5.996094 379.535156 C 5.996094 589.949219 176.609375 760.539062 387.050781 760.539062 C 597.523438 760.539062 768.132812 589.949219 768.132812 379.535156 \" fill-opacity=\"1\" fill-rule=\"nonzero\"/><path fill=\"#776d6d\" d=\"M 538.996094 223.152344 L 306.535156 229.855469 L 538.996094 455.695312 Z M 538.996094 223.152344 \" fill-opacity=\"1\" fill-rule=\"nonzero\"/><path fill=\"#776d6d\" d=\"M 235.105469 535.890625 L 467.597656 529.1875 L 235.105469 303.34375 Z M 235.105469 535.890625 \" fill-opacity=\"1\" fill-rule=\"nonzero\"/></svg>");

/***/ }),

/***/ "./src/icons/muted_microphone.svg":
/*!****************************************!*\
  !*** ./src/icons/muted_microphone.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"500\" zoomAndPan=\"magnify\" viewBox=\"0 0 375 374.999991\" height=\"500\" preserveAspectRatio=\"xMidYMid meet\" version=\"1.0\"><path fill=\"#776d6d\" d=\"M 239.722656 126.441406 L 239.722656 122.300781 C 239.722656 93.507812 216.296875 70.078125 187.5 70.078125 C 158.703125 70.078125 135.277344 93.507812 135.277344 122.300781 L 135.277344 187.953125 C 135.277344 199.988281 139.410156 211.050781 146.273438 219.890625 Z M 239.722656 126.441406 \" fill-opacity=\"1\" fill-rule=\"nonzero\"/><path fill=\"#776d6d\" d=\"M 155.046875 228.792969 C 163.964844 235.898438 175.234375 240.175781 187.5 240.175781 C 216.296875 240.175781 239.722656 216.75 239.722656 187.953125 L 239.722656 144.113281 Z M 155.046875 228.792969 \" fill-opacity=\"1\" fill-rule=\"nonzero\"/><path fill=\"#776d6d\" d=\"M 187.5 0 C 83.945312 0 0 83.945312 0 187.5 C 0 291.054688 83.945312 375 187.5 375 C 291.054688 375 375 291.054688 375 187.5 C 375 83.945312 291.054688 0 187.5 0 Z M 287.484375 96.355469 L 254.640625 129.195312 L 254.640625 187.953125 C 254.640625 224.976562 224.523438 255.097656 187.5 255.097656 C 171.117188 255.097656 156.105469 249.183594 144.4375 239.402344 L 138.109375 245.730469 C 151.417969 257.121094 168.652344 264.046875 187.5 264.046875 C 229.457031 264.046875 263.59375 229.914062 263.59375 187.953125 C 263.59375 183.832031 266.933594 180.496094 271.054688 180.496094 C 275.175781 180.496094 278.515625 183.835938 278.515625 187.953125 C 278.515625 235.625 241.667969 274.828125 194.960938 278.640625 L 194.960938 304.921875 L 220.121094 304.921875 C 224.242188 304.921875 227.582031 308.261719 227.582031 312.382812 C 227.582031 316.5 224.242188 319.839844 220.121094 319.839844 L 154.875 319.839844 C 150.757812 319.839844 147.417969 316.5 147.417969 312.382812 C 147.417969 308.261719 150.757812 304.921875 154.875 304.921875 L 180.039062 304.921875 L 180.039062 278.636719 C 160.007812 277.003906 141.816406 268.824219 127.542969 256.296875 L 96.351562 287.484375 C 95.132812 288.703125 93.53125 289.316406 91.933594 289.316406 C 90.335938 289.316406 88.734375 288.703125 87.515625 287.484375 C 85.074219 285.042969 85.074219 281.085938 87.515625 278.644531 L 118.761719 247.398438 C 104.929688 231.4375 96.484375 210.6875 96.484375 187.953125 C 96.484375 183.832031 99.824219 180.496094 103.941406 180.496094 C 108.0625 180.496094 111.402344 183.835938 111.402344 187.953125 C 111.402344 206.574219 118.148438 223.628906 129.292969 236.867188 L 135.628906 230.53125 C 126.089844 218.9375 120.355469 204.105469 120.355469 187.953125 L 120.355469 122.300781 C 120.355469 85.28125 150.476562 55.160156 187.496094 55.160156 C 221.128906 55.160156 248.980469 80.039062 253.816406 112.34375 L 278.640625 87.515625 C 281.082031 85.078125 285.039062 85.078125 287.480469 87.515625 C 289.925781 89.957031 289.925781 93.914062 287.484375 96.355469 Z M 287.484375 96.355469 \" fill-opacity=\"1\" fill-rule=\"nonzero\"/></svg>");

/***/ }),

/***/ "./src/icons/play.svg":
/*!****************************!*\
  !*** ./src/icons/play.svg ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    zoomAndPan=\"magnify\" viewBox=\"0 0 375 374.999991\"\n    preserveAspectRatio=\"xMidYMid meet\" version=\"1.0\">\n    <defs>\n        <filter x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\" id=\"ee10b8e1b3\">\n            <feColorMatrix values=\"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0\"\n                color-interpolation-filters=\"sRGB\" />\n        </filter>\n        <mask id=\"e7d148bedc\">\n            <g filter=\"url(#ee10b8e1b3)\">\n                <rect x=\"-37.5\" width=\"450\" fill=\"#000000\" y=\"-37.499999\" height=\"449.999989\"\n                    fill-opacity=\"0.55\" />\n            </g>\n        </mask>\n        <clipPath id=\"9ca5135f77\">\n            <rect x=\"0\" width=\"375\" y=\"0\" height=\"375\" />\n        </clipPath>\n    </defs>\n    <g mask=\"url(#e7d148bedc)\">\n        <g transform=\"matrix(1, 0, 0, 1, 0, 0)\">\n            <g clip-path=\"url(#9ca5135f77)\">\n                <path fill=\"#418a2f\"\n                    d=\"M 375 187.5 C 375 190.570312 374.925781 193.636719 374.773438 196.699219 C 374.625 199.765625 374.398438 202.824219 374.097656 205.878906 C 373.796875 208.933594 373.421875 211.976562 372.96875 215.011719 C 372.519531 218.046875 371.996094 221.070312 371.398438 224.078125 C 370.796875 227.089844 370.125 230.082031 369.382812 233.058594 C 368.636719 236.035156 367.816406 238.992188 366.925781 241.929688 C 366.035156 244.863281 365.074219 247.777344 364.039062 250.667969 C 363.003906 253.554688 361.902344 256.417969 360.726562 259.253906 C 359.554688 262.089844 358.308594 264.894531 356.996094 267.667969 C 355.6875 270.441406 354.308594 273.179688 352.859375 275.886719 C 351.414062 278.59375 349.902344 281.261719 348.324219 283.894531 C 346.746094 286.527344 345.105469 289.117188 343.402344 291.667969 C 341.695312 294.222656 339.929688 296.730469 338.101562 299.195312 C 336.273438 301.660156 334.386719 304.078125 332.441406 306.449219 C 330.492188 308.820312 328.488281 311.144531 326.429688 313.417969 C 324.367188 315.691406 322.253906 317.914062 320.082031 320.082031 C 317.914062 322.253906 315.691406 324.367188 313.417969 326.429688 C 311.144531 328.488281 308.820312 330.492188 306.449219 332.441406 C 304.078125 334.386719 301.660156 336.273438 299.195312 338.101562 C 296.730469 339.929688 294.222656 341.695312 291.667969 343.402344 C 289.117188 345.105469 286.527344 346.746094 283.894531 348.324219 C 281.261719 349.902344 278.59375 351.414062 275.886719 352.859375 C 273.179688 354.308594 270.441406 355.6875 267.667969 356.996094 C 264.890625 358.308594 262.089844 359.554688 259.253906 360.726562 C 256.417969 361.902344 253.554688 363.003906 250.667969 364.039062 C 247.777344 365.074219 244.863281 366.035156 241.929688 366.925781 C 238.992188 367.816406 236.035156 368.636719 233.058594 369.378906 C 230.082031 370.125 227.089844 370.796875 224.078125 371.398438 C 221.070312 371.996094 218.046875 372.519531 215.011719 372.96875 C 211.976562 373.421875 208.933594 373.796875 205.878906 374.097656 C 202.824219 374.398438 199.765625 374.625 196.699219 374.773438 C 193.636719 374.925781 190.570312 375 187.5 375 C 184.429688 375 181.363281 374.925781 178.300781 374.773438 C 175.234375 374.625 172.175781 374.398438 169.121094 374.097656 C 166.066406 373.796875 163.023438 373.421875 159.988281 372.96875 C 156.953125 372.519531 153.929688 371.996094 150.921875 371.398438 C 147.910156 370.796875 144.917969 370.125 141.941406 369.378906 C 138.964844 368.636719 136.007812 367.816406 133.070312 366.925781 C 130.136719 366.035156 127.222656 365.074219 124.332031 364.039062 C 121.445312 363.003906 118.582031 361.902344 115.746094 360.726562 C 112.910156 359.554688 110.105469 358.308594 107.332031 356.996094 C 104.558594 355.6875 101.820312 354.308594 99.113281 352.859375 C 96.40625 351.414062 93.738281 349.902344 91.105469 348.324219 C 88.472656 346.746094 85.882812 345.105469 83.332031 343.402344 C 80.777344 341.695312 78.269531 339.929688 75.804688 338.101562 C 73.339844 336.273438 70.921875 334.386719 68.550781 332.4375 C 66.179688 330.492188 63.855469 328.488281 61.582031 326.429688 C 59.308594 324.367188 57.085938 322.253906 54.917969 320.082031 C 52.746094 317.914062 50.632812 315.691406 48.570312 313.417969 C 46.511719 311.144531 44.507812 308.820312 42.5625 306.449219 C 40.613281 304.078125 38.726562 301.660156 36.898438 299.195312 C 35.070312 296.730469 33.304688 294.222656 31.597656 291.667969 C 29.894531 289.117188 28.253906 286.527344 26.675781 283.894531 C 25.097656 281.261719 23.585938 278.59375 22.140625 275.886719 C 20.691406 273.179688 19.3125 270.441406 18.003906 267.667969 C 16.691406 264.894531 15.445312 262.089844 14.273438 259.253906 C 13.097656 256.417969 11.996094 253.554688 10.960938 250.667969 C 9.925781 247.777344 8.964844 244.863281 8.074219 241.929688 C 7.183594 238.992188 6.363281 236.035156 5.617188 233.058594 C 4.875 230.082031 4.203125 227.089844 3.601562 224.078125 C 3.003906 221.070312 2.480469 218.046875 2.03125 215.011719 C 1.578125 211.976562 1.203125 208.933594 0.902344 205.878906 C 0.601562 202.824219 0.375 199.765625 0.226562 196.699219 C 0.0742188 193.636719 0 190.570312 0 187.5 C 0 184.429688 0.0742188 181.363281 0.226562 178.300781 C 0.375 175.234375 0.601562 172.175781 0.902344 169.121094 C 1.203125 166.066406 1.578125 163.023438 2.03125 159.988281 C 2.480469 156.953125 3.003906 153.929688 3.601562 150.921875 C 4.203125 147.910156 4.875 144.917969 5.617188 141.941406 C 6.363281 138.964844 7.183594 136.007812 8.074219 133.070312 C 8.964844 130.136719 9.925781 127.222656 10.960938 124.332031 C 11.996094 121.445312 13.097656 118.582031 14.273438 115.746094 C 15.445312 112.910156 16.691406 110.105469 18.003906 107.332031 C 19.3125 104.558594 20.691406 101.820312 22.140625 99.113281 C 23.585938 96.40625 25.097656 93.738281 26.675781 91.105469 C 28.253906 88.472656 29.894531 85.882812 31.597656 83.332031 C 33.304688 80.777344 35.070312 78.269531 36.898438 75.804688 C 38.726562 73.339844 40.613281 70.921875 42.5625 68.550781 C 44.507812 66.179688 46.511719 63.855469 48.570312 61.582031 C 50.632812 59.308594 52.746094 57.085938 54.917969 54.917969 C 57.085938 52.746094 59.308594 50.632812 61.582031 48.570312 C 63.855469 46.511719 66.179688 44.507812 68.550781 42.558594 C 70.921875 40.613281 73.339844 38.726562 75.804688 36.898438 C 78.269531 35.070312 80.777344 33.304688 83.332031 31.597656 C 85.882812 29.894531 88.472656 28.253906 91.105469 26.675781 C 93.738281 25.097656 96.40625 23.585938 99.113281 22.140625 C 101.820312 20.691406 104.558594 19.3125 107.332031 18.003906 C 110.105469 16.691406 112.910156 15.445312 115.746094 14.273438 C 118.582031 13.097656 121.445312 11.996094 124.332031 10.960938 C 127.222656 9.925781 130.136719 8.964844 133.070312 8.074219 C 136.007812 7.183594 138.964844 6.363281 141.941406 5.621094 C 144.917969 4.875 147.910156 4.203125 150.921875 3.601562 C 153.929688 3.003906 156.953125 2.480469 159.988281 2.03125 C 163.023438 1.578125 166.066406 1.203125 169.121094 0.902344 C 172.175781 0.601562 175.234375 0.375 178.300781 0.226562 C 181.363281 0.0742188 184.429688 0 187.5 0 C 190.570312 0 193.636719 0.0742188 196.699219 0.226562 C 199.765625 0.375 202.824219 0.601562 205.878906 0.902344 C 208.933594 1.203125 211.976562 1.578125 215.011719 2.03125 C 218.046875 2.480469 221.070312 3.003906 224.078125 3.601562 C 227.089844 4.203125 230.082031 4.875 233.058594 5.617188 C 236.035156 6.363281 238.992188 7.183594 241.929688 8.074219 C 244.863281 8.964844 247.777344 9.925781 250.667969 10.960938 C 253.554688 11.996094 256.417969 13.097656 259.253906 14.273438 C 262.089844 15.445312 264.894531 16.691406 267.667969 18.003906 C 270.441406 19.3125 273.179688 20.691406 275.886719 22.140625 C 278.59375 23.585938 281.261719 25.097656 283.894531 26.675781 C 286.527344 28.253906 289.117188 29.894531 291.667969 31.597656 C 294.222656 33.304688 296.730469 35.070312 299.195312 36.898438 C 301.660156 38.726562 304.078125 40.613281 306.449219 42.558594 C 308.820312 44.507812 311.144531 46.511719 313.417969 48.570312 C 315.691406 50.632812 317.914062 52.746094 320.082031 54.917969 C 322.253906 57.085938 324.367188 59.308594 326.429688 61.582031 C 328.488281 63.855469 330.492188 66.179688 332.441406 68.550781 C 334.386719 70.921875 336.273438 73.339844 338.101562 75.804688 C 339.929688 78.269531 341.695312 80.777344 343.402344 83.332031 C 345.105469 85.882812 346.746094 88.472656 348.324219 91.105469 C 349.902344 93.738281 351.414062 96.40625 352.859375 99.113281 C 354.308594 101.820312 355.6875 104.558594 356.996094 107.332031 C 358.308594 110.105469 359.554688 112.910156 360.726562 115.746094 C 361.902344 118.582031 363.003906 121.445312 364.039062 124.332031 C 365.074219 127.222656 366.035156 130.136719 366.925781 133.070312 C 367.816406 136.007812 368.636719 138.964844 369.382812 141.941406 C 370.125 144.917969 370.796875 147.910156 371.398438 150.921875 C 371.996094 153.929688 372.519531 156.953125 372.96875 159.988281 C 373.421875 163.023438 373.796875 166.066406 374.097656 169.121094 C 374.398438 172.175781 374.625 175.234375 374.773438 178.300781 C 374.925781 181.363281 375 184.429688 375 187.5 Z M 375 187.5 \"\n                    fill-opacity=\"1\" fill-rule=\"nonzero\" />\n            </g>\n        </g>\n    </g>\n    <path fill=\"#ffffff\"\n        d=\"M 290.066406 188.304688 L 141.457031 280.796875 C 134.203125 288.050781 121.707031 282.914062 121.707031 272.636719 L 121.40625 102.566406 C 121.40625 92.289062 133.800781 87.152344 141.152344 94.40625 L 290.066406 171.882812 C 294.601562 176.519531 294.601562 183.773438 290.066406 188.304688 Z M 290.066406 188.304688 \"\n        fill-opacity=\"1\" fill-rule=\"nonzero\" />\n</svg>");

/***/ }),

/***/ "./src/icons/rectangles.svg":
/*!**********************************!*\
  !*** ./src/icons/rectangles.svg ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 307 640\">\n  <defs>\n    <style>\n      .innermost, .second, .third, .fourth, .fifth, .outermost {\n        stroke-width: 0px;\n      }\n      \n      .outermost {\n        fill: #e4f2d1;\n      }\n\n      .second {\n        fill: #cce8b5;\n      }\n\n      .third {\n        fill: #b3db95;\n      }\n\n      .fourth {\n        fill: #9bd078;\n      }\n\n      .fifth {\n        fill: #83c55c;\n      }\n\n      .innermost {\n        fill: #428a2f;\n      }\n    </style>\n  </defs>\n  <path class=\"outermost\" d=\"m306.9,320c0,105.3-.02,210.6.1,315.91,0,3.42-.67,4.1-4.09,4.09-99.6-.12-199.21-.12-298.81,0C.67,640,0,639.33,0,635.91.11,425.3.11,214.7,0,4.09,0,.67.67,0,4.09,0,103.7.12,203.3.12,302.91,0c3.42,0,4.1.67,4.09,4.09-.12,105.3-.1,210.6-.1,315.91Z\"/>\n  <path class=\"second\" d=\"m275.92,323c0,87.63,0,175.27,0,262.9,0,7.24-.55,7.93-7.86,7.98-14.66.09-29.31.03-43.97.03-60.96,0-121.92,0-182.88,0q-7.13,0-7.14-7.24c0-176.1,0-352.21,0-528.31q0-7.26,7.12-7.26c75.78,0,151.56,0,227.35,0q7.38,0,7.38,7.5c0,88.13,0,176.27,0,264.4Z\"/>\n  <path class=\"third\" d=\"m68.06,322.24c0-69.47,0-138.94,0-208.41,0-8.99,1.33-10.13,10.49-9.12,1.98.22,3.98.32,5.97.32,46.13.02,92.26.02,138.39,0,3.48,0,6.92-.23,10.41-.67,5.5-.7,8.74.46,8.73,7.25-.18,138.94-.13,277.88-.13,416.81,0,.33,0,.67,0,1q-.14,10.51-10.39,10.51c-52.13,0-104.25,0-156.38,0q-7.09,0-7.09-7.28c0-70.14,0-140.27,0-210.41Z\"/>\n  <path class=\"fourth\" d=\"m103.02,322.5c0-52.46,0-104.91,0-157.37,0-6.68.36-7.06,7.07-7.06,30.3-.01,60.6.07,90.9-.09,4.54-.02,6.08,1.33,6.07,5.98-.1,105.58-.1,211.16,0,316.74,0,4.18-1.27,5.37-5.38,5.35-29.3-.15-58.6-.08-87.9-.08q-10.76,0-10.76-11.09c0-50.79,0-101.58,0-152.37Z\"/>\n  <path class=\"fifth\" d=\"m173,322.2c0,35.29,0,70.58,0,105.88q0,6.89-6.99,6.9c-8.15,0-16.31-.13-24.46.06-3.47.08-4.68-1.09-4.61-4.59.18-9.65.06-19.31.06-28.96,0-58.26-.01-116.53.02-174.79,0-4.76-1.12-9.46-.14-14.3.51-2.54,1.39-3.38,3.8-3.36,8.82.06,17.64.14,26.46-.02,4.59-.09,5.95,1.85,5.94,6.33-.14,35.62-.08,71.25-.08,106.87Z\"/>\n  <path class=\"innermost\" d=\"m151.04,322.01c0-9.99.07-19.97-.05-29.96-.04-2.93.83-4.18,3.95-4.18,3.06,0,4.03,1.12,4.02,4.11-.09,19.97-.08,39.94.01,59.91.01,2.96-.84,4.16-3.96,4.14-3.03-.01-4.08-1.04-4.03-4.08.14-9.98.05-19.97.05-29.96Z\"/>\n</svg>");

/***/ }),

/***/ "./src/icons/waveform.svg":
/*!********************************!*\
  !*** ./src/icons/waveform.svg ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" viewBox=\"0 0 56.25 30\" class=\"waveform\">\n    <defs>\n        <clipPath id=\"a\">\n            <path d=\"M.54 12H3v5H.54Zm0 0\"/>\n        </clipPath>\n        <clipPath id=\"b\">\n            <path d=\"M25 2.2h2v24.68h-2Zm0 0\"/>\n        </clipPath>\n        <clipPath id=\"c\">\n            <path d=\"M53 12h1.98v5H53Zm0 0\"/>\n        </clipPath>\n    </defs>\n    <g clip-path=\"url(#a)\">\n        <path d=\"M1.48 12.71c-.5 0-.9.4-.9.9v1.85a.9.9 0 0 0 1.8 0v-1.84c0-.5-.4-.9-.9-.9Zm0 0\"/>\n    </g>\n    <path d=\"M4.98 6.63c-.5 0-.9.4-.9.9v14.01a.9.9 0 0 0 1.81 0v-14c0-.5-.4-.92-.9-.92Zm3.51 3.1a.9.9 0 0 0-.9.91v7.79a.9.9 0 0 0 1.8 0v-7.79c0-.5-.4-.9-.9-.9ZM12 3.83a.9.9 0 0 0-.91.9v19.6a.9.9 0 0 0 1.8 0V4.74c0-.5-.4-.9-.9-.9Zm3.5 8.29a.9.9 0 0 0-.91.9v3.03a.9.9 0 0 0 1.81 0v-3.03c0-.5-.4-.9-.9-.9ZM19 6.8c-.5 0-.9.4-.9.9v13.68a.9.9 0 0 0 1.8 0V7.7c0-.5-.4-.9-.9-.9Zm3.58-2.97h-.01c-.5 0-.9.4-.9.9l-.13 19.6c0 .5.4.9.9.91.5 0 .9-.4.9-.9l.14-19.6a.9.9 0 0 0-.9-.9Zm0 0\"/>\n    <g clip-path=\"url(#b)\">\n        <path d=\"M26 2.2c-.5 0-.9.4-.9.9v22.86a.9.9 0 1 0 1.81 0V3.11a.9.9 0 0 0-.9-.91Zm0 0\"/>\n    </g>\n    <path d=\"M29.52 7.71a.9.9 0 0 0-.91.9v11.85a.9.9 0 0 0 1.81 0V8.62c0-.5-.4-.9-.9-.9Zm3.5 2.93a.9.9 0 0 0-.9.91v5.97a.9.9 0 0 0 1.8 0v-5.97c0-.5-.4-.9-.9-.9Zm3.5-5.78c-.5 0-.9.4-.9.9v17.55a.9.9 0 0 0 1.81 0V5.76c0-.5-.4-.9-.9-.9Zm3.51 3.34c-.5 0-.9.4-.9.9v10.87a.9.9 0 0 0 1.8 0V9.1a.9.9 0 0 0-.9-.91Zm3.5 3.08c-.5 0-.9.4-.9.91v4.7a.9.9 0 1 0 1.8 0v-4.7a.9.9 0 0 0-.9-.9Zm3.51-7.45a.9.9 0 0 0-.91.9v19.6a.9.9 0 0 0 1.81 0V4.74c0-.5-.4-.9-.9-.9Zm3.5 5.57a.9.9 0 0 0-.9.91v8.45a.9.9 0 0 0 1.8 0v-8.45c0-.5-.4-.9-.9-.9Zm0 0\"/>\n    <g clip-path=\"url(#c)\">\n        <path d=\"M54.04 12.96a.9.9 0 0 0-.9.91v1.33a.9.9 0 1 0 1.8 0v-1.32a.9.9 0 0 0-.9-.92Zm0 0\"/>\n    </g>\n</svg>");

/***/ }),

/***/ "./src/styles/rectangles.css":
/*!***********************************!*\
  !*** ./src/styles/rectangles.css ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_rectangles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./rectangles.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles/rectangles.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_rectangles_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_rectangles_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_rectangles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_rectangles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/styles/common.scss":
/*!********************************!*\
  !*** ./src/styles/common.scss ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_common_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./common.scss */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/common.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_common_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_common_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_common_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_common_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/styles/desktop.scss":
/*!*********************************!*\
  !*** ./src/styles/desktop.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_desktop_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./desktop.scss */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/desktop.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_desktop_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_desktop_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_desktop_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_desktop_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/styles/mobile.scss":
/*!********************************!*\
  !*** ./src/styles/mobile.scss ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_mobile_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./mobile.scss */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./src/styles/mobile.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_mobile_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_mobile_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_mobile_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_3_use_2_mobile_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {



var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {



var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./node_modules/xstate/es/Actor.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/Actor.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDeferredActor: () => (/* binding */ createDeferredActor),
/* harmony export */   createInvocableActor: () => (/* binding */ createInvocableActor),
/* harmony export */   createNullActor: () => (/* binding */ createNullActor),
/* harmony export */   isActor: () => (/* binding */ isActor),
/* harmony export */   isSpawnedActor: () => (/* binding */ isSpawnedActor),
/* harmony export */   toActorRef: () => (/* binding */ toActorRef)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");
/* harmony import */ var _serviceScope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serviceScope.js */ "./node_modules/xstate/es/serviceScope.js");




function createNullActor(id) {
  var _a;

  return _a = {
    id: id,
    send: function () {
      return void 0;
    },
    subscribe: function () {
      return {
        unsubscribe: function () {
          return void 0;
        }
      };
    },
    getSnapshot: function () {
      return undefined;
    },
    toJSON: function () {
      return {
        id: id
      };
    }
  }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
    return this;
  }, _a;
}
/**
 * Creates a deferred actor that is able to be invoked given the provided
 * invocation information in its `.meta` value.
 *
 * @param invokeDefinition The meta information needed to invoke the actor.
 */

function createInvocableActor(invokeDefinition, machine, context, _event) {
  var _a;

  var invokeSrc = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(invokeDefinition.src);
  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];
  var resolvedData = invokeDefinition.data ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(invokeDefinition.data, context, _event) : undefined;
  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore

  tempActor.meta = invokeDefinition;
  return tempActor;
}
function createDeferredActor(entity, id, data) {
  var tempActor = createNullActor(id); // @ts-ignore

  tempActor.deferred = true;

  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)) {
    // "mute" the existing service scope so potential spawned actors within the `.initialState` stay deferred here
    var initialState_1 = tempActor.state = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_1__.provide)(undefined, function () {
      return (data ? entity.withContext(data) : entity).initialState;
    });

    tempActor.getSnapshot = function () {
      return initialState_1;
    };
  }

  return tempActor;
}
function isActor(item) {
  try {
    return typeof item.send === 'function';
  } catch (e) {
    return false;
  }
}
function isSpawnedActor(item) {
  return isActor(item) && 'id' in item;
} // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now

function toActorRef(actorRefLike) {
  var _a;

  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {
    subscribe: function () {
      return {
        unsubscribe: function () {
          return void 0;
        }
      };
    },
    id: 'anonymous',
    getSnapshot: function () {
      return undefined;
    }
  }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
    return this;
  }, _a), actorRefLike);
}




/***/ }),

/***/ "./node_modules/xstate/es/Machine.js":
/*!*******************************************!*\
  !*** ./node_modules/xstate/es/Machine.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Machine: () => (/* binding */ Machine),
/* harmony export */   createMachine: () => (/* binding */ createMachine)
/* harmony export */ });
/* harmony import */ var _StateNode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StateNode.js */ "./node_modules/xstate/es/StateNode.js");
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");



var warned = false;
function Machine(config, options, initialContext) {
  if (initialContext === void 0) {
    initialContext = config.context;
  }

  return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config, options, initialContext);
}
function createMachine(config, options) {
  if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION && !('predictableActionArguments' in config) && !warned) {
    warned = true;
    console.warn('It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html');
  }

  return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config, options);
}




/***/ }),

/***/ "./node_modules/xstate/es/State.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/State.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   State: () => (/* binding */ State),
/* harmony export */   bindActionToState: () => (/* binding */ bindActionToState),
/* harmony export */   isState: () => (/* binding */ isState),
/* harmony export */   isStateConfig: () => (/* binding */ isStateConfig),
/* harmony export */   stateValuesEqual: () => (/* binding */ stateValuesEqual)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ "./node_modules/xstate/es/constants.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");
/* harmony import */ var _stateUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stateUtils.js */ "./node_modules/xstate/es/stateUtils.js");
/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./actions.js */ "./node_modules/xstate/es/actions.js");
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");







function stateValuesEqual(a, b) {
  if (a === b) {
    return true;
  }

  if (a === undefined || b === undefined) {
    return false;
  }

  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(a) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(b)) {
    return a === b;
  }

  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  return aKeys.length === bKeys.length && aKeys.every(function (key) {
    return stateValuesEqual(a[key], b[key]);
  });
}
function isStateConfig(state) {
  if (typeof state !== 'object' || state === null) {
    return false;
  }

  return 'value' in state && '_event' in state;
}
/**
 * @deprecated Use `isStateConfig(object)` or `state instanceof State` instead.
 */

var isState = isStateConfig;
function bindActionToState(action, state) {
  var exec = action.exec;

  var boundAction = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, action), {
    exec: exec !== undefined ? function () {
      return exec(state.context, state.event, {
        action: action,
        state: state,
        _event: state._event
      });
    } : undefined
  });

  return boundAction;
}

var State =
/*#__PURE__*/

/** @class */
function () {
  /**
   * Creates a new State instance.
   * @param value The state value
   * @param context The extended state
   * @param historyValue The tree representing historical values of the state nodes
   * @param history The previous state
   * @param actions An array of action objects to execute as side-effects
   * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).
   * @param meta
   * @param events Internal event queue. Should be empty with run-to-completion semantics.
   * @param configuration
   */
  function State(config) {
    var _this = this;

    var _a;

    this.actions = [];
    this.activities = _constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;
    this.meta = {};
    this.events = [];
    this.value = config.value;
    this.context = config.context;
    this._event = config._event;
    this._sessionid = config._sessionid;
    this.event = this._event.data;
    this.historyValue = config.historyValue;
    this.history = config.history;
    this.actions = config.actions || [];
    this.activities = config.activities || _constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;
    this.meta = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.getMeta)(config.configuration);
    this.events = config.events || [];
    this.matches = this.matches.bind(this);
    this.toStrings = this.toStrings.bind(this);
    this.configuration = config.configuration;
    this.transitions = config.transitions;
    this.children = config.children;
    this.done = !!config.done;
    this.tags = (_a = Array.isArray(config.tags) ? new Set(config.tags) : config.tags) !== null && _a !== void 0 ? _a : new Set();
    this.machine = config.machine;
    Object.defineProperty(this, 'nextEvents', {
      get: function () {
        return (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.nextEvents)(_this.configuration);
      }
    });
  }
  /**
   * Creates a new State instance for the given `stateValue` and `context`.
   * @param stateValue
   * @param context
   */


  State.from = function (stateValue, context) {
    if (stateValue instanceof State) {
      if (stateValue.context !== context) {
        return new State({
          value: stateValue.value,
          context: context,
          _event: stateValue._event,
          _sessionid: null,
          historyValue: stateValue.historyValue,
          history: stateValue.history,
          actions: [],
          activities: stateValue.activities,
          meta: {},
          events: [],
          configuration: [],
          transitions: [],
          children: {}
        });
      }

      return stateValue;
    }

    var _event = _actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;
    return new State({
      value: stateValue,
      context: context,
      _event: _event,
      _sessionid: null,
      historyValue: undefined,
      history: undefined,
      actions: [],
      activities: undefined,
      meta: undefined,
      events: [],
      configuration: [],
      transitions: [],
      children: {}
    });
  };
  /**
   * Creates a new State instance for the given `config`.
   * @param config The state config
   */


  State.create = function (config) {
    return new State(config);
  };
  /**
   * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).
   * @param stateValue
   * @param context
   */


  State.inert = function (stateValue, context) {
    if (stateValue instanceof State) {
      if (!stateValue.actions.length) {
        return stateValue;
      }

      var _event = _actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;
      return new State({
        value: stateValue.value,
        context: context,
        _event: _event,
        _sessionid: null,
        historyValue: stateValue.historyValue,
        history: stateValue.history,
        activities: stateValue.activities,
        configuration: stateValue.configuration,
        transitions: [],
        children: {}
      });
    }

    return State.from(stateValue, context);
  };
  /**
   * Returns an array of all the string leaf state node paths.
   * @param stateValue
   * @param delimiter The character(s) that separate each subpath in the string state node path.
   */


  State.prototype.toStrings = function (stateValue, delimiter) {
    var _this = this;

    if (stateValue === void 0) {
      stateValue = this.value;
    }

    if (delimiter === void 0) {
      delimiter = '.';
    }

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {
      return [stateValue];
    }

    var valueKeys = Object.keys(stateValue);
    return valueKeys.concat.apply(valueKeys, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(valueKeys.map(function (key) {
      return _this.toStrings(stateValue[key], delimiter).map(function (s) {
        return key + delimiter + s;
      });
    })), false));
  };

  State.prototype.toJSON = function () {
    var _a = this;
        _a.configuration;
        _a.transitions;
        var tags = _a.tags;
        _a.machine;
        var jsonValues = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, ["configuration", "transitions", "tags", "machine"]);

    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, jsonValues), {
      tags: Array.from(tags)
    });
  };

  State.prototype.matches = function (parentStateValue) {
    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)(parentStateValue, this.value);
  };
  /**
   * Whether the current state configuration has a state node with the specified `tag`.
   * @param tag
   */


  State.prototype.hasTag = function (tag) {
    return this.tags.has(tag);
  };
  /**
   * Determines whether sending the `event` will cause a non-forbidden transition
   * to be selected, even if the transitions have no actions nor
   * change the state value.
   *
   * @param event The event to test
   * @returns Whether the event will cause a transition
   */


  State.prototype.can = function (event) {
    var _a;

    if (_environment_js__WEBPACK_IMPORTED_MODULE_5__.IS_PRODUCTION) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!this.machine, "state.can(...) used outside of a machine-created State object; this will always return false.");
    }

    var transitionData = (_a = this.machine) === null || _a === void 0 ? void 0 : _a.getTransitionData(this, event);
    return !!(transitionData === null || transitionData === void 0 ? void 0 : transitionData.transitions.length) && // Check that at least one transition is not forbidden
    transitionData.transitions.some(function (t) {
      return t.target !== undefined || t.actions.length;
    });
  };

  return State;
}();




/***/ }),

/***/ "./node_modules/xstate/es/StateNode.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/StateNode.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StateNode: () => (/* binding */ StateNode)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");
/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./State.js */ "./node_modules/xstate/es/State.js");
/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./actionTypes.js */ "./node_modules/xstate/es/actionTypes.js");
/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actions.js */ "./node_modules/xstate/es/actions.js");
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ "./node_modules/xstate/es/constants.js");
/* harmony import */ var _stateUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stateUtils.js */ "./node_modules/xstate/es/stateUtils.js");
/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Actor.js */ "./node_modules/xstate/es/Actor.js");
/* harmony import */ var _invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./invokeUtils.js */ "./node_modules/xstate/es/invokeUtils.js");











var NULL_EVENT = '';
var STATE_IDENTIFIER = '#';
var WILDCARD = '*';
var EMPTY_OBJECT = {};

var isStateId = function (str) {
  return str[0] === STATE_IDENTIFIER;
};

var createDefaultOptions = function () {
  return {
    actions: {},
    guards: {},
    services: {},
    activities: {},
    delays: {}
  };
};

var validateArrayifiedTransitions = function (stateNode, event, transitions) {
  var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {
    return !('cond' in transition) && !('in' in transition) && ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(transition.target) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(transition.target));
  });
  var eventText = event === NULL_EVENT ? 'the transient event' : "event '".concat(event, "'");
  (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!hasNonLastUnguardedTarget, "One or more transitions for ".concat(eventText, " on state '").concat(stateNode.id, "' are unreachable. ") + "Make sure that the default transition is the last one defined.");
};

var StateNode =
/*#__PURE__*/

/** @class */
function () {
  function StateNode(
  /**
   * The raw config used to create the machine.
   */
  config, options,
  /**
   * The initial extended state
   */
  _context, // TODO: this is unsafe, but we're removing it in v5 anyway
  _stateInfo) {
    if (_context === void 0) {
      _context = 'context' in config ? config.context : undefined;
    }

    var _this = this;

    var _a;

    this.config = config;
    this._context = _context;
    /**
     * The order this state node appears. Corresponds to the implicit SCXML document order.
     */

    this.order = -1;
    this.__xstatenode = true;
    this.__cache = {
      events: undefined,
      relativeValue: new Map(),
      initialStateValue: undefined,
      initialState: undefined,
      on: undefined,
      transitions: undefined,
      candidates: {},
      delayedTransitions: undefined
    };
    this.idMap = {};
    this.tags = [];
    this.options = Object.assign(createDefaultOptions(), options);
    this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;
    this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || '(machine)';
    this.machine = this.parent ? this.parent.machine : this;
    this.path = this.parent ? this.parent.path.concat(this.key) : [];
    this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : _constants_js__WEBPACK_IMPORTED_MODULE_1__.STATE_DELIMITER);
    this.id = this.config.id || (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([this.machine.key], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(this.path), false).join(this.delimiter);
    this.version = this.parent ? this.parent.version : this.config.version;
    this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');
    this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};
    this.description = this.config.description;

    if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!('parallel' in this.config), "The \"parallel\" property is deprecated and will be removed in version 4.1. ".concat(this.config.parallel ? "Replace with `type: 'parallel'`" : "Use `type: '".concat(this.type, "'`"), " in the config for state node '").concat(this.id, "' instead."));
    }

    this.initial = this.config.initial;
    this.states = this.config.states ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.config.states, function (stateConfig, key) {
      var _a;

      var stateNode = new StateNode(stateConfig, {}, undefined, {
        parent: _this,
        key: key
      });
      Object.assign(_this.idMap, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));
      return stateNode;
    }) : EMPTY_OBJECT; // Document order

    var order = 0;

    function dfs(stateNode) {
      var e_1, _a;

      stateNode.order = order++;

      try {
        for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllChildren)(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var child = _c.value;
          dfs(child);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    }

    dfs(this); // History config

    this.history = this.config.history === true ? 'shallow' : this.config.history || false;
    this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {
      var event = _a.event;
      return event === NULL_EVENT;
    }) : NULL_EVENT in this.config.on);
    this.strict = !!this.config.strict; // TODO: deprecate (entry)

    this.onEntry = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.entry || this.config.onEntry).map(function (action) {
      return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);
    }); // TODO: deprecate (exit)

    this.onExit = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.exit || this.config.onExit).map(function (action) {
      return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);
    });
    this.meta = this.config.meta;
    this.doneData = this.type === 'final' ? this.config.data : undefined;
    this.invoke = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.invoke).map(function (invokeConfig, i) {
      var _a, _b;

      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig)) {
        var invokeId = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);
        _this.machine.options.services = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);
        return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)({
          src: invokeId,
          id: invokeId
        });
      } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(invokeConfig.src)) {
        var invokeId = invokeConfig.id || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);
        return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, invokeConfig), {
          id: invokeId,
          src: invokeConfig.src
        }));
      } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig.src) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(invokeConfig.src)) {
        var invokeId = invokeConfig.id || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);
        _this.machine.options.services = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);
        return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({
          id: invokeId
        }, invokeConfig), {
          src: invokeId
        }));
      } else {
        var invokeSource = invokeConfig.src;
        return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({
          id: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i)
        }, invokeConfig), {
          src: invokeSource
        }));
      }
    });
    this.activities = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.activities).concat(this.invoke).map(function (activity) {
      return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActivityDefinition)(activity);
    });
    this.transition = this.transition.bind(this);
    this.tags = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.tags); // TODO: this is the real fix for initialization once
    // state node getters are deprecated
    // if (!this.parent) {
    //   this._init();
    // }
  }

  StateNode.prototype._init = function () {
    if (this.__cache.transitions) {
      return;
    }

    (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllStateNodes)(this).forEach(function (stateNode) {
      return stateNode.on;
    });
  };
  /**
   * Clones this state machine with custom options and context.
   *
   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.
   * @param context Custom context (will override predefined context)
   */


  StateNode.prototype.withConfig = function (options, context) {
    var _a = this.options,
        actions = _a.actions,
        activities = _a.activities,
        guards = _a.guards,
        services = _a.services,
        delays = _a.delays;
    return new StateNode(this.config, {
      actions: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, actions), options.actions),
      activities: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, activities), options.activities),
      guards: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, guards), options.guards),
      services: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, services), options.services),
      delays: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, delays), options.delays)
    }, context !== null && context !== void 0 ? context : this.context);
  };
  /**
   * Clones this state machine with custom context.
   *
   * @param context Custom context (will override predefined context, not recursive)
   */


  StateNode.prototype.withContext = function (context) {
    return new StateNode(this.config, this.options, context);
  };

  Object.defineProperty(StateNode.prototype, "context", {
    get: function () {
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(this._context) ? this._context() : this._context;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "definition", {
    /**
     * The well-structured state node definition.
     */
    get: function () {
      return {
        id: this.id,
        key: this.key,
        version: this.version,
        context: this.context,
        type: this.type,
        initial: this.initial,
        history: this.history,
        states: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.states, function (state) {
          return state.definition;
        }),
        on: this.on,
        transitions: this.transitions,
        entry: this.onEntry,
        exit: this.onExit,
        activities: this.activities || [],
        meta: this.meta,
        order: this.order || -1,
        data: this.doneData,
        invoke: this.invoke,
        description: this.description,
        tags: this.tags
      };
    },
    enumerable: false,
    configurable: true
  });

  StateNode.prototype.toJSON = function () {
    return this.definition;
  };

  Object.defineProperty(StateNode.prototype, "on", {
    /**
     * The mapping of events to transitions.
     */
    get: function () {
      if (this.__cache.on) {
        return this.__cache.on;
      }

      var transitions = this.transitions;
      return this.__cache.on = transitions.reduce(function (map, transition) {
        map[transition.eventType] = map[transition.eventType] || [];
        map[transition.eventType].push(transition);
        return map;
      }, {});
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "after", {
    get: function () {
      return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "transitions", {
    /**
     * All the transitions that can be taken from this state node.
     */
    get: function () {
      return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);
    },
    enumerable: false,
    configurable: true
  });

  StateNode.prototype.getCandidates = function (eventName) {
    if (this.__cache.candidates[eventName]) {
      return this.__cache.candidates[eventName];
    }

    var transient = eventName === NULL_EVENT;
    var candidates = this.transitions.filter(function (transition) {
      var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions

      return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;
    });
    this.__cache.candidates[eventName] = candidates;
    return candidates;
  };
  /**
   * All delayed transitions from the config.
   */


  StateNode.prototype.getDelayedTransitions = function () {
    var _this = this;

    var afterConfig = this.config.after;

    if (!afterConfig) {
      return [];
    }

    var mutateEntryExit = function (delay, i) {
      var delayRef = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(delay) ? "".concat(_this.id, ":delay[").concat(i, "]") : delay;
      var eventType = (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.after)(delayRef, _this.id);

      _this.onEntry.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.send)(eventType, {
        delay: delay
      }));

      _this.onExit.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.cancel)(eventType));

      return eventType;
    };

    var delayedTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(afterConfig) ? afterConfig.map(function (transition, i) {
      var eventType = mutateEntryExit(transition.delay, i);
      return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {
        event: eventType
      });
    }) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(afterConfig).map(function (delay, i) {
      var configTransition = afterConfig[delay];
      var resolvedTransition = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(configTransition) ? {
        target: configTransition
      } : configTransition;
      var resolvedDelay = !isNaN(+delay) ? +delay : delay;
      var eventType = mutateEntryExit(resolvedDelay, i);
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(resolvedTransition).map(function (transition) {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {
          event: eventType,
          delay: resolvedDelay
        });
      });
    }));
    return delayedTransitions.map(function (delayedTransition) {
      var delay = delayedTransition.delay;
      return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, _this.formatTransition(delayedTransition)), {
        delay: delay
      });
    });
  };
  /**
   * Returns the state nodes represented by the current state value.
   *
   * @param state The state value or State instance
   */


  StateNode.prototype.getStateNodes = function (state) {
    var _a;

    var _this = this;

    if (!state) {
      return [];
    }

    var stateValue = state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State ? state.value : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(state, this.delimiter);

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {
      var initialStateValue = this.getStateNode(stateValue).initial;
      return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this, this.states[stateValue]];
    }

    var subStateKeys = Object.keys(stateValue);
    var subStateNodes = [this];
    subStateNodes.push.apply(subStateNodes, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(subStateKeys.map(function (subStateKey) {
      return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);
    }))), false));
    return subStateNodes;
  };
  /**
   * Returns `true` if this state node explicitly handles the given event.
   *
   * @param event The event in question
   */


  StateNode.prototype.handles = function (event) {
    var eventType = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getEventType)(event);
    return this.events.includes(eventType);
  };
  /**
   * Resolves the given `state` to a new `State` instance relative to this machine.
   *
   * This ensures that `.events` and `.nextEvents` represent the correct values.
   *
   * @param state The state to resolve
   */


  StateNode.prototype.resolveState = function (state) {
    var stateFromConfig = state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State ? state : _State_js__WEBPACK_IMPORTED_MODULE_7__.State.create(state);
    var configuration = Array.from((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(stateFromConfig.value)));
    return new _State_js__WEBPACK_IMPORTED_MODULE_7__.State((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, stateFromConfig), {
      value: this.resolve(stateFromConfig.value),
      configuration: configuration,
      done: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(configuration, this),
      tags: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(configuration),
      machine: this.machine
    }));
  };

  StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {
    var stateNode = this.getStateNode(stateValue);
    var next = stateNode.next(state, _event);

    if (!next || !next.transitions.length) {
      return this.next(state, _event);
    }

    return next;
  };

  StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {
    var subStateKeys = Object.keys(stateValue);
    var stateNode = this.getStateNode(subStateKeys[0]);

    var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);

    if (!next || !next.transitions.length) {
      return this.next(state, _event);
    }

    return next;
  };

  StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {
    var e_2, _a;

    var transitionMap = {};

    try {
      for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var subStateKey = _c.value;
        var subStateValue = stateValue[subStateKey];

        if (!subStateValue) {
          continue;
        }

        var subStateNode = this.getStateNode(subStateKey);

        var next = subStateNode._transition(subStateValue, state, _event);

        if (next) {
          transitionMap[subStateKey] = next;
        }
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_2) throw e_2.error;
      }
    }

    var stateTransitions = Object.keys(transitionMap).map(function (key) {
      return transitionMap[key];
    });
    var enabledTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function (st) {
      return st.transitions;
    }));
    var willTransition = stateTransitions.some(function (st) {
      return st.transitions.length > 0;
    });

    if (!willTransition) {
      return this.next(state, _event);
    }

    var configuration = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function (key) {
      return transitionMap[key].configuration;
    }));
    return {
      transitions: enabledTransitions,
      exitSet: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function (t) {
        return t.exitSet;
      })),
      configuration: configuration,
      source: state,
      actions: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function (key) {
        return transitionMap[key].actions;
      }))
    };
  };

  StateNode.prototype._transition = function (stateValue, state, _event) {
    // leaf node
    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {
      return this.transitionLeafNode(stateValue, state, _event);
    } // hierarchical node


    if (Object.keys(stateValue).length === 1) {
      return this.transitionCompoundNode(stateValue, state, _event);
    } // orthogonal node


    return this.transitionParallelNode(stateValue, state, _event);
  };

  StateNode.prototype.getTransitionData = function (state, event) {
    return this._transition(state.value, state, (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event));
  };

  StateNode.prototype.next = function (state, _event) {
    var e_3, _a;

    var _this = this;

    var eventName = _event.name;
    var actions = [];
    var nextStateNodes = [];
    var selectedTransition;

    try {
      for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var candidate = _c.value;
        var cond = candidate.cond,
            stateIn = candidate.in;
        var resolvedContext = state.context;
        var isInState = stateIn ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateIn) && isStateId(stateIn) ? // Check if in state by ID
        state.matches((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(this.getStateNodeById(stateIn).path, this.delimiter)) : // Check if in state by relative grandparent
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(stateIn, this.delimiter), (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.path)(this.path.slice(0, -2))(state.value)) : true;
        var guardPassed = false;

        try {
          guardPassed = !cond || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.evaluateGuard)(this.machine, cond, resolvedContext, _event, state);
        } catch (err) {
          throw new Error("Unable to evaluate guard '".concat(cond.name || cond.type, "' in transition for event '").concat(eventName, "' in state node '").concat(this.id, "':\n").concat(err.message));
        }

        if (guardPassed && isInState) {
          if (candidate.target !== undefined) {
            nextStateNodes = candidate.target;
          }

          actions.push.apply(actions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(candidate.actions), false));
          selectedTransition = candidate;
          break;
        }
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_3) throw e_3.error;
      }
    }

    if (!selectedTransition) {
      return undefined;
    }

    if (!nextStateNodes.length) {
      return {
        transitions: [selectedTransition],
        exitSet: [],
        configuration: state.value ? [this] : [],
        source: state,
        actions: actions
      };
    }

    var allNextStateNodes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function (stateNode) {
      return _this.getRelativeStateNodes(stateNode, state.historyValue);
    }));
    var isInternal = !!selectedTransition.internal;
    return {
      transitions: [selectedTransition],
      exitSet: isInternal ? [] : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function (targetNode) {
        return _this.getPotentiallyReenteringNodes(targetNode);
      })),
      configuration: allNextStateNodes,
      source: state,
      actions: actions
    };
  }; // even though the name of this function mentions reentry nodes
  // we are pushing its result into `exitSet`
  // that's because what we exit might be reentered (it's an invariant of reentrancy)


  StateNode.prototype.getPotentiallyReenteringNodes = function (targetNode) {
    if (this.order < targetNode.order) {
      return [this];
    }

    var nodes = [];
    var marker = this;
    var possibleAncestor = targetNode;

    while (marker && marker !== possibleAncestor) {
      nodes.push(marker);
      marker = marker.parent;
    }

    if (marker !== possibleAncestor) {
      // we never got to `possibleAncestor`, therefore the initial `marker` "escapes" it
      // it's in a different part of the tree so no states will be reentered for such an external transition
      return [];
    }

    nodes.push(possibleAncestor);
    return nodes;
  };

  StateNode.prototype.getActions = function (resolvedConfig, isDone, transition, currentContext, _event, prevState, predictableExec) {
    var e_4, _a, e_5, _b;

    var _this = this;

    var prevConfig = prevState ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(prevState.value)) : [];
    var entrySet = new Set();

    try {
      for (var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Array.from(resolvedConfig).sort(function (a, b) {
        return a.order - b.order;
      })), _d = _c.next(); !_d.done; _d = _c.next()) {
        var sn = _d.value;

        if (!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(prevConfig, sn) || (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet, sn) || sn.parent && entrySet.has(sn.parent)) {
          entrySet.add(sn);
        }
      }
    } catch (e_4_1) {
      e_4 = {
        error: e_4_1
      };
    } finally {
      try {
        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
      } finally {
        if (e_4) throw e_4.error;
      }
    }

    try {
      for (var prevConfig_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {
        var sn = prevConfig_1_1.value;

        if (!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(resolvedConfig, sn) || (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet, sn.parent)) {
          transition.exitSet.push(sn);
        }
      }
    } catch (e_5_1) {
      e_5 = {
        error: e_5_1
      };
    } finally {
      try {
        if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);
      } finally {
        if (e_5) throw e_5.error;
      }
    }

    transition.exitSet.sort(function (a, b) {
      return b.order - a.order;
    });
    var entryStates = Array.from(entrySet).sort(function (a, b) {
      return a.order - b.order;
    });
    var exitStates = new Set(transition.exitSet);
    var doneEvents = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(entryStates.map(function (sn) {
      var events = [];

      if (sn.type !== 'final') {
        return events;
      }

      var parent = sn.parent;

      if (!parent.parent) {
        return events;
      }

      events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(sn.id, sn.doneData), // TODO: deprecate - final states should not emit done events for their own state.
      (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(parent.id, sn.doneData ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(sn.doneData, currentContext, _event) : undefined));
      var grandparent = parent.parent;

      if (grandparent.type === 'parallel') {
        if ((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getChildren)(grandparent).every(function (parentNode) {
          return (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(transition.configuration, parentNode);
        })) {
          events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(grandparent.id));
        }
      }

      return events;
    }));
    var entryActions = entryStates.map(function (stateNode) {
      var entryActions = stateNode.onEntry;
      var invokeActions = stateNode.activities.map(function (activity) {
        return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.start)(activity);
      });
      return {
        type: 'entry',
        actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(predictableExec ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions), false) : (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions), false), _this.machine.options.actions)
      };
    }).concat({
      type: 'state_done',
      actions: doneEvents.map(function (event) {
        return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.raise)(event);
      })
    });
    var exitActions = Array.from(exitStates).map(function (stateNode) {
      return {
        type: 'exit',
        actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.onExit), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.activities.map(function (activity) {
          return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.stop)(activity);
        })), false), _this.machine.options.actions)
      };
    });
    var actions = exitActions.concat({
      type: 'transition',
      actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(transition.actions, this.machine.options.actions)
    }).concat(entryActions);

    if (isDone) {
      var stopActions = (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig), false).sort(function (a, b) {
        return b.order - a.order;
      }).map(function (stateNode) {
        return stateNode.onExit;
      })), this.machine.options.actions).filter(function (action) {
        return !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);
      });
      return actions.concat({
        type: 'stop',
        actions: stopActions
      });
    }

    return actions;
  };
  /**
   * Determines the next state given the current `state` and sent `event`.
   *
   * @param state The current State instance or state value
   * @param event The event that was sent at the current state
   * @param context The current context (extended state) of the current state
   */


  StateNode.prototype.transition = function (state, event, context, exec) {
    if (state === void 0) {
      state = this.initialState;
    }

    var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event);

    var currentState;

    if (state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State) {
      currentState = context === undefined ? state : this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(state, context));
    } else {
      var resolvedStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(state) ? this.resolve((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.getResolvedPath(state))) : this.resolve(state);
      var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;
      currentState = this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(resolvedStateValue, resolvedContext));
    }

    if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION && _event.name === WILDCARD) {
      throw new Error("An event cannot have the wildcard type ('".concat(WILDCARD, "')"));
    }

    if (this.strict) {
      if (!this.events.includes(_event.name) && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBuiltInEvent)(_event.name)) {
        throw new Error("Machine '".concat(this.id, "' does not accept event '").concat(_event.name, "'"));
      }
    }

    var stateTransition = this._transition(currentState.value, currentState, _event) || {
      transitions: [],
      configuration: [],
      exitSet: [],
      source: currentState,
      actions: []
    };
    var prevConfig = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(currentState.value));
    var resolvedConfig = stateTransition.configuration.length ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)(prevConfig, stateTransition.configuration) : prevConfig;
    stateTransition.configuration = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig), false);
    return this.resolveTransition(stateTransition, currentState, currentState.context, exec, _event);
  };

  StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent, predictableExec) {
    var _a;

    var currentActions = state.actions;
    state = this.transition(state, _event, undefined, predictableExec); // Save original event to state
    // TODO: this should be the raised event! Delete in V5 (breaking)

    state._event = originalEvent;
    state.event = originalEvent.data;

    (_a = state.actions).unshift.apply(_a, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(currentActions), false));

    return state;
  };

  StateNode.prototype.resolveTransition = function (stateTransition, currentState, context, predictableExec, _event) {
    var e_6, _a, e_7, _b;

    var _this = this;

    if (_event === void 0) {
      _event = _actions_js__WEBPACK_IMPORTED_MODULE_5__.initEvent;
    }

    var configuration = stateTransition.configuration; // Transition will "apply" if:
    // - this is the initial state (there is no current state)
    // - OR there are transitions

    var willTransition = !currentState || stateTransition.transitions.length > 0;
    var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];
    var isDone = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(resolvedConfiguration, this);
    var resolvedStateValue = willTransition ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getValue)(this.machine, configuration) : undefined;
    var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;
    var actionBlocks = this.getActions(new Set(resolvedConfiguration), isDone, stateTransition, context, _event, currentState, predictableExec);
    var activities = currentState ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, currentState.activities) : {};

    try {
      for (var actionBlocks_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {
        var block = actionBlocks_1_1.value;

        try {
          for (var _c = (e_7 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var action = _d.value;

            if (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start) {
              activities[action.activity.id || action.activity.type] = action;
            } else if (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.stop) {
              activities[action.activity.id || action.activity.type] = false;
            }
          }
        } catch (e_7_1) {
          e_7 = {
            error: e_7_1
          };
        } finally {
          try {
            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
          } finally {
            if (e_7) throw e_7.error;
          }
        }
      }
    } catch (e_6_1) {
      e_6 = {
        error: e_6_1
      };
    } finally {
      try {
        if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);
      } finally {
        if (e_6) throw e_6.error;
      }
    }

    var _e = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.resolveActions)(this, currentState, context, _event, actionBlocks, predictableExec, this.machine.config.predictableActionArguments || this.machine.config.preserveActionOrder), 2),
        resolvedActions = _e[0],
        updatedContext = _e[1];

    var _f = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.partition)(resolvedActions, _utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction), 2),
        raisedEvents = _f[0],
        nonRaisedActions = _f[1];

    var invokeActions = resolvedActions.filter(function (action) {
      var _a;

      return action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.invoke;
    });
    var children = invokeActions.reduce(function (acc, action) {
      acc[action.activity.id] = (0,_Actor_js__WEBPACK_IMPORTED_MODULE_9__.createInvocableActor)(action.activity, _this.machine, updatedContext, _event);
      return acc;
    }, currentState ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, currentState.children) : {});
    var nextState = new _State_js__WEBPACK_IMPORTED_MODULE_7__.State({
      value: resolvedStateValue || currentState.value,
      context: updatedContext,
      _event: _event,
      // Persist _sessionid between states
      _sessionid: currentState ? currentState._sessionid : null,
      historyValue: resolvedStateValue ? historyValue ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.updateHistoryValue)(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,
      history: !resolvedStateValue || stateTransition.source ? currentState : undefined,
      actions: resolvedStateValue ? nonRaisedActions : [],
      activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},
      events: [],
      configuration: resolvedConfiguration,
      transitions: stateTransition.transitions,
      children: children,
      done: isDone,
      tags: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(resolvedConfiguration),
      machine: this
    });
    var didUpdateContext = context !== updatedContext;
    nextState.changed = _event.name === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks

    var history = nextState.history;

    if (history) {
      delete history.history;
    } // There are transient transitions if the machine is not in a final state
    // and if some of the state nodes have transient ("always") transitions.


    var hasAlwaysTransitions = !isDone && (this._transient || configuration.some(function (stateNode) {
      return stateNode._transient;
    })); // If there are no enabled transitions, check if there are transient transitions.
    // If there are transient transitions, continue checking for more transitions
    // because an transient transition should be triggered even if there are no
    // enabled transitions.
    //
    // If we're already working on an transient transition then stop to prevent an infinite loop.
    //
    // Otherwise, if there are no enabled nor transient transitions, we are done.

    if (!willTransition && (!hasAlwaysTransitions || _event.name === NULL_EVENT)) {
      return nextState;
    }

    var maybeNextState = nextState;

    if (!isDone) {
      if (hasAlwaysTransitions) {
        maybeNextState = this.resolveRaisedTransition(maybeNextState, {
          type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.nullEvent
        }, _event, predictableExec);
      }

      while (raisedEvents.length) {
        var raisedEvent = raisedEvents.shift();
        maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event, predictableExec);
      }
    } // Detect if state changed


    var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !(0,_State_js__WEBPACK_IMPORTED_MODULE_7__.stateValuesEqual)(maybeNextState.value, history.value) : undefined);
    maybeNextState.changed = changed; // Preserve original history after raised events

    maybeNextState.history = history;
    return maybeNextState;
  };
  /**
   * Returns the child state node from its relative `stateKey`, or throws.
   */


  StateNode.prototype.getStateNode = function (stateKey) {
    if (isStateId(stateKey)) {
      return this.machine.getStateNodeById(stateKey);
    }

    if (!this.states) {
      throw new Error("Unable to retrieve child state '".concat(stateKey, "' from '").concat(this.id, "'; no child states exist."));
    }

    var result = this.states[stateKey];

    if (!result) {
      throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
    }

    return result;
  };
  /**
   * Returns the state node with the given `stateId`, or throws.
   *
   * @param stateId The state ID. The prefix "#" is removed.
   */


  StateNode.prototype.getStateNodeById = function (stateId) {
    var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;

    if (resolvedStateId === this.id) {
      return this;
    }

    var stateNode = this.machine.idMap[resolvedStateId];

    if (!stateNode) {
      throw new Error("Child state node '#".concat(resolvedStateId, "' does not exist on machine '").concat(this.id, "'"));
    }

    return stateNode;
  };
  /**
   * Returns the relative state node from the given `statePath`, or throws.
   *
   * @param statePath The string or string array relative path to the state node.
   */


  StateNode.prototype.getStateNodeByPath = function (statePath) {
    if (typeof statePath === 'string' && isStateId(statePath)) {
      try {
        return this.getStateNodeById(statePath.slice(1));
      } catch (e) {// try individual paths
        // throw e;
      }
    }

    var arrayStatePath = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(statePath, this.delimiter).slice();
    var currentStateNode = this;

    while (arrayStatePath.length) {
      var key = arrayStatePath.shift();

      if (!key.length) {
        break;
      }

      currentStateNode = currentStateNode.getStateNode(key);
    }

    return currentStateNode;
  };
  /**
   * Resolves a partial state value with its full representation in this machine.
   *
   * @param stateValue The partial state value to resolve.
   */


  StateNode.prototype.resolve = function (stateValue) {
    var _a;

    var _this = this;

    if (!stateValue) {
      return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties
    }

    switch (this.type) {
      case 'parallel':
        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.initialStateValue, function (subStateValue, subStateKey) {
          return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;
        });

      case 'compound':
        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {
          var subStateNode = this.getStateNode(stateValue);

          if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {
            return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;
          }

          return stateValue;
        }

        if (!Object.keys(stateValue).length) {
          return this.initialStateValue || {};
        }

        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(stateValue, function (subStateValue, subStateKey) {
          return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;
        });

      default:
        return stateValue || EMPTY_OBJECT;
    }
  };

  StateNode.prototype.getResolvedPath = function (stateIdentifier) {
    if (isStateId(stateIdentifier)) {
      var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];

      if (!stateNode) {
        throw new Error("Unable to find state node '".concat(stateIdentifier, "'"));
      }

      return stateNode.path;
    }

    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(stateIdentifier, this.delimiter);
  };

  Object.defineProperty(StateNode.prototype, "initialStateValue", {
    get: function () {
      var _a;

      if (this.__cache.initialStateValue) {
        return this.__cache.initialStateValue;
      }

      var initialStateValue;

      if (this.type === 'parallel') {
        initialStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states, function (state) {
          return state.initialStateValue || EMPTY_OBJECT;
        }, function (stateNode) {
          return !(stateNode.type === 'history');
        });
      } else if (this.initial !== undefined) {
        if (!this.states[this.initial]) {
          throw new Error("Initial state '".concat(this.initial, "' not found on '").concat(this.key, "'"));
        }

        initialStateValue = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);
      } else {
        // The finite state value of a machine without child states is just an empty object
        initialStateValue = {};
      }

      this.__cache.initialStateValue = initialStateValue;
      return this.__cache.initialStateValue;
    },
    enumerable: false,
    configurable: true
  });

  StateNode.prototype.getInitialState = function (stateValue, context) {
    this._init(); // TODO: this should be in the constructor (see note in constructor)


    var configuration = this.getStateNodes(stateValue);
    return this.resolveTransition({
      configuration: configuration,
      exitSet: [],
      transitions: [],
      source: undefined,
      actions: []
    }, undefined, context !== null && context !== void 0 ? context : this.machine.context, undefined);
  };

  Object.defineProperty(StateNode.prototype, "initialState", {
    /**
     * The initial State instance, which includes all actions to be executed from
     * entering the initial state.
     */
    get: function () {
      var initialStateValue = this.initialStateValue;

      if (!initialStateValue) {
        throw new Error("Cannot retrieve initial state from simple state '".concat(this.id, "'."));
      }

      return this.getInitialState(initialStateValue);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "target", {
    /**
     * The target state value of the history state node, if it exists. This represents the
     * default state value to transition to if no history value exists yet.
     */
    get: function () {
      var target;

      if (this.type === 'history') {
        var historyConfig = this.config;

        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(historyConfig.target)) {
          target = isStateId(historyConfig.target) ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;
        } else {
          target = historyConfig.target;
        }
      }

      return target;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Returns the leaf nodes from a state path relative to this state node.
   *
   * @param relativeStateId The relative state path to retrieve the state nodes
   * @param history The previous state to retrieve history
   * @param resolve Whether state nodes should resolve to initial child state nodes
   */

  StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {
    if (resolve === void 0) {
      resolve = true;
    }

    return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];
  };

  Object.defineProperty(StateNode.prototype, "initialStateNodes", {
    get: function () {
      var _this = this;

      if ((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this)) {
        return [this];
      } // Case when state node is compound but no initial state is defined


      if (this.type === 'compound' && !this.initial) {
        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "Compound state node '".concat(this.id, "' has no initial state."));
        }

        return [this];
      }

      var initialStateNodePaths = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(this.initialStateValue);
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(initialStateNodePaths.map(function (initialPath) {
        return _this.getFromRelativePath(initialPath);
      }));
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Retrieves state nodes from a relative path to this state node.
   *
   * @param relativePath The relative path from this state node
   * @param historyValue
   */

  StateNode.prototype.getFromRelativePath = function (relativePath) {
    if (!relativePath.length) {
      return [this];
    }

    var _a = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(relativePath),
        stateKey = _a[0],
        childStatePath = _a.slice(1);

    if (!this.states) {
      throw new Error("Cannot retrieve subPath '".concat(stateKey, "' from node with no states"));
    }

    var childStateNode = this.getStateNode(stateKey);

    if (childStateNode.type === 'history') {
      return childStateNode.resolveHistory();
    }

    if (!this.states[stateKey]) {
      throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
    }

    return this.states[stateKey].getFromRelativePath(childStatePath);
  };

  StateNode.prototype.historyValue = function (relativeStateValue) {
    if (!Object.keys(this.states).length) {
      return undefined;
    }

    return {
      current: relativeStateValue || this.initialStateValue,
      states: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states, function (stateNode, key) {
        if (!relativeStateValue) {
          return stateNode.historyValue();
        }

        var subStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(relativeStateValue) ? undefined : relativeStateValue[key];
        return stateNode.historyValue(subStateValue || stateNode.initialStateValue);
      }, function (stateNode) {
        return !stateNode.history;
      })
    };
  };
  /**
   * Resolves to the historical value(s) of the parent state node,
   * represented by state nodes.
   *
   * @param historyValue
   */


  StateNode.prototype.resolveHistory = function (historyValue) {
    var _this = this;

    if (this.type !== 'history') {
      return [this];
    }

    var parent = this.parent;

    if (!historyValue) {
      var historyTarget = this.target;
      return historyTarget ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(historyTarget).map(function (relativeChildPath) {
        return parent.getFromRelativePath(relativeChildPath);
      })) : parent.initialStateNodes;
    }

    var subHistoryValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.nestedPath)(parent.path, 'states')(historyValue).current;

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(subHistoryValue)) {
      return [parent.getStateNode(subHistoryValue)];
    }

    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(subHistoryValue).map(function (subStatePath) {
      return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];
    }));
  };

  Object.defineProperty(StateNode.prototype, "stateIds", {
    /**
     * All the state node IDs of this state node and its descendant state nodes.
     */
    get: function () {
      var _this = this;

      var childStateIds = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(this.states).map(function (stateKey) {
        return _this.states[stateKey].stateIds;
      }));
      return [this.id].concat(childStateIds);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "events", {
    /**
     * All the event types accepted by this state node and its descendants.
     */
    get: function () {
      var e_8, _a, e_9, _b;

      if (this.__cache.events) {
        return this.__cache.events;
      }

      var states = this.states;
      var events = new Set(this.ownEvents);

      if (states) {
        try {
          for (var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var stateId = _d.value;
            var state = states[stateId];

            if (state.states) {
              try {
                for (var _e = (e_9 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {
                  var event_1 = _f.value;
                  events.add("".concat(event_1));
                }
              } catch (e_9_1) {
                e_9 = {
                  error: e_9_1
                };
              } finally {
                try {
                  if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                } finally {
                  if (e_9) throw e_9.error;
                }
              }
            }
          }
        } catch (e_8_1) {
          e_8 = {
            error: e_8_1
          };
        } finally {
          try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
          } finally {
            if (e_8) throw e_8.error;
          }
        }
      }

      return this.__cache.events = Array.from(events);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StateNode.prototype, "ownEvents", {
    /**
     * All the events that have transitions directly from this state node.
     *
     * Excludes any inert events.
     */
    get: function () {
      var events = new Set(this.transitions.filter(function (transition) {
        return !(!transition.target && !transition.actions.length && transition.internal);
      }).map(function (transition) {
        return transition.eventType;
      }));
      return Array.from(events);
    },
    enumerable: false,
    configurable: true
  });

  StateNode.prototype.resolveTarget = function (_target) {
    var _this = this;

    if (_target === undefined) {
      // an undefined target signals that the state node should not transition from that state when receiving that event
      return undefined;
    }

    return _target.map(function (target) {
      if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(target)) {
        return target;
      }

      var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,
      // do not include machine key on target

      if (isInternalTarget && !_this.parent) {
        return _this.getStateNodeByPath(target.slice(1));
      }

      var resolvedTarget = isInternalTarget ? _this.key + target : target;

      if (_this.parent) {
        try {
          var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);

          return targetStateNode;
        } catch (err) {
          throw new Error("Invalid transition definition for state node '".concat(_this.id, "':\n").concat(err.message));
        }
      } else {
        return _this.getStateNodeByPath(resolvedTarget);
      }
    });
  };

  StateNode.prototype.formatTransition = function (transitionConfig) {
    var _this = this;

    var normalizedTarget = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.normalizeTarget)(transitionConfig.target);
    var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(_target) && _target[0] === _this.delimiter;
    }) : true;
    var guards = this.machine.options.guards;
    var target = this.resolveTarget(normalizedTarget);

    var transition = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transitionConfig), {
      actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig.actions)),
      cond: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toGuard)(transitionConfig.cond, guards),
      target: target,
      source: this,
      internal: internal,
      eventType: transitionConfig.event,
      toJSON: function () {
        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {
          target: transition.target ? transition.target.map(function (t) {
            return "#".concat(t.id);
          }) : undefined,
          source: "#".concat(_this.id)
        });
      }
    });

    return transition;
  };

  StateNode.prototype.formatTransitions = function () {
    var e_10, _a;

    var _this = this;

    var onConfig;

    if (!this.config.on) {
      onConfig = [];
    } else if (Array.isArray(this.config.on)) {
      onConfig = this.config.on;
    } else {
      var _b = this.config.on,
          _c = WILDCARD,
          _d = _b[_c],
          wildcardConfigs = _d === void 0 ? [] : _d,
          strictTransitionConfigs_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__rest)(_b, [typeof _c === "symbol" ? _c : _c + ""]);

      onConfig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(strictTransitionConfigs_1).map(function (key) {
        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION && key === NULL_EVENT) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. " + "Please check the `on` configuration for \"#".concat(_this.id, "\"."));
        }

        var transitionConfigArray = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(key, strictTransitionConfigs_1[key]);

        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {
          validateArrayifiedTransitions(_this, key, transitionConfigArray);
        }

        return transitionConfigArray;
      }).concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(WILDCARD, wildcardConfigs)));
    }

    var eventlessConfig = this.config.always ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)('', this.config.always) : [];
    var doneConfig = this.config.onDone ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(this.id)), this.config.onDone) : [];

    if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!(this.config.onDone && !this.parent), "Root nodes cannot have an \".onDone\" transition. Please check the config of \"".concat(this.id, "\"."));
    }

    var invokeConfig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(this.invoke.map(function (invokeDef) {
      var settleTransitions = [];

      if (invokeDef.onDone) {
        settleTransitions.push.apply(settleTransitions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.doneInvoke)(invokeDef.id)), invokeDef.onDone)), false));
      }

      if (invokeDef.onError) {
        settleTransitions.push.apply(settleTransitions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.error)(invokeDef.id)), invokeDef.onError)), false));
      }

      return settleTransitions;
    }));
    var delayedTransitions = this.after;
    var formattedTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(doneConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(onConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(eventlessConfig), false).map(function (transitionConfig) {
      return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig).map(function (transition) {
        return _this.formatTransition(transition);
      });
    }));

    try {
      for (var delayedTransitions_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {
        var delayedTransition = delayedTransitions_1_1.value;
        formattedTransitions.push(delayedTransition);
      }
    } catch (e_10_1) {
      e_10 = {
        error: e_10_1
      };
    } finally {
      try {
        if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);
      } finally {
        if (e_10) throw e_10.error;
      }
    }

    return formattedTransitions;
  };

  return StateNode;
}();




/***/ }),

/***/ "./node_modules/xstate/es/_virtual/_tslib.js":
/*!***************************************************!*\
  !*** ./node_modules/xstate/es/_virtual/_tslib.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __assign: () => (/* binding */ __assign),
/* harmony export */   __read: () => (/* binding */ __read),
/* harmony export */   __rest: () => (/* binding */ __rest),
/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),
/* harmony export */   __values: () => (/* binding */ __values)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}




/***/ }),

/***/ "./node_modules/xstate/es/actionTypes.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/actionTypes.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   after: () => (/* binding */ after),
/* harmony export */   assign: () => (/* binding */ assign),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   choose: () => (/* binding */ choose),
/* harmony export */   doneState: () => (/* binding */ doneState),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorExecution: () => (/* binding */ errorExecution),
/* harmony export */   errorPlatform: () => (/* binding */ errorPlatform),
/* harmony export */   init: () => (/* binding */ init),
/* harmony export */   invoke: () => (/* binding */ invoke),
/* harmony export */   log: () => (/* binding */ log),
/* harmony export */   nullEvent: () => (/* binding */ nullEvent),
/* harmony export */   pure: () => (/* binding */ pure),
/* harmony export */   raise: () => (/* binding */ raise),
/* harmony export */   send: () => (/* binding */ send),
/* harmony export */   start: () => (/* binding */ start),
/* harmony export */   stop: () => (/* binding */ stop),
/* harmony export */   update: () => (/* binding */ update)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ "./node_modules/xstate/es/types.js");


var start = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Start;
var stop = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Stop;
var raise = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Raise;
var send = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Send;
var cancel = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Cancel;
var nullEvent = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.NullEvent;
var assign = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Assign;
var after = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.After;
var doneState = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.DoneState;
var log = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Log;
var init = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Init;
var invoke = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Invoke;
var errorExecution = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorExecution;
var errorPlatform = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorPlatform;
var error = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorCustom;
var update = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Update;
var choose = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Choose;
var pure = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Pure;




/***/ }),

/***/ "./node_modules/xstate/es/actions.js":
/*!*******************************************!*\
  !*** ./node_modules/xstate/es/actions.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   actionTypes: () => (/* reexport module object */ _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   after: () => (/* binding */ after),
/* harmony export */   assign: () => (/* binding */ assign),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   choose: () => (/* binding */ choose),
/* harmony export */   done: () => (/* binding */ done),
/* harmony export */   doneInvoke: () => (/* binding */ doneInvoke),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   escalate: () => (/* binding */ escalate),
/* harmony export */   forwardTo: () => (/* binding */ forwardTo),
/* harmony export */   getActionFunction: () => (/* binding */ getActionFunction),
/* harmony export */   initEvent: () => (/* binding */ initEvent),
/* harmony export */   isActionObject: () => (/* binding */ isActionObject),
/* harmony export */   log: () => (/* binding */ log),
/* harmony export */   pure: () => (/* binding */ pure),
/* harmony export */   raise: () => (/* binding */ raise),
/* harmony export */   resolveActions: () => (/* binding */ resolveActions),
/* harmony export */   resolveLog: () => (/* binding */ resolveLog),
/* harmony export */   resolveRaise: () => (/* binding */ resolveRaise),
/* harmony export */   resolveSend: () => (/* binding */ resolveSend),
/* harmony export */   resolveStop: () => (/* binding */ resolveStop),
/* harmony export */   respond: () => (/* binding */ respond),
/* harmony export */   send: () => (/* binding */ send),
/* harmony export */   sendParent: () => (/* binding */ sendParent),
/* harmony export */   sendTo: () => (/* binding */ sendTo),
/* harmony export */   sendUpdate: () => (/* binding */ sendUpdate),
/* harmony export */   start: () => (/* binding */ start),
/* harmony export */   stop: () => (/* binding */ stop),
/* harmony export */   toActionObject: () => (/* binding */ toActionObject),
/* harmony export */   toActionObjects: () => (/* binding */ toActionObjects),
/* harmony export */   toActivityDefinition: () => (/* binding */ toActivityDefinition)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ "./node_modules/xstate/es/types.js");
/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actionTypes.js */ "./node_modules/xstate/es/actionTypes.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");








var initEvent = /*#__PURE__*/(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)({
  type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.init
});
function getActionFunction(actionType, actionFunctionMap) {
  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;
}
function toActionObject(action, actionFunctionMap) {
  var actionObject;

  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action) || typeof action === 'number') {
    var exec = getActionFunction(action, actionFunctionMap);

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)) {
      actionObject = {
        type: action,
        exec: exec
      };
    } else if (exec) {
      actionObject = exec;
    } else {
      actionObject = {
        type: action,
        exec: undefined
      };
    }
  } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action)) {
    actionObject = {
      // Convert action to string if unnamed
      type: action.name || action.toString(),
      exec: action
    };
  } else {
    var exec = getActionFunction(action.type, actionFunctionMap);

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)) {
      actionObject = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {
        exec: exec
      });
    } else if (exec) {
      var actionType = exec.type || action.type;
      actionObject = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, exec), action), {
        type: actionType
      });
    } else {
      actionObject = action;
    }
  }

  return actionObject;
}
var toActionObjects = function (action, actionFunctionMap) {
  if (!action) {
    return [];
  }

  var actions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(action) ? action : [action];
  return actions.map(function (subAction) {
    return toActionObject(subAction, actionFunctionMap);
  });
};
function toActivityDefinition(action) {
  var actionObject = toActionObject(action);
  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({
    id: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action) ? action : actionObject.id
  }, actionObject), {
    type: actionObject.type
  });
}
/**
 * Raises an event. This places the event in the internal event queue, so that
 * the event is immediately consumed by the machine in the current step.
 *
 * @param eventType The event to raise.
 */

function raise(event, options) {
  return {
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,
    event: typeof event === 'function' ? event : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),
    delay: options ? options.delay : undefined,
    id: options === null || options === void 0 ? void 0 : options.id
  };
}
function resolveRaise(action, ctx, _event, delaysMap) {
  var meta = {
    _event: _event
  };
  var resolvedEvent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event) ? action.event(ctx, _event.data, meta) : action.event);
  var resolvedDelay;

  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)) {
    var configDelay = delaysMap && delaysMap[action.delay];
    resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
  } else {
    resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
  }

  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,
    _event: resolvedEvent,
    delay: resolvedDelay
  });
}
/**
 * Sends an event. This returns an action that will be read by an interpreter to
 * send the event in the next step, after the current step is finished executing.
 *
 * @deprecated Use the `sendTo(...)` action creator instead.
 *
 * @param event The event to send.
 * @param options Options to pass into the send event:
 *  - `id` - The unique send event identifier (used with `cancel()`).
 *  - `delay` - The number of milliseconds to delay the sending of the event.
 *  - `to` - The target of this event (by default, the machine the event was sent from).
 */

function send(event, options) {
  return {
    to: options ? options.to : undefined,
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send,
    event: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event) ? event : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),
    delay: options ? options.delay : undefined,
    // TODO: don't auto-generate IDs here like that
    // there is too big chance of the ID collision
    id: options && options.id !== undefined ? options.id : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event) ? event.name : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getEventType)(event)
  };
}
function resolveSend(action, ctx, _event, delaysMap) {
  var meta = {
    _event: _event
  }; // TODO: helper function for resolving Expr

  var resolvedEvent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event) ? action.event(ctx, _event.data, meta) : action.event);
  var resolvedDelay;

  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)) {
    var configDelay = delaysMap && delaysMap[action.delay];
    resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
  } else {
    resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
  }

  var resolvedTarget = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.to) ? action.to(ctx, _event.data, meta) : action.to;
  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {
    to: resolvedTarget,
    _event: resolvedEvent,
    event: resolvedEvent.data,
    delay: resolvedDelay
  });
}
/**
 * Sends an event to this machine's parent.
 *
 * @param event The event to send to the parent machine.
 * @param options Options to pass into the send event.
 */

function sendParent(event, options) {
  return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {
    to: _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent
  }));
}
/**
 * Sends an event to an actor.
 *
 * @param actor The `ActorRef` to send the event to.
 * @param event The event to send, or an expression that evaluates to the event to send
 * @param options Send action options
 * @returns An XState send action object
 */

function sendTo(actor, event, options) {
  return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {
    to: actor
  }));
}
/**
 * Sends an update event to this machine's parent.
 */

function sendUpdate() {
  return sendParent(_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.update);
}
/**
 * Sends an event back to the sender of the original event.
 *
 * @param event The event to send back to the sender
 * @param options Options to pass into the send event
 */

function respond(event, options) {
  return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {
    to: function (_, __, _a) {
      var _event = _a._event;
      return _event.origin; // TODO: handle when _event.origin is undefined
    }
  }));
}

var defaultLogExpr = function (context, event) {
  return {
    context: context,
    event: event
  };
};
/**
 *
 * @param expr The expression function to evaluate which will be logged.
 *  Takes in 2 arguments:
 *  - `ctx` - the current state context
 *  - `event` - the event that caused this action to be executed.
 * @param label The label to give to the logged expression.
 */


function log(expr, label) {
  if (expr === void 0) {
    expr = defaultLogExpr;
  }

  return {
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log,
    label: label,
    expr: expr
  };
}
var resolveLog = function (action, ctx, _event) {
  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {
    value: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.expr) ? action.expr : action.expr(ctx, _event.data, {
      _event: _event
    })
  });
};
/**
 * Cancels an in-flight `send(...)` action. A canceled sent action will not
 * be executed, nor will its event be sent, unless it has already been sent
 * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).
 *
 * @param sendId The `id` of the `send(...)` action to cancel.
 */

var cancel = function (sendId) {
  return {
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.cancel,
    sendId: sendId
  };
};
/**
 * Starts an activity.
 *
 * @param activity The activity to start.
 */

function start(activity) {
  var activityDef = toActivityDefinition(activity);
  return {
    type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Start,
    activity: activityDef,
    exec: undefined
  };
}
/**
 * Stops an activity.
 *
 * @param actorRef The activity to stop.
 */

function stop(actorRef) {
  var activity = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(actorRef) ? actorRef : toActivityDefinition(actorRef);
  return {
    type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,
    activity: activity,
    exec: undefined
  };
}
function resolveStop(action, context, _event) {
  var actorRefOrString = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.activity) ? action.activity(context, _event.data) : action.activity;
  var resolvedActorRef = typeof actorRefOrString === 'string' ? {
    id: actorRefOrString
  } : actorRefOrString;
  var actionObject = {
    type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,
    activity: resolvedActorRef
  };
  return actionObject;
}
/**
 * Updates the current context of the machine.
 *
 * @param assignment An object that represents the partial context to update.
 */

var assign = function (assignment) {
  return {
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign,
    assignment: assignment
  };
};
function isActionObject(action) {
  return typeof action === 'object' && 'type' in action;
}
/**
 * Returns an event type that represents an implicit event that
 * is sent after the specified `delay`.
 *
 * @param delayRef The delay in milliseconds
 * @param id The state node ID where this event is handled
 */

function after(delayRef, id) {
  var idSuffix = id ? "#".concat(id) : '';
  return "".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.After, "(").concat(delayRef, ")").concat(idSuffix);
}
/**
 * Returns an event that represents that a final state node
 * has been reached in the parent state node.
 *
 * @param id The final state node's parent state node `id`
 * @param data The data to pass into the event
 */

function done(id, data) {
  var type = "".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneState, ".").concat(id);
  var eventObject = {
    type: type,
    data: data
  };

  eventObject.toString = function () {
    return type;
  };

  return eventObject;
}
/**
 * Returns an event that represents that an invoked service has terminated.
 *
 * An invoked service is terminated when it has reached a top-level final state node,
 * but not when it is canceled.
 *
 * @param id The final state node ID
 * @param data The data to pass into the event
 */

function doneInvoke(id, data) {
  var type = "".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneInvoke, ".").concat(id);
  var eventObject = {
    type: type,
    data: data
  };

  eventObject.toString = function () {
    return type;
  };

  return eventObject;
}
function error(id, data) {
  var type = "".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.ErrorPlatform, ".").concat(id);
  var eventObject = {
    type: type,
    data: data
  };

  eventObject.toString = function () {
    return type;
  };

  return eventObject;
}
function pure(getActions) {
  return {
    type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Pure,
    get: getActions
  };
}
/**
 * Forwards (sends) an event to a specified service.
 *
 * @param target The target service to forward the event to.
 * @param options Options to pass into the send action creator.
 */

function forwardTo(target, options) {
  if (!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION && (!target || typeof target === 'function')) {
    var originalTarget_1 = target;

    target = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      var resolvedTarget = typeof originalTarget_1 === 'function' ? originalTarget_1.apply(void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args), false)) : originalTarget_1;

      if (!resolvedTarget) {
        throw new Error("Attempted to forward event to undefined actor. This risks an infinite loop in the sender.");
      }

      return resolvedTarget;
    };
  }

  return send(function (_, event) {
    return event;
  }, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {
    to: target
  }));
}
/**
 * Escalates an error by sending it as an event to this machine's parent.
 *
 * @param errorData The error data to send, or the expression function that
 * takes in the `context`, `event`, and `meta`, and returns the error data to send.
 * @param options Options to pass into the send action creator.
 */

function escalate(errorData, options) {
  return sendParent(function (context, event, meta) {
    return {
      type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.error,
      data: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(errorData) ? errorData(context, event, meta) : errorData
    };
  }, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {
    to: _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent
  }));
}
function choose(conds) {
  return {
    type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Choose,
    conds: conds
  };
}

var pluckAssigns = function (actionBlocks) {
  var e_1, _a;

  var assignActions = [];

  try {
    for (var actionBlocks_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {
      var block = actionBlocks_1_1.value;
      var i = 0;

      while (i < block.actions.length) {
        if (block.actions[i].type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign) {
          assignActions.push(block.actions[i]);
          block.actions.splice(i, 1);
          continue;
        }

        i++;
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);
    } finally {
      if (e_1) throw e_1.error;
    }
  }

  return assignActions;
};

function resolveActions(machine, currentState, currentContext, _event, actionBlocks, predictableExec, preserveActionOrder) {
  if (preserveActionOrder === void 0) {
    preserveActionOrder = false;
  }

  var assignActions = preserveActionOrder ? [] : pluckAssigns(actionBlocks);
  var updatedContext = assignActions.length ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(currentContext, _event, assignActions, currentState) : currentContext;
  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;
  var deferredToBlockEnd = [];

  function handleAction(blockType, actionObject) {
    var _a;

    switch (actionObject.type) {
      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise:
        {
          var raisedAction = resolveRaise(actionObject, updatedContext, _event, machine.options.delays);

          if (predictableExec && typeof raisedAction.delay === 'number') {
            predictableExec(raisedAction, updatedContext, _event);
          }

          return raisedAction;
        }

      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send:
        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init

        if (!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION) {
          var configuredDelay = actionObject.delay; // warn after resolving as we can create better contextual message here

          (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.warn)(!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(configuredDelay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length
          "No delay reference for delay expression '".concat(configuredDelay, "' was found on machine '").concat(machine.id, "'"));
        }

        if (predictableExec && sendAction.to !== _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Internal) {
          if (blockType === 'entry') {
            deferredToBlockEnd.push(sendAction);
          } else {
            predictableExec(sendAction, updatedContext, _event);
          }
        }

        return sendAction;

      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log:
        {
          var resolved = resolveLog(actionObject, updatedContext, _event);
          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);
          return resolved;
        }

      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.choose:
        {
          var chooseAction = actionObject;
          var matchedActions = (_a = chooseAction.conds.find(function (condition) {
            var guard = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toGuard)(condition.cond, machine.options.guards);
            return !guard || (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.evaluateGuard)(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);
          })) === null || _a === void 0 ? void 0 : _a.actions;

          if (!matchedActions) {
            return [];
          }

          var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolveActions(machine, currentState, updatedContext, _event, [{
            type: blockType,
            actions: toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions), machine.options.actions)
          }], predictableExec, preserveActionOrder), 2),
              resolvedActionsFromChoose = _b[0],
              resolvedContextFromChoose = _b[1];

          updatedContext = resolvedContextFromChoose;
          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
          return resolvedActionsFromChoose;
        }

      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.pure:
        {
          var matchedActions = actionObject.get(updatedContext, _event.data);

          if (!matchedActions) {
            return [];
          }

          var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolveActions(machine, currentState, updatedContext, _event, [{
            type: blockType,
            actions: toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions), machine.options.actions)
          }], predictableExec, preserveActionOrder), 2),
              resolvedActionsFromPure = _c[0],
              resolvedContext = _c[1];

          updatedContext = resolvedContext;
          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
          return resolvedActionsFromPure;
        }

      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.stop:
        {
          var resolved = resolveStop(actionObject, updatedContext, _event);
          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, currentContext, _event);
          return resolved;
        }

      case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign:
        {
          updatedContext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(updatedContext, _event, [actionObject], !predictableExec ? currentState : undefined);
          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
          break;
        }

      default:
        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);
        var exec_1 = resolvedActionObject.exec;

        if (predictableExec) {
          predictableExec(resolvedActionObject, updatedContext, _event);
        } else if (exec_1 && preservedContexts) {
          var contextIndex_1 = preservedContexts.length - 1;

          var wrapped = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, resolvedActionObject), {
            exec: function (_ctx) {
              var args = [];

              for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
              }

              exec_1.apply(void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([preservedContexts[contextIndex_1]], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args), false));
            }
          });

          resolvedActionObject = wrapped;
        }

        return resolvedActionObject;
    }
  }

  function processBlock(block) {
    var e_2, _a;

    var resolvedActions = [];

    try {
      for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
        var action = _c.value;
        var resolved = handleAction(block.type, action);

        if (resolved) {
          resolvedActions = resolvedActions.concat(resolved);
        }
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_2) throw e_2.error;
      }
    }

    deferredToBlockEnd.forEach(function (action) {
      predictableExec(action, updatedContext, _event);
    });
    deferredToBlockEnd.length = 0;
    return resolvedActions;
  }

  var resolvedActions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(actionBlocks.map(processBlock));
  return [resolvedActions, updatedContext];
}




/***/ }),

/***/ "./node_modules/xstate/es/behaviors.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/behaviors.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fromPromise: () => (/* binding */ fromPromise),
/* harmony export */   fromReducer: () => (/* binding */ fromReducer),
/* harmony export */   spawnBehavior: () => (/* binding */ spawnBehavior)
/* harmony export */ });
/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions.js */ "./node_modules/xstate/es/actions.js");
/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Actor.js */ "./node_modules/xstate/es/Actor.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");




/**
 * Returns an actor behavior from a reducer and its initial state.
 *
 * @param transition The pure reducer that returns the next state given the current state and event.
 * @param initialState The initial state of the reducer.
 * @returns An actor behavior
 */

function fromReducer(transition, initialState) {
  return {
    transition: transition,
    initialState: initialState
  };
}
function fromPromise(promiseFn) {
  var initialState = {
    error: undefined,
    data: undefined,
    status: 'pending'
  };
  return {
    transition: function (state, event, _a) {
      var parent = _a.parent,
          id = _a.id,
          observers = _a.observers;

      switch (event.type) {
        case 'fulfill':
          parent === null || parent === void 0 ? void 0 : parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.doneInvoke)(id, event.data));
          return {
            error: undefined,
            data: event.data,
            status: 'fulfilled'
          };

        case 'reject':
          parent === null || parent === void 0 ? void 0 : parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.error)(id, event.error));
          observers.forEach(function (observer) {
            observer.error(event.error);
          });
          return {
            error: event.error,
            data: undefined,
            status: 'rejected'
          };

        default:
          return state;
      }
    },
    initialState: initialState,
    start: function (_a) {
      var self = _a.self;
      promiseFn().then(function (data) {
        self.send({
          type: 'fulfill',
          data: data
        });
      }, function (reason) {
        self.send({
          type: 'reject',
          error: reason
        });
      });
      return initialState;
    }
  };
}
function spawnBehavior(behavior, options) {
  if (options === void 0) {
    options = {};
  }

  var state = behavior.initialState;
  var observers = new Set();
  var mailbox = [];
  var flushing = false;

  var flush = function () {
    if (flushing) {
      return;
    }

    flushing = true;

    while (mailbox.length > 0) {
      var event_1 = mailbox.shift();
      state = behavior.transition(state, event_1, actorCtx);
      observers.forEach(function (observer) {
        return observer.next(state);
      });
    }

    flushing = false;
  };

  var actor = (0,_Actor_js__WEBPACK_IMPORTED_MODULE_1__.toActorRef)({
    id: options.id,
    send: function (event) {
      mailbox.push(event);
      flush();
    },
    getSnapshot: function () {
      return state;
    },
    subscribe: function (next, handleError, complete) {
      var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toObserver)(next, handleError, complete);
      observers.add(observer);
      observer.next(state);
      return {
        unsubscribe: function () {
          observers.delete(observer);
        }
      };
    }
  });
  var actorCtx = {
    parent: options.parent,
    self: actor,
    id: options.id || 'anonymous',
    observers: observers
  };
  state = behavior.start ? behavior.start(actorCtx) : state;
  return actor;
}




/***/ }),

/***/ "./node_modules/xstate/es/constants.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/constants.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_GUARD_TYPE: () => (/* binding */ DEFAULT_GUARD_TYPE),
/* harmony export */   EMPTY_ACTIVITY_MAP: () => (/* binding */ EMPTY_ACTIVITY_MAP),
/* harmony export */   STATE_DELIMITER: () => (/* binding */ STATE_DELIMITER),
/* harmony export */   TARGETLESS_KEY: () => (/* binding */ TARGETLESS_KEY)
/* harmony export */ });
var STATE_DELIMITER = '.';
var EMPTY_ACTIVITY_MAP = {};
var DEFAULT_GUARD_TYPE = 'xstate.guard';
var TARGETLESS_KEY = '';




/***/ }),

/***/ "./node_modules/xstate/es/devTools.js":
/*!********************************************!*\
  !*** ./node_modules/xstate/es/devTools.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getGlobal: () => (/* binding */ getGlobal),
/* harmony export */   registerService: () => (/* binding */ registerService)
/* harmony export */ });
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");


function getGlobal() {
  if (typeof globalThis !== 'undefined') {
    return globalThis;
  }

  if (typeof self !== 'undefined') {
    return self;
  }

  if (typeof window !== 'undefined') {
    return window;
  }

  if (typeof __webpack_require__.g !== 'undefined') {
    return __webpack_require__.g;
  }

  if (!_environment_js__WEBPACK_IMPORTED_MODULE_0__.IS_PRODUCTION) {
    console.warn('XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues');
  }
}

function getDevTools() {
  var global = getGlobal();

  if (global && '__xstate__' in global) {
    return global.__xstate__;
  }

  return undefined;
}

function registerService(service) {
  if (!getGlobal()) {
    return;
  }

  var devTools = getDevTools();

  if (devTools) {
    devTools.register(service);
  }
}




/***/ }),

/***/ "./node_modules/xstate/es/environment.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/environment.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IS_PRODUCTION: () => (/* binding */ IS_PRODUCTION)
/* harmony export */ });
var IS_PRODUCTION = "development" === 'production';




/***/ }),

/***/ "./node_modules/xstate/es/interpreter.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/interpreter.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Interpreter: () => (/* binding */ Interpreter),
/* harmony export */   InterpreterStatus: () => (/* binding */ InterpreterStatus),
/* harmony export */   interpret: () => (/* binding */ interpret),
/* harmony export */   spawn: () => (/* binding */ spawn)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ "./node_modules/xstate/es/types.js");
/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./State.js */ "./node_modules/xstate/es/State.js");
/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actionTypes.js */ "./node_modules/xstate/es/actionTypes.js");
/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./actions.js */ "./node_modules/xstate/es/actions.js");
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");
/* harmony import */ var _scheduler_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scheduler.js */ "./node_modules/xstate/es/scheduler.js");
/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Actor.js */ "./node_modules/xstate/es/Actor.js");
/* harmony import */ var _registry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./registry.js */ "./node_modules/xstate/es/registry.js");
/* harmony import */ var _devTools_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./devTools.js */ "./node_modules/xstate/es/devTools.js");
/* harmony import */ var _serviceScope_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./serviceScope.js */ "./node_modules/xstate/es/serviceScope.js");
/* harmony import */ var _behaviors_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./behaviors.js */ "./node_modules/xstate/es/behaviors.js");














var DEFAULT_SPAWN_OPTIONS = {
  sync: false,
  autoForward: false
};
var InterpreterStatus;

(function (InterpreterStatus) {
  InterpreterStatus[InterpreterStatus["NotStarted"] = 0] = "NotStarted";
  InterpreterStatus[InterpreterStatus["Running"] = 1] = "Running";
  InterpreterStatus[InterpreterStatus["Stopped"] = 2] = "Stopped";
})(InterpreterStatus || (InterpreterStatus = {}));

var Interpreter =
/*#__PURE__*/

/** @class */
function () {
  /**
   * Creates a new Interpreter instance (i.e., service) for the given machine with the provided options, if any.
   *
   * @param machine The machine to be interpreted
   * @param options Interpreter options
   */
  function Interpreter(machine, options) {
    if (options === void 0) {
      options = Interpreter.defaultOptions;
    }

    var _this = this;

    this.machine = machine;
    this.delayedEventsMap = {};
    this.listeners = new Set();
    this.contextListeners = new Set();
    this.stopListeners = new Set();
    this.doneListeners = new Set();
    this.eventListeners = new Set();
    this.sendListeners = new Set();
    /**
     * Whether the service is started.
     */

    this.initialized = false;
    this.status = InterpreterStatus.NotStarted;
    this.children = new Map();
    this.forwardTo = new Set();
    this._outgoingQueue = [];
    /**
     * Alias for Interpreter.prototype.start
     */

    this.init = this.start;
    /**
     * Sends an event to the running interpreter to trigger a transition.
     *
     * An array of events (batched) can be sent as well, which will send all
     * batched events to the running interpreter. The listeners will be
     * notified only **once** when all events are processed.
     *
     * @param event The event(s) to send
     */

    this.send = function (event, payload) {
      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(event)) {
        _this.batch(event);

        return _this.state;
      }

      var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toEventObject)(event, payload));

      if (_this.status === InterpreterStatus.Stopped) {
        // do nothing
        if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "Event \"".concat(_event.name, "\" was sent to stopped service \"").concat(_this.machine.id, "\". This service has already reached its final state, and will not transition.\nEvent: ").concat(JSON.stringify(_event.data)));
        }

        return _this.state;
      }

      if (_this.status !== InterpreterStatus.Running && !_this.options.deferEvents) {
        throw new Error("Event \"".concat(_event.name, "\" was sent to uninitialized service \"").concat(_this.machine.id // tslint:disable-next-line:max-line-length
        , "\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\nEvent: ").concat(JSON.stringify(_event.data)));
      }

      _this.scheduler.schedule(function () {
        // Forward copy of event to child actors
        _this.forward(_event);

        var nextState = _this._nextState(_event);

        _this.update(nextState, _event);
      });

      return _this._state; // TODO: deprecate (should return void)
      // tslint:disable-next-line:semicolon
    };

    this.sendTo = function (event, to, immediate) {
      var isParent = _this.parent && (to === _types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Parent || _this.parent.id === to);
      var target = isParent ? _this.parent : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(to) ? to === _types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Internal ? _this : _this.children.get(to) || _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.get(to) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isActor)(to) ? to : undefined;

      if (!target) {
        if (!isParent) {
          throw new Error("Unable to send event to child '".concat(to, "' from service '").concat(_this.id, "'."));
        } // tslint:disable-next-line:no-console


        if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "Service '".concat(_this.id, "' has no parent: unable to send event ").concat(event.type));
        }

        return;
      }

      if ('machine' in target) {
        // perhaps those events should be rejected in the parent
        // but atm it doesn't have easy access to all of the information that is required to do it reliably
        if (_this.status !== InterpreterStatus.Stopped || _this.parent !== target || // we need to send events to the parent from exit handlers of a machine that reached its final state
        _this.state.done) {
          // Send SCXML events to machines
          var scxmlEvent = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, event), {
            name: event.name === _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.error ? "".concat((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(_this.id)) : event.name,
            origin: _this.sessionId
          });

          if (!immediate && _this.machine.config.predictableActionArguments) {
            _this._outgoingQueue.push([target, scxmlEvent]);
          } else {
            target.send(scxmlEvent);
          }
        }
      } else {
        // Send normal events to other targets
        if (!immediate && _this.machine.config.predictableActionArguments) {
          _this._outgoingQueue.push([target, event.data]);
        } else {
          target.send(event.data);
        }
      }
    };

    this._exec = function (action, context, _event, actionFunctionMap) {
      if (actionFunctionMap === void 0) {
        actionFunctionMap = _this.machine.options.actions;
      }

      var actionOrExec = action.exec || (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.getActionFunction)(action.type, actionFunctionMap);
      var exec = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(actionOrExec) ? actionOrExec : actionOrExec ? actionOrExec.exec : action.exec;

      if (exec) {
        try {
          return exec(context, _event.data, !_this.machine.config.predictableActionArguments ? {
            action: action,
            state: _this.state,
            _event: _event
          } : {
            action: action,
            _event: _event
          });
        } catch (err) {
          if (_this.parent) {
            _this.parent.send({
              type: 'xstate.error',
              data: err
            });
          }

          throw err;
        }
      }

      switch (action.type) {
        case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.raise:
          {
            // if raise action reached the interpreter then it's a delayed one
            var sendAction_1 = action;

            _this.defer(sendAction_1);

            break;
          }

        case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.send:
          var sendAction = action;

          if (typeof sendAction.delay === 'number') {
            _this.defer(sendAction);

            return;
          } else {
            if (sendAction.to) {
              _this.sendTo(sendAction._event, sendAction.to, _event === _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);
            } else {
              _this.send(sendAction._event);
            }
          }

          break;

        case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.cancel:
          _this.cancel(action.sendId);

          break;

        case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.start:
          {
            if (_this.status !== InterpreterStatus.Running) {
              return;
            }

            var activity = action.activity; // If the activity will be stopped right after it's started
            // (such as in transient states)
            // don't bother starting the activity.

            if ( // in v4 with `predictableActionArguments` invokes are called eagerly when the `this.state` still points to the previous state
            !_this.machine.config.predictableActionArguments && !_this.state.activities[activity.id || activity.type]) {
              break;
            } // Invoked services


            if (activity.type === _types_js__WEBPACK_IMPORTED_MODULE_2__.ActionTypes.Invoke) {
              var invokeSource = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(activity.src);
              var serviceCreator = _this.machine.options.services ? _this.machine.options.services[invokeSource.type] : undefined;
              var id = activity.id,
                  data = activity.data;

              if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!('forward' in activity), // tslint:disable-next-line:max-line-length
                "`forward` property is deprecated (found in invocation of '".concat(activity.src, "' in in machine '").concat(_this.machine.id, "'). ") + "Please use `autoForward` instead.");
              }

              var autoForward = 'autoForward' in activity ? activity.autoForward : !!activity.forward;

              if (!serviceCreator) {
                // tslint:disable-next-line:no-console
                if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
                  (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "No service found for invocation '".concat(activity.src, "' in machine '").concat(_this.machine.id, "'."));
                }

                return;
              }

              var resolvedData = data ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(data, context, _event) : undefined;

              if (typeof serviceCreator === 'string') {
                // TODO: warn
                return;
              }

              var source = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(serviceCreator) ? serviceCreator(context, _event.data, {
                data: resolvedData,
                src: invokeSource,
                meta: activity.meta
              }) : serviceCreator;

              if (!source) {
                // TODO: warn?
                return;
              }

              var options = void 0;

              if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(source)) {
                source = resolvedData ? source.withContext(resolvedData) : source;
                options = {
                  autoForward: autoForward
                };
              }

              _this.spawn(source, id, options);
            } else {
              _this.spawnActivity(activity);
            }

            break;
          }

        case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.stop:
          {
            _this.stopChild(action.activity.id);

            break;
          }

        case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.log:
          var _a = action,
              label = _a.label,
              value = _a.value;

          if (label) {
            _this.logger(label, value);
          } else {
            _this.logger(value);
          }

          break;

        default:
          if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "No implementation found for action type '".concat(action.type, "'"));
          }

          break;
      }
    };

    var resolvedOptions = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, Interpreter.defaultOptions), options);

    var clock = resolvedOptions.clock,
        logger = resolvedOptions.logger,
        parent = resolvedOptions.parent,
        id = resolvedOptions.id;
    var resolvedId = id !== undefined ? id : machine.id;
    this.id = resolvedId;
    this.logger = logger;
    this.clock = clock;
    this.parent = parent;
    this.options = resolvedOptions;
    this.scheduler = new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({
      deferEvents: this.options.deferEvents
    });
    this.sessionId = _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.bookId();
  }

  Object.defineProperty(Interpreter.prototype, "initialState", {
    get: function () {
      var _this = this;

      if (this._initialState) {
        return this._initialState;
      }

      return (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function () {
        _this._initialState = _this.machine.initialState;
        return _this._initialState;
      });
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Interpreter.prototype, "state", {
    /**
     * @deprecated Use `.getSnapshot()` instead.
     */
    get: function () {
      if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(this.status !== InterpreterStatus.NotStarted, "Attempted to read state from uninitialized service '".concat(this.id, "'. Make sure the service is started first."));
      }

      return this._state;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Executes the actions of the given state, with that state's `context` and `event`.
   *
   * @param state The state whose actions will be executed
   * @param actionsConfig The action implementations to use
   */

  Interpreter.prototype.execute = function (state, actionsConfig) {
    var e_1, _a;

    try {
      for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(state.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
        var action = _c.value;
        this.exec(action, state, actionsConfig);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  };

  Interpreter.prototype.update = function (state, _event) {
    var e_2, _a, e_3, _b, e_4, _c, e_5, _d;

    var _this = this; // Attach session ID to state


    state._sessionid = this.sessionId; // Update state

    this._state = state; // Execute actions

    if ((!this.machine.config.predictableActionArguments || // this is currently required to execute initial actions as the `initialState` gets cached
    // we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns
    _event === _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent) && this.options.execute) {
      this.execute(this.state);
    } else {
      var item = void 0;

      while (item = this._outgoingQueue.shift()) {
        item[0].send(item[1]);
      }
    } // Update children


    this.children.forEach(function (child) {
      _this.state.children[child.id] = child;
    }); // Dev tools

    if (this.devTools) {
      this.devTools.send(_event.data, state);
    } // Execute listeners


    if (state.event) {
      try {
        for (var _e = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()) {
          var listener = _f.value;
          listener(state.event);
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
    }

    try {
      for (var _g = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()) {
        var listener = _h.value;
        listener(state, state.event);
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
      } finally {
        if (e_3) throw e_3.error;
      }
    }

    try {
      for (var _j = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()) {
        var contextListener = _k.value;
        contextListener(this.state.context, this.state.history ? this.state.history.context : undefined);
      }
    } catch (e_4_1) {
      e_4 = {
        error: e_4_1
      };
    } finally {
      try {
        if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
      } finally {
        if (e_4) throw e_4.error;
      }
    }

    if (this.state.done) {
      // get final child state node
      var finalChildStateNode = state.configuration.find(function (sn) {
        return sn.type === 'final' && sn.parent === _this.machine;
      });
      var doneData = finalChildStateNode && finalChildStateNode.doneData ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(finalChildStateNode.doneData, state.context, _event) : undefined;
      this._doneEvent = (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(this.id, doneData);

      try {
        for (var _l = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()) {
          var listener = _m.value;
          listener(this._doneEvent);
        }
      } catch (e_5_1) {
        e_5 = {
          error: e_5_1
        };
      } finally {
        try {
          if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
        } finally {
          if (e_5) throw e_5.error;
        }
      }

      this._stop();

      this._stopChildren();

      _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(this.sessionId);
    }
  };
  /*
   * Adds a listener that is notified whenever a state transition happens. The listener is called with
   * the next state and the event object that caused the state transition.
   *
   * @param listener The state listener
   */


  Interpreter.prototype.onTransition = function (listener) {
    this.listeners.add(listener); // Send current state to listener

    if (this.status === InterpreterStatus.Running) {
      listener(this.state, this.state.event);
    }

    return this;
  };

  Interpreter.prototype.subscribe = function (nextListenerOrObserver, _, // TODO: error listener
  completeListener) {
    var _this = this;

    var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(nextListenerOrObserver, _, completeListener);
    this.listeners.add(observer.next); // Send current state to listener

    if (this.status !== InterpreterStatus.NotStarted) {
      observer.next(this.state);
    }

    var completeOnce = function () {
      _this.doneListeners.delete(completeOnce);

      _this.stopListeners.delete(completeOnce);

      observer.complete();
    };

    if (this.status === InterpreterStatus.Stopped) {
      observer.complete();
    } else {
      this.onDone(completeOnce);
      this.onStop(completeOnce);
    }

    return {
      unsubscribe: function () {
        _this.listeners.delete(observer.next);

        _this.doneListeners.delete(completeOnce);

        _this.stopListeners.delete(completeOnce);
      }
    };
  };
  /**
   * Adds an event listener that is notified whenever an event is sent to the running interpreter.
   * @param listener The event listener
   */


  Interpreter.prototype.onEvent = function (listener) {
    this.eventListeners.add(listener);
    return this;
  };
  /**
   * Adds an event listener that is notified whenever a `send` event occurs.
   * @param listener The event listener
   */


  Interpreter.prototype.onSend = function (listener) {
    this.sendListeners.add(listener);
    return this;
  };
  /**
   * Adds a context listener that is notified whenever the state context changes.
   * @param listener The context listener
   */


  Interpreter.prototype.onChange = function (listener) {
    this.contextListeners.add(listener);
    return this;
  };
  /**
   * Adds a listener that is notified when the machine is stopped.
   * @param listener The listener
   */


  Interpreter.prototype.onStop = function (listener) {
    this.stopListeners.add(listener);
    return this;
  };
  /**
   * Adds a state listener that is notified when the statechart has reached its final state.
   * @param listener The state listener
   */


  Interpreter.prototype.onDone = function (listener) {
    if (this.status === InterpreterStatus.Stopped && this._doneEvent) {
      listener(this._doneEvent);
    } else {
      this.doneListeners.add(listener);
    }

    return this;
  };
  /**
   * Removes a listener.
   * @param listener The listener to remove
   */


  Interpreter.prototype.off = function (listener) {
    this.listeners.delete(listener);
    this.eventListeners.delete(listener);
    this.sendListeners.delete(listener);
    this.stopListeners.delete(listener);
    this.doneListeners.delete(listener);
    this.contextListeners.delete(listener);
    return this;
  };
  /**
   * Starts the interpreter from the given state, or the initial state.
   * @param initialState The state to start the statechart from
   */


  Interpreter.prototype.start = function (initialState) {
    var _this = this;

    if (this.status === InterpreterStatus.Running) {
      // Do not restart the service if it is already started
      return this;
    } // yes, it's a hack but we need the related cache to be populated for some things to work (like delayed transitions)
    // this is usually called by `machine.getInitialState` but if we rehydrate from a state we might bypass this call
    // we also don't want to call this method here as it resolves the full initial state which might involve calling assign actions
    // and that could potentially lead to some unwanted side-effects (even such as creating some rogue actors)


    this.machine._init();

    _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.register(this.sessionId, this);
    this.initialized = true;
    this.status = InterpreterStatus.Running;
    var resolvedState = initialState === undefined ? this.initialState : (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function () {
      return (0,_State_js__WEBPACK_IMPORTED_MODULE_9__.isStateConfig)(initialState) ? _this.machine.resolveState(initialState) : _this.machine.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_9__.State.from(initialState, _this.machine.context));
    });

    if (this.options.devTools) {
      this.attachDev();
    }

    this.scheduler.initialize(function () {
      _this.update(resolvedState, _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);
    });
    return this;
  };

  Interpreter.prototype._stopChildren = function () {
    // TODO: think about converting those to actions
    this.children.forEach(function (child) {
      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)) {
        child.stop();
      }
    });
    this.children.clear();
  };

  Interpreter.prototype._stop = function () {
    var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;

    try {
      for (var _f = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()) {
        var listener = _g.value;
        this.listeners.delete(listener);
      }
    } catch (e_6_1) {
      e_6 = {
        error: e_6_1
      };
    } finally {
      try {
        if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
      } finally {
        if (e_6) throw e_6.error;
      }
    }

    try {
      for (var _h = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()) {
        var listener = _j.value; // call listener, then remove

        listener();
        this.stopListeners.delete(listener);
      }
    } catch (e_7_1) {
      e_7 = {
        error: e_7_1
      };
    } finally {
      try {
        if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
      } finally {
        if (e_7) throw e_7.error;
      }
    }

    try {
      for (var _k = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()) {
        var listener = _l.value;
        this.contextListeners.delete(listener);
      }
    } catch (e_8_1) {
      e_8 = {
        error: e_8_1
      };
    } finally {
      try {
        if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
      } finally {
        if (e_8) throw e_8.error;
      }
    }

    try {
      for (var _m = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()) {
        var listener = _o.value;
        this.doneListeners.delete(listener);
      }
    } catch (e_9_1) {
      e_9 = {
        error: e_9_1
      };
    } finally {
      try {
        if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
      } finally {
        if (e_9) throw e_9.error;
      }
    }

    if (!this.initialized) {
      // Interpreter already stopped; do nothing
      return this;
    }

    this.initialized = false;
    this.status = InterpreterStatus.Stopped;
    this._initialState = undefined;

    try {
      // we are going to stop within the current sync frame
      // so we can safely just cancel this here as nothing async should be fired anyway
      for (var _p = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(Object.keys(this.delayedEventsMap)), _q = _p.next(); !_q.done; _q = _p.next()) {
        var key = _q.value;
        this.clock.clearTimeout(this.delayedEventsMap[key]);
      }
    } catch (e_10_1) {
      e_10 = {
        error: e_10_1
      };
    } finally {
      try {
        if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
      } finally {
        if (e_10) throw e_10.error;
      }
    } // clear everything that might be enqueued


    this.scheduler.clear();
    this.scheduler = new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({
      deferEvents: this.options.deferEvents
    });
  };
  /**
   * Stops the interpreter and unsubscribe all listeners.
   *
   * This will also notify the `onStop` listeners.
   */


  Interpreter.prototype.stop = function () {
    // TODO: add warning for stopping non-root interpreters
    var _this = this; // grab the current scheduler as it will be replaced in _stop


    var scheduler = this.scheduler;

    this._stop(); // let what is currently processed to be finished


    scheduler.schedule(function () {
      // it feels weird to handle this here but we need to handle this even slightly "out of band"
      var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)({
        type: 'xstate.stop'
      });

      var nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this, function () {
        var exitActions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.state.configuration), false).sort(function (a, b) {
          return b.order - a.order;
        }).map(function (stateNode) {
          return (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.toActionObjects)(stateNode.onExit, _this.machine.options.actions);
        }));

        var _a = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.resolveActions)(_this.machine, _this.state, _this.state.context, _event, [{
          type: 'exit',
          actions: exitActions
        }], _this.machine.config.predictableActionArguments ? _this._exec : undefined, _this.machine.config.predictableActionArguments || _this.machine.config.preserveActionOrder), 2),
            resolvedActions = _a[0],
            updatedContext = _a[1];

        var newState = new _State_js__WEBPACK_IMPORTED_MODULE_9__.State({
          value: _this.state.value,
          context: updatedContext,
          _event: _event,
          _sessionid: _this.sessionId,
          historyValue: undefined,
          history: _this.state,
          actions: resolvedActions.filter(function (action) {
            return !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);
          }),
          activities: {},
          events: [],
          configuration: [],
          transitions: [],
          children: {},
          done: _this.state.done,
          tags: _this.state.tags,
          machine: _this.machine
        });
        newState.changed = true;
        return newState;
      });

      _this.update(nextState, _event);

      _this._stopChildren();

      _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(_this.sessionId);
    });
    return this;
  };

  Interpreter.prototype.batch = function (events) {
    var _this = this;

    if (this.status === InterpreterStatus.NotStarted && this.options.deferEvents) {
      // tslint:disable-next-line:no-console
      if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "".concat(events.length, " event(s) were sent to uninitialized service \"").concat(this.machine.id, "\" and are deferred. Make sure .start() is called for this service.\nEvent: ").concat(JSON.stringify(event)));
      }
    } else if (this.status !== InterpreterStatus.Running) {
      throw new Error( // tslint:disable-next-line:max-line-length
      "".concat(events.length, " event(s) were sent to uninitialized service \"").concat(this.machine.id, "\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options."));
    }

    if (!events.length) {
      return;
    }

    var exec = !!this.machine.config.predictableActionArguments && this._exec;
    this.scheduler.schedule(function () {
      var e_11, _a;

      var nextState = _this.state;
      var batchChanged = false;
      var batchedActions = [];

      var _loop_1 = function (event_1) {
        var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event_1);

        _this.forward(_event);

        nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this, function () {
          return _this.machine.transition(nextState, _event, undefined, exec || undefined);
        });
        batchedActions.push.apply(batchedActions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.machine.config.predictableActionArguments ? nextState.actions : nextState.actions.map(function (a) {
          return (0,_State_js__WEBPACK_IMPORTED_MODULE_9__.bindActionToState)(a, nextState);
        })), false));
        batchChanged = batchChanged || !!nextState.changed;
      };

      try {
        for (var events_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
          var event_1 = events_1_1.value;

          _loop_1(event_1);
        }
      } catch (e_11_1) {
        e_11 = {
          error: e_11_1
        };
      } finally {
        try {
          if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
        } finally {
          if (e_11) throw e_11.error;
        }
      }

      nextState.changed = batchChanged;
      nextState.actions = batchedActions;

      _this.update(nextState, (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(events[events.length - 1]));
    });
  };
  /**
   * Returns a send function bound to this interpreter instance.
   *
   * @param event The event to be sent by the sender.
   */


  Interpreter.prototype.sender = function (event) {
    return this.send.bind(this, event);
  };

  Interpreter.prototype._nextState = function (event, exec) {
    var _this = this;

    if (exec === void 0) {
      exec = !!this.machine.config.predictableActionArguments && this._exec;
    }

    var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event);

    if (_event.name.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform) === 0 && !this.state.nextEvents.some(function (nextEvent) {
      return nextEvent.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform) === 0;
    })) {
      throw _event.data.data;
    }

    var nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function () {
      return _this.machine.transition(_this.state, _event, undefined, exec || undefined);
    });
    return nextState;
  };
  /**
   * Returns the next state given the interpreter's current state and the event.
   *
   * This is a pure method that does _not_ update the interpreter's state.
   *
   * @param event The event to determine the next state
   */


  Interpreter.prototype.nextState = function (event) {
    return this._nextState(event, false);
  };

  Interpreter.prototype.forward = function (event) {
    var e_12, _a;

    try {
      for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()) {
        var id = _c.value;
        var child = this.children.get(id);

        if (!child) {
          throw new Error("Unable to forward event '".concat(event, "' from interpreter '").concat(this.id, "' to nonexistant child '").concat(id, "'."));
        }

        child.send(event);
      }
    } catch (e_12_1) {
      e_12 = {
        error: e_12_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_12) throw e_12.error;
      }
    }
  };

  Interpreter.prototype.defer = function (sendAction) {
    var _this = this;

    var timerId = this.clock.setTimeout(function () {
      if ('to' in sendAction && sendAction.to) {
        _this.sendTo(sendAction._event, sendAction.to, true);
      } else {
        _this.send(sendAction._event);
      }
    }, sendAction.delay);

    if (sendAction.id) {
      this.delayedEventsMap[sendAction.id] = timerId;
    }
  };

  Interpreter.prototype.cancel = function (sendId) {
    this.clock.clearTimeout(this.delayedEventsMap[sendId]);
    delete this.delayedEventsMap[sendId];
  };

  Interpreter.prototype.exec = function (action, state, actionFunctionMap) {
    if (actionFunctionMap === void 0) {
      actionFunctionMap = this.machine.options.actions;
    }

    this._exec(action, state.context, state._event, actionFunctionMap);
  };

  Interpreter.prototype.removeChild = function (childId) {
    var _a;

    this.children.delete(childId);
    this.forwardTo.delete(childId); // this.state might not exist at the time this is called,
    // such as when a child is added then removed while initializing the state

    (_a = this.state) === null || _a === void 0 ? true : delete _a.children[childId];
  };

  Interpreter.prototype.stopChild = function (childId) {
    var child = this.children.get(childId);

    if (!child) {
      return;
    }

    this.removeChild(childId);

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)) {
      child.stop();
    }
  };

  Interpreter.prototype.spawn = function (entity, name, options) {
    if (this.status !== InterpreterStatus.Running) {
      return (0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity, name);
    }

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(entity)) {
      return this.spawnPromise(Promise.resolve(entity), name);
    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity)) {
      return this.spawnCallback(entity, name);
    } else if ((0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.isSpawnedActor)(entity)) {
      return this.spawnActor(entity, name);
    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isObservable)(entity)) {
      return this.spawnObservable(entity, name);
    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)) {
      return this.spawnMachine(entity, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {
        id: name
      }));
    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBehavior)(entity)) {
      return this.spawnBehavior(entity, name);
    } else {
      throw new Error("Unable to spawn entity \"".concat(name, "\" of type \"").concat(typeof entity, "\"."));
    }
  };

  Interpreter.prototype.spawnMachine = function (machine, options) {
    var _this = this;

    if (options === void 0) {
      options = {};
    }

    var childService = new Interpreter(machine, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, this.options), {
      parent: this,
      id: options.id || machine.id
    }));

    var resolvedOptions = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), options);

    if (resolvedOptions.sync) {
      childService.onTransition(function (state) {
        _this.send(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.update, {
          state: state,
          id: childService.id
        });
      });
    }

    var actor = childService;
    this.children.set(childService.id, actor);

    if (resolvedOptions.autoForward) {
      this.forwardTo.add(childService.id);
    }

    childService.onDone(function (doneEvent) {
      _this.removeChild(childService.id);

      _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(doneEvent, {
        origin: childService.id
      }));
    }).start();
    return actor;
  };

  Interpreter.prototype.spawnBehavior = function (behavior, id) {
    var actorRef = (0,_behaviors_js__WEBPACK_IMPORTED_MODULE_11__.spawnBehavior)(behavior, {
      id: id,
      parent: this
    });
    this.children.set(id, actorRef);
    return actorRef;
  };

  Interpreter.prototype.spawnPromise = function (promise, id) {
    var _a;

    var _this = this;

    var canceled = false;
    var resolvedData;
    promise.then(function (response) {
      if (!canceled) {
        resolvedData = response;

        _this.removeChild(id);

        _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id, response), {
          origin: id
        }));
      }
    }, function (errorData) {
      if (!canceled) {
        _this.removeChild(id);

        var errorEvent = (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, errorData);

        try {
          // Send "error.platform.id" to this (parent).
          _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(errorEvent, {
            origin: id
          }));
        } catch (error) {
          (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.reportUnhandledExceptionOnInvocation)(errorData, error, id);

          if (_this.devTools) {
            _this.devTools.send(errorEvent, _this.state);
          }

          if (_this.machine.strict) {
            // it would be better to always stop the state machine if unhandled
            // exception/promise rejection happens but because we don't want to
            // break existing code so enforce it on strict mode only especially so
            // because documentation says that onError is optional
            _this.stop();
          }
        }
      }
    });
    var actor = (_a = {
      id: id,
      send: function () {
        return void 0;
      },
      subscribe: function (next, handleError, complete) {
        var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next, handleError, complete);
        var unsubscribed = false;
        promise.then(function (response) {
          if (unsubscribed) {
            return;
          }

          observer.next(response);

          if (unsubscribed) {
            return;
          }

          observer.complete();
        }, function (err) {
          if (unsubscribed) {
            return;
          }

          observer.error(err);
        });
        return {
          unsubscribe: function () {
            return unsubscribed = true;
          }
        };
      },
      stop: function () {
        canceled = true;
      },
      toJSON: function () {
        return {
          id: id
        };
      },
      getSnapshot: function () {
        return resolvedData;
      }
    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
      return this;
    }, _a);
    this.children.set(id, actor);
    return actor;
  };

  Interpreter.prototype.spawnCallback = function (callback, id) {
    var _a;

    var _this = this;

    var canceled = false;
    var receivers = new Set();
    var listeners = new Set();
    var emitted;

    var receive = function (e) {
      emitted = e;
      listeners.forEach(function (listener) {
        return listener(e);
      });

      if (canceled) {
        return;
      }

      _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(e, {
        origin: id
      }));
    };

    var callbackStop;

    try {
      callbackStop = callback(receive, function (newListener) {
        receivers.add(newListener);
      });
    } catch (err) {
      this.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, err));
    }

    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(callbackStop)) {
      // it turned out to be an async function, can't reliably check this before calling `callback`
      // because transpiled async functions are not recognizable
      return this.spawnPromise(callbackStop, id);
    }

    var actor = (_a = {
      id: id,
      send: function (event) {
        return receivers.forEach(function (receiver) {
          return receiver(event);
        });
      },
      subscribe: function (next) {
        var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next);
        listeners.add(observer.next);
        return {
          unsubscribe: function () {
            listeners.delete(observer.next);
          }
        };
      },
      stop: function () {
        canceled = true;

        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(callbackStop)) {
          callbackStop();
        }
      },
      toJSON: function () {
        return {
          id: id
        };
      },
      getSnapshot: function () {
        return emitted;
      }
    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
      return this;
    }, _a);
    this.children.set(id, actor);
    return actor;
  };

  Interpreter.prototype.spawnObservable = function (source, id) {
    var _a;

    var _this = this;

    var emitted;
    var subscription = source.subscribe(function (value) {
      emitted = value;

      _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(value, {
        origin: id
      }));
    }, function (err) {
      _this.removeChild(id);

      _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, err), {
        origin: id
      }));
    }, function () {
      _this.removeChild(id);

      _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id), {
        origin: id
      }));
    });
    var actor = (_a = {
      id: id,
      send: function () {
        return void 0;
      },
      subscribe: function (next, handleError, complete) {
        return source.subscribe(next, handleError, complete);
      },
      stop: function () {
        return subscription.unsubscribe();
      },
      getSnapshot: function () {
        return emitted;
      },
      toJSON: function () {
        return {
          id: id
        };
      }
    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
      return this;
    }, _a);
    this.children.set(id, actor);
    return actor;
  };

  Interpreter.prototype.spawnActor = function (actor, name) {
    this.children.set(name, actor);
    return actor;
  };

  Interpreter.prototype.spawnActivity = function (activity) {
    var implementation = this.machine.options && this.machine.options.activities ? this.machine.options.activities[activity.type] : undefined;

    if (!implementation) {
      if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, "No implementation found for activity '".concat(activity.type, "'"));
      } // tslint:disable-next-line:no-console


      return;
    } // Start implementation


    var dispose = implementation(this.state.context, activity);
    this.spawnEffect(activity.id, dispose);
  };

  Interpreter.prototype.spawnEffect = function (id, dispose) {
    var _a;

    this.children.set(id, (_a = {
      id: id,
      send: function () {
        return void 0;
      },
      subscribe: function () {
        return {
          unsubscribe: function () {
            return void 0;
          }
        };
      },
      stop: dispose || undefined,
      getSnapshot: function () {
        return undefined;
      },
      toJSON: function () {
        return {
          id: id
        };
      }
    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
      return this;
    }, _a));
  };

  Interpreter.prototype.attachDev = function () {
    var global = (0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.getGlobal)();

    if (this.options.devTools && global) {
      if (global.__REDUX_DEVTOOLS_EXTENSION__) {
        var devToolsOptions = typeof this.options.devTools === 'object' ? this.options.devTools : undefined;
        this.devTools = global.__REDUX_DEVTOOLS_EXTENSION__.connect((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({
          name: this.id,
          autoPause: true,
          stateSanitizer: function (state) {
            return {
              value: state.value,
              context: state.context,
              actions: state.actions
            };
          }
        }, devToolsOptions), {
          features: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({
            jump: false,
            skip: false
          }, devToolsOptions ? devToolsOptions.features : undefined)
        }), this.machine);
        this.devTools.init(this.state);
      } // add XState-specific dev tooling hook


      (0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.registerService)(this);
    }
  };

  Interpreter.prototype.toJSON = function () {
    return {
      id: this.id
    };
  };

  Interpreter.prototype[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function () {
    return this;
  };

  Interpreter.prototype.getSnapshot = function () {
    if (this.status === InterpreterStatus.NotStarted) {
      return this.initialState;
    }

    return this._state;
  };
  /**
   * The default interpreter options:
   *
   * - `clock` uses the global `setTimeout` and `clearTimeout` functions
   * - `logger` uses the global `console.log()` method
   */


  Interpreter.defaultOptions = {
    execute: true,
    deferEvents: true,
    clock: {
      setTimeout: function (fn, ms) {
        return setTimeout(fn, ms);
      },
      clearTimeout: function (id) {
        return clearTimeout(id);
      }
    },
    logger: /*#__PURE__*/console.log.bind(console),
    devTools: false
  };
  Interpreter.interpret = interpret;
  return Interpreter;
}();

var resolveSpawnOptions = function (nameOrOptions) {
  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(nameOrOptions)) {
    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), {
      name: nameOrOptions
    });
  }

  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), {
    name: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.uniqueId)()
  }), nameOrOptions);
};

function spawn(entity, nameOrOptions) {
  var resolvedOptions = resolveSpawnOptions(nameOrOptions);
  return (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.consume)(function (service) {
    if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {
      var isLazyEntity = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity);
      (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!service || isLazyEntity, "Attempted to spawn an Actor (ID: \"".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity) ? entity.id : 'undefined', "\") outside of a service. This will have no effect."));
    }

    if (service) {
      return service.spawn(entity, resolvedOptions.name, resolvedOptions);
    } else {
      return (0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity, resolvedOptions.name);
    }
  });
}
/**
 * Creates a new Interpreter instance for the given machine with the provided options, if any.
 *
 * @param machine The machine to interpret
 * @param options Interpreter options
 */

function interpret(machine, options) {
  var interpreter = new Interpreter(machine, options);
  return interpreter;
}




/***/ }),

/***/ "./node_modules/xstate/es/invokeUtils.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/invokeUtils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   toInvokeDefinition: () => (/* binding */ toInvokeDefinition),
/* harmony export */   toInvokeSource: () => (/* binding */ toInvokeSource)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actionTypes.js */ "./node_modules/xstate/es/actionTypes.js");






function toInvokeSource(src) {
  if (typeof src === 'string') {
    var simpleSrc = {
      type: src
    };

    simpleSrc.toString = function () {
      return src;
    }; // v4 compat - TODO: remove in v5


    return simpleSrc;
  }

  return src;
}
function toInvokeDefinition(invokeConfig) {
  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({
    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke
  }, invokeConfig), {
    toJSON: function () {
      invokeConfig.onDone;
          invokeConfig.onError;
          var invokeDef = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__rest)(invokeConfig, ["onDone", "onError"]);

      return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, invokeDef), {
        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke,
        src: toInvokeSource(invokeConfig.src)
      });
    }
  });
}




/***/ }),

/***/ "./node_modules/xstate/es/registry.js":
/*!********************************************!*\
  !*** ./node_modules/xstate/es/registry.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   registry: () => (/* binding */ registry)
/* harmony export */ });
var children = /*#__PURE__*/new Map();
var sessionIdIndex = 0;
var registry = {
  bookId: function () {
    return "x:".concat(sessionIdIndex++);
  },
  register: function (id, actor) {
    children.set(id, actor);
    return id;
  },
  get: function (id) {
    return children.get(id);
  },
  free: function (id) {
    children.delete(id);
  }
};




/***/ }),

/***/ "./node_modules/xstate/es/scheduler.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/scheduler.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Scheduler: () => (/* binding */ Scheduler)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");


var defaultOptions = {
  deferEvents: false
};

var Scheduler =
/*#__PURE__*/

/** @class */
function () {
  function Scheduler(options) {
    this.processingEvent = false;
    this.queue = [];
    this.initialized = false;
    this.options = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, defaultOptions), options);
  }

  Scheduler.prototype.initialize = function (callback) {
    this.initialized = true;

    if (callback) {
      if (!this.options.deferEvents) {
        this.schedule(callback);
        return;
      }

      this.process(callback);
    }

    this.flushEvents();
  };

  Scheduler.prototype.schedule = function (task) {
    if (!this.initialized || this.processingEvent) {
      this.queue.push(task);
      return;
    }

    if (this.queue.length !== 0) {
      throw new Error('Event queue should be empty when it is not processing events');
    }

    this.process(task);
    this.flushEvents();
  };

  Scheduler.prototype.clear = function () {
    this.queue = [];
  };

  Scheduler.prototype.flushEvents = function () {
    var nextCallback = this.queue.shift();

    while (nextCallback) {
      this.process(nextCallback);
      nextCallback = this.queue.shift();
    }
  };

  Scheduler.prototype.process = function (callback) {
    this.processingEvent = true;

    try {
      callback();
    } catch (e) {
      // there is no use to keep the future events
      // as the situation is not anymore the same
      this.clear();
      throw e;
    } finally {
      this.processingEvent = false;
    }
  };

  return Scheduler;
}();




/***/ }),

/***/ "./node_modules/xstate/es/serviceScope.js":
/*!************************************************!*\
  !*** ./node_modules/xstate/es/serviceScope.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   consume: () => (/* binding */ consume),
/* harmony export */   provide: () => (/* binding */ provide)
/* harmony export */ });
/**
 * Maintains a stack of the current service in scope.
 * This is used to provide the correct service to spawn().
 */
var serviceStack = [];
var provide = function (service, fn) {
  serviceStack.push(service);
  var result = fn(service);
  serviceStack.pop();
  return result;
};
var consume = function (fn) {
  return fn(serviceStack[serviceStack.length - 1]);
};




/***/ }),

/***/ "./node_modules/xstate/es/stateUtils.js":
/*!**********************************************!*\
  !*** ./node_modules/xstate/es/stateUtils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getAdjList: () => (/* binding */ getAdjList),
/* harmony export */   getAllChildren: () => (/* binding */ getAllChildren),
/* harmony export */   getAllStateNodes: () => (/* binding */ getAllStateNodes),
/* harmony export */   getChildren: () => (/* binding */ getChildren),
/* harmony export */   getConfiguration: () => (/* binding */ getConfiguration),
/* harmony export */   getMeta: () => (/* binding */ getMeta),
/* harmony export */   getTagsFromConfiguration: () => (/* binding */ getTagsFromConfiguration),
/* harmony export */   getValue: () => (/* binding */ getValue),
/* harmony export */   has: () => (/* binding */ has),
/* harmony export */   isInFinalState: () => (/* binding */ isInFinalState),
/* harmony export */   isLeafNode: () => (/* binding */ isLeafNode),
/* harmony export */   nextEvents: () => (/* binding */ nextEvents)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/xstate/es/utils.js");



var isLeafNode = function (stateNode) {
  return stateNode.type === 'atomic' || stateNode.type === 'final';
};
function getAllChildren(stateNode) {
  return Object.keys(stateNode.states).map(function (key) {
    return stateNode.states[key];
  });
}
function getChildren(stateNode) {
  return getAllChildren(stateNode).filter(function (sn) {
    return sn.type !== 'history';
  });
}
function getAllStateNodes(stateNode) {
  var stateNodes = [stateNode];

  if (isLeafNode(stateNode)) {
    return stateNodes;
  }

  return stateNodes.concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(getChildren(stateNode).map(getAllStateNodes)));
}
function getConfiguration(prevStateNodes, stateNodes) {
  var e_1, _a, e_2, _b, e_3, _c, e_4, _d;

  var prevConfiguration = new Set(prevStateNodes);
  var prevAdjList = getAdjList(prevConfiguration);
  var configuration = new Set(stateNodes);

  try {
    // add all ancestors
    for (var configuration_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()) {
      var s = configuration_1_1.value;
      var m = s.parent;

      while (m && !configuration.has(m)) {
        configuration.add(m);
        m = m.parent;
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return)) _a.call(configuration_1);
    } finally {
      if (e_1) throw e_1.error;
    }
  }

  var adjList = getAdjList(configuration);

  try {
    // add descendants
    for (var configuration_2 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()) {
      var s = configuration_2_1.value; // if previously active, add existing child nodes

      if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {
        if (prevAdjList.get(s)) {
          prevAdjList.get(s).forEach(function (sn) {
            return configuration.add(sn);
          });
        } else {
          s.initialStateNodes.forEach(function (sn) {
            return configuration.add(sn);
          });
        }
      } else {
        if (s.type === 'parallel') {
          try {
            for (var _e = (e_3 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(getChildren(s))), _f = _e.next(); !_f.done; _f = _e.next()) {
              var child = _f.value;

              if (!configuration.has(child)) {
                configuration.add(child);

                if (prevAdjList.get(child)) {
                  prevAdjList.get(child).forEach(function (sn) {
                    return configuration.add(sn);
                  });
                } else {
                  child.initialStateNodes.forEach(function (sn) {
                    return configuration.add(sn);
                  });
                }
              }
            }
          } catch (e_3_1) {
            e_3 = {
              error: e_3_1
            };
          } finally {
            try {
              if (_f && !_f.done && (_c = _e.return)) _c.call(_e);
            } finally {
              if (e_3) throw e_3.error;
            }
          }
        }
      }
    }
  } catch (e_2_1) {
    e_2 = {
      error: e_2_1
    };
  } finally {
    try {
      if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return)) _b.call(configuration_2);
    } finally {
      if (e_2) throw e_2.error;
    }
  }

  try {
    // add all ancestors
    for (var configuration_3 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()) {
      var s = configuration_3_1.value;
      var m = s.parent;

      while (m && !configuration.has(m)) {
        configuration.add(m);
        m = m.parent;
      }
    }
  } catch (e_4_1) {
    e_4 = {
      error: e_4_1
    };
  } finally {
    try {
      if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return)) _d.call(configuration_3);
    } finally {
      if (e_4) throw e_4.error;
    }
  }

  return configuration;
}

function getValueFromAdj(baseNode, adjList) {
  var childStateNodes = adjList.get(baseNode);

  if (!childStateNodes) {
    return {}; // todo: fix?
  }

  if (baseNode.type === 'compound') {
    var childStateNode = childStateNodes[0];

    if (childStateNode) {
      if (isLeafNode(childStateNode)) {
        return childStateNode.key;
      }
    } else {
      return {};
    }
  }

  var stateValue = {};
  childStateNodes.forEach(function (csn) {
    stateValue[csn.key] = getValueFromAdj(csn, adjList);
  });
  return stateValue;
}

function getAdjList(configuration) {
  var e_5, _a;

  var adjList = new Map();

  try {
    for (var configuration_4 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()) {
      var s = configuration_4_1.value;

      if (!adjList.has(s)) {
        adjList.set(s, []);
      }

      if (s.parent) {
        if (!adjList.has(s.parent)) {
          adjList.set(s.parent, []);
        }

        adjList.get(s.parent).push(s);
      }
    }
  } catch (e_5_1) {
    e_5 = {
      error: e_5_1
    };
  } finally {
    try {
      if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return)) _a.call(configuration_4);
    } finally {
      if (e_5) throw e_5.error;
    }
  }

  return adjList;
}
function getValue(rootNode, configuration) {
  var config = getConfiguration([rootNode], configuration);
  return getValueFromAdj(rootNode, getAdjList(config));
}
function has(iterable, item) {
  if (Array.isArray(iterable)) {
    return iterable.some(function (member) {
      return member === item;
    });
  }

  if (iterable instanceof Set) {
    return iterable.has(item);
  }

  return false; // TODO: fix
}
function nextEvents(configuration) {
  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(configuration.map(function (sn) {
    return sn.ownEvents;
  })), false)))), false);
}
function isInFinalState(configuration, stateNode) {
  if (stateNode.type === 'compound') {
    return getChildren(stateNode).some(function (s) {
      return s.type === 'final' && has(configuration, s);
    });
  }

  if (stateNode.type === 'parallel') {
    return getChildren(stateNode).every(function (sn) {
      return isInFinalState(configuration, sn);
    });
  }

  return false;
}
function getMeta(configuration) {
  if (configuration === void 0) {
    configuration = [];
  }

  return configuration.reduce(function (acc, stateNode) {
    if (stateNode.meta !== undefined) {
      acc[stateNode.id] = stateNode.meta;
    }

    return acc;
  }, {});
}
function getTagsFromConfiguration(configuration) {
  return new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(configuration.map(function (sn) {
    return sn.tags;
  })));
}




/***/ }),

/***/ "./node_modules/xstate/es/types.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/types.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ActionTypes: () => (/* binding */ ActionTypes),
/* harmony export */   SpecialTargets: () => (/* binding */ SpecialTargets)
/* harmony export */ });
var ActionTypes;

(function (ActionTypes) {
  ActionTypes["Start"] = "xstate.start";
  ActionTypes["Stop"] = "xstate.stop";
  ActionTypes["Raise"] = "xstate.raise";
  ActionTypes["Send"] = "xstate.send";
  ActionTypes["Cancel"] = "xstate.cancel";
  ActionTypes["NullEvent"] = "";
  ActionTypes["Assign"] = "xstate.assign";
  ActionTypes["After"] = "xstate.after";
  ActionTypes["DoneState"] = "done.state";
  ActionTypes["DoneInvoke"] = "done.invoke";
  ActionTypes["Log"] = "xstate.log";
  ActionTypes["Init"] = "xstate.init";
  ActionTypes["Invoke"] = "xstate.invoke";
  ActionTypes["ErrorExecution"] = "error.execution";
  ActionTypes["ErrorCommunication"] = "error.communication";
  ActionTypes["ErrorPlatform"] = "error.platform";
  ActionTypes["ErrorCustom"] = "xstate.error";
  ActionTypes["Update"] = "xstate.update";
  ActionTypes["Pure"] = "xstate.pure";
  ActionTypes["Choose"] = "xstate.choose";
})(ActionTypes || (ActionTypes = {}));

var SpecialTargets;

(function (SpecialTargets) {
  SpecialTargets["Parent"] = "#_parent";
  SpecialTargets["Internal"] = "#_internal";
})(SpecialTargets || (SpecialTargets = {}));




/***/ }),

/***/ "./node_modules/xstate/es/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/utils.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createInvokeId: () => (/* binding */ createInvokeId),
/* harmony export */   evaluateGuard: () => (/* binding */ evaluateGuard),
/* harmony export */   flatten: () => (/* binding */ flatten),
/* harmony export */   getActionType: () => (/* binding */ getActionType),
/* harmony export */   getEventType: () => (/* binding */ getEventType),
/* harmony export */   interopSymbols: () => (/* binding */ interopSymbols),
/* harmony export */   isActor: () => (/* binding */ isActor),
/* harmony export */   isArray: () => (/* binding */ isArray),
/* harmony export */   isBehavior: () => (/* binding */ isBehavior),
/* harmony export */   isBuiltInEvent: () => (/* binding */ isBuiltInEvent),
/* harmony export */   isFunction: () => (/* binding */ isFunction),
/* harmony export */   isMachine: () => (/* binding */ isMachine),
/* harmony export */   isObservable: () => (/* binding */ isObservable),
/* harmony export */   isPromiseLike: () => (/* binding */ isPromiseLike),
/* harmony export */   isRaisableAction: () => (/* binding */ isRaisableAction),
/* harmony export */   isStateLike: () => (/* binding */ isStateLike),
/* harmony export */   isString: () => (/* binding */ isString),
/* harmony export */   keys: () => (/* binding */ keys),
/* harmony export */   mapContext: () => (/* binding */ mapContext),
/* harmony export */   mapFilterValues: () => (/* binding */ mapFilterValues),
/* harmony export */   mapValues: () => (/* binding */ mapValues),
/* harmony export */   matchesState: () => (/* binding */ matchesState),
/* harmony export */   nestedPath: () => (/* binding */ nestedPath),
/* harmony export */   normalizeTarget: () => (/* binding */ normalizeTarget),
/* harmony export */   partition: () => (/* binding */ partition),
/* harmony export */   path: () => (/* binding */ path),
/* harmony export */   pathToStateValue: () => (/* binding */ pathToStateValue),
/* harmony export */   pathsToStateValue: () => (/* binding */ pathsToStateValue),
/* harmony export */   reportUnhandledExceptionOnInvocation: () => (/* binding */ reportUnhandledExceptionOnInvocation),
/* harmony export */   symbolObservable: () => (/* binding */ symbolObservable),
/* harmony export */   toArray: () => (/* binding */ toArray),
/* harmony export */   toArrayStrict: () => (/* binding */ toArrayStrict),
/* harmony export */   toEventObject: () => (/* binding */ toEventObject),
/* harmony export */   toGuard: () => (/* binding */ toGuard),
/* harmony export */   toInvokeSource: () => (/* binding */ toInvokeSource),
/* harmony export */   toObserver: () => (/* binding */ toObserver),
/* harmony export */   toSCXMLEvent: () => (/* binding */ toSCXMLEvent),
/* harmony export */   toStatePath: () => (/* binding */ toStatePath),
/* harmony export */   toStatePaths: () => (/* binding */ toStatePaths),
/* harmony export */   toStateValue: () => (/* binding */ toStateValue),
/* harmony export */   toTransitionConfigArray: () => (/* binding */ toTransitionConfigArray),
/* harmony export */   uniqueId: () => (/* binding */ uniqueId),
/* harmony export */   updateContext: () => (/* binding */ updateContext),
/* harmony export */   updateHistoryStates: () => (/* binding */ updateHistoryStates),
/* harmony export */   updateHistoryValue: () => (/* binding */ updateHistoryValue),
/* harmony export */   warn: () => (/* binding */ warn)
/* harmony export */ });
/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ "./node_modules/xstate/es/_virtual/_tslib.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.js */ "./node_modules/xstate/es/types.js");
/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./actionTypes.js */ "./node_modules/xstate/es/actionTypes.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/xstate/es/constants.js");
/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./environment.js */ "./node_modules/xstate/es/environment.js");






var _a;
function keys(value) {
  return Object.keys(value);
}
function matchesState(parentStateId, childStateId, delimiter) {
  if (delimiter === void 0) {
    delimiter = _constants_js__WEBPACK_IMPORTED_MODULE_0__.STATE_DELIMITER;
  }

  var parentStateValue = toStateValue(parentStateId, delimiter);
  var childStateValue = toStateValue(childStateId, delimiter);

  if (isString(childStateValue)) {
    if (isString(parentStateValue)) {
      return childStateValue === parentStateValue;
    } // Parent more specific than child


    return false;
  }

  if (isString(parentStateValue)) {
    return parentStateValue in childStateValue;
  }

  return Object.keys(parentStateValue).every(function (key) {
    if (!(key in childStateValue)) {
      return false;
    }

    return matchesState(parentStateValue[key], childStateValue[key]);
  });
}
function getEventType(event) {
  try {
    return isString(event) || typeof event === 'number' ? "".concat(event) : event.type;
  } catch (e) {
    throw new Error('Events must be strings or objects with a string event.type property.');
  }
}
function getActionType(action) {
  try {
    return isString(action) || typeof action === 'number' ? "".concat(action) : isFunction(action) ? action.name : action.type;
  } catch (e) {
    throw new Error('Actions must be strings or objects with a string action.type property.');
  }
}
function toStatePath(stateId, delimiter) {
  try {
    if (isArray(stateId)) {
      return stateId;
    }

    return stateId.toString().split(delimiter);
  } catch (e) {
    throw new Error("'".concat(stateId, "' is not a valid state path."));
  }
}
function isStateLike(state) {
  return typeof state === 'object' && 'value' in state && 'context' in state && 'event' in state && '_event' in state;
}
function toStateValue(stateValue, delimiter) {
  if (isStateLike(stateValue)) {
    return stateValue.value;
  }

  if (isArray(stateValue)) {
    return pathToStateValue(stateValue);
  }

  if (typeof stateValue !== 'string') {
    return stateValue;
  }

  var statePath = toStatePath(stateValue, delimiter);
  return pathToStateValue(statePath);
}
function pathToStateValue(statePath) {
  if (statePath.length === 1) {
    return statePath[0];
  }

  var value = {};
  var marker = value;

  for (var i = 0; i < statePath.length - 1; i++) {
    if (i === statePath.length - 2) {
      marker[statePath[i]] = statePath[i + 1];
    } else {
      marker[statePath[i]] = {};
      marker = marker[statePath[i]];
    }
  }

  return value;
}
function mapValues(collection, iteratee) {
  var result = {};
  var collectionKeys = Object.keys(collection);

  for (var i = 0; i < collectionKeys.length; i++) {
    var key = collectionKeys[i];
    result[key] = iteratee(collection[key], key, collection, i);
  }

  return result;
}
function mapFilterValues(collection, iteratee, predicate) {
  var e_1, _a;

  var result = {};

  try {
    for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(collection)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var item = collection[key];

      if (!predicate(item)) {
        continue;
      }

      result[key] = iteratee(item, key, collection);
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    } finally {
      if (e_1) throw e_1.error;
    }
  }

  return result;
}
/**
 * Retrieves a value at the given path.
 * @param props The deep path to the prop of the desired value
 */

var path = function (props) {
  return function (object) {
    var e_2, _a;

    var result = object;

    try {
      for (var props_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
        var prop = props_1_1.value;
        result = result[prop];
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
      } finally {
        if (e_2) throw e_2.error;
      }
    }

    return result;
  };
};
/**
 * Retrieves a value at the given path via the nested accessor prop.
 * @param props The deep path to the prop of the desired value
 */

function nestedPath(props, accessorProp) {
  return function (object) {
    var e_3, _a;

    var result = object;

    try {
      for (var props_2 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()) {
        var prop = props_2_1.value;
        result = result[accessorProp][prop];
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);
      } finally {
        if (e_3) throw e_3.error;
      }
    }

    return result;
  };
}
function toStatePaths(stateValue) {
  if (!stateValue) {
    return [[]];
  }

  if (isString(stateValue)) {
    return [[stateValue]];
  }

  var result = flatten(Object.keys(stateValue).map(function (key) {
    var subStateValue = stateValue[key];

    if (typeof subStateValue !== 'string' && (!subStateValue || !Object.keys(subStateValue).length)) {
      return [[key]];
    }

    return toStatePaths(stateValue[key]).map(function (subPath) {
      return [key].concat(subPath);
    });
  }));
  return result;
}
function pathsToStateValue(paths) {
  var e_4, _a;

  var result = {};

  if (paths && paths.length === 1 && paths[0].length === 1) {
    return paths[0][0];
  }

  try {
    for (var paths_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(paths), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()) {
      var currentPath = paths_1_1.value;
      var marker = result; // tslint:disable-next-line:prefer-for-of

      for (var i = 0; i < currentPath.length; i++) {
        var subPath = currentPath[i];

        if (i === currentPath.length - 2) {
          marker[subPath] = currentPath[i + 1];
          break;
        }

        marker[subPath] = marker[subPath] || {};
        marker = marker[subPath];
      }
    }
  } catch (e_4_1) {
    e_4 = {
      error: e_4_1
    };
  } finally {
    try {
      if (paths_1_1 && !paths_1_1.done && (_a = paths_1.return)) _a.call(paths_1);
    } finally {
      if (e_4) throw e_4.error;
    }
  }

  return result;
}
function flatten(array) {
  var _a;

  return (_a = []).concat.apply(_a, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(array), false));
}
function toArrayStrict(value) {
  if (isArray(value)) {
    return value;
  }

  return [value];
}
function toArray(value) {
  if (value === undefined) {
    return [];
  }

  return toArrayStrict(value);
}
function mapContext(mapper, context, _event) {
  var e_5, _a;

  if (isFunction(mapper)) {
    return mapper(context, _event.data);
  }

  var result = {};

  try {
    for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(mapper)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var subMapper = mapper[key];

      if (isFunction(subMapper)) {
        result[key] = subMapper(context, _event.data);
      } else {
        result[key] = subMapper;
      }
    }
  } catch (e_5_1) {
    e_5 = {
      error: e_5_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
    } finally {
      if (e_5) throw e_5.error;
    }
  }

  return result;
}
function isBuiltInEvent(eventType) {
  return /^(done|error)\./.test(eventType);
}
function isPromiseLike(value) {
  if (value instanceof Promise) {
    return true;
  } // Check if shape matches the Promise/A+ specification for a "thenable".


  if (value !== null && (isFunction(value) || typeof value === 'object') && isFunction(value.then)) {
    return true;
  }

  return false;
}
function isBehavior(value) {
  return value !== null && typeof value === 'object' && 'transition' in value && typeof value.transition === 'function';
}
function partition(items, predicate) {
  var e_6, _a;

  var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)([[], []], 2),
      truthy = _b[0],
      falsy = _b[1];

  try {
    for (var items_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
      var item = items_1_1.value;

      if (predicate(item)) {
        truthy.push(item);
      } else {
        falsy.push(item);
      }
    }
  } catch (e_6_1) {
    e_6 = {
      error: e_6_1
    };
  } finally {
    try {
      if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
    } finally {
      if (e_6) throw e_6.error;
    }
  }

  return [truthy, falsy];
}
function updateHistoryStates(hist, stateValue) {
  return mapValues(hist.states, function (subHist, key) {
    if (!subHist) {
      return undefined;
    }

    var subStateValue = (isString(stateValue) ? undefined : stateValue[key]) || (subHist ? subHist.current : undefined);

    if (!subStateValue) {
      return undefined;
    }

    return {
      current: subStateValue,
      states: updateHistoryStates(subHist, subStateValue)
    };
  });
}
function updateHistoryValue(hist, stateValue) {
  return {
    current: stateValue,
    states: updateHistoryStates(hist, stateValue)
  };
}
function updateContext(context, _event, assignActions, state) {
  if (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {
    warn(!!context, 'Attempting to update undefined context');
  }

  var updatedContext = context ? assignActions.reduce(function (acc, assignAction) {
    var e_7, _a;

    var assignment = assignAction.assignment;
    var meta = {
      state: state,
      action: assignAction,
      _event: _event
    };
    var partialUpdate = {};

    if (isFunction(assignment)) {
      partialUpdate = assignment(acc, _event.data, meta);
    } else {
      try {
        for (var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(assignment)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var key = _c.value;
          var propAssignment = assignment[key];
          partialUpdate[key] = isFunction(propAssignment) ? propAssignment(acc, _event.data, meta) : propAssignment;
        }
      } catch (e_7_1) {
        e_7 = {
          error: e_7_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally {
          if (e_7) throw e_7.error;
        }
      }
    }

    return Object.assign({}, acc, partialUpdate);
  }, context) : context;
  return updatedContext;
} // tslint:disable-next-line:no-empty

var warn = function () {};

if (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {
  warn = function (condition, message) {
    var error = condition instanceof Error ? condition : undefined;

    if (!error && condition) {
      return;
    }

    if (console !== undefined) {
      var args = ["Warning: ".concat(message)];

      if (error) {
        args.push(error);
      } // tslint:disable-next-line:no-console


      console.warn.apply(console, args);
    }
  };
}
function isArray(value) {
  return Array.isArray(value);
} // tslint:disable-next-line:ban-types

function isFunction(value) {
  return typeof value === 'function';
}
function isString(value) {
  return typeof value === 'string';
}
function toGuard(condition, guardMap) {
  if (!condition) {
    return undefined;
  }

  if (isString(condition)) {
    return {
      type: _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,
      name: condition,
      predicate: guardMap ? guardMap[condition] : undefined
    };
  }

  if (isFunction(condition)) {
    return {
      type: _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,
      name: condition.name,
      predicate: condition
    };
  }

  return condition;
}
function isObservable(value) {
  try {
    return 'subscribe' in value && isFunction(value.subscribe);
  } catch (e) {
    return false;
  }
}
var symbolObservable = /*#__PURE__*/function () {
  return typeof Symbol === 'function' && Symbol.observable || '@@observable';
}(); // TODO: to be removed in v5, left it out just to minimize the scope of the change and maintain compatibility with older versions of integration paackages

var interopSymbols = (_a = {}, _a[symbolObservable] = function () {
  return this;
}, _a[Symbol.observable] = function () {
  return this;
}, _a);
function isMachine(value) {
  return !!value && '__xstatenode' in value;
}
function isActor(value) {
  return !!value && typeof value.send === 'function';
}
var uniqueId = /*#__PURE__*/function () {
  var currentId = 0;
  return function () {
    currentId++;
    return currentId.toString(16);
  };
}();
function toEventObject(event, payload // id?: TEvent['type']
) {
  if (isString(event) || typeof event === 'number') {
    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({
      type: event
    }, payload);
  }

  return event;
}
function toSCXMLEvent(event, scxmlEvent) {
  if (!isString(event) && '$$type' in event && event.$$type === 'scxml') {
    return event;
  }

  var eventObject = toEventObject(event);
  return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({
    name: eventObject.type,
    data: eventObject,
    $$type: 'scxml',
    type: 'external'
  }, scxmlEvent);
}
function toTransitionConfigArray(event, configLike) {
  var transitions = toArrayStrict(configLike).map(function (transitionLike) {
    if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string' || isMachine(transitionLike)) {
      return {
        target: transitionLike,
        event: event
      };
    }

    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, transitionLike), {
      event: event
    });
  });
  return transitions;
}
function normalizeTarget(target) {
  if (target === undefined || target === _constants_js__WEBPACK_IMPORTED_MODULE_0__.TARGETLESS_KEY) {
    return undefined;
  }

  return toArray(target);
}
function reportUnhandledExceptionOnInvocation(originalError, currentError, id) {
  if (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {
    var originalStackTrace = originalError.stack ? " Stacktrace was '".concat(originalError.stack, "'") : '';

    if (originalError === currentError) {
      // tslint:disable-next-line:no-console
      console.error("Missing onError handler for invocation '".concat(id, "', error was '").concat(originalError, "'.").concat(originalStackTrace));
    } else {
      var stackTrace = currentError.stack ? " Stacktrace was '".concat(currentError.stack, "'") : ''; // tslint:disable-next-line:no-console

      console.error("Missing onError handler and/or unhandled exception/promise rejection for invocation '".concat(id, "'. ") + "Original error: '".concat(originalError, "'. ").concat(originalStackTrace, " Current error is '").concat(currentError, "'.").concat(stackTrace));
    }
  }
}
function evaluateGuard(machine, guard, context, _event, state) {
  var guards = machine.options.guards;
  var guardMeta = {
    state: state,
    cond: guard,
    _event: _event
  }; // TODO: do not hardcode!

  if (guard.type === _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE) {
    return ((guards === null || guards === void 0 ? void 0 : guards[guard.name]) || guard.predicate)(context, _event.data, guardMeta);
  }

  var condFn = guards === null || guards === void 0 ? void 0 : guards[guard.type];

  if (!condFn) {
    throw new Error("Guard '".concat(guard.type, "' is not implemented on machine '").concat(machine.id, "'."));
  }

  return condFn(context, _event.data, guardMeta);
}
function toInvokeSource(src) {
  if (typeof src === 'string') {
    return {
      type: src
    };
  }

  return src;
}
function toObserver(nextHandler, errorHandler, completionHandler) {
  var noop = function () {};

  var isObserver = typeof nextHandler === 'object';
  var self = isObserver ? nextHandler : null;
  return {
    next: ((isObserver ? nextHandler.next : nextHandler) || noop).bind(self),
    error: ((isObserver ? nextHandler.error : errorHandler) || noop).bind(self),
    complete: ((isObserver ? nextHandler.complete : completionHandler) || noop).bind(self)
  };
}
function createInvokeId(stateNodeId, index) {
  return "".concat(stateNodeId, ":invocation[").concat(index, "]");
}
function isRaisableAction(action) {
  return (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.raise || action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.send && action.to === _types_js__WEBPACK_IMPORTED_MODULE_4__.SpecialTargets.Internal) && typeof action.delay !== 'number';
}




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!****************************!*\
  !*** ./src/saypi.index.js ***!
  \****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ButtonModule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ButtonModule.js */ "./src/ButtonModule.js");
/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventBus.js */ "./src/EventBus.js");
/* harmony import */ var _EventModule_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EventModule.js */ "./src/EventModule.js");
/* harmony import */ var _UserAgentModule_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./UserAgentModule.js */ "./src/UserAgentModule.js");
/* harmony import */ var _styles_common_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./styles/common.scss */ "./src/styles/common.scss");
/* harmony import */ var _styles_desktop_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./styles/desktop.scss */ "./src/styles/desktop.scss");
/* harmony import */ var _styles_mobile_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./styles/mobile.scss */ "./src/styles/mobile.scss");
/* harmony import */ var _styles_rectangles_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./styles/rectangles.css */ "./src/styles/rectangles.css");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }








(function () {
  "use strict";

  var pageScript = (__webpack_require__(/*! raw-loader!../public/audioModule.bundle.js */ "./node_modules/raw-loader/dist/cjs.js!./public/audioModule.bundle.js")["default"]);
  (0,_UserAgentModule_js__WEBPACK_IMPORTED_MODULE_3__.addUserAgentFlags)();
  _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].init();
  setupEventBus();

  // Create a MutationObserver to listen for changes to the DOM
  // textareas are added to the DOM after the page loads
  var callback = function callback(mutationsList, observer) {
    var _iterator = _createForOfIteratorHelper(mutationsList),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var mutation = _step.value;
        if (mutation.type === "childList") {
          // Iterate through added nodes
          mutation.addedNodes.forEach(function (node) {
            // Check if added node is a textarea with 'enterkeyhint' attribute
            if (node.nodeName === "TEXTAREA" && node.hasAttribute("enterkeyhint")) {
              // Stop observing to avoid any potential infinite loops
              observer.disconnect();

              // Do something with the textarea, like add an event listener
              annotateDOM(node);
              return;
            }

            // Check if added node contains a textarea with 'enterkeyhint' attribute
            if (node.querySelectorAll) {
              var textareas = node.querySelectorAll("textarea[enterkeyhint]");
              if (textareas.length > 0) {
                // Stop observing
                observer.disconnect();

                // Do something with the first textarea that has 'enterkeyhint'
                annotateDOM(textareas[0]);
                return;
              }
            }
          });
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };

  // Options for the observer (which mutations to observe)
  var config = {
    attributes: false,
    childList: true,
    subtree: true
  };

  // Create an observer instance linked to the callback function
  var observer = new MutationObserver(callback);

  // Start observing the target node for configured mutations
  observer.observe(document.body, config);
  function setupEventBus() {
    // Setting the correct context
    var context = window;
    if (GM_info.scriptHandler !== "Userscripts") {
      context = unsafeWindow;
    }
    context.EventBus = _EventBus_js__WEBPACK_IMPORTED_MODULE_1__["default"]; // Make the EventBus available to the page script
  }

  function annotateDOM(prompt) {
    // Add id attributes to important elements
    prompt.id = "saypi-prompt";
    var foundFooter = addIdFooter();
    var foundAudioControls = addIdAudioControls();
    var promptControlsContainer = prompt.parentElement.parentElement;
    addIdSubmitButton(promptControlsContainer);
    addTalkButton(promptControlsContainer);
    _ButtonModule_js__WEBPACK_IMPORTED_MODULE_0__.buttonModule.createEnterButton();
    _ButtonModule_js__WEBPACK_IMPORTED_MODULE_0__.buttonModule.createExitButton();
  }
  function addIdSubmitButton(container) {
    var submitButton = container.querySelector("button[type=button]");
    if (submitButton) {
      submitButton.id = "saypi-submitButton";
    }
  }
  function addIdFooter() {
    // Find all audio elements on the page
    var audioElements = document.querySelectorAll("audio");
    var found = false; // default to not found

    audioElements.forEach(function (audio) {
      var precedingDiv = audio.previousElementSibling;

      // If we've already found a div, we can skip further iterations
      if (found) return;

      // Check if the preceding element is a div
      if (precedingDiv && precedingDiv.tagName.toLowerCase() === "div") {
        // Assign an ID to the div
        precedingDiv.lastElementChild.id = "saypi-footer";
        found = true; // set to found
      }
    });

    return found;
  }
  function addIdAudioControls() {
    // Find all audio elements on the page
    var audioElements = document.querySelectorAll("audio");
    var found = false; // default to not found

    audioElements.forEach(function (audio) {
      var nextDiv = audio.nextElementSibling;

      // If we've already found a div, we can skip further iterations
      if (found) return;

      // Check if the preceding element is a div
      if (nextDiv && nextDiv.tagName.toLowerCase() === "div") {
        // Assign an ID to the div
        nextDiv.id = "saypi-audio-controls";
        found = true; // set to found
      }
    });

    return found;
  }
  function injectScript(callback) {
    var scriptElement = document.createElement("script");
    scriptElement.type = "text/javascript";
    scriptElement.id = "saypi-script";
    scriptElement.textContent = pageScript;
    document.body.appendChild(scriptElement);

    // Call the callback function after the script is added
    if (callback) {
      callback();
    }
  }
  function addTalkButton(container) {
    // Create a containing div
    var panel = document.createElement("div");
    panel.id = "saypi-panel";

    // Check if the container has any child elements
    if (container.childNodes.length > 0) {
      // Insert the panel as the second-to-last child
      container.insertBefore(panel, container.lastChild);
    } else {
      // If the container has no children, just append the panel
      container.appendChild(panel);
    }

    // Create the talk button using ButtonModule
    var label = "Talk (Hold Control + Space to use hotkey. Double click to toggle auto-submit on/off)";
    var button = _ButtonModule_js__WEBPACK_IMPORTED_MODULE_0__.buttonModule.createButton("", function () {}); // The callback is empty for now, but you can add functionalities if needed.

    button.id = "saypi-talkButton";
    button.type = "button";

    // Set ARIA label and tooltip
    button.setAttribute("aria-label", label);
    button.setAttribute("title", label);
    var classNames = "relative flex mt-1 mb-1 rounded-full px-2 py-3 text-center bg-cream-550 hover:bg-cream-650 hover:text-brand-green-700 text-muted";
    button.classList.add(classNames.split(" "));

    // Enable autosubmit by default
    button.dataset.autosubmit = "true";
    button.classList.add("autoSubmit");
    panel.appendChild(button);
    _ButtonModule_js__WEBPACK_IMPORTED_MODULE_0__.buttonModule.addTalkIcon(button);

    // Call the function to inject the script after the button has been added
    injectScript(registerAudioButtonEvents);
  }
  function registerAudioButtonEvents() {
    var button = document.getElementById("saypi-talkButton");

    // Attach the event listeners
    button.addEventListener("mousedown", _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].handleTalkMouseDown.bind(_EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"]));
    button.addEventListener("mouseup", _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].handleTalkMouseUp.bind(_EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"]));
    button.addEventListener("dblclick", function () {
      return _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].handleTalkDoubleClick(button);
    });
    button.addEventListener("touchstart", function (e) {
      return _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].handleTalkTouchStart(button, e);
    });
    button.addEventListener("touchend", function () {
      return _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].handleTalkTouchEnd(button);
    });
    _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].registerOtherAudioButtonEvents(button);
    _EventModule_js__WEBPACK_IMPORTED_MODULE_2__["default"].registerHotkey();
  }

  // Start observing the entire document for changes to child nodes and subtree
  observer.observe(document, {
    childList: true,
    subtree: true
  });
})();
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,